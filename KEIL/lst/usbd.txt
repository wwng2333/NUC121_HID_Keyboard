; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usbd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\usbd.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC121\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\ARM\RV31\INC -IC:\Keil_v5\ARM\ARM\CMSIS\Include -IC:\Keil_v5\ARM\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=529 --omf_browse=.\obj\usbd.crf ..\..\..\..\Library\StdDriver\src\usbd.c]
                          THUMB

                          AREA ||i.USBD_CtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_CtrlIn PROC
;;;622      */
;;;623    void USBD_CtrlIn(void)
000000  b510              PUSH     {r4,lr}
;;;624    {
;;;625        DBG_PRINTF("Ctrl In Ack. residue %d\n", g_USBD_u32CtrlInSize);
;;;626    
;;;627        if (s_USBD_u32CtrlInSize)
000002  482d              LDR      r0,|L1.184|
000004  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlInSize
000006  2800              CMP      r0,#0
000008  d036              BEQ      |L1.120|
;;;628        {
;;;629            // Process remained data
;;;630            if (s_USBD_u32CtrlInSize > s_USBD_u32CtrlMaxPktSize)
00000a  482b              LDR      r0,|L1.184|
00000c  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlInSize
00000e  492b              LDR      r1,|L1.188|
000010  6809              LDR      r1,[r1,#0]  ; s_USBD_u32CtrlMaxPktSize
000012  4288              CMP      r0,r1
000014  d91c              BLS      |L1.80|
;;;631            {
;;;632                // Data size > MXPLD
;;;633                USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), (uint8_t *)s_USBD_pu8CtrlInPointer, s_USBD_u32CtrlMaxPktSize);
000016  492a              LDR      r1,|L1.192|
000018  6809              LDR      r1,[r1,#0]
00001a  4a2a              LDR      r2,|L1.196|
00001c  1888              ADDS     r0,r1,r2
00001e  4927              LDR      r1,|L1.188|
000020  680a              LDR      r2,[r1,#0]  ; s_USBD_u32CtrlMaxPktSize
000022  4929              LDR      r1,|L1.200|
000024  6809              LDR      r1,[r1,#0]  ; s_USBD_pu8CtrlInPointer
000026  f7fffffe          BL       USBD_MemCopy
;;;634                USBD_SET_PAYLOAD_LEN(EP0, s_USBD_u32CtrlMaxPktSize);
00002a  4824              LDR      r0,|L1.188|
00002c  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlMaxPktSize
00002e  4924              LDR      r1,|L1.192|
000030  6048              STR      r0,[r1,#4]
;;;635                s_USBD_pu8CtrlInPointer += s_USBD_u32CtrlMaxPktSize;
000032  4825              LDR      r0,|L1.200|
000034  6800              LDR      r0,[r0,#0]  ; s_USBD_pu8CtrlInPointer
000036  4921              LDR      r1,|L1.188|
000038  6809              LDR      r1,[r1,#0]  ; s_USBD_u32CtrlMaxPktSize
00003a  1840              ADDS     r0,r0,r1
00003c  4922              LDR      r1,|L1.200|
00003e  6008              STR      r0,[r1,#0]  ; s_USBD_pu8CtrlInPointer
;;;636                s_USBD_u32CtrlInSize -= s_USBD_u32CtrlMaxPktSize;
000040  481d              LDR      r0,|L1.184|
000042  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlInSize
000044  491d              LDR      r1,|L1.188|
000046  6809              LDR      r1,[r1,#0]  ; s_USBD_u32CtrlMaxPktSize
000048  1a40              SUBS     r0,r0,r1
00004a  491b              LDR      r1,|L1.184|
00004c  6008              STR      r0,[r1,#0]  ; s_USBD_u32CtrlInSize
00004e  e032              B        |L1.182|
                  |L1.80|
;;;637            }
;;;638            else
;;;639            {
;;;640                // Data size <= MXPLD
;;;641                USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), (uint8_t *)s_USBD_pu8CtrlInPointer, s_USBD_u32CtrlInSize);
000050  491b              LDR      r1,|L1.192|
000052  6809              LDR      r1,[r1,#0]
000054  4a1b              LDR      r2,|L1.196|
000056  1888              ADDS     r0,r1,r2
000058  4917              LDR      r1,|L1.184|
00005a  680a              LDR      r2,[r1,#0]  ; s_USBD_u32CtrlInSize
00005c  491a              LDR      r1,|L1.200|
00005e  6809              LDR      r1,[r1,#0]  ; s_USBD_pu8CtrlInPointer
000060  f7fffffe          BL       USBD_MemCopy
;;;642                USBD_SET_PAYLOAD_LEN(EP0, s_USBD_u32CtrlInSize);
000064  4814              LDR      r0,|L1.184|
000066  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlInSize
000068  4915              LDR      r1,|L1.192|
00006a  6048              STR      r0,[r1,#4]
;;;643    
;;;644                s_USBD_pu8CtrlInPointer = 0;
00006c  2000              MOVS     r0,#0
00006e  4916              LDR      r1,|L1.200|
000070  6008              STR      r0,[r1,#0]  ; s_USBD_pu8CtrlInPointer
;;;645                s_USBD_u32CtrlInSize    = 0;
000072  4911              LDR      r1,|L1.184|
000074  6008              STR      r0,[r1,#0]  ; s_USBD_u32CtrlInSize
000076  e01e              B        |L1.182|
                  |L1.120|
;;;646            }
;;;647        }
;;;648        else     // No more data for IN token
;;;649        {
;;;650            // In ACK for Set address
;;;651            if ((g_USBD_au8SetupPacket[0] == REQ_STANDARD) && (g_USBD_au8SetupPacket[1] == SET_ADDRESS))
000078  4814              LDR      r0,|L1.204|
00007a  7800              LDRB     r0,[r0,#0]  ; g_USBD_au8SetupPacket
00007c  2800              CMP      r0,#0
00007e  d111              BNE      |L1.164|
000080  4812              LDR      r0,|L1.204|
000082  7840              LDRB     r0,[r0,#1]  ; g_USBD_au8SetupPacket
000084  2805              CMP      r0,#5
000086  d10d              BNE      |L1.164|
;;;652            {
;;;653                if ((USBD_GET_ADDR() != s_USBD_u32UsbAddr) && (USBD_GET_ADDR() == 0))
000088  4811              LDR      r0,|L1.208|
00008a  6880              LDR      r0,[r0,#8]
00008c  4911              LDR      r1,|L1.212|
00008e  6809              LDR      r1,[r1,#0]  ; s_USBD_u32UsbAddr
000090  4288              CMP      r0,r1
000092  d007              BEQ      |L1.164|
000094  480e              LDR      r0,|L1.208|
000096  6880              LDR      r0,[r0,#8]
000098  2800              CMP      r0,#0
00009a  d103              BNE      |L1.164|
;;;654                {
;;;655                    USBD_SET_ADDR(s_USBD_u32UsbAddr);
00009c  480d              LDR      r0,|L1.212|
00009e  6800              LDR      r0,[r0,#0]  ; s_USBD_u32UsbAddr
0000a0  490b              LDR      r1,|L1.208|
0000a2  6088              STR      r0,[r1,#8]
                  |L1.164|
;;;656                }
;;;657            }
;;;658    
;;;659            /* For the case of data size is integral times maximum packet size */
;;;660            if (s_USBD_u8CtrlInZeroFlag)
0000a4  480c              LDR      r0,|L1.216|
0000a6  7800              LDRB     r0,[r0,#0]  ; s_USBD_u8CtrlInZeroFlag
0000a8  2800              CMP      r0,#0
0000aa  d004              BEQ      |L1.182|
;;;661            {
;;;662                USBD_SET_PAYLOAD_LEN(EP0, 0);
0000ac  2000              MOVS     r0,#0
0000ae  4904              LDR      r1,|L1.192|
0000b0  6048              STR      r0,[r1,#4]
;;;663                s_USBD_u8CtrlInZeroFlag = 0;
0000b2  4909              LDR      r1,|L1.216|
0000b4  7008              STRB     r0,[r1,#0]
                  |L1.182|
;;;664            }
;;;665    
;;;666            DBG_PRINTF("Ctrl In done.\n");
;;;667    
;;;668        }
;;;669    }
0000b6  bd10              POP      {r4,pc}
;;;670    
                          ENDP

                  |L1.184|
                          DCD      s_USBD_u32CtrlInSize
                  |L1.188|
                          DCD      s_USBD_u32CtrlMaxPktSize
                  |L1.192|
                          DCD      0x40060500
                  |L1.196|
                          DCD      0x40060100
                  |L1.200|
                          DCD      s_USBD_pu8CtrlInPointer
                  |L1.204|
                          DCD      g_USBD_au8SetupPacket
                  |L1.208|
                          DCD      0x40060000
                  |L1.212|
                          DCD      s_USBD_u32UsbAddr
                  |L1.216|
                          DCD      s_USBD_u8CtrlInZeroFlag

                          AREA ||i.USBD_CtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_CtrlOut PROC
;;;699      */
;;;700    void USBD_CtrlOut(void)
000000  b570              PUSH     {r4-r6,lr}
;;;701    {
;;;702        uint32_t u32Size;
;;;703        uint32_t addr;
;;;704    
;;;705        DBG_PRINTF("Ctrl Out Ack %d\n", g_USBD_u32_CtrlOutSize);
;;;706    
;;;707        if (s_USBD_u32CtrlOutToggle != (USBD->EPSTS & USBD_EPSTS_EPSTS1_Msk))
000002  481d              LDR      r0,|L2.120|
000004  68c0              LDR      r0,[r0,#0xc]
000006  2107              MOVS     r1,#7
000008  02c9              LSLS     r1,r1,#11
00000a  4008              ANDS     r0,r0,r1
00000c  491b              LDR      r1,|L2.124|
00000e  6809              LDR      r1,[r1,#0]  ; s_USBD_u32CtrlOutToggle
000010  4288              CMP      r0,r1
000012  d02c              BEQ      |L2.110|
;;;708        {
;;;709            s_USBD_u32CtrlOutToggle = USBD->EPSTS & USBD_EPSTS_EPSTS1_Msk; //keep H/W EP1 toggle status
000014  4818              LDR      r0,|L2.120|
000016  68c0              LDR      r0,[r0,#0xc]
000018  2107              MOVS     r1,#7
00001a  02c9              LSLS     r1,r1,#11
00001c  4008              ANDS     r0,r0,r1
00001e  4917              LDR      r1,|L2.124|
000020  6008              STR      r0,[r1,#0]  ; s_USBD_u32CtrlOutToggle
;;;710    
;;;711    
;;;712    
;;;713    
;;;714            if (s_USBD_u32CtrlOutSize < s_USBD_u32CtrlOutSizeLimit)
000022  4817              LDR      r0,|L2.128|
000024  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlOutSize
000026  4917              LDR      r1,|L2.132|
000028  6809              LDR      r1,[r1,#0]  ; s_USBD_u32CtrlOutSizeLimit
00002a  4288              CMP      r0,r1
00002c  d223              BCS      |L2.118|
;;;715            {
;;;716                u32Size = USBD_GET_PAYLOAD_LEN(EP1);
00002e  4816              LDR      r0,|L2.136|
000030  6944              LDR      r4,[r0,#0x14]
;;;717                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP1);
000032  6900              LDR      r0,[r0,#0x10]
000034  4915              LDR      r1,|L2.140|
000036  1845              ADDS     r5,r0,r1
;;;718                USBD_MemCopy((uint8_t *)s_USBD_pu8CtrlOutPointer, (uint8_t *)addr, u32Size);
000038  4622              MOV      r2,r4
00003a  4629              MOV      r1,r5
00003c  4814              LDR      r0,|L2.144|
00003e  6800              LDR      r0,[r0,#0]  ; s_USBD_pu8CtrlOutPointer
000040  f7fffffe          BL       USBD_MemCopy
;;;719                s_USBD_pu8CtrlOutPointer += u32Size;
000044  4812              LDR      r0,|L2.144|
000046  6800              LDR      r0,[r0,#0]  ; s_USBD_pu8CtrlOutPointer
000048  1900              ADDS     r0,r0,r4
00004a  4911              LDR      r1,|L2.144|
00004c  6008              STR      r0,[r1,#0]  ; s_USBD_pu8CtrlOutPointer
;;;720                s_USBD_u32CtrlOutSize += u32Size;
00004e  480c              LDR      r0,|L2.128|
000050  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlOutSize
000052  1900              ADDS     r0,r0,r4
000054  490a              LDR      r1,|L2.128|
000056  6008              STR      r0,[r1,#0]  ; s_USBD_u32CtrlOutSize
;;;721    
;;;722                if (s_USBD_u32CtrlOutSize < s_USBD_u32CtrlOutSizeLimit)
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlOutSize
00005c  4909              LDR      r1,|L2.132|
00005e  6809              LDR      r1,[r1,#0]  ; s_USBD_u32CtrlOutSizeLimit
000060  4288              CMP      r0,r1
000062  d208              BCS      |L2.118|
;;;723                {
;;;724                    USBD_SET_PAYLOAD_LEN(EP1, s_USBD_u32CtrlMaxPktSize);
000064  480b              LDR      r0,|L2.148|
000066  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlMaxPktSize
000068  4907              LDR      r1,|L2.136|
00006a  6148              STR      r0,[r1,#0x14]
00006c  e003              B        |L2.118|
                  |L2.110|
;;;725                }
;;;726            }
;;;727        }
;;;728        else
;;;729        {
;;;730            USBD_SET_PAYLOAD_LEN(EP1, s_USBD_u32CtrlMaxPktSize);
00006e  4809              LDR      r0,|L2.148|
000070  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlMaxPktSize
000072  4905              LDR      r1,|L2.136|
000074  6148              STR      r0,[r1,#0x14]
                  |L2.118|
;;;731        }
;;;732    }
000076  bd70              POP      {r4-r6,pc}
;;;733    
                          ENDP

                  |L2.120|
                          DCD      0x40060000
                  |L2.124|
                          DCD      s_USBD_u32CtrlOutToggle
                  |L2.128|
                          DCD      s_USBD_u32CtrlOutSize
                  |L2.132|
                          DCD      s_USBD_u32CtrlOutSizeLimit
                  |L2.136|
                          DCD      0x40060500
                  |L2.140|
                          DCD      0x40060100
                  |L2.144|
                          DCD      s_USBD_pu8CtrlOutPointer
                  |L2.148|
                          DCD      s_USBD_u32CtrlMaxPktSize

                          AREA ||i.USBD_GetDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_GetDescriptor PROC
;;;198      */
;;;199    void USBD_GetDescriptor(void)
000000  b570              PUSH     {r4-r6,lr}
;;;200    {
;;;201        uint32_t u32Len;
;;;202    
;;;203        s_USBD_u8CtrlInZeroFlag = (uint8_t)0ul;
000002  2000              MOVS     r0,#0
000004  4972              LDR      r1,|L3.464|
000006  7008              STRB     r0,[r1,#0]
;;;204        u32Len = 0;
000008  2400              MOVS     r4,#0
;;;205        u32Len = g_USBD_au8SetupPacket[7];
00000a  4872              LDR      r0,|L3.468|
00000c  79c4              LDRB     r4,[r0,#7]  ; g_USBD_au8SetupPacket
;;;206        u32Len <<= 8;
00000e  0224              LSLS     r4,r4,#8
;;;207        u32Len += g_USBD_au8SetupPacket[6];
000010  7980              LDRB     r0,[r0,#6]  ; g_USBD_au8SetupPacket
000012  1904              ADDS     r4,r0,r4
;;;208    
;;;209        switch (g_USBD_au8SetupPacket[3])
000014  486f              LDR      r0,|L3.468|
000016  78c0              LDRB     r0,[r0,#3]  ; g_USBD_au8SetupPacket
000018  280f              CMP      r0,#0xf
00001a  d071              BEQ      |L3.256|
00001c  dc06              BGT      |L3.44|
00001e  2801              CMP      r0,#1
000020  d009              BEQ      |L3.54|
000022  2802              CMP      r0,#2
000024  d014              BEQ      |L3.80|
000026  2803              CMP      r0,#3
                  |L3.40|
000028  d16b              BNE      |L3.258|
00002a  e06b              B        |L3.260|
                  |L3.44|
00002c  2821              CMP      r0,#0x21
00002e  d02d              BEQ      |L3.140|
000030  2822              CMP      r0,#0x22
000032  d1f9              BNE      |L3.40|
000034  e03f              B        |L3.182|
                  |L3.54|
;;;210        {
;;;211        // Get Device Descriptor
;;;212        case DESC_DEVICE:
;;;213        {
;;;214            u32Len = Minimum(u32Len, LEN_DEVICE);
000036  2c12              CMP      r4,#0x12
000038  d201              BCS      |L3.62|
00003a  4620              MOV      r0,r4
00003c  e000              B        |L3.64|
                  |L3.62|
00003e  2012              MOVS     r0,#0x12
                  |L3.64|
000040  4604              MOV      r4,r0
;;;215            DBG_PRINTF("Get device desc, %d\n", u32Len);
;;;216    
;;;217            USBD_PrepareCtrlIn((uint8_t *)g_USBD_sINFO->gu8DevDesc, u32Len);
000042  4965              LDR      r1,|L3.472|
000044  6809              LDR      r1,[r1,#0]  ; g_USBD_sINFO
000046  6808              LDR      r0,[r1,#0]
000048  4621              MOV      r1,r4
00004a  f7fffffe          BL       USBD_PrepareCtrlIn
;;;218    
;;;219            break;
00004e  e0bd              B        |L3.460|
                  |L3.80|
;;;220        }
;;;221    
;;;222        // Get Configuration Descriptor
;;;223        case DESC_CONFIG:
;;;224        {
;;;225            uint32_t u32TotalLen;
;;;226    
;;;227            u32TotalLen = g_USBD_sINFO->gu8ConfigDesc[3];
000050  4861              LDR      r0,|L3.472|
000052  6800              LDR      r0,[r0,#0]  ; g_USBD_sINFO
000054  6840              LDR      r0,[r0,#4]
000056  78c5              LDRB     r5,[r0,#3]
;;;228            u32TotalLen = g_USBD_sINFO->gu8ConfigDesc[2] + (u32TotalLen << 8);
000058  485f              LDR      r0,|L3.472|
00005a  6800              LDR      r0,[r0,#0]  ; g_USBD_sINFO
00005c  6840              LDR      r0,[r0,#4]
00005e  7880              LDRB     r0,[r0,#2]
000060  0229              LSLS     r1,r5,#8
000062  1845              ADDS     r5,r0,r1
;;;229    
;;;230            DBG_PRINTF("Get config desc len %d, acture len %d\n", u32Len, u32TotalLen);
;;;231    
;;;232            if (u32Len > u32TotalLen)
000064  42ac              CMP      r4,r5
000066  d90a              BLS      |L3.126|
;;;233            {
;;;234                u32Len = u32TotalLen;
000068  462c              MOV      r4,r5
;;;235    
;;;236                if ((u32Len % s_USBD_u32CtrlMaxPktSize) == 0ul)
00006a  485c              LDR      r0,|L3.476|
00006c  6801              LDR      r1,[r0,#0]  ; s_USBD_u32CtrlMaxPktSize
00006e  4620              MOV      r0,r4
000070  f7fffffe          BL       __aeabi_uidivmod
000074  2900              CMP      r1,#0
000076  d102              BNE      |L3.126|
;;;237                {
;;;238                    s_USBD_u8CtrlInZeroFlag = (uint8_t)1ul;
000078  2001              MOVS     r0,#1
00007a  4955              LDR      r1,|L3.464|
00007c  7008              STRB     r0,[r1,#0]
                  |L3.126|
;;;239                }
;;;240            }
;;;241    
;;;242            DBG_PRINTF("Minimum len %d\n", u32Len);
;;;243    
;;;244            USBD_PrepareCtrlIn((uint8_t *)g_USBD_sINFO->gu8ConfigDesc, u32Len);
00007e  4956              LDR      r1,|L3.472|
000080  6809              LDR      r1,[r1,#0]  ; g_USBD_sINFO
000082  6848              LDR      r0,[r1,#4]
000084  4621              MOV      r1,r4
000086  f7fffffe          BL       USBD_PrepareCtrlIn
;;;245    
;;;246            break;
00008a  e09f              B        |L3.460|
                  |L3.140|
;;;247        }
;;;248    
;;;249        // Get HID Descriptor
;;;250        case DESC_HID:
;;;251        {
;;;252            /* CV3.0 HID Class Descriptor Test,
;;;253               Need to indicate index of the HID Descriptor within gu8ConfigDescriptor, specifically HID Composite device. */
;;;254            uint32_t u32ConfigDescOffset;   // u32ConfigDescOffset is configuration descriptor offset (HID descriptor start index)
;;;255            u32Len = Minimum(u32Len, LEN_HID);
00008c  2c09              CMP      r4,#9
00008e  d201              BCS      |L3.148|
000090  4620              MOV      r0,r4
000092  e000              B        |L3.150|
                  |L3.148|
000094  2009              MOVS     r0,#9
                  |L3.150|
000096  4604              MOV      r4,r0
;;;256            DBG_PRINTF("Get HID desc, %d\n", u32Len);
;;;257    
;;;258            u32ConfigDescOffset = g_USBD_sINFO->gu32ConfigHidDescIdx[g_USBD_au8SetupPacket[4]];
000098  484f              LDR      r0,|L3.472|
00009a  6800              LDR      r0,[r0,#0]  ; g_USBD_sINFO
00009c  6940              LDR      r0,[r0,#0x14]
00009e  494d              LDR      r1,|L3.468|
0000a0  7909              LDRB     r1,[r1,#4]  ; g_USBD_au8SetupPacket
0000a2  0089              LSLS     r1,r1,#2
0000a4  5845              LDR      r5,[r0,r1]
;;;259            USBD_PrepareCtrlIn((uint8_t *)&g_USBD_sINFO->gu8ConfigDesc[u32ConfigDescOffset], u32Len);
0000a6  494c              LDR      r1,|L3.472|
0000a8  6809              LDR      r1,[r1,#0]  ; g_USBD_sINFO
0000aa  6849              LDR      r1,[r1,#4]
0000ac  1948              ADDS     r0,r1,r5
0000ae  4621              MOV      r1,r4
0000b0  f7fffffe          BL       USBD_PrepareCtrlIn
;;;260    
;;;261            break;
0000b4  e08a              B        |L3.460|
                  |L3.182|
;;;262        }
;;;263    
;;;264        // Get Report Descriptor
;;;265        case DESC_HID_RPT:
;;;266        {
;;;267            DBG_PRINTF("Get HID report, %d\n", u32Len);
;;;268    
;;;269            if (u32Len > g_USBD_sINFO->gu32HidReportSize[g_USBD_au8SetupPacket[4]])
0000b6  4848              LDR      r0,|L3.472|
0000b8  6800              LDR      r0,[r0,#0]  ; g_USBD_sINFO
0000ba  6900              LDR      r0,[r0,#0x10]
0000bc  4945              LDR      r1,|L3.468|
0000be  7909              LDRB     r1,[r1,#4]  ; g_USBD_au8SetupPacket
0000c0  0089              LSLS     r1,r1,#2
0000c2  5840              LDR      r0,[r0,r1]
0000c4  42a0              CMP      r0,r4
0000c6  d210              BCS      |L3.234|
;;;270            {
;;;271                u32Len = g_USBD_sINFO->gu32HidReportSize[g_USBD_au8SetupPacket[4]];
0000c8  4843              LDR      r0,|L3.472|
0000ca  6800              LDR      r0,[r0,#0]  ; g_USBD_sINFO
0000cc  6900              LDR      r0,[r0,#0x10]
0000ce  4941              LDR      r1,|L3.468|
0000d0  7909              LDRB     r1,[r1,#4]  ; g_USBD_au8SetupPacket
0000d2  0089              LSLS     r1,r1,#2
0000d4  5844              LDR      r4,[r0,r1]
;;;272    
;;;273                if ((u32Len % s_USBD_u32CtrlMaxPktSize) == 0ul)
0000d6  4841              LDR      r0,|L3.476|
0000d8  6801              LDR      r1,[r0,#0]  ; s_USBD_u32CtrlMaxPktSize
0000da  4620              MOV      r0,r4
0000dc  f7fffffe          BL       __aeabi_uidivmod
0000e0  2900              CMP      r1,#0
0000e2  d102              BNE      |L3.234|
;;;274                {
;;;275                    s_USBD_u8CtrlInZeroFlag = (uint8_t)1ul;
0000e4  2001              MOVS     r0,#1
0000e6  493a              LDR      r1,|L3.464|
0000e8  7008              STRB     r0,[r1,#0]
                  |L3.234|
;;;276                }
;;;277            }
;;;278    
;;;279            USBD_PrepareCtrlIn((uint8_t *)g_USBD_sINFO->gu8HidReportDesc[g_USBD_au8SetupPacket[4]], u32Len);
0000ea  493b              LDR      r1,|L3.472|
0000ec  6809              LDR      r1,[r1,#0]  ; g_USBD_sINFO
0000ee  68c9              LDR      r1,[r1,#0xc]
0000f0  4a38              LDR      r2,|L3.468|
0000f2  7912              LDRB     r2,[r2,#4]  ; g_USBD_au8SetupPacket
0000f4  0092              LSLS     r2,r2,#2
0000f6  5888              LDR      r0,[r1,r2]
0000f8  4621              MOV      r1,r4
0000fa  f7fffffe          BL       USBD_PrepareCtrlIn
;;;280            break;
0000fe  e065              B        |L3.460|
                  |L3.256|
000100  e038              B        |L3.372|
                  |L3.258|
000102  e056              B        |L3.434|
                  |L3.260|
;;;281        }
;;;282    
;;;283        // Get String Descriptor
;;;284        case DESC_STRING:
;;;285        {
;;;286            // Get String Descriptor
;;;287            if (g_USBD_au8SetupPacket[2] < 4)
000104  4833              LDR      r0,|L3.468|
000106  7880              LDRB     r0,[r0,#2]  ; g_USBD_au8SetupPacket
000108  2804              CMP      r0,#4
00010a  da26              BGE      |L3.346|
;;;288            {
;;;289                if (u32Len > g_USBD_sINFO->gu8StringDesc[g_USBD_au8SetupPacket[2]][0])
00010c  4832              LDR      r0,|L3.472|
00010e  6800              LDR      r0,[r0,#0]  ; g_USBD_sINFO
000110  6880              LDR      r0,[r0,#8]
000112  4930              LDR      r1,|L3.468|
000114  7889              LDRB     r1,[r1,#2]  ; g_USBD_au8SetupPacket
000116  0089              LSLS     r1,r1,#2
000118  5840              LDR      r0,[r0,r1]
00011a  7800              LDRB     r0,[r0,#0]
00011c  42a0              CMP      r0,r4
00011e  d211              BCS      |L3.324|
;;;290                {
;;;291                    u32Len = g_USBD_sINFO->gu8StringDesc[g_USBD_au8SetupPacket[2]][0];
000120  482d              LDR      r0,|L3.472|
000122  6800              LDR      r0,[r0,#0]  ; g_USBD_sINFO
000124  6880              LDR      r0,[r0,#8]
000126  492b              LDR      r1,|L3.468|
000128  7889              LDRB     r1,[r1,#2]  ; g_USBD_au8SetupPacket
00012a  0089              LSLS     r1,r1,#2
00012c  5840              LDR      r0,[r0,r1]
00012e  7804              LDRB     r4,[r0,#0]
;;;292    
;;;293                    if ((u32Len % s_USBD_u32CtrlMaxPktSize) == 0ul)
000130  482a              LDR      r0,|L3.476|
000132  6801              LDR      r1,[r0,#0]  ; s_USBD_u32CtrlMaxPktSize
000134  4620              MOV      r0,r4
000136  f7fffffe          BL       __aeabi_uidivmod
00013a  2900              CMP      r1,#0
00013c  d102              BNE      |L3.324|
;;;294                    {
;;;295                        s_USBD_u8CtrlInZeroFlag = (uint8_t)1ul;
00013e  2001              MOVS     r0,#1
000140  4923              LDR      r1,|L3.464|
000142  7008              STRB     r0,[r1,#0]
                  |L3.324|
;;;296                    }
;;;297                }
;;;298    
;;;299                DBG_PRINTF("Get string desc %d\n", u32Len);
;;;300    
;;;301                USBD_PrepareCtrlIn((uint8_t *)g_USBD_sINFO->gu8StringDesc[g_USBD_au8SetupPacket[2]], u32Len);
000144  4924              LDR      r1,|L3.472|
000146  6809              LDR      r1,[r1,#0]  ; g_USBD_sINFO
000148  6889              LDR      r1,[r1,#8]
00014a  4a22              LDR      r2,|L3.468|
00014c  7892              LDRB     r2,[r2,#2]  ; g_USBD_au8SetupPacket
00014e  0092              LSLS     r2,r2,#2
000150  5888              LDR      r0,[r1,r2]
000152  4621              MOV      r1,r4
000154  f7fffffe          BL       USBD_PrepareCtrlIn
;;;302    
;;;303    
;;;304                break;
000158  e038              B        |L3.460|
                  |L3.346|
;;;305            }
;;;306            else
;;;307            {
;;;308                // Not support. Reply STALL.
;;;309                USBD_SET_EP_STALL(EP0);
00015a  4821              LDR      r0,|L3.480|
00015c  68c0              LDR      r0,[r0,#0xc]
00015e  2102              MOVS     r1,#2
000160  4308              ORRS     r0,r0,r1
000162  491f              LDR      r1,|L3.480|
000164  60c8              STR      r0,[r1,#0xc]
;;;310                USBD_SET_EP_STALL(EP1);
000166  4608              MOV      r0,r1
000168  69c0              LDR      r0,[r0,#0x1c]
00016a  2102              MOVS     r1,#2
00016c  4308              ORRS     r0,r0,r1
00016e  491c              LDR      r1,|L3.480|
000170  61c8              STR      r0,[r1,#0x1c]
;;;311    
;;;312                DBG_PRINTF("Unsupported string desc (%d). Stall ctrl pipe.\n", g_USBD_au8SetupPacket[2]);
;;;313    
;;;314                break;
000172  e02b              B        |L3.460|
                  |L3.372|
;;;315            }
;;;316        }
;;;317    
;;;318    
;;;319    
;;;320        case DESC_BOS:
;;;321        {
;;;322            if (g_USBD_sINFO->gu8BosDesc == 0)
000174  4818              LDR      r0,|L3.472|
000176  6800              LDR      r0,[r0,#0]  ; g_USBD_sINFO
000178  6980              LDR      r0,[r0,#0x18]
00017a  2800              CMP      r0,#0
00017c  d10c              BNE      |L3.408|
;;;323            {
;;;324                USBD_SET_EP_STALL(EP0);
00017e  4818              LDR      r0,|L3.480|
000180  68c0              LDR      r0,[r0,#0xc]
000182  2102              MOVS     r1,#2
000184  4308              ORRS     r0,r0,r1
000186  4916              LDR      r1,|L3.480|
000188  60c8              STR      r0,[r1,#0xc]
;;;325                USBD_SET_EP_STALL(EP1);
00018a  4608              MOV      r0,r1
00018c  69c0              LDR      r0,[r0,#0x1c]
00018e  2102              MOVS     r1,#2
000190  4308              ORRS     r0,r0,r1
000192  4913              LDR      r1,|L3.480|
000194  61c8              STR      r0,[r1,#0x1c]
000196  e00b              B        |L3.432|
                  |L3.408|
;;;326            }
;;;327            else
;;;328            {
;;;329                u32Len = Minimum(u32Len, LEN_BOS + LEN_DEVCAP);
000198  2c0c              CMP      r4,#0xc
00019a  d201              BCS      |L3.416|
00019c  4620              MOV      r0,r4
00019e  e000              B        |L3.418|
                  |L3.416|
0001a0  200c              MOVS     r0,#0xc
                  |L3.418|
0001a2  4604              MOV      r4,r0
;;;330                USBD_PrepareCtrlIn((uint8_t *)g_USBD_sINFO->gu8BosDesc, u32Len);
0001a4  490c              LDR      r1,|L3.472|
0001a6  6809              LDR      r1,[r1,#0]  ; g_USBD_sINFO
0001a8  6988              LDR      r0,[r1,#0x18]
0001aa  4621              MOV      r1,r4
0001ac  f7fffffe          BL       USBD_PrepareCtrlIn
                  |L3.432|
;;;331            }
;;;332    
;;;333            break;
0001b0  e00c              B        |L3.460|
                  |L3.434|
;;;334        }
;;;335    
;;;336    
;;;337    
;;;338        default:
;;;339            // Not support. Reply STALL.
;;;340            USBD_SET_EP_STALL(EP0);
0001b2  480b              LDR      r0,|L3.480|
0001b4  68c0              LDR      r0,[r0,#0xc]
0001b6  2102              MOVS     r1,#2
0001b8  4308              ORRS     r0,r0,r1
0001ba  4909              LDR      r1,|L3.480|
0001bc  60c8              STR      r0,[r1,#0xc]
;;;341            USBD_SET_EP_STALL(EP1);
0001be  4608              MOV      r0,r1
0001c0  69c0              LDR      r0,[r0,#0x1c]
0001c2  2102              MOVS     r1,#2
0001c4  4308              ORRS     r0,r0,r1
0001c6  4906              LDR      r1,|L3.480|
0001c8  61c8              STR      r0,[r1,#0x1c]
;;;342    
;;;343            DBG_PRINTF("Unsupported get desc type. stall ctrl pipe\n");
;;;344    
;;;345            break;
0001ca  bf00              NOP      
                  |L3.460|
0001cc  bf00              NOP                            ;219
;;;346        }
;;;347    }
0001ce  bd70              POP      {r4-r6,pc}
;;;348    
                          ENDP

                  |L3.464|
                          DCD      s_USBD_u8CtrlInZeroFlag
                  |L3.468|
                          DCD      g_USBD_au8SetupPacket
                  |L3.472|
                          DCD      g_USBD_sINFO
                  |L3.476|
                          DCD      s_USBD_u32CtrlMaxPktSize
                  |L3.480|
                          DCD      0x40060500

                          AREA ||i.USBD_GetSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_GetSetupPacket PROC
;;;128      */
;;;129    void USBD_GetSetupPacket(uint8_t *buf)
000000  b510              PUSH     {r4,lr}
;;;130    {
000002  4604              MOV      r4,r0
;;;131        USBD_MemCopy(buf, g_USBD_au8SetupPacket, 8);
000004  2208              MOVS     r2,#8
000006  4902              LDR      r1,|L4.16|
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USBD_MemCopy
;;;132    }
00000e  bd10              POP      {r4,pc}
;;;133    
                          ENDP

                  |L4.16|
                          DCD      g_USBD_au8SetupPacket

                          AREA ||i.USBD_LockEpStall||, CODE, READONLY, ALIGN=2

                  USBD_LockEpStall PROC
;;;803     */
;;;804    void USBD_LockEpStall(uint32_t u32EpBitmap)
000000  4901              LDR      r1,|L5.8|
;;;805    {
;;;806        g_u32EpStallLock = u32EpBitmap;
000002  6008              STR      r0,[r1,#0]  ; g_u32EpStallLock
;;;807    }
000004  4770              BX       lr
;;;808    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      g_u32EpStallLock

                          AREA ||i.USBD_MemCopy||, CODE, READONLY, ALIGN=1

                  USBD_MemCopy PROC
;;;589      */
;;;590    static __INLINE void USBD_MemCopy(uint8_t *dest, uint8_t *src, int32_t size)
000000  b510              PUSH     {r4,lr}
;;;591    {
;;;592        while (size--) *dest++ = *src++;
000002  e003              B        |L6.12|
                  |L6.4|
000004  780b              LDRB     r3,[r1,#0]
000006  7003              STRB     r3,[r0,#0]
000008  1c49              ADDS     r1,r1,#1
00000a  1c40              ADDS     r0,r0,#1
                  |L6.12|
00000c  4613              MOV      r3,r2
00000e  1e52              SUBS     r2,r2,#1
000010  2b00              CMP      r3,#0
000012  d1f7              BNE      |L6.4|
;;;593    }
000014  bd10              POP      {r4,pc}
;;;594    
                          ENDP


                          AREA ||i.USBD_Open||, CODE, READONLY, ALIGN=2

                  USBD_Open PROC
;;;76       */
;;;77     void USBD_Open(const S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79         g_USBD_sINFO = param;
000002  4b0c              LDR      r3,|L7.52|
000004  6018              STR      r0,[r3,#0]  ; g_USBD_sINFO
;;;80         g_usbd_pfnClassRequest = pfnClassReq;
000006  4b0c              LDR      r3,|L7.56|
000008  6019              STR      r1,[r3,#0]  ; g_usbd_pfnClassRequest
;;;81         g_usbd_pfnSetInterface = pfnSetInterface;
00000a  4b0c              LDR      r3,|L7.60|
00000c  601a              STR      r2,[r3,#0]  ; g_usbd_pfnSetInterface
;;;82     
;;;83         /* get EP0 maximum packet size */
;;;84         s_USBD_u32CtrlMaxPktSize = g_USBD_sINFO->gu8DevDesc[7];
00000e  4b09              LDR      r3,|L7.52|
000010  681b              LDR      r3,[r3,#0]  ; g_USBD_sINFO
000012  681b              LDR      r3,[r3,#0]
000014  79db              LDRB     r3,[r3,#7]
000016  4c0a              LDR      r4,|L7.64|
000018  6023              STR      r3,[r4,#0]  ; s_USBD_u32CtrlMaxPktSize
;;;85     
;;;86         /* Initial USB engine */
;;;87     #ifdef SUPPORT_LPM
;;;88         USBD->ATTR = 0x7D0 | USBD_LPMACK;
;;;89     #else
;;;90         USBD->ATTR = 0x7D0;
00001a  237d              MOVS     r3,#0x7d
00001c  011b              LSLS     r3,r3,#4
00001e  4c09              LDR      r4,|L7.68|
000020  6123              STR      r3,[r4,#0x10]
;;;91     #endif
;;;92     
;;;93         /* Force SE0 */
;;;94         USBD_SET_SE0();
000022  4b08              LDR      r3,|L7.68|
000024  3380              ADDS     r3,r3,#0x80
000026  691b              LDR      r3,[r3,#0x10]
000028  2401              MOVS     r4,#1
00002a  4323              ORRS     r3,r3,r4
00002c  4c05              LDR      r4,|L7.68|
00002e  3480              ADDS     r4,r4,#0x80
000030  6123              STR      r3,[r4,#0x10]
;;;95     }
000032  bd10              POP      {r4,pc}
;;;96     
                          ENDP

                  |L7.52|
                          DCD      g_USBD_sINFO
                  |L7.56|
                          DCD      g_usbd_pfnClassRequest
                  |L7.60|
                          DCD      g_usbd_pfnSetInterface
                  |L7.64|
                          DCD      s_USBD_u32CtrlMaxPktSize
                  |L7.68|
                          DCD      0x40060000

                          AREA ||i.USBD_PrepareCtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlIn PROC
;;;587      */
;;;588    void USBD_PrepareCtrlIn(uint8_t *pu8Buf, uint32_t u32Size)
000000  b570              PUSH     {r4-r6,lr}
;;;589    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;590        DBG_PRINTF("Prepare Ctrl In %d\n", u32Size);
;;;591    
;;;592        if (u32Size > s_USBD_u32CtrlMaxPktSize)
000006  481b              LDR      r0,|L8.116|
000008  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlMaxPktSize
00000a  4284              CMP      r4,r0
00000c  d91c              BLS      |L8.72|
;;;593        {
;;;594            // Data size > MXPLD
;;;595            s_USBD_pu8CtrlInPointer = pu8Buf + s_USBD_u32CtrlMaxPktSize;
00000e  4819              LDR      r0,|L8.116|
000010  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlMaxPktSize
000012  1828              ADDS     r0,r5,r0
000014  4918              LDR      r1,|L8.120|
000016  6008              STR      r0,[r1,#0]  ; s_USBD_pu8CtrlInPointer
;;;596            s_USBD_u32CtrlInSize = u32Size - s_USBD_u32CtrlMaxPktSize;
000018  4816              LDR      r0,|L8.116|
00001a  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlMaxPktSize
00001c  1a20              SUBS     r0,r4,r0
00001e  4917              LDR      r1,|L8.124|
000020  6008              STR      r0,[r1,#0]  ; s_USBD_u32CtrlInSize
;;;597            USBD_SET_DATA1(EP0);
000022  4817              LDR      r0,|L8.128|
000024  6880              LDR      r0,[r0,#8]
000026  2180              MOVS     r1,#0x80
000028  4308              ORRS     r0,r0,r1
00002a  4915              LDR      r1,|L8.128|
00002c  6088              STR      r0,[r1,#8]
;;;598            USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), pu8Buf, s_USBD_u32CtrlMaxPktSize);
00002e  6809              LDR      r1,[r1,#0]
000030  4a14              LDR      r2,|L8.132|
000032  1888              ADDS     r0,r1,r2
000034  490f              LDR      r1,|L8.116|
000036  680a              LDR      r2,[r1,#0]  ; s_USBD_u32CtrlMaxPktSize
000038  4629              MOV      r1,r5
00003a  f7fffffe          BL       USBD_MemCopy
;;;599            USBD_SET_PAYLOAD_LEN(EP0, s_USBD_u32CtrlMaxPktSize);
00003e  480d              LDR      r0,|L8.116|
000040  6800              LDR      r0,[r0,#0]  ; s_USBD_u32CtrlMaxPktSize
000042  490f              LDR      r1,|L8.128|
000044  6048              STR      r0,[r1,#4]
000046  e013              B        |L8.112|
                  |L8.72|
;;;600        }
;;;601        else
;;;602        {
;;;603            // Data size <= MXPLD
;;;604            s_USBD_pu8CtrlInPointer = 0;
000048  2000              MOVS     r0,#0
00004a  490b              LDR      r1,|L8.120|
00004c  6008              STR      r0,[r1,#0]  ; s_USBD_pu8CtrlInPointer
;;;605            s_USBD_u32CtrlInSize = 0;
00004e  490b              LDR      r1,|L8.124|
000050  6008              STR      r0,[r1,#0]  ; s_USBD_u32CtrlInSize
;;;606    
;;;607            USBD_SET_DATA1(EP0);
000052  480b              LDR      r0,|L8.128|
000054  6880              LDR      r0,[r0,#8]
000056  2180              MOVS     r1,#0x80
000058  4308              ORRS     r0,r0,r1
00005a  4909              LDR      r1,|L8.128|
00005c  6088              STR      r0,[r1,#8]
;;;608            USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), pu8Buf, u32Size);
00005e  6809              LDR      r1,[r1,#0]
000060  4a08              LDR      r2,|L8.132|
000062  1888              ADDS     r0,r1,r2
000064  4622              MOV      r2,r4
000066  4629              MOV      r1,r5
000068  f7fffffe          BL       USBD_MemCopy
;;;609            USBD_SET_PAYLOAD_LEN(EP0, u32Size);
00006c  4804              LDR      r0,|L8.128|
00006e  6044              STR      r4,[r0,#4]
                  |L8.112|
;;;610        }
;;;611    }
000070  bd70              POP      {r4-r6,pc}
;;;612    
                          ENDP

000072  0000              DCW      0x0000
                  |L8.116|
                          DCD      s_USBD_u32CtrlMaxPktSize
                  |L8.120|
                          DCD      s_USBD_pu8CtrlInPointer
                  |L8.124|
                          DCD      s_USBD_u32CtrlInSize
                  |L8.128|
                          DCD      0x40060500
                  |L8.132|
                          DCD      0x40060100

                          AREA ||i.USBD_PrepareCtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlOut PROC
;;;681      */
;;;682    void USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size)
000000  4a05              LDR      r2,|L9.24|
;;;683    {
;;;684        s_USBD_pu8CtrlOutPointer  = pu8Buf;
000002  6010              STR      r0,[r2,#0]  ; s_USBD_pu8CtrlOutPointer
;;;685        s_USBD_u32CtrlOutSize = 0;
000004  2200              MOVS     r2,#0
000006  4b05              LDR      r3,|L9.28|
000008  601a              STR      r2,[r3,#0]  ; s_USBD_u32CtrlOutSize
;;;686        s_USBD_u32CtrlOutSizeLimit = u32Size;
00000a  4a05              LDR      r2,|L9.32|
00000c  6011              STR      r1,[r2,#0]  ; s_USBD_u32CtrlOutSizeLimit
;;;687        USBD_SET_PAYLOAD_LEN(EP1, s_USBD_u32CtrlMaxPktSize);
00000e  4a05              LDR      r2,|L9.36|
000010  6812              LDR      r2,[r2,#0]  ; s_USBD_u32CtrlMaxPktSize
000012  4b05              LDR      r3,|L9.40|
000014  615a              STR      r2,[r3,#0x14]
;;;688    }
000016  4770              BX       lr
;;;689    
                          ENDP

                  |L9.24|
                          DCD      s_USBD_pu8CtrlOutPointer
                  |L9.28|
                          DCD      s_USBD_u32CtrlOutSize
                  |L9.32|
                          DCD      s_USBD_u32CtrlOutSizeLimit
                  |L9.36|
                          DCD      s_USBD_u32CtrlMaxPktSize
                  |L9.40|
                          DCD      0x40060500

                          AREA ||i.USBD_ProcessSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_ProcessSetupPacket PROC
;;;143      */
;;;144    void USBD_ProcessSetupPacket(void)
000000  b510              PUSH     {r4,lr}
;;;145    {
;;;146        s_USBD_u32CtrlOutToggle = 0;
000002  2000              MOVS     r0,#0
000004  491b              LDR      r1,|L10.116|
000006  6008              STR      r0,[r1,#0]  ; s_USBD_u32CtrlOutToggle
;;;147        /* Get SETUP packet from USB buffer */
;;;148        USBD_MemCopy(g_USBD_au8SetupPacket, (uint8_t *)USBD_BUF_BASE + USBD->STBUFSEG, 8);
000008  481b              LDR      r0,|L10.120|
00000a  6980              LDR      r0,[r0,#0x18]
00000c  4a1b              LDR      r2,|L10.124|
00000e  1881              ADDS     r1,r0,r2
000010  2208              MOVS     r2,#8
000012  481b              LDR      r0,|L10.128|
000014  f7fffffe          BL       USBD_MemCopy
;;;149    
;;;150        /* Check the request type */
;;;151        switch (g_USBD_au8SetupPacket[0] & 0x60)
000018  4819              LDR      r0,|L10.128|
00001a  7800              LDRB     r0,[r0,#0]  ; g_USBD_au8SetupPacket
00001c  2160              MOVS     r1,#0x60
00001e  4008              ANDS     r0,r0,r1
000020  2800              CMP      r0,#0
000022  d004              BEQ      |L10.46|
000024  2820              CMP      r0,#0x20
000026  d005              BEQ      |L10.52|
000028  2840              CMP      r0,#0x40
00002a  d113              BNE      |L10.84|
00002c  e00a              B        |L10.68|
                  |L10.46|
;;;152        {
;;;153        case REQ_STANDARD:   // Standard
;;;154        {
;;;155            USBD_StandardRequest();
00002e  f7fffffe          BL       USBD_StandardRequest
;;;156            break;
000032  e01c              B        |L10.110|
                  |L10.52|
;;;157        }
;;;158    
;;;159        case REQ_CLASS:   // Class
;;;160        {
;;;161            if (g_usbd_pfnClassRequest != NULL)
000034  4813              LDR      r0,|L10.132|
000036  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnClassRequest
000038  2800              CMP      r0,#0
00003a  d002              BEQ      |L10.66|
;;;162            {
;;;163                g_usbd_pfnClassRequest();
00003c  4811              LDR      r0,|L10.132|
00003e  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnClassRequest
000040  4780              BLX      r0
                  |L10.66|
;;;164            }
;;;165    
;;;166            break;
000042  e014              B        |L10.110|
                  |L10.68|
;;;167        }
;;;168    
;;;169        case REQ_VENDOR:   // Vendor
;;;170        {
;;;171            if (g_usbd_pfnVendorRequest != NULL)
000044  4810              LDR      r0,|L10.136|
000046  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnVendorRequest
000048  2800              CMP      r0,#0
00004a  d002              BEQ      |L10.82|
;;;172            {
;;;173                g_usbd_pfnVendorRequest();
00004c  480e              LDR      r0,|L10.136|
00004e  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnVendorRequest
000050  4780              BLX      r0
                  |L10.82|
;;;174            }
;;;175    
;;;176            break;
000052  e00c              B        |L10.110|
                  |L10.84|
;;;177        }
;;;178    
;;;179        default:   // reserved
;;;180        {
;;;181            /* Setup error, stall the device */
;;;182            USBD_SET_EP_STALL(EP0);
000054  480d              LDR      r0,|L10.140|
000056  68c0              LDR      r0,[r0,#0xc]
000058  2102              MOVS     r1,#2
00005a  4308              ORRS     r0,r0,r1
00005c  490b              LDR      r1,|L10.140|
00005e  60c8              STR      r0,[r1,#0xc]
;;;183            USBD_SET_EP_STALL(EP1);
000060  4608              MOV      r0,r1
000062  69c0              LDR      r0,[r0,#0x1c]
000064  2102              MOVS     r1,#2
000066  4308              ORRS     r0,r0,r1
000068  4908              LDR      r1,|L10.140|
00006a  61c8              STR      r0,[r1,#0x1c]
;;;184            break;
00006c  bf00              NOP      
                  |L10.110|
00006e  bf00              NOP                            ;156
;;;185        }
;;;186        }
;;;187    }
000070  bd10              POP      {r4,pc}
;;;188    
                          ENDP

000072  0000              DCW      0x0000
                  |L10.116|
                          DCD      s_USBD_u32CtrlOutToggle
                  |L10.120|
                          DCD      0x40060000
                  |L10.124|
                          DCD      0x40060100
                  |L10.128|
                          DCD      g_USBD_au8SetupPacket
                  |L10.132|
                          DCD      g_usbd_pfnClassRequest
                  |L10.136|
                          DCD      g_usbd_pfnVendorRequest
                  |L10.140|
                          DCD      0x40060500

                          AREA ||i.USBD_SetConfigCallback||, CODE, READONLY, ALIGN=2

                  USBD_SetConfigCallback PROC
;;;787     */
;;;788    void USBD_SetConfigCallback(SET_CONFIG_CB pfnSetConfigCallback)
000000  4901              LDR      r1,|L11.8|
;;;789    {
;;;790        g_usbd_pfnSetConfigCallback = pfnSetConfigCallback;
000002  6008              STR      r0,[r1,#0]  ; g_usbd_pfnSetConfigCallback
;;;791    }
000004  4770              BX       lr
;;;792    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      g_usbd_pfnSetConfigCallback

                          AREA ||i.USBD_SetVendorRequest||, CODE, READONLY, ALIGN=2

                  USBD_SetVendorRequest PROC
;;;773     */
;;;774    void USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq)
000000  4901              LDR      r1,|L12.8|
;;;775    {
;;;776        g_usbd_pfnVendorRequest = pfnVendorReq;
000002  6008              STR      r0,[r1,#0]  ; g_usbd_pfnVendorRequest
;;;777    }
000004  4770              BX       lr
;;;778    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      g_usbd_pfnVendorRequest

                          AREA ||i.USBD_StandardRequest||, CODE, READONLY, ALIGN=2

                  USBD_StandardRequest PROC
;;;358      */
;;;359    void USBD_StandardRequest(void)
000000  b570              PUSH     {r4-r6,lr}
;;;360    {
;;;361    
;;;362        /* clear global variables for new request */
;;;363        s_USBD_pu8CtrlInPointer = 0;
000002  2000              MOVS     r0,#0
000004  49c8              LDR      r1,|L13.808|
000006  6008              STR      r0,[r1,#0]  ; s_USBD_pu8CtrlInPointer
;;;364        s_USBD_u32CtrlInSize = 0;
000008  49c8              LDR      r1,|L13.812|
00000a  6008              STR      r0,[r1,#0]  ; s_USBD_u32CtrlInSize
;;;365    
;;;366        if (g_USBD_au8SetupPacket[0] & 0x80)   /* request data transfer direction */
00000c  48c8              LDR      r0,|L13.816|
00000e  7800              LDRB     r0,[r0,#0]  ; g_USBD_au8SetupPacket
000010  2180              MOVS     r1,#0x80
000012  4008              ANDS     r0,r0,r1
000014  2800              CMP      r0,#0
000016  d072              BEQ      |L13.254|
;;;367        {
;;;368            // Device to host
;;;369            switch (g_USBD_au8SetupPacket[1])
000018  48c5              LDR      r0,|L13.816|
00001a  7840              LDRB     r0,[r0,#1]  ; g_USBD_au8SetupPacket
00001c  2800              CMP      r0,#0
00001e  d036              BEQ      |L13.142|
000020  2806              CMP      r0,#6
000022  d019              BEQ      |L13.88|
000024  2808              CMP      r0,#8
000026  d002              BEQ      |L13.46|
000028  280a              CMP      r0,#0xa
00002a  d169              BNE      |L13.256|
00002c  e01b              B        |L13.102|
                  |L13.46|
;;;370            {
;;;371            case GET_CONFIGURATION:
;;;372            {
;;;373                // Return current configuration setting
;;;374                /* Data stage */
;;;375                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = s_USBD_u32UsbConfig;
00002e  48c1              LDR      r0,|L13.820|
000030  6800              LDR      r0,[r0,#0]  ; s_USBD_u32UsbConfig
000032  b2c1              UXTB     r1,r0
000034  48c0              LDR      r0,|L13.824|
000036  6800              LDR      r0,[r0,#0]
000038  4ac0              LDR      r2,|L13.828|
00003a  1880              ADDS     r0,r0,r2
00003c  7001              STRB     r1,[r0,#0]
;;;376                USBD_SET_DATA1(EP0);
00003e  48be              LDR      r0,|L13.824|
000040  6880              LDR      r0,[r0,#8]
000042  2180              MOVS     r1,#0x80
000044  4308              ORRS     r0,r0,r1
000046  49bc              LDR      r1,|L13.824|
000048  6088              STR      r0,[r1,#8]
;;;377                USBD_SET_PAYLOAD_LEN(EP0, 1);
00004a  2001              MOVS     r0,#1
00004c  6048              STR      r0,[r1,#4]
;;;378                /* Status stage */
;;;379                USBD_PrepareCtrlOut(0, 0);
00004e  2100              MOVS     r1,#0
000050  4608              MOV      r0,r1
000052  f7fffffe          BL       USBD_PrepareCtrlOut
;;;380    
;;;381                DBG_PRINTF("Get configuration\n");
;;;382    
;;;383                break;
000056  e093              B        |L13.384|
                  |L13.88|
;;;384            }
;;;385    
;;;386            case GET_DESCRIPTOR:
;;;387            {
;;;388                USBD_GetDescriptor();
000058  f7fffffe          BL       USBD_GetDescriptor
;;;389                USBD_PrepareCtrlOut(0, 0); /* For status stage */
00005c  2100              MOVS     r1,#0
00005e  4608              MOV      r0,r1
000060  f7fffffe          BL       USBD_PrepareCtrlOut
;;;390                break;
000064  e08c              B        |L13.384|
                  |L13.102|
;;;391            }
;;;392    
;;;393            case GET_INTERFACE:
;;;394            {
;;;395                // Return current interface setting
;;;396                /* Data stage */
;;;397                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = s_USBD_u32UsbAltInterface;
000066  48b6              LDR      r0,|L13.832|
000068  6800              LDR      r0,[r0,#0]  ; s_USBD_u32UsbAltInterface
00006a  49b3              LDR      r1,|L13.824|
00006c  6809              LDR      r1,[r1,#0]
00006e  4ab3              LDR      r2,|L13.828|
000070  1889              ADDS     r1,r1,r2
000072  7008              STRB     r0,[r1,#0]
;;;398                USBD_SET_DATA1(EP0);
000074  48b0              LDR      r0,|L13.824|
000076  6880              LDR      r0,[r0,#8]
000078  2180              MOVS     r1,#0x80
00007a  4308              ORRS     r0,r0,r1
00007c  49ae              LDR      r1,|L13.824|
00007e  6088              STR      r0,[r1,#8]
;;;399                USBD_SET_PAYLOAD_LEN(EP0, 1);
000080  2001              MOVS     r0,#1
000082  6048              STR      r0,[r1,#4]
;;;400                /* Status stage */
;;;401                USBD_PrepareCtrlOut(0, 0);
000084  2100              MOVS     r1,#0
000086  4608              MOV      r0,r1
000088  f7fffffe          BL       USBD_PrepareCtrlOut
;;;402    
;;;403                DBG_PRINTF("Get interface\n");
;;;404    
;;;405                break;
00008c  e078              B        |L13.384|
                  |L13.142|
;;;406            }
;;;407    
;;;408            case GET_STATUS:
;;;409            {
;;;410                // Device
;;;411                if (g_USBD_au8SetupPacket[0] == 0x80)
00008e  48a8              LDR      r0,|L13.816|
000090  7800              LDRB     r0,[r0,#0]  ; g_USBD_au8SetupPacket
000092  2880              CMP      r0,#0x80
000094  d11d              BNE      |L13.210|
;;;412                {
;;;413                    uint8_t u8Tmp;
;;;414    
;;;415                    u8Tmp = 0;
000096  2000              MOVS     r0,#0
;;;416    
;;;417                    if (g_USBD_sINFO->gu8ConfigDesc[7] & 0x40) u8Tmp |= 1; // Self-Powered/Bus-Powered.
000098  49aa              LDR      r1,|L13.836|
00009a  6809              LDR      r1,[r1,#0]  ; g_USBD_sINFO
00009c  6849              LDR      r1,[r1,#4]
00009e  79c9              LDRB     r1,[r1,#7]
0000a0  2240              MOVS     r2,#0x40
0000a2  4011              ANDS     r1,r1,r2
0000a4  2900              CMP      r1,#0
0000a6  d001              BEQ      |L13.172|
0000a8  2101              MOVS     r1,#1
0000aa  4308              ORRS     r0,r0,r1
                  |L13.172|
;;;418    
;;;419                    if (g_USBD_sINFO->gu8ConfigDesc[7] & 0x20) u8Tmp |= (g_USBD_u8RemoteWakeupEn << 1); // Remote wake up
0000ac  49a5              LDR      r1,|L13.836|
0000ae  6809              LDR      r1,[r1,#0]  ; g_USBD_sINFO
0000b0  6849              LDR      r1,[r1,#4]
0000b2  79c9              LDRB     r1,[r1,#7]
0000b4  2220              MOVS     r2,#0x20
0000b6  4011              ANDS     r1,r1,r2
0000b8  2900              CMP      r1,#0
0000ba  d004              BEQ      |L13.198|
0000bc  49a2              LDR      r1,|L13.840|
0000be  7809              LDRB     r1,[r1,#0]  ; g_USBD_u8RemoteWakeupEn
0000c0  0049              LSLS     r1,r1,#1
0000c2  4301              ORRS     r1,r1,r0
0000c4  b2c8              UXTB     r0,r1
                  |L13.198|
;;;420    
;;;421                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = u8Tmp;
0000c6  499c              LDR      r1,|L13.824|
0000c8  6809              LDR      r1,[r1,#0]
0000ca  4a9c              LDR      r2,|L13.828|
0000cc  1889              ADDS     r1,r1,r2
0000ce  7008              STRB     r0,[r1,#0]
;;;422    
;;;423                }
0000d0  e036              B        |L13.320|
                  |L13.210|
;;;424                // Interface
;;;425                else if (g_USBD_au8SetupPacket[0] == 0x81)
0000d2  4897              LDR      r0,|L13.816|
0000d4  7800              LDRB     r0,[r0,#0]  ; g_USBD_au8SetupPacket
0000d6  2881              CMP      r0,#0x81
0000d8  d106              BNE      |L13.232|
;;;426                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = 0;
0000da  2000              MOVS     r0,#0
0000dc  4996              LDR      r1,|L13.824|
0000de  6809              LDR      r1,[r1,#0]
0000e0  4a96              LDR      r2,|L13.828|
0000e2  1889              ADDS     r1,r1,r2
0000e4  7008              STRB     r0,[r1,#0]
0000e6  e02b              B        |L13.320|
                  |L13.232|
;;;427                // Endpoint
;;;428                else if (g_USBD_au8SetupPacket[0] == 0x82)
0000e8  4891              LDR      r0,|L13.816|
0000ea  7800              LDRB     r0,[r0,#0]  ; g_USBD_au8SetupPacket
0000ec  2882              CMP      r0,#0x82
0000ee  d127              BNE      |L13.320|
;;;429                {
;;;430                    uint8_t ep = g_USBD_au8SetupPacket[4] & 0xF;
0000f0  488f              LDR      r0,|L13.816|
0000f2  7900              LDRB     r0,[r0,#4]  ; g_USBD_au8SetupPacket
0000f4  0704              LSLS     r4,r0,#28
0000f6  0f24              LSRS     r4,r4,#28
;;;431                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = USBD_GetStall(ep) ? 1 : 0;
0000f8  4622              MOV      r2,r4
0000fa  2000              MOVS     r0,#0
0000fc  e00f              B        |L13.286|
                  |L13.254|
0000fe  e040              B        |L13.386|
                  |L13.256|
000100  e031              B        |L13.358|
                  |L13.258|
000102  0105              LSLS     r5,r0,#4
000104  4e8c              LDR      r6,|L13.824|
000106  3608              ADDS     r6,r6,#8
000108  19a9              ADDS     r1,r5,r6
00010a  680b              LDR      r3,[r1,#0]
00010c  071d              LSLS     r5,r3,#28
00010e  0f2d              LSRS     r5,r5,#28
000110  4295              CMP      r5,r2
000112  d103              BNE      |L13.284|
000114  0105              LSLS     r5,r0,#4
000116  1d36              ADDS     r6,r6,#4
000118  19a9              ADDS     r1,r5,r6
00011a  e002              B        |L13.290|
                  |L13.284|
00011c  1c40              ADDS     r0,r0,#1
                  |L13.286|
00011e  2808              CMP      r0,#8
000120  dbef              BLT      |L13.258|
                  |L13.290|
000122  bf00              NOP      
000124  680d              LDR      r5,[r1,#0]
000126  2602              MOVS     r6,#2
000128  4035              ANDS     r5,r5,r6
00012a  2d00              CMP      r5,#0
00012c  d001              BEQ      |L13.306|
00012e  2001              MOVS     r0,#1
000130  e000              B        |L13.308|
                  |L13.306|
000132  2000              MOVS     r0,#0
                  |L13.308|
000134  4980              LDR      r1,|L13.824|
000136  6809              LDR      r1,[r1,#0]
000138  4a80              LDR      r2,|L13.828|
00013a  1889              ADDS     r1,r1,r2
00013c  7008              STRB     r0,[r1,#0]
;;;432                }
00013e  bf00              NOP      
                  |L13.320|
;;;433    
;;;434                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0) + 1) = 0;
000140  2000              MOVS     r0,#0
000142  497d              LDR      r1,|L13.824|
000144  6809              LDR      r1,[r1,#0]
000146  4a7d              LDR      r2,|L13.828|
000148  1889              ADDS     r1,r1,r2
00014a  7048              STRB     r0,[r1,#1]
;;;435                /* Data stage */
;;;436                USBD_SET_DATA1(EP0);
00014c  487a              LDR      r0,|L13.824|
00014e  6880              LDR      r0,[r0,#8]
000150  2180              MOVS     r1,#0x80
000152  4308              ORRS     r0,r0,r1
000154  4978              LDR      r1,|L13.824|
000156  6088              STR      r0,[r1,#8]
;;;437                USBD_SET_PAYLOAD_LEN(EP0, 2);
000158  2002              MOVS     r0,#2
00015a  6048              STR      r0,[r1,#4]
;;;438                /* Status stage */
;;;439                USBD_PrepareCtrlOut(0, 0);
00015c  2100              MOVS     r1,#0
00015e  4608              MOV      r0,r1
000160  f7fffffe          BL       USBD_PrepareCtrlOut
;;;440    
;;;441                DBG_PRINTF("Get status\n");
;;;442    
;;;443                break;
000164  e00c              B        |L13.384|
                  |L13.358|
;;;444            }
;;;445    
;;;446            default:
;;;447            {
;;;448                /* Setup error, stall the device */
;;;449                USBD_SET_EP_STALL(EP0);
000166  4874              LDR      r0,|L13.824|
000168  68c0              LDR      r0,[r0,#0xc]
00016a  2102              MOVS     r1,#2
00016c  4308              ORRS     r0,r0,r1
00016e  4972              LDR      r1,|L13.824|
000170  60c8              STR      r0,[r1,#0xc]
;;;450                USBD_SET_EP_STALL(EP1);
000172  4608              MOV      r0,r1
000174  69c0              LDR      r0,[r0,#0x1c]
000176  2102              MOVS     r1,#2
000178  4308              ORRS     r0,r0,r1
00017a  496f              LDR      r1,|L13.824|
00017c  61c8              STR      r0,[r1,#0x1c]
;;;451    
;;;452                DBG_PRINTF("Unknown request. stall ctrl pipe.\n");
;;;453    
;;;454                break;
00017e  bf00              NOP      
                  |L13.384|
000180  e0d1              B        |L13.806|
                  |L13.386|
;;;455            }
;;;456            }
;;;457        }
;;;458        else
;;;459        {
;;;460            // Host to device
;;;461            switch (g_USBD_au8SetupPacket[1])
000182  486b              LDR      r0,|L13.816|
000184  7840              LDRB     r0,[r0,#1]  ; g_USBD_au8SetupPacket
000186  2805              CMP      r0,#5
000188  d05a              BEQ      |L13.576|
00018a  dc04              BGT      |L13.406|
00018c  2801              CMP      r0,#1
00018e  d007              BEQ      |L13.416|
000190  2803              CMP      r0,#3
                  |L13.402|
000192  d176              BNE      |L13.642|
000194  e076              B        |L13.644|
                  |L13.406|
000196  2809              CMP      r0,#9
000198  d05f              BEQ      |L13.602|
00019a  280b              CMP      r0,#0xb
00019c  d1f9              BNE      |L13.402|
00019e  e0a0              B        |L13.738|
                  |L13.416|
;;;462            {
;;;463            case CLEAR_FEATURE:
;;;464            {
;;;465                if (g_USBD_au8SetupPacket[2] == FEATURE_ENDPOINT_HALT)
0001a0  4863              LDR      r0,|L13.816|
0001a2  7880              LDRB     r0,[r0,#2]  ; g_USBD_au8SetupPacket
0001a4  2800              CMP      r0,#0
0001a6  d13b              BNE      |L13.544|
;;;466                {
;;;467                    int32_t epNum, i;
;;;468    
;;;469                    /* EP number stall is not allow to be clear in MSC class "Error Recovery Test".
;;;470                       a flag: g_u32EpStallLock is added to support it */
;;;471                    epNum = g_USBD_au8SetupPacket[4] & 0xF;
0001a8  4a61              LDR      r2,|L13.816|
0001aa  7912              LDRB     r2,[r2,#4]  ; g_USBD_au8SetupPacket
0001ac  0711              LSLS     r1,r2,#28
0001ae  0f09              LSRS     r1,r1,#28
;;;472    
;;;473                    for (i = 0; i < USBD_MAX_EP; i++)
0001b0  bf00              NOP      
0001b2  e032              B        |L13.538|
                  |L13.436|
;;;474                    {
;;;475                        if (((USBD->EP[i].CFG & 0xF) == epNum) && ((g_u32EpStallLock & (1 << i)) == 0))
0001b4  4a65              LDR      r2,|L13.844|
0001b6  2305              MOVS     r3,#5
0001b8  021b              LSLS     r3,r3,#8
0001ba  18d2              ADDS     r2,r2,r3
0001bc  0103              LSLS     r3,r0,#4
0001be  18d2              ADDS     r2,r2,r3
0001c0  6892              LDR      r2,[r2,#8]
0001c2  0712              LSLS     r2,r2,#28
0001c4  0f12              LSRS     r2,r2,#28
0001c6  428a              CMP      r2,r1
0001c8  d126              BNE      |L13.536|
0001ca  2201              MOVS     r2,#1
0001cc  4082              LSLS     r2,r2,r0
0001ce  4b60              LDR      r3,|L13.848|
0001d0  681b              LDR      r3,[r3,#0]  ; g_u32EpStallLock
0001d2  401a              ANDS     r2,r2,r3
0001d4  2a00              CMP      r2,#0
0001d6  d11f              BNE      |L13.536|
;;;476                        {
;;;477                            USBD->EP[i].CFGP &= ~USBD_CFGP_SSTALL_Msk;
0001d8  4a5c              LDR      r2,|L13.844|
0001da  2305              MOVS     r3,#5
0001dc  021b              LSLS     r3,r3,#8
0001de  18d2              ADDS     r2,r2,r3
0001e0  0103              LSLS     r3,r0,#4
0001e2  18d2              ADDS     r2,r2,r3
0001e4  68d2              LDR      r2,[r2,#0xc]
0001e6  2302              MOVS     r3,#2
0001e8  439a              BICS     r2,r2,r3
0001ea  4b58              LDR      r3,|L13.844|
0001ec  2405              MOVS     r4,#5
0001ee  0224              LSLS     r4,r4,#8
0001f0  191b              ADDS     r3,r3,r4
0001f2  0104              LSLS     r4,r0,#4
0001f4  191b              ADDS     r3,r3,r4
0001f6  60da              STR      r2,[r3,#0xc]
;;;478                            USBD->EP[i].CFG &= ~USBD_CFG_DSQSYNC_Msk;
0001f8  4a54              LDR      r2,|L13.844|
0001fa  2305              MOVS     r3,#5
0001fc  021b              LSLS     r3,r3,#8
0001fe  18d2              ADDS     r2,r2,r3
000200  0103              LSLS     r3,r0,#4
000202  18d2              ADDS     r2,r2,r3
000204  6892              LDR      r2,[r2,#8]
000206  2380              MOVS     r3,#0x80
000208  439a              BICS     r2,r2,r3
00020a  4b50              LDR      r3,|L13.844|
00020c  2405              MOVS     r4,#5
00020e  0224              LSLS     r4,r4,#8
000210  191b              ADDS     r3,r3,r4
000212  0104              LSLS     r4,r0,#4
000214  191b              ADDS     r3,r3,r4
000216  609a              STR      r2,[r3,#8]
                  |L13.536|
000218  1c40              ADDS     r0,r0,#1              ;473
                  |L13.538|
00021a  2808              CMP      r0,#8                 ;473
00021c  dbca              BLT      |L13.436|
;;;479                            DBG_PRINTF("Clr stall ep%d %x\n", i, USBD->EP[i].CFGP);
;;;480                        }
;;;481                    }
;;;482                }
00021e  e006              B        |L13.558|
                  |L13.544|
;;;483                else if (g_USBD_au8SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
000220  4843              LDR      r0,|L13.816|
000222  7880              LDRB     r0,[r0,#2]  ; g_USBD_au8SetupPacket
000224  2801              CMP      r0,#1
000226  d102              BNE      |L13.558|
;;;484                    g_USBD_u8RemoteWakeupEn = 0;
000228  2000              MOVS     r0,#0
00022a  4947              LDR      r1,|L13.840|
00022c  7008              STRB     r0,[r1,#0]
                  |L13.558|
;;;485    
;;;486                /* Status stage */
;;;487                USBD_SET_DATA1(EP0);
00022e  4842              LDR      r0,|L13.824|
000230  6880              LDR      r0,[r0,#8]
000232  2180              MOVS     r1,#0x80
000234  4308              ORRS     r0,r0,r1
000236  4940              LDR      r1,|L13.824|
000238  6088              STR      r0,[r1,#8]
;;;488                USBD_SET_PAYLOAD_LEN(EP0, 0);
00023a  2000              MOVS     r0,#0
00023c  6048              STR      r0,[r1,#4]
;;;489    
;;;490                DBG_PRINTF("Clear feature op %d\n", g_USBD_au8SetupPacket[2]);
;;;491    
;;;492                break;
00023e  e071              B        |L13.804|
                  |L13.576|
;;;493            }
;;;494    
;;;495            case SET_ADDRESS:
;;;496            {
;;;497                s_USBD_u32UsbAddr = g_USBD_au8SetupPacket[2];
000240  483b              LDR      r0,|L13.816|
000242  7880              LDRB     r0,[r0,#2]  ; g_USBD_au8SetupPacket
000244  4943              LDR      r1,|L13.852|
000246  6008              STR      r0,[r1,#0]  ; s_USBD_u32UsbAddr
;;;498                DBG_PRINTF("Set addr to %d\n", g_USBD_u32UsbAddr);
;;;499    
;;;500                // DATA IN for end of setup
;;;501                /* Status Stage */
;;;502                USBD_SET_DATA1(EP0);
000248  483b              LDR      r0,|L13.824|
00024a  6880              LDR      r0,[r0,#8]
00024c  2180              MOVS     r1,#0x80
00024e  4308              ORRS     r0,r0,r1
000250  4939              LDR      r1,|L13.824|
000252  6088              STR      r0,[r1,#8]
;;;503                USBD_SET_PAYLOAD_LEN(EP0, 0);
000254  2000              MOVS     r0,#0
000256  6048              STR      r0,[r1,#4]
;;;504    
;;;505                break;
000258  e064              B        |L13.804|
                  |L13.602|
;;;506            }
;;;507    
;;;508            case SET_CONFIGURATION:
;;;509            {
;;;510                s_USBD_u32UsbConfig = g_USBD_au8SetupPacket[2];
00025a  4835              LDR      r0,|L13.816|
00025c  7880              LDRB     r0,[r0,#2]  ; g_USBD_au8SetupPacket
00025e  4935              LDR      r1,|L13.820|
000260  6008              STR      r0,[r1,#0]  ; s_USBD_u32UsbConfig
;;;511    
;;;512                if (g_usbd_pfnSetConfigCallback)
000262  483d              LDR      r0,|L13.856|
000264  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnSetConfigCallback
000266  2800              CMP      r0,#0
000268  d002              BEQ      |L13.624|
;;;513                    g_usbd_pfnSetConfigCallback();
00026a  483b              LDR      r0,|L13.856|
00026c  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnSetConfigCallback
00026e  4780              BLX      r0
                  |L13.624|
;;;514    
;;;515                // DATA IN for end of setup
;;;516                /* Status stage */
;;;517                USBD_SET_DATA1(EP0);
000270  4831              LDR      r0,|L13.824|
000272  6880              LDR      r0,[r0,#8]
000274  2180              MOVS     r1,#0x80
000276  4308              ORRS     r0,r0,r1
000278  492f              LDR      r1,|L13.824|
00027a  6088              STR      r0,[r1,#8]
;;;518                USBD_SET_PAYLOAD_LEN(EP0, 0);
00027c  2000              MOVS     r0,#0
00027e  6048              STR      r0,[r1,#4]
;;;519    
;;;520                DBG_PRINTF("Set config to %d\n", g_USBD_u32UsbConfig);
;;;521    
;;;522                break;
000280  e050              B        |L13.804|
                  |L13.642|
000282  e042              B        |L13.778|
                  |L13.644|
;;;523            }
;;;524    
;;;525            case SET_FEATURE:
;;;526            {
;;;527                if (g_USBD_au8SetupPacket[2] == FEATURE_ENDPOINT_HALT)
000284  482a              LDR      r0,|L13.816|
000286  7880              LDRB     r0,[r0,#2]  ; g_USBD_au8SetupPacket
000288  2800              CMP      r0,#0
00028a  d11b              BNE      |L13.708|
;;;528                {
;;;529                    USBD_SetStall(g_USBD_au8SetupPacket[4] & 0xF);
00028c  4828              LDR      r0,|L13.816|
00028e  7900              LDRB     r0,[r0,#4]  ; g_USBD_au8SetupPacket
000290  0703              LSLS     r3,r0,#28
000292  0f1b              LSRS     r3,r3,#28
000294  2100              MOVS     r1,#0
000296  e011              B        |L13.700|
                  |L13.664|
000298  010c              LSLS     r4,r1,#4
00029a  4d27              LDR      r5,|L13.824|
00029c  3508              ADDS     r5,r5,#8
00029e  1960              ADDS     r0,r4,r5
0002a0  6802              LDR      r2,[r0,#0]
0002a2  0714              LSLS     r4,r2,#28
0002a4  0f24              LSRS     r4,r4,#28
0002a6  429c              CMP      r4,r3
0002a8  d107              BNE      |L13.698|
0002aa  010c              LSLS     r4,r1,#4
0002ac  1d2d              ADDS     r5,r5,#4
0002ae  1960              ADDS     r0,r4,r5
0002b0  6802              LDR      r2,[r0,#0]
0002b2  2402              MOVS     r4,#2
0002b4  4314              ORRS     r4,r4,r2
0002b6  6004              STR      r4,[r0,#0]
0002b8  e002              B        |L13.704|
                  |L13.698|
0002ba  1c49              ADDS     r1,r1,#1
                  |L13.700|
0002bc  2908              CMP      r1,#8
0002be  dbeb              BLT      |L13.664|
                  |L13.704|
0002c0  bf00              NOP      
0002c2  e005              B        |L13.720|
                  |L13.708|
;;;530                    DBG_PRINTF("Set feature. stall ep %d\n", g_USBD_au8SetupPacket[4] & 0xF);
;;;531                }
;;;532                else if (g_USBD_au8SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
0002c4  481a              LDR      r0,|L13.816|
0002c6  7880              LDRB     r0,[r0,#2]  ; g_USBD_au8SetupPacket
0002c8  2801              CMP      r0,#1
0002ca  d101              BNE      |L13.720|
;;;533                {
;;;534                    g_USBD_u8RemoteWakeupEn = 1;
0002cc  491e              LDR      r1,|L13.840|
0002ce  7008              STRB     r0,[r1,#0]
                  |L13.720|
;;;535                    DBG_PRINTF("Set feature. enable remote wakeup\n");
;;;536                }
;;;537    
;;;538                /* Status stage */
;;;539                USBD_SET_DATA1(EP0);
0002d0  4819              LDR      r0,|L13.824|
0002d2  6880              LDR      r0,[r0,#8]
0002d4  2180              MOVS     r1,#0x80
0002d6  4308              ORRS     r0,r0,r1
0002d8  4917              LDR      r1,|L13.824|
0002da  6088              STR      r0,[r1,#8]
;;;540                USBD_SET_PAYLOAD_LEN(EP0, 0);
0002dc  2000              MOVS     r0,#0
0002de  6048              STR      r0,[r1,#4]
;;;541    
;;;542    
;;;543    
;;;544                break;
0002e0  e020              B        |L13.804|
                  |L13.738|
;;;545            }
;;;546    
;;;547            case SET_INTERFACE:
;;;548            {
;;;549                s_USBD_u32UsbAltInterface = g_USBD_au8SetupPacket[2];
0002e2  4813              LDR      r0,|L13.816|
0002e4  7880              LDRB     r0,[r0,#2]  ; g_USBD_au8SetupPacket
0002e6  4916              LDR      r1,|L13.832|
0002e8  6008              STR      r0,[r1,#0]  ; s_USBD_u32UsbAltInterface
;;;550    
;;;551                if (g_usbd_pfnSetInterface != NULL)
0002ea  481c              LDR      r0,|L13.860|
0002ec  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnSetInterface
0002ee  2800              CMP      r0,#0
0002f0  d002              BEQ      |L13.760|
;;;552                    g_usbd_pfnSetInterface();
0002f2  481a              LDR      r0,|L13.860|
0002f4  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnSetInterface
0002f6  4780              BLX      r0
                  |L13.760|
;;;553    
;;;554                /* Status stage */
;;;555                USBD_SET_DATA1(EP0);
0002f8  480f              LDR      r0,|L13.824|
0002fa  6880              LDR      r0,[r0,#8]
0002fc  2180              MOVS     r1,#0x80
0002fe  4308              ORRS     r0,r0,r1
000300  490d              LDR      r1,|L13.824|
000302  6088              STR      r0,[r1,#8]
;;;556                USBD_SET_PAYLOAD_LEN(EP0, 0);
000304  2000              MOVS     r0,#0
000306  6048              STR      r0,[r1,#4]
;;;557    
;;;558                DBG_PRINTF("Set interface to %d\n", g_USBD_u32UsbAltInterface);
;;;559    
;;;560                break;
000308  e00c              B        |L13.804|
                  |L13.778|
;;;561            }
;;;562    
;;;563            default:
;;;564            {
;;;565                /* Setup error, stall the device */
;;;566                USBD_SET_EP_STALL(EP0);
00030a  480b              LDR      r0,|L13.824|
00030c  68c0              LDR      r0,[r0,#0xc]
00030e  2102              MOVS     r1,#2
000310  4308              ORRS     r0,r0,r1
000312  4909              LDR      r1,|L13.824|
000314  60c8              STR      r0,[r1,#0xc]
;;;567                USBD_SET_EP_STALL(EP1);
000316  4608              MOV      r0,r1
000318  69c0              LDR      r0,[r0,#0x1c]
00031a  2102              MOVS     r1,#2
00031c  4308              ORRS     r0,r0,r1
00031e  4906              LDR      r1,|L13.824|
000320  61c8              STR      r0,[r1,#0x1c]
;;;568    
;;;569                DBG_PRINTF("Unsupported request. stall ctrl pipe.\n");
;;;570    
;;;571                break;
000322  bf00              NOP      
                  |L13.804|
000324  bf00              NOP                            ;492
                  |L13.806|
;;;572            }
;;;573            }
;;;574        }
;;;575    }
000326  bd70              POP      {r4-r6,pc}
;;;576    
                          ENDP

                  |L13.808|
                          DCD      s_USBD_pu8CtrlInPointer
                  |L13.812|
                          DCD      s_USBD_u32CtrlInSize
                  |L13.816|
                          DCD      g_USBD_au8SetupPacket
                  |L13.820|
                          DCD      s_USBD_u32UsbConfig
                  |L13.824|
                          DCD      0x40060500
                  |L13.828|
                          DCD      0x40060100
                  |L13.832|
                          DCD      s_USBD_u32UsbAltInterface
                  |L13.836|
                          DCD      g_USBD_sINFO
                  |L13.840|
                          DCD      g_USBD_u8RemoteWakeupEn
                  |L13.844|
                          DCD      0x40060000
                  |L13.848|
                          DCD      g_u32EpStallLock
                  |L13.852|
                          DCD      s_USBD_u32UsbAddr
                  |L13.856|
                          DCD      g_usbd_pfnSetConfigCallback
                  |L13.860|
                          DCD      g_usbd_pfnSetInterface

                          AREA ||i.USBD_Start||, CODE, READONLY, ALIGN=2

                  USBD_Start PROC
;;;105      */
;;;106    void USBD_Start(void)
000000  4814              LDR      r0,|L14.84|
000002  4915              LDR      r1,|L14.88|
000004  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000006  4341              MULS     r1,r0,r1
000008  4a14              LDR      r2,|L14.92|
00000a  6151              STR      r1,[r2,#0x14]
00000c  2100              MOVS     r1,#0
00000e  6191              STR      r1,[r2,#0x18]
000010  2105              MOVS     r1,#5
000012  6111              STR      r1,[r2,#0x10]
000014  bf00              NOP      
000016  bf00              NOP      
                  |L14.24|
000018  4910              LDR      r1,|L14.92|
00001a  6909              LDR      r1,[r1,#0x10]
00001c  2201              MOVS     r2,#1
00001e  0412              LSLS     r2,r2,#16
000020  4011              ANDS     r1,r1,r2
000022  2900              CMP      r1,#0
000024  d0f8              BEQ      |L14.24|
000026  2100              MOVS     r1,#0
000028  4a0c              LDR      r2,|L14.92|
00002a  6111              STR      r1,[r2,#0x10]
00002c  bf00              NOP      
;;;107    {
;;;108        CLK_SysTickDelay(100000);
;;;109        /* Disable software-disconnect function */
;;;110        USBD_CLR_SE0();
00002e  480c              LDR      r0,|L14.96|
000030  6900              LDR      r0,[r0,#0x10]
000032  0840              LSRS     r0,r0,#1
000034  0040              LSLS     r0,r0,#1
000036  490a              LDR      r1,|L14.96|
000038  6108              STR      r0,[r1,#0x10]
;;;111    
;;;112        /* Clear USB-related interrupts before enable interrupt */
;;;113        USBD_CLR_INT_FLAG(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INTSTS_WAKEUP);
00003a  200f              MOVS     r0,#0xf
00003c  4908              LDR      r1,|L14.96|
00003e  3980              SUBS     r1,r1,#0x80
000040  6048              STR      r0,[r1,#4]
;;;114    
;;;115        /* Enable USB-related interrupts. */
;;;116        USBD_ENABLE_INT(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INT_WAKEUP_IDLE);
000042  4608              MOV      r0,r1
000044  6800              LDR      r0,[r0,#0]
000046  210f              MOVS     r1,#0xf
000048  4308              ORRS     r0,r0,r1
00004a  4905              LDR      r1,|L14.96|
00004c  3980              SUBS     r1,r1,#0x80
00004e  6008              STR      r0,[r1,#0]
;;;117    }
000050  4770              BX       lr
;;;118    
                          ENDP

000052  0000              DCW      0x0000
                  |L14.84|
                          DCD      0x000186a0
                  |L14.88|
                          DCD      CyclesPerUs
                  |L14.92|
                          DCD      0xe000e000
                  |L14.96|
                          DCD      0x40060080

                          AREA ||i.USBD_SwReset||, CODE, READONLY, ALIGN=2

                  USBD_SwReset PROC
;;;743      */
;;;744    void USBD_SwReset(void)
000000  2100              MOVS     r1,#0
;;;745    {
;;;746        int i;
;;;747    
;;;748        // Reset all variables for protocol
;;;749        s_USBD_pu8CtrlInPointer = 0;
000002  4a14              LDR      r2,|L15.84|
000004  6011              STR      r1,[r2,#0]  ; s_USBD_pu8CtrlInPointer
;;;750        s_USBD_u32CtrlInSize = 0;
000006  4a14              LDR      r2,|L15.88|
000008  6011              STR      r1,[r2,#0]  ; s_USBD_u32CtrlInSize
;;;751        s_USBD_pu8CtrlOutPointer  = 0;
00000a  4a14              LDR      r2,|L15.92|
00000c  6011              STR      r1,[r2,#0]  ; s_USBD_pu8CtrlOutPointer
;;;752        s_USBD_u32CtrlOutSize = 0;
00000e  4a14              LDR      r2,|L15.96|
000010  6011              STR      r1,[r2,#0]  ; s_USBD_u32CtrlOutSize
;;;753        s_USBD_u32CtrlOutSizeLimit = 0;
000012  4a14              LDR      r2,|L15.100|
000014  6011              STR      r1,[r2,#0]  ; s_USBD_u32CtrlOutSizeLimit
;;;754        g_u32EpStallLock = 0;
000016  4a14              LDR      r2,|L15.104|
000018  6011              STR      r1,[r2,#0]  ; g_u32EpStallLock
;;;755        memset(g_USBD_au8SetupPacket, 0, 8);
00001a  4914              LDR      r1,|L15.108|
00001c  2200              MOVS     r2,#0
00001e  600a              STR      r2,[r1,#0]  ; g_USBD_au8SetupPacket
000020  604a              STR      r2,[r1,#4]  ; g_USBD_au8SetupPacket
;;;756    
;;;757        /* Reset PID DATA0 */
;;;758        for (i = 0; i < USBD_MAX_EP; i++)
000022  2000              MOVS     r0,#0
000024  e010              B        |L15.72|
                  |L15.38|
;;;759            USBD->EP[i].CFG &= ~USBD_CFG_DSQSYNC_Msk;
000026  4912              LDR      r1,|L15.112|
000028  2205              MOVS     r2,#5
00002a  0212              LSLS     r2,r2,#8
00002c  1889              ADDS     r1,r1,r2
00002e  0102              LSLS     r2,r0,#4
000030  1889              ADDS     r1,r1,r2
000032  6889              LDR      r1,[r1,#8]
000034  2280              MOVS     r2,#0x80
000036  4391              BICS     r1,r1,r2
000038  4a0d              LDR      r2,|L15.112|
00003a  2305              MOVS     r3,#5
00003c  021b              LSLS     r3,r3,#8
00003e  18d2              ADDS     r2,r2,r3
000040  0103              LSLS     r3,r0,#4
000042  18d2              ADDS     r2,r2,r3
000044  6091              STR      r1,[r2,#8]
000046  1c40              ADDS     r0,r0,#1              ;758
                  |L15.72|
000048  2808              CMP      r0,#8                 ;758
00004a  dbec              BLT      |L15.38|
;;;760    
;;;761        // Reset USB device address
;;;762        USBD_SET_ADDR(0);
00004c  2100              MOVS     r1,#0
00004e  4a08              LDR      r2,|L15.112|
000050  6091              STR      r1,[r2,#8]
;;;763    }
000052  4770              BX       lr
;;;764    
                          ENDP

                  |L15.84|
                          DCD      s_USBD_pu8CtrlInPointer
                  |L15.88|
                          DCD      s_USBD_u32CtrlInSize
                  |L15.92|
                          DCD      s_USBD_pu8CtrlOutPointer
                  |L15.96|
                          DCD      s_USBD_u32CtrlOutSize
                  |L15.100|
                          DCD      s_USBD_u32CtrlOutSizeLimit
                  |L15.104|
                          DCD      g_u32EpStallLock
                  |L15.108|
                          DCD      g_USBD_au8SetupPacket
                  |L15.112|
                          DCD      0x40060000

                          AREA ||.data||, DATA, ALIGN=2

                  g_USBD_au8SetupPacket
000000  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  g_USBD_u8RemoteWakeupEn
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  s_USBD_pu8CtrlInPointer
                          DCD      0x00000000
                  s_USBD_u32CtrlInSize
                          DCD      0x00000000
                  s_USBD_pu8CtrlOutPointer
                          DCD      0x00000000
                  s_USBD_u32CtrlOutSize
                          DCD      0x00000000
                  s_USBD_u32CtrlOutSizeLimit
                          DCD      0x00000000
                  s_USBD_u32UsbAddr
                          DCD      0x00000000
                  s_USBD_u32UsbConfig
                          DCD      0x00000000
                  s_USBD_u32CtrlMaxPktSize
                          DCD      0x00000008
                  s_USBD_u32UsbAltInterface
                          DCD      0x00000000
                  s_USBD_u8CtrlInZeroFlag
000030  00000000          DCB      0x00,0x00,0x00,0x00
                  s_USBD_u32CtrlOutToggle
                          DCD      0x00000000
                  g_USBD_sINFO
                          DCD      0x00000000
                  g_usbd_pfnVendorRequest
                          DCD      0x00000000
                  g_usbd_pfnClassRequest
                          DCD      0x00000000
                  g_usbd_pfnSetInterface
                          DCD      0x00000000
                  g_usbd_pfnSetConfigCallback
                          DCD      0x00000000
                  g_u32EpStallLock
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\usbd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_0821db4f____REV16|
#line 464 "..\\..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_usbd_c_0821db4f____REV16| PROC
#line 465

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_0821db4f____REVSH|
#line 479
|__asm___6_usbd_c_0821db4f____REVSH| PROC
#line 480

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
