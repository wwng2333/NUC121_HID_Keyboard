L 1 "..\..\..\..\Library\StdDriver\src\clk.c"
N/**************************************************************************//**
N * @file     clk.c
N * @version  V3.00
N * @brief    NUC121 series CLK driver source file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#include "NuMicro.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NuMicro.h" 1
N/**************************************************************************//**
N * @file     NuMicro.h
N * @version  V1.00
N * @brief    NuMicro peripheral access layer header file.
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __NUMICRO_H__
N#define __NUMICRO_H__
N
N#include "NUC121.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 1
N/**************************************************************************//**
N * @file     NUC121.h
N * @version  V3.00
N * @brief    NUC121/NUC125 Series Peripheral Access Layer Header File
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N
N/**
N  \mainpage NuMicro NUC121/NUC125 Series CMSIS BSP Driver Reference
N  *
N  * <b>Introduction</b>
N  *
N  * This user manual describes the usage of NUC121/NUC125 Series MCU device driver
N  *
N  * <b>Disclaimer</b>
N  *
N  * The Software is furnished "AS IS", without warranty as to performance or results, and
N  * the entire risk as to performance or results is assumed by YOU. Nuvoton disclaims all
N  * warranties, express, implied or otherwise, with regard to the Software, its use, or
N  * operation, including without limitation any and all warranties of merchantability, fitness
N  * for a particular purpose, and non-infringement of intellectual property rights.
N  *
N  * <b>Important Notice</b>
N  *
N  * Nuvoton Products are neither intended nor warranted for usage in systems or equipment,
N  * any malfunction or failure of which may cause loss of human life, bodily injury or severe
N  * property damage. Such applications are deemed, "Insecure Usage".
N  *
N  * Insecure usage includes, but is not limited to: equipment for surgical implementation,
N  * atomic energy control instruments, airplane or spaceship instruments, the control or
N  * operation of dynamic, brake or safety systems designed for vehicular use, traffic signal
N  * instruments, all types of safety devices, and other applications intended to support or
N  * sustain life.
N  *
N  * All Insecure Usage shall be made at customer's risk, and in the event that third parties
N  * lay claims to Nuvoton as a result of customer's Insecure Usage, customer shall indemnify
N  * the damages and liabilities thus incurred by Nuvoton.
N  *
N  * Please note that all data and specifications are subject to change without notice. All the
N  * trademarks of products and companies mentioned in this datasheet belong to their respective
N  * owners.
N  *
N  * <b>Copyright Notice</b>
N  *
N  * Copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N  */
N
N#ifndef __NUC121_H__
N#define __NUC121_H__
N
N/*
N * ==========================================================================
N * ---------- Interrupt Number Definition -----------------------------------
N * ==========================================================================
N */
N
N/** @addtogroup MCU_CMSIS Device Definitions for CMSIS
N  Interrupt Number Definition and Configurations for CMSIS
N  @{
N*/
N
N/**
N * @details  Interrupt Number Definition. The maximum of 32 Specific Interrupts are possible.
N */
N
Ntypedef enum IRQn
N{
N    /******  Cortex-M0 Processor Exceptions Numbers ***********************************************/
N    NonMaskableInt_IRQn       = -14,    /*!< 2 Non Maskable Interrupt                             */
N    HardFault_IRQn            = -13,    /*!< 3 Cortex-M0 Hard Fault Interrupt                     */
N    SVCall_IRQn               = -5,     /*!< 11 Cortex-M0 SV Call Interrupt                       */
N    PendSV_IRQn               = -2,     /*!< 14 Cortex-M0 Pend SV Interrupt                       */
N    SysTick_IRQn              = -1,     /*!< 15 Cortex-M0 System Tick Interrupt                   */
N
N    /******  ARMIKMCU Swift specific Interrupt Numbers ********************************************/
N    BOD_IRQn                  = 0,      /*!< Brown-Out Low Voltage Detected Interrupt             */
N    WDT_IRQn                  = 1,      /*!< Watch Dog Timer Interrupt                            */
N    EINT024_IRQn              = 2,      /*!< EINT0, EINT2 and EINT4 Interrupt                     */
N    EINT135_IRQn              = 3,      /*!< EINT1, EINT3 and EINT5 Interrupt                     */
N    GPAB_IRQn                 = 4,      /*!< GPIO_P0P1 Interrupt                                  */
N    GPCDEF_IRQn               = 5,      /*!< GPIO_P2P3P4P5 Interrupt                              */
N    PWM0_IRQn                 = 6,      /*!< PWM0 Interrupt                                       */
N    PWM1_IRQn                 = 7,      /*!< PWM1 Interrupt                                       */
N    TMR0_IRQn                 = 8,      /*!< TIMER0 Interrupt                                     */
N    TMR1_IRQn                 = 9,      /*!< TIMER1 Interrupt                                     */
N    TMR2_IRQn                 = 10,     /*!< TIMER2 Interrupt                                     */
N    TMR3_IRQn                 = 11,     /*!< TIMER3 Interrupt                                     */
N    UART0_IRQn                = 12,     /*!< UART0 Interrupt                                      */
N    //RESERVE0                  = 13,
N    SPI0_IRQn                 = 14,     /*!< SPI0 Interrupt                                       */
N    //RESERVE1                  = 15,
N    //RESERVE2                  = 16,
N    //RESERVE3                  = 17,
N    I2C0_IRQn                 = 18,     /*!< I2C0 Interrupt                                       */
N    I2C1_IRQn                 = 19,     /*!< I2C1 Interrupt                                       */
N    BPWM0_IRQn                = 20,     /*!< BPWM0 Interrupt                                      */
N    BPWM1_IRQn                = 21,     /*!< BPWM1 Interrupt                                      */
N    USCI_IRQn                 = 22,     /*!< USCI0, USCI1 and USCI2 interrupt                     */
N    USBD_IRQn                 = 23,     /*!< USB Device Interrupt                                 */
N    //RESERVE6                  = 24,
N    PWM_BRAKE_IRQn            = 25,     /*!< PWM Brake Interrupt                                  */
N    PDMA_IRQn                 = 26,     /*!< PDMA Interrupt                                       */
N    //RESERVE7                  = 27,
N    PWRWU_IRQn                = 28,     /*!< Power Down Wake Up Interrupt                         */
N    ADC_IRQn                  = 29,     /*!< ADC Interrupt                                        */
N    CLKDIRC_IRQn              = 30,     /*!< Clock fail detect and IRC TRIM Interrupt             */
N    //RESERVE8                  = 31,
N} IRQn_Type;
N
N
N/*
N * ==========================================================================
N * ----------- Processor and Core Peripheral Section ------------------------
N * ==========================================================================
N */
N
N/* Configuration of the Cortex-M0 Processor and Core Peripherals */
N#define __MPU_PRESENT           0       /*!< armikcmu does not provide a MPU present or not       */
N#define __NVIC_PRIO_BITS        2       /*!< armikcmu Supports 2 Bits for the Priority Levels     */
N#define __Vendor_SysTickConfig  0       /*!< Set to 1 if different SysTick Config is used         */
N
N/*@}*/ /* end of group MCU_CMSIS */
N
N
N#include "core_cm0.h"                   /*!< Cortex-M0 processor and core peripherals             */
L 1 "..\..\..\..\Library\CMSIS\Include\core_cm0.h" 1
N/**************************************************************************//**
N * @file     core_cm0.h
N * @brief    CMSIS Cortex-M0 Core Peripheral Access Layer Header File
N * @version  V5.0.2
N * @date     19. April 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060750 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CORE_CM0_H_GENERIC
N#define __CORE_CM0_H_GENERIC
N
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 35 "..\..\..\..\Library\CMSIS\Include\core_cm0.h" 2
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/**
N  \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
N  CMSIS violates the following MISRA-C:2004 rules:
N
N   \li Required Rule 8.5, object/function definition in header file.<br>
N     Function definitions in header files are used to allow 'inlining'.
N
N   \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
N     Unions are used for effective representation of core registers.
N
N   \li Advisory Rule 19.7, Function-like macro defined.<br>
N     Function-like macros are used to allow more efficient code.
N */
N
N
N/*******************************************************************************
N *                 CMSIS definitions
N ******************************************************************************/
N/**
N  \ingroup Cortex_M0
N  @{
N */
N
N#include "cmsis_version.h"
L 1 "..\..\..\..\Library\CMSIS\Include\cmsis_version.h" 1
N/**************************************************************************//**
N * @file     cmsis_version.h
N * @brief    CMSIS Core(M) Version definitions
N * @version  V5.0.2
N * @date     19. April 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#if   defined ( __ICCARM__ )
X#if   0L
S #pragma system_include         /* treat file as system include file for MISRA check */
S#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
X#elif 1L && (5060750 >= 6010050)
S  #pragma clang system_header   /* treat file as system include file */
N#endif
N
N#ifndef __CMSIS_VERSION_H
N#define __CMSIS_VERSION_H
N
N/*  CMSIS Version definitions */
N#define __CM_CMSIS_VERSION_MAIN  ( 5U)                                      /*!< [31:16] CMSIS Core(M) main version */
N#define __CM_CMSIS_VERSION_SUB   ( 0U)                                      /*!< [15:0]  CMSIS Core(M) sub version */
N#define __CM_CMSIS_VERSION       ((__CM_CMSIS_VERSION_MAIN << 16U) | \
N                                   __CM_CMSIS_VERSION_SUB           )       /*!< CMSIS Core(M) version number */
X#define __CM_CMSIS_VERSION       ((__CM_CMSIS_VERSION_MAIN << 16U) |                                    __CM_CMSIS_VERSION_SUB           )        
N#endif
L 64 "..\..\..\..\Library\CMSIS\Include\core_cm0.h" 2
N 
N/*  CMSIS CM0 definitions */
N#define __CM0_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)              /*!< \deprecated [31:16] CMSIS HAL main version */
N#define __CM0_CMSIS_VERSION_SUB   (__CM_CMSIS_VERSION_SUB)               /*!< \deprecated [15:0]  CMSIS HAL sub version */
N#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) | \
N                                    __CM0_CMSIS_VERSION_SUB           )  /*!< \deprecated CMSIS HAL version number */
X#define __CM0_CMSIS_VERSION       ((__CM0_CMSIS_VERSION_MAIN << 16U) |                                     __CM0_CMSIS_VERSION_SUB           )   
N
N#define __CORTEX_M                (0U)                                   /*!< Cortex-M Core */
N
N/** __FPU_USED indicates whether an FPU is used or not.
N    This core does not support an FPU at all
N*/
N#define __FPU_USED       0U
N
N#if defined ( __CC_ARM )
X#if 1L
N  #if defined __TARGET_FPU_VFP
X  #if 0L
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
N  #endif
N
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #if defined __ARM_PCS_VFP
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __GNUC__ )
S  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __ICCARM__ )
S  #if defined __ARMVFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TI_ARM__ )
S  #if defined __TI_VFP_SUPPORT__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __TASKING__ )
S  #if defined __FPU_VFP__
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
S#elif defined ( __CSMC__ )
S  #if ( __CSMC__ & 0x400U)
S    #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
S  #endif
S
N#endif
N
N#include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
L 1 "..\..\..\..\Library\CMSIS\Include\cmsis_compiler.h" 1
N/**************************************************************************//**
N * @file     cmsis_compiler.h
N * @brief    CMSIS compiler generic header file
N * @version  V5.0.2
N * @date     13. February 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_COMPILER_H
N#define __CMSIS_COMPILER_H
N
N#include <stdint.h>
N
N/*
N * ARM Compiler 4/5
N */
N#if   defined ( __CC_ARM )
X#if   1L
N  #include "cmsis_armcc.h"
L 1 "..\..\..\..\Library\CMSIS\Include\cmsis_armcc.h" 1
N/**************************************************************************//**
N * @file     cmsis_armcc.h
N * @brief    CMSIS compiler ARMCC (ARM compiler V5) header file
N * @version  V5.0.2
N * @date     13. February 2017
N ******************************************************************************/
N/*
N * Copyright (c) 2009-2017 ARM Limited. All rights reserved.
N *
N * SPDX-License-Identifier: Apache-2.0
N *
N * Licensed under the Apache License, Version 2.0 (the License); you may
N * not use this file except in compliance with the License.
N * You may obtain a copy of the License at
N *
N * www.apache.org/licenses/LICENSE-2.0
N *
N * Unless required by applicable law or agreed to in writing, software
N * distributed under the License is distributed on an AS IS BASIS, WITHOUT
N * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
N * See the License for the specific language governing permissions and
N * limitations under the License.
N */
N
N#ifndef __CMSIS_ARMCC_H
N#define __CMSIS_ARMCC_H
N
N
N#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 400677)
X#if 1L && (5060750 < 400677)
S  #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
N#endif
N
N/* CMSIS compiler control architecture macros */
N#if ((defined (__TARGET_ARCH_6_M  ) && (__TARGET_ARCH_6_M   == 1)) || \
N     (defined (__TARGET_ARCH_6S_M ) && (__TARGET_ARCH_6S_M  == 1))   )
X#if ((0L && (__TARGET_ARCH_6_M   == 1)) ||      (1L && (1  == 1))   )
N  #define __ARM_ARCH_6M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7_M ) && (__TARGET_ARCH_7_M  == 1))
X#if (0L && (__TARGET_ARCH_7_M  == 1))
S  #define __ARM_ARCH_7M__           1
N#endif
N
N#if (defined (__TARGET_ARCH_7E_M) && (__TARGET_ARCH_7E_M == 1))
X#if (0L && (__TARGET_ARCH_7E_M == 1))
S  #define __ARM_ARCH_7EM__          1
N#endif
N
N  /* __ARM_ARCH_8M_BASE__  not applicable */
N  /* __ARM_ARCH_8M_MAIN__  not applicable */
N
N
N/* CMSIS compiler specific defines */
N#ifndef   __ASM
N  #define __ASM                                  __asm
N#endif
N#ifndef   __INLINE
N  #define __INLINE                               __inline
N#endif
N#ifndef   __STATIC_INLINE
N  #define __STATIC_INLINE                        static __inline
N#endif
N#ifndef   __NO_RETURN
N  #define __NO_RETURN                            __declspec(noreturn)
N#endif
N#ifndef   __USED
N  #define __USED                                 __attribute__((used))
N#endif
N#ifndef   __WEAK
N  #define __WEAK                                 __attribute__((weak))
N#endif
N#ifndef   __PACKED
N  #define __PACKED                               __attribute__((packed))
N#endif
N#ifndef   __PACKED_STRUCT
N  #define __PACKED_STRUCT                        __packed struct
N#endif
N#ifndef   __PACKED_UNION
N  #define __PACKED_UNION                         __packed union
N#endif
N#ifndef   __UNALIGNED_UINT32        /* deprecated */
N  #define __UNALIGNED_UINT32(x)                  (*((__packed uint32_t *)(x)))
N#endif
N#ifndef   __UNALIGNED_UINT16_WRITE
N  #define __UNALIGNED_UINT16_WRITE(addr, val)    ((*((__packed uint16_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT16_READ
N  #define __UNALIGNED_UINT16_READ(addr)          (*((const __packed uint16_t *)(addr)))
N#endif
N#ifndef   __UNALIGNED_UINT32_WRITE
N  #define __UNALIGNED_UINT32_WRITE(addr, val)    ((*((__packed uint32_t *)(addr))) = (val))
N#endif
N#ifndef   __UNALIGNED_UINT32_READ
N  #define __UNALIGNED_UINT32_READ(addr)          (*((const __packed uint32_t *)(addr)))
N#endif
N#ifndef   __ALIGNED
N  #define __ALIGNED(x)                           __attribute__((aligned(x)))
N#endif
N#ifndef   __RESTRICT
N  #define __RESTRICT                             __restrict
N#endif
N
N/* ###########################  Core Function Access  ########################### */
N/** \ingroup  CMSIS_Core_FunctionInterface
N    \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
N  @{
N */
N
N/**
N  \brief   Enable IRQ Interrupts
N  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __enable_irq();     */
N
N
N/**
N  \brief   Disable IRQ Interrupts
N  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
N           Can only be executed in Privileged modes.
N */
N/* intrinsic void __disable_irq();    */
N
N/**
N  \brief   Get Control Register
N  \details Returns the content of the Control Register.
N  \return               Control Register value
N */
N__STATIC_INLINE uint32_t __get_CONTROL(void)
Xstatic __inline uint32_t __get_CONTROL(void)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  return(__regControl);
N}
N
N
N/**
N  \brief   Set Control Register
N  \details Writes the given value to the Control Register.
N  \param [in]    control  Control Register value to set
N */
N__STATIC_INLINE void __set_CONTROL(uint32_t control)
Xstatic __inline void __set_CONTROL(uint32_t control)
N{
N  register uint32_t __regControl         __ASM("control");
X  register uint32_t __regControl         __asm("control");
N  __regControl = control;
N}
N
N
N/**
N  \brief   Get IPSR Register
N  \details Returns the content of the IPSR Register.
N  \return               IPSR Register value
N */
N__STATIC_INLINE uint32_t __get_IPSR(void)
Xstatic __inline uint32_t __get_IPSR(void)
N{
N  register uint32_t __regIPSR          __ASM("ipsr");
X  register uint32_t __regIPSR          __asm("ipsr");
N  return(__regIPSR);
N}
N
N
N/**
N  \brief   Get APSR Register
N  \details Returns the content of the APSR Register.
N  \return               APSR Register value
N */
N__STATIC_INLINE uint32_t __get_APSR(void)
Xstatic __inline uint32_t __get_APSR(void)
N{
N  register uint32_t __regAPSR          __ASM("apsr");
X  register uint32_t __regAPSR          __asm("apsr");
N  return(__regAPSR);
N}
N
N
N/**
N  \brief   Get xPSR Register
N  \details Returns the content of the xPSR Register.
N  \return               xPSR Register value
N */
N__STATIC_INLINE uint32_t __get_xPSR(void)
Xstatic __inline uint32_t __get_xPSR(void)
N{
N  register uint32_t __regXPSR          __ASM("xpsr");
X  register uint32_t __regXPSR          __asm("xpsr");
N  return(__regXPSR);
N}
N
N
N/**
N  \brief   Get Process Stack Pointer
N  \details Returns the current value of the Process Stack Pointer (PSP).
N  \return               PSP Register value
N */
N__STATIC_INLINE uint32_t __get_PSP(void)
Xstatic __inline uint32_t __get_PSP(void)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  return(__regProcessStackPointer);
N}
N
N
N/**
N  \brief   Set Process Stack Pointer
N  \details Assigns the given value to the Process Stack Pointer (PSP).
N  \param [in]    topOfProcStack  Process Stack Pointer value to set
N */
N__STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
Xstatic __inline void __set_PSP(uint32_t topOfProcStack)
N{
N  register uint32_t __regProcessStackPointer  __ASM("psp");
X  register uint32_t __regProcessStackPointer  __asm("psp");
N  __regProcessStackPointer = topOfProcStack;
N}
N
N
N/**
N  \brief   Get Main Stack Pointer
N  \details Returns the current value of the Main Stack Pointer (MSP).
N  \return               MSP Register value
N */
N__STATIC_INLINE uint32_t __get_MSP(void)
Xstatic __inline uint32_t __get_MSP(void)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  return(__regMainStackPointer);
N}
N
N
N/**
N  \brief   Set Main Stack Pointer
N  \details Assigns the given value to the Main Stack Pointer (MSP).
N  \param [in]    topOfMainStack  Main Stack Pointer value to set
N */
N__STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
Xstatic __inline void __set_MSP(uint32_t topOfMainStack)
N{
N  register uint32_t __regMainStackPointer     __ASM("msp");
X  register uint32_t __regMainStackPointer     __asm("msp");
N  __regMainStackPointer = topOfMainStack;
N}
N
N
N/**
N  \brief   Get Priority Mask
N  \details Returns the current state of the priority mask bit from the Priority Mask Register.
N  \return               Priority Mask value
N */
N__STATIC_INLINE uint32_t __get_PRIMASK(void)
Xstatic __inline uint32_t __get_PRIMASK(void)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  return(__regPriMask);
N}
N
N
N/**
N  \brief   Set Priority Mask
N  \details Assigns the given value to the Priority Mask Register.
N  \param [in]    priMask  Priority Mask
N */
N__STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
Xstatic __inline void __set_PRIMASK(uint32_t priMask)
N{
N  register uint32_t __regPriMask         __ASM("primask");
X  register uint32_t __regPriMask         __asm("primask");
N  __regPriMask = (priMask);
N}
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Enable FIQ
S  \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __enable_fault_irq                __enable_fiq
S
S
S/**
S  \brief   Disable FIQ
S  \details Disables FIQ interrupts by setting the F-bit in the CPSR.
S           Can only be executed in Privileged modes.
S */
S#define __disable_fault_irq               __disable_fiq
S
S
S/**
S  \brief   Get Base Priority
S  \details Returns the current value of the Base Priority register.
S  \return               Base Priority register value
S */
S__STATIC_INLINE uint32_t  __get_BASEPRI(void)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  return(__regBasePri);
S}
S
S
S/**
S  \brief   Set Base Priority
S  \details Assigns the given value to the Base Priority register.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
S{
S  register uint32_t __regBasePri         __ASM("basepri");
S  __regBasePri = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Set Base Priority with condition
S  \details Assigns the given value to the Base Priority register only if BASEPRI masking is disabled,
S           or the new value increases the BASEPRI priority level.
S  \param [in]    basePri  Base Priority value to set
S */
S__STATIC_INLINE void __set_BASEPRI_MAX(uint32_t basePri)
S{
S  register uint32_t __regBasePriMax      __ASM("basepri_max");
S  __regBasePriMax = (basePri & 0xFFU);
S}
S
S
S/**
S  \brief   Get Fault Mask
S  \details Returns the current value of the Fault Mask register.
S  \return               Fault Mask register value
S */
S__STATIC_INLINE uint32_t __get_FAULTMASK(void)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  return(__regFaultMask);
S}
S
S
S/**
S  \brief   Set Fault Mask
S  \details Assigns the given value to the Fault Mask register.
S  \param [in]    faultMask  Fault Mask value to set
S */
S__STATIC_INLINE void __set_FAULTMASK(uint32_t faultMask)
S{
S  register uint32_t __regFaultMask       __ASM("faultmask");
S  __regFaultMask = (faultMask & (uint32_t)1U);
S}
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   Get FPSCR
S  \details Returns the current value of the Floating Point Status/Control register.
S  \return               Floating Point Status/Control register value
S */
S__STATIC_INLINE uint32_t __get_FPSCR(void)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  return(__regfpscr);
S#else
S   return(0U);
S#endif
S}
S
S
S/**
S  \brief   Set FPSCR
S  \details Assigns the given value to the Floating Point Status/Control register.
S  \param [in]    fpscr  Floating Point Status/Control value to set
S */
S__STATIC_INLINE void __set_FPSCR(uint32_t fpscr)
S{
S#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
S     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
X#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) &&      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
S  register uint32_t __regfpscr         __ASM("fpscr");
S  __regfpscr = (fpscr);
S#else
S  (void)fpscr;
S#endif
S}
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N
N
N
N/*@} end of CMSIS_Core_RegAccFunctions */
N
N
N/* ##########################  Core Instruction Access  ######################### */
N/** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
N  Access to dedicated instructions
N  @{
N*/
N
N/**
N  \brief   No Operation
N  \details No Operation does nothing. This instruction can be used for code alignment purposes.
N */
N#define __NOP                             __nop
N
N
N/**
N  \brief   Wait For Interrupt
N  \details Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.
N */
N#define __WFI                             __wfi
N
N
N/**
N  \brief   Wait For Event
N  \details Wait For Event is a hint instruction that permits the processor to enter
N           a low-power state until one of a number of events occurs.
N */
N#define __WFE                             __wfe
N
N
N/**
N  \brief   Send Event
N  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
N */
N#define __SEV                             __sev
N
N
N/**
N  \brief   Instruction Synchronization Barrier
N  \details Instruction Synchronization Barrier flushes the pipeline in the processor,
N           so that all instructions following the ISB are fetched from cache or memory,
N           after the instruction has been completed.
N */
N#define __ISB() do {\
N                   __schedule_barrier();\
N                   __isb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __ISB() do {                   __schedule_barrier();                   __isb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Synchronization Barrier
N  \details Acts as a special kind of Data Memory Barrier.
N           It completes when all explicit memory accesses before this instruction complete.
N */
N#define __DSB() do {\
N                   __schedule_barrier();\
N                   __dsb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DSB() do {                   __schedule_barrier();                   __dsb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Data Memory Barrier
N  \details Ensures the apparent order of the explicit memory operations before
N           and after the instruction, without ensuring their completion.
N */
N#define __DMB() do {\
N                   __schedule_barrier();\
N                   __dmb(0xF);\
N                   __schedule_barrier();\
N                } while (0U)
X#define __DMB() do {                   __schedule_barrier();                   __dmb(0xF);                   __schedule_barrier();                } while (0U)
N
N/**
N  \brief   Reverse byte order (32 bit)
N  \details Reverses the byte order in integer value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#define __REV                             __rev
N
N
N/**
N  \brief   Reverse byte order (16 bit)
N  \details Reverses the byte order in two unsigned short values.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
X__attribute__((section(".rev16_text"))) static __inline __asm uint32_t __REV16(uint32_t value)
N{
N  rev16 r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Reverse byte order in signed short value
N  \details Reverses the byte order in a signed short value with sign extension to integer.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#ifndef __NO_EMBEDDED_ASM
N__attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
X__attribute__((section(".revsh_text"))) static __inline __asm int32_t __REVSH(int32_t value)
N{
N  revsh r0, r0
N  bx lr
N}
N#endif
N
N
N/**
N  \brief   Rotate Right in unsigned value (32 bit)
N  \details Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits.
N  \param [in]    op1  Value to rotate
N  \param [in]    op2  Number of Bits to rotate
N  \return               Rotated value
N */
N#define __ROR                             __ror
N
N
N/**
N  \brief   Breakpoint
N  \details Causes the processor to enter Debug state.
N           Debug tools can use this to investigate system state when the instruction at a particular address is reached.
N  \param [in]    value  is ignored by the processor.
N                 If required, a debugger can use it to store additional information about the breakpoint.
N */
N#define __BKPT(value)                       __breakpoint(value)
N
N
N/**
N  \brief   Reverse bit order of value
N  \details Reverses the bit order of the given value.
N  \param [in]    value  Value to reverse
N  \return               Reversed value
N */
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S  #define __RBIT                          __rbit
N#else
N__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
X__attribute__((always_inline)) static __inline uint32_t __RBIT(uint32_t value)
N{
N  uint32_t result;
N  int32_t s = (4 /*sizeof(v)*/ * 8) - 1; /* extra shift needed at end */
N
N  result = value;                      /* r will be reversed bits of v; first get LSB of v */
N  for (value >>= 1U; value; value >>= 1U)
N  {
N    result <<= 1U;
N    result |= value & 1U;
N    s--;
N  }
N  result <<= s;                        /* shift when v's highest bits are zero */
N  return(result);
N}
N#endif
N
N
N/**
N  \brief   Count leading zeros
N  \details Counts the number of leading zeros of a data value.
N  \param [in]  value  Value to count the leading zeros
N  \return             number of leading zeros in value
N */
N#define __CLZ                             __clz
N
N
N#if ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N     (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7M__  == 1)) ||      (0L && (__ARM_ARCH_7EM__ == 1))     )
S
S/**
S  \brief   LDR Exclusive (8 bit)
S  \details Executes a exclusive LDR instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXB(ptr)                                                        ((uint8_t ) __ldrex(ptr))
S#else
S  #define __LDREXB(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint8_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (16 bit)
S  \details Executes a exclusive LDR instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXH(ptr)                                                        ((uint16_t) __ldrex(ptr))
S#else
S  #define __LDREXH(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint16_t) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   LDR Exclusive (32 bit)
S  \details Executes a exclusive LDR instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __LDREXW(ptr)                                                        ((uint32_t ) __ldrex(ptr))
S#else
S  #define __LDREXW(ptr)          _Pragma("push") _Pragma("diag_suppress 3731") ((uint32_t ) __ldrex(ptr))  _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (8 bit)
S  \details Executes a exclusive STR instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXB(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXB(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (16 bit)
S  \details Executes a exclusive STR instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXH(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXH(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   STR Exclusive (32 bit)
S  \details Executes a exclusive STR instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S  \return          0  Function succeeded
S  \return          1  Function failed
S */
S#if defined(__ARMCC_VERSION) && (__ARMCC_VERSION < 5060020)
S  #define __STREXW(value, ptr)                                                 __strex(value, ptr)
S#else
S  #define __STREXW(value, ptr)   _Pragma("push") _Pragma("diag_suppress 3731") __strex(value, ptr)        _Pragma("pop")
S#endif
S
S
S/**
S  \brief   Remove the exclusive lock
S  \details Removes the exclusive lock which is created by LDREX.
S */
S#define __CLREX                           __clrex
S
S
S/**
S  \brief   Signed Saturate
S  \details Saturates a signed value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (1..32)
S  \return             Saturated value
S */
S#define __SSAT                            __ssat
S
S
S/**
S  \brief   Unsigned Saturate
S  \details Saturates an unsigned value.
S  \param [in]  value  Value to be saturated
S  \param [in]    sat  Bit position to saturate to (0..31)
S  \return             Saturated value
S */
S#define __USAT                            __usat
S
S
S/**
S  \brief   Rotate Right with Extend (32 bit)
S  \details Moves each bit of a bitstring right by one bit.
S           The carry input is shifted in at the left end of the bitstring.
S  \param [in]    value  Value to rotate
S  \return               Rotated value
S */
S#ifndef __NO_EMBEDDED_ASM
S__attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
S{
S  rrx r0, r0
S  bx lr
S}
S#endif
S
S
S/**
S  \brief   LDRT Unprivileged (8 bit)
S  \details Executes a Unprivileged LDRT instruction for 8 bit value.
S  \param [in]    ptr  Pointer to data
S  \return             value of type uint8_t at (*ptr)
S */
S#define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (16 bit)
S  \details Executes a Unprivileged LDRT instruction for 16 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint16_t at (*ptr)
S */
S#define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
S
S
S/**
S  \brief   LDRT Unprivileged (32 bit)
S  \details Executes a Unprivileged LDRT instruction for 32 bit values.
S  \param [in]    ptr  Pointer to data
S  \return        value of type uint32_t at (*ptr)
S */
S#define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
S
S
S/**
S  \brief   STRT Unprivileged (8 bit)
S  \details Executes a Unprivileged STRT instruction for 8 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRBT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (16 bit)
S  \details Executes a Unprivileged STRT instruction for 16 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRHT(value, ptr)               __strt(value, ptr)
S
S
S/**
S  \brief   STRT Unprivileged (32 bit)
S  \details Executes a Unprivileged STRT instruction for 32 bit values.
S  \param [in]  value  Value to store
S  \param [in]    ptr  Pointer to location
S */
S#define __STRT(value, ptr)                __strt(value, ptr)
S
N#endif /* ((defined (__ARM_ARCH_7M__ ) && (__ARM_ARCH_7M__  == 1)) || \
N           (defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
X#endif  
N
N/*@}*/ /* end of group CMSIS_Core_InstructionInterface */
N
N
N/* ###################  Compiler specific Intrinsics  ########################### */
N/** \defgroup CMSIS_SIMD_intrinsics CMSIS SIMD Intrinsics
N  Access to dedicated SIMD instructions
N  @{
N*/
N
N#if ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     )
X#if ((0L && (__ARM_ARCH_7EM__ == 1))     )
S
S#define __SADD8                           __sadd8
S#define __QADD8                           __qadd8
S#define __SHADD8                          __shadd8
S#define __UADD8                           __uadd8
S#define __UQADD8                          __uqadd8
S#define __UHADD8                          __uhadd8
S#define __SSUB8                           __ssub8
S#define __QSUB8                           __qsub8
S#define __SHSUB8                          __shsub8
S#define __USUB8                           __usub8
S#define __UQSUB8                          __uqsub8
S#define __UHSUB8                          __uhsub8
S#define __SADD16                          __sadd16
S#define __QADD16                          __qadd16
S#define __SHADD16                         __shadd16
S#define __UADD16                          __uadd16
S#define __UQADD16                         __uqadd16
S#define __UHADD16                         __uhadd16
S#define __SSUB16                          __ssub16
S#define __QSUB16                          __qsub16
S#define __SHSUB16                         __shsub16
S#define __USUB16                          __usub16
S#define __UQSUB16                         __uqsub16
S#define __UHSUB16                         __uhsub16
S#define __SASX                            __sasx
S#define __QASX                            __qasx
S#define __SHASX                           __shasx
S#define __UASX                            __uasx
S#define __UQASX                           __uqasx
S#define __UHASX                           __uhasx
S#define __SSAX                            __ssax
S#define __QSAX                            __qsax
S#define __SHSAX                           __shsax
S#define __USAX                            __usax
S#define __UQSAX                           __uqsax
S#define __UHSAX                           __uhsax
S#define __USAD8                           __usad8
S#define __USADA8                          __usada8
S#define __SSAT16                          __ssat16
S#define __USAT16                          __usat16
S#define __UXTB16                          __uxtb16
S#define __UXTAB16                         __uxtab16
S#define __SXTB16                          __sxtb16
S#define __SXTAB16                         __sxtab16
S#define __SMUAD                           __smuad
S#define __SMUADX                          __smuadx
S#define __SMLAD                           __smlad
S#define __SMLADX                          __smladx
S#define __SMLALD                          __smlald
S#define __SMLALDX                         __smlaldx
S#define __SMUSD                           __smusd
S#define __SMUSDX                          __smusdx
S#define __SMLSD                           __smlsd
S#define __SMLSDX                          __smlsdx
S#define __SMLSLD                          __smlsld
S#define __SMLSLDX                         __smlsldx
S#define __SEL                             __sel
S#define __QADD                            __qadd
S#define __QSUB                            __qsub
S
S#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |  \
S                                           ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
X#define __PKHBT(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0x0000FFFFUL) |                                             ((((uint32_t)(ARG2)) << (ARG3)) & 0xFFFF0000UL)  )
S
S#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |  \
S                                           ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
X#define __PKHTB(ARG1,ARG2,ARG3)          ( ((((uint32_t)(ARG1))          ) & 0xFFFF0000UL) |                                             ((((uint32_t)(ARG2)) >> (ARG3)) & 0x0000FFFFUL)  )
S
S#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) + \
S                                                      ((int64_t)(ARG3) << 32U)     ) >> 32U))
X#define __SMMLA(ARG1,ARG2,ARG3)          ( (int32_t)((((int64_t)(ARG1) * (ARG2)) +                                                       ((int64_t)(ARG3) << 32U)     ) >> 32U))
S
N#endif /* ((defined (__ARM_ARCH_7EM__) && (__ARM_ARCH_7EM__ == 1))     ) */
N/*@} end of group CMSIS_SIMD_intrinsics */
N
N
N#endif /* __CMSIS_ARMCC_H */
L 35 "..\..\..\..\Library\CMSIS\Include\cmsis_compiler.h" 2
N
N
N/*
N * ARM Compiler 6 (armclang)
N */
N#elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
S  #include "cmsis_armclang.h"
S
S
S/*
S * GNU Compiler
S */
S#elif defined ( __GNUC__ )
S  #include "cmsis_gcc.h"
S
S
S/*
S * IAR Compiler
S */
S#elif defined ( __ICCARM__ )
S
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S
S  #include <cmsis_iar.h>
S
S  /* CMSIS compiler control architecture macros */
S  #if (__CORE__ == __ARM6M__) || (__CORE__ == __ARM6SM__)
S    #ifndef __ARM_ARCH_6M__
S      #define __ARM_ARCH_6M__                      1
S    #endif
S  #elif (__CORE__ == __ARM7M__)
S    #ifndef __ARM_ARCH_7M__
S      #define __ARM_ARCH_7M__                      1
S    #endif
S  #elif (__CORE__ == __ARM7EM__)
S    #ifndef __ARM_ARCH_7EM__
S      #define __ARM_ARCH_7EM__                     1
S    #endif
S  #endif
S
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __noreturn
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __root
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __weak
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        __packed struct
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         __packed union
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    __packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    //#warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __RESTRICT
S    //#warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S
S  // Workaround for missing __CLZ intrinsic in
S  // various versions of the IAR compilers.
S  // __IAR_FEATURE_CLZ__ should be defined by
S  // the compiler that supports __CLZ internally.
S  #if (defined (__ARM_ARCH_6M__)) && (__ARM_ARCH_6M__ == 1) && (!defined (__IAR_FEATURE_CLZ__))
S    __STATIC_INLINE uint32_t __CLZ(uint32_t data)
S    {
S      if (data == 0u) { return 32u; }
S      
S      uint32_t count = 0;
S      uint32_t mask = 0x80000000;
S      
S      while ((data & mask) == 0)
S      {
S        count += 1u;
S        mask = mask >> 1u;
S      }
S      
S      return (count);
S    }
S  #endif
S
S
S/*
S * TI ARM Compiler
S */
S#elif defined ( __TI_ARM__ )
S  #include <cmsis_ccs.h>
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __attribute__((packed))
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __attribute__((packed))
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __attribute__((packed)) T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void*)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)                           __attribute__((aligned(x)))
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S
S
S/*
S * TASKING Compiler
S */
S#elif defined ( __TASKING__ )
S  /*
S   * The CMSIS functions have been implemented as intrinsics in the compiler.
S   * Please use "carm -?i" to get an up to date list of all intrinsics,
S   * Including the CMSIS ones.
S   */
S
S  #ifndef   __ASM
S    #define __ASM                                  __asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __NO_RETURN
S    #define __NO_RETURN                            __attribute__((noreturn))
S  #endif
S  #ifndef   __USED
S    #define __USED                                 __attribute__((used))
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __attribute__((weak))
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               __packed__
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        struct __packed__
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         union __packed__
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    struct __packed__ T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #define __ALIGNED(x)              __align(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S
S
S/*
S * COSMIC Compiler
S */
S#elif defined ( __CSMC__ )
S   #include <cmsis_csm.h>
S
S #ifndef   __ASM
S    #define __ASM                                  _asm
S  #endif
S  #ifndef   __INLINE
S    #define __INLINE                               inline
S  #endif
S  #ifndef   __STATIC_INLINE
S    #define __STATIC_INLINE                        static inline
S  #endif
S  #ifndef   __NO_RETURN
S    // NO RETURN is automatically detected hence no warning here
S    #define __NO_RETURN
S  #endif
S  #ifndef   __USED
S    #warning No compiler specific solution for __USED. __USED is ignored.
S    #define __USED
S  #endif
S  #ifndef   __WEAK
S    #define __WEAK                                 __weak
S  #endif
S  #ifndef   __PACKED
S    #define __PACKED                               @packed
S  #endif
S  #ifndef   __PACKED_STRUCT
S    #define __PACKED_STRUCT                        @packed struct
S  #endif
S  #ifndef   __PACKED_UNION
S    #define __PACKED_UNION                         @packed union
S  #endif
S  #ifndef   __UNALIGNED_UINT32        /* deprecated */
S    @packed struct T_UINT32 { uint32_t v; };
S    #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT16_WRITE
S    __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
S    #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT16_READ
S    __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
S    #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __UNALIGNED_UINT32_WRITE
S    __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
S    #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))->v) = (val))
S  #endif
S  #ifndef   __UNALIGNED_UINT32_READ
S    __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
S    #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(addr))->v)
S  #endif
S  #ifndef   __ALIGNED
S    #warning No compiler specific solution for __ALIGNED. __ALIGNED is ignored.
S    #define __ALIGNED(x)
S  #endif
S  #ifndef   __RESTRICT
S    #warning No compiler specific solution for __RESTRICT. __RESTRICT is ignored.
S    #define __RESTRICT
S  #endif
S
S
S#else
S  #error Unknown compiler.
N#endif
N
N
N#endif /* __CMSIS_COMPILER_H */
N
L 116 "..\..\..\..\Library\CMSIS\Include\core_cm0.h" 2
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_GENERIC */
N
N#ifndef __CMSIS_GENERIC
N
N#ifndef __CORE_CM0_H_DEPENDANT
N#define __CORE_CM0_H_DEPENDANT
N
N#ifdef __cplusplus
S extern "C" {
N#endif
N
N/* check device defines and use defaults */
N#if defined __CHECK_DEVICE_DEFINES
X#if 0L
S  #ifndef __CM0_REV
S    #define __CM0_REV               0x0000U
S    #warning "__CM0_REV not defined in device header file; using default!"
S  #endif
S
S  #ifndef __NVIC_PRIO_BITS
S    #define __NVIC_PRIO_BITS          2U
S    #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
S  #endif
S
S  #ifndef __Vendor_SysTickConfig
S    #define __Vendor_SysTickConfig    0U
S    #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
S  #endif
N#endif
N
N/* IO definitions (access restrictions to peripheral registers) */
N/**
N    \defgroup CMSIS_glob_defs CMSIS Global Defines
N
N    <strong>IO Type Qualifiers</strong> are used
N    \li to specify the access to peripheral variables.
N    \li for automatic generation of peripheral register debug information.
N*/
N#ifdef __cplusplus
S  #define   __I     volatile             /*!< Defines 'read only' permissions */
N#else
N  #define   __I     volatile const       /*!< Defines 'read only' permissions */
N#endif
N#define     __O     volatile             /*!< Defines 'write only' permissions */
N#define     __IO    volatile             /*!< Defines 'read / write' permissions */
N
N/* following defines should be used for structure members */
N#define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
N#define     __OM     volatile            /*! Defines 'write only' structure member permissions */
N#define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
N
N/*@} end of group Cortex_M0 */
N
N
N
N/*******************************************************************************
N *                 Register Abstraction
N  Core Register contain:
N  - Core Register
N  - Core NVIC Register
N  - Core SCB Register
N  - Core SysTick Register
N ******************************************************************************/
N/**
N  \defgroup CMSIS_core_register Defines and Type Definitions
N  \brief Type definitions and defines for Cortex-M processor based devices.
N*/
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_CORE  Status and Control Registers
N  \brief      Core Register type definitions.
N  @{
N */
N
N/**
N  \brief  Union type to access the Application Program Status Register (APSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} APSR_Type;
N
N/* APSR Register Definitions */
N#define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
N#define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
N
N#define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
N#define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
N
N#define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
N#define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
N
N#define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
N#define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
N
N
N/**
N  \brief  Union type to access the Interrupt Program Status Register (IPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} IPSR_Type;
N
N/* IPSR Register Definitions */
N#define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
N#define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
N    uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
N    uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
N    uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
N    uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
N    uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
N    uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
N    uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} xPSR_Type;
N
N/* xPSR Register Definitions */
N#define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
N#define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
N
N#define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
N#define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
N
N#define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
N#define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
N
N#define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
N#define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
N
N#define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
N#define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
N
N#define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
N#define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
N
N
N/**
N  \brief  Union type to access the Control Registers (CONTROL).
N */
Ntypedef union
N{
N  struct
N  {
N    uint32_t _reserved0:1;               /*!< bit:      0  Reserved */
N    uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
N    uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
N  } b;                                   /*!< Structure used for bit  access */
N  uint32_t w;                            /*!< Type      used for word access */
N} CONTROL_Type;
N
N/* CONTROL Register Definitions */
N#define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
N#define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
N
N/*@} end of group CMSIS_CORE */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
N  \brief      Type definitions for the NVIC Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
N */
Ntypedef struct
N{
N  __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
X  volatile uint32_t ISER[1U];                
N        uint32_t RESERVED0[31U];
N  __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
X  volatile uint32_t ICER[1U];                
N        uint32_t RSERVED1[31U];
N  __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
X  volatile uint32_t ISPR[1U];                
N        uint32_t RESERVED2[31U];
N  __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
X  volatile uint32_t ICPR[1U];                
N        uint32_t RESERVED3[31U];
N        uint32_t RESERVED4[64U];
N  __IOM uint32_t IP[8U];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
X  volatile uint32_t IP[8U];                  
N}  NVIC_Type;
N
N/*@} end of group CMSIS_NVIC */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SCB     System Control Block (SCB)
N  \brief    Type definitions for the System Control Block Registers
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Control Block (SCB).
N */
Ntypedef struct
N{
N  __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
X  volatile const  uint32_t CPUID;                   
N  __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
X  volatile uint32_t ICSR;                    
N        uint32_t RESERVED0;
N  __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
X  volatile uint32_t AIRCR;                   
N  __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
X  volatile uint32_t SCR;                     
N  __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
X  volatile uint32_t CCR;                     
N        uint32_t RESERVED1;
N  __IOM uint32_t SHP[2U];                /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED */
X  volatile uint32_t SHP[2U];                 
N  __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
X  volatile uint32_t SHCSR;                   
N} SCB_Type;
N
N/* SCB CPUID Register Definitions */
N#define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
N#define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
N
N#define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
N#define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
N
N#define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
N#define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
N
N#define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
N#define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
N
N#define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
N#define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
N
N/* SCB Interrupt Control State Register Definitions */
N#define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
N#define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
N
N#define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
N#define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
N
N#define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
N#define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
N
N#define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
N#define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
N
N#define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
N#define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
N
N#define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
N#define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
N
N#define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
N#define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
N
N#define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
N#define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
N
N#define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
N#define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
N
N/* SCB Application Interrupt and Reset Control Register Definitions */
N#define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
N#define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
N
N#define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
N#define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
N
N#define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB AIRCR: ENDIANESS Position */
N#define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB AIRCR: ENDIANESS Mask */
N
N#define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
N#define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
N
N#define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
N#define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
N
N/* SCB System Control Register Definitions */
N#define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
N#define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
N
N#define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
N#define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
N
N#define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
N#define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
N
N/* SCB Configuration Control Register Definitions */
N#define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
N#define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
N
N#define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
N#define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
N
N/* SCB System Handler Control and State Register Definitions */
N#define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
N#define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
N
N/*@} end of group CMSIS_SCB */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
N  \brief    Type definitions for the System Timer Registers.
N  @{
N */
N
N/**
N  \brief  Structure type to access the System Timer (SysTick).
N */
Ntypedef struct
N{
N  __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
X  volatile uint32_t CTRL;                    
N  __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
X  volatile uint32_t LOAD;                    
N  __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
X  volatile uint32_t VAL;                     
N  __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
X  volatile const  uint32_t CALIB;                   
N} SysTick_Type;
N
N/* SysTick Control / Status Register Definitions */
N#define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
N#define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
N
N#define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
N#define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
N
N#define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
N#define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
N
N#define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
N#define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
N
N/* SysTick Reload Register Definitions */
N#define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
N#define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
N
N/* SysTick Current Register Definitions */
N#define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
N#define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
N
N/* SysTick Calibration Register Definitions */
N#define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
N#define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
N
N#define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
N#define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
N
N#define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
N#define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
N
N/*@} end of group CMSIS_SysTick */
N
N
N/**
N  \ingroup  CMSIS_core_register
N  \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
N  \brief    Cortex-M0 Core Debug Registers (DCB registers, SHCSR, and DFSR) are only accessible over DAP and not via processor.
N            Therefore they are not covered by the Cortex-M0 header file.
N  @{
N */
N/*@} end of group CMSIS_CoreDebug */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_bitfield     Core register bit field macros
N  \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
N  @{
N */
N
N/**
N  \brief   Mask and shift a bit field value for use in a register bit range.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted value.
N*/
N#define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
N
N/**
N  \brief     Mask and shift a register value to extract a bit filed value.
N  \param[in] field  Name of the register bit field.
N  \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
N  \return           Masked and shifted bit field value.
N*/
N#define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
N
N/*@} end of group CMSIS_core_bitfield */
N
N
N/**
N  \ingroup    CMSIS_core_register
N  \defgroup   CMSIS_core_base     Core Definitions
N  \brief      Definitions for base addresses, unions, and structures.
N  @{
N */
N
N/* Memory mapping of Core Hardware */
N#define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Base Address */
N#define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
N#define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
N#define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Base Address */
N
N#define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct */
N#define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration struct */
N#define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struct */
N
N
N/*@} */
N
N
N
N/*******************************************************************************
N *                Hardware Abstraction Layer
N  Core Function Interface contains:
N  - Core NVIC Functions
N  - Core SysTick Functions
N  - Core Register Access Functions
N ******************************************************************************/
N/**
N  \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
N*/
N
N
N
N/* ##########################   NVIC functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_NVICFunctions NVIC Functions
N  \brief    Functions that manage interrupts and exceptions via the NVIC.
N  @{
N */
N
N#ifdef CMSIS_NVIC_VIRTUAL
S  #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
S    #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
S  #endif
S  #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
N#else
N/*#define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping   not available for Cortex-M0 */
N/*#define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping   not available for Cortex-M0 */
N  #define NVIC_EnableIRQ              __NVIC_EnableIRQ
N  #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
N  #define NVIC_DisableIRQ             __NVIC_DisableIRQ
N  #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
N  #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
N  #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
N/*#define NVIC_GetActive              __NVIC_GetActive             not available for Cortex-M0 */
N  #define NVIC_SetPriority            __NVIC_SetPriority
N  #define NVIC_GetPriority            __NVIC_GetPriority
N  #define NVIC_SystemReset            __NVIC_SystemReset
N#endif /* CMSIS_NVIC_VIRTUAL */
N
N#ifdef CMSIS_VECTAB_VIRTUAL
S  #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
S    #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
S  #endif
S  #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
N#else
N  #define NVIC_SetVector              __NVIC_SetVector
N  #define NVIC_GetVector              __NVIC_GetVector
N#endif  /* (CMSIS_VECTAB_VIRTUAL) */
N
N#define NVIC_USER_IRQ_OFFSET          16
N
N
N/* Interrupt Priorities are WORD accessible only under ARMv6M                   */
N/* The following MACROS handle generation of the register offset and byte masks */
N#define _BIT_SHIFT(IRQn)         (  ((((uint32_t)(int32_t)(IRQn))         )      &  0x03UL) * 8UL)
N#define _SHP_IDX(IRQn)           ( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >>    2UL)      )
N#define _IP_IDX(IRQn)            (   (((uint32_t)(int32_t)(IRQn))                >>    2UL)      )
N
N
N/**
N  \brief   Enable Interrupt
N  \details Enables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_EnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Enable status
N  \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt is not enabled.
N  \return             1  Interrupt is enabled.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISER[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Disable Interrupt
N  \details Disables a device specific interrupt in the NVIC interrupt controller.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_DisableIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N    __DSB();
X    do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);
N    __ISB();
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);
N  }
N}
N
N
N/**
N  \brief   Get Pending Interrupt
N  \details Reads the NVIC pending register and returns the pending bit for the specified device specific interrupt.
N  \param [in]      IRQn  Device specific interrupt number.
N  \return             0  Interrupt status is not pending.
N  \return             1  Interrupt status is pending.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
N  }
N  else
N  {
N    return(0U);
N  }
N}
N
N
N/**
N  \brief   Set Pending Interrupt
N  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Clear Pending Interrupt
N  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
N  \param [in]      IRQn  Device specific interrupt number.
N  \note    IRQn must not be negative.
N */
N__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
Xstatic __inline void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Priority
N  \details Sets the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]      IRQn  Interrupt number.
N  \param [in]  priority  Priority to set.
N  \note    The priority cannot be set for every processor exception.
N */
N__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
Xstatic __inline void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
N{
N  if ((int32_t)(IRQn) >= 0)
N  {
N    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  = ((uint32_t)(((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )]  & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N  else
N  {
N    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] = ((uint32_t)(((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] & ~(0xFFUL << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL))) |
N       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
X       (((priority << (8U - 2)) & (uint32_t)0xFFUL) << ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL)));
N  }
N}
N
N
N/**
N  \brief   Get Interrupt Priority
N  \details Reads the priority of a device specific interrupt or a processor exception.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn  Interrupt number.
N  \return             Interrupt Priority.
N                      Value is aligned automatically to the implemented priority bits of the microcontroller.
N */
N__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
N{
N
N  if ((int32_t)(IRQn) >= 0)
N  {
N    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((NVIC_Type *) ((0xE000E000UL) + 0x0100UL) )->IP[ ( (((uint32_t)(int32_t)(IRQn)) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N  else
N  {
N    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
X    return((uint32_t)(((((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SHP[( (((((uint32_t)(int32_t)(IRQn)) & 0x0FUL)-8UL) >> 2UL) )] >> ( ((((uint32_t)(int32_t)(IRQn)) ) & 0x03UL) * 8UL) ) & (uint32_t)0xFFUL) >> (8U - 2)));
N  }
N}
N
N
N/**
N  \brief   Set Interrupt Vector
N  \details Sets an interrupt vector in SRAM based interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N           Address 0 must be mapped to SRAM.
N  \param [in]   IRQn      Interrupt number
N  \param [in]   vector    Address of interrupt handler function
N */
N__STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
Xstatic __inline void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
N{
N  uint32_t *vectors = (uint32_t *)0x0U;
N  vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
X  vectors[(int32_t)IRQn + 16] = vector;
N}
N
N
N/**
N  \brief   Get Interrupt Vector
N  \details Reads an interrupt vector from interrupt vector table.
N           The interrupt number can be positive to specify a device specific interrupt,
N           or negative to specify a processor exception.
N  \param [in]   IRQn      Interrupt number.
N  \return                 Address of interrupt handler function
N */
N__STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
Xstatic __inline uint32_t __NVIC_GetVector(IRQn_Type IRQn)
N{
N  uint32_t *vectors = (uint32_t *)0x0U;
N  return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
X  return vectors[(int32_t)IRQn + 16];
N}
N
N
N/**
N  \brief   System Reset
N  \details Initiates a system reset request to reset the MCU.
N */
N__STATIC_INLINE void __NVIC_SystemReset(void)
Xstatic __inline void __NVIC_SystemReset(void)
N{
N  __DSB();                                                          /* Ensure all outstanding memory accesses included
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                          
N                                                                       buffered write are completed before reset */
N  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
X  ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->AIRCR  = ((0x5FAUL << 16U) |
N                 SCB_AIRCR_SYSRESETREQ_Msk);
X                 (1UL << 2U));
N  __DSB();                                                          /* Ensure completion of memory access */
X  do { __schedule_barrier(); __dsb(0xF); __schedule_barrier(); } while (0U);                                                           
N
N  for(;;)                                                           /* wait until reset */
N  {
N    __NOP();
X    __nop();
N  }
N}
N
N/*@} end of CMSIS_Core_NVICFunctions */
N
N
N/* ##########################  FPU functions  #################################### */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_FpuFunctions FPU Functions
N  \brief    Function that provides FPU type.
N  @{
N */
N
N/**
N  \brief   get FPU type
N  \details returns the FPU type
N  \returns
N   - \b  0: No FPU
N   - \b  1: Single precision FPU
N   - \b  2: Double + Single precision FPU
N */
N__STATIC_INLINE uint32_t SCB_GetFPUType(void)
Xstatic __inline uint32_t SCB_GetFPUType(void)
N{
N    return 0U;           /* No FPU */
N}
N
N
N/*@} end of CMSIS_Core_FpuFunctions */
N
N
N
N/* ##################################    SysTick function  ############################################ */
N/**
N  \ingroup  CMSIS_Core_FunctionInterface
N  \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
N  \brief    Functions that configure the System.
N  @{
N */
N
N#if defined (__Vendor_SysTickConfig) && (__Vendor_SysTickConfig == 0U)
X#if 1L && (0 == 0U)
N
N/**
N  \brief   System Tick Configuration
N  \details Initializes the System Timer and its interrupt, and starts the System Tick Timer.
N           Counter is in free running mode to generate periodic interrupts.
N  \param [in]  ticks  Number of ticks between two interrupts.
N  \return          0  Function succeeded.
N  \return          1  Function failed.
N  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
N           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
N           must contain a vendor-specific implementation of this function.
N */
N__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
Xstatic __inline uint32_t SysTick_Config(uint32_t ticks)
N{
N  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
X  if ((ticks - 1UL) > (0xFFFFFFUL ))
N  {
N    return (1UL);                                                   /* Reload value impossible */
N  }
N
N  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD  = (uint32_t)(ticks - 1UL);                          
N  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
X  __NVIC_SetPriority (SysTick_IRQn, (1UL << 2) - 1UL);  
N  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL   = 0UL;                                              
N  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
X  ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL  = (1UL << 2U) |
N                   SysTick_CTRL_TICKINT_Msk   |
X                   (1UL << 1U)   |
N                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
X                   (1UL );                          
N  return (0UL);                                                     /* Function successful */
N}
N
N#endif
N
N/*@} end of CMSIS_Core_SysTickFunctions */
N
N
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* __CORE_CM0_H_DEPENDANT */
N
N#endif /* __CMSIS_GENERIC */
L 127 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "system_NUC121.h"              /*!< NUC121 System                                        */
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\system_NUC121.h" 1
N/**************************************************************************//**
N * @file     system_NUC121.h
N * @version  V3.00
N * @brief    NUC121 Series System Setting Header File
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N#ifndef __SYSTEM_NUC121_H__
N#define __SYSTEM_NUC121_H__
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Macro Definition                                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N#ifndef DEBUG_PORT
N# define DEBUG_PORT      UART0       /*!< Select Debug Port which is used for retarget.c to output debug message to UART */
N#endif
N
N/**
N *
N * @details    This is used to enable PLL to speed up booting at startup. Remove it will cause system using
N *             default clock source (External crystal or internal 48MHz HIRC).
N *             Enable this option will cause system booting in 96MHz(By XTAL) or 96MHz(By HIRC_DIV2: 24MHz) according to
N *             user configuration setting in CONFIG0
N *
N */
N//#define INIT_SYSCLK_AT_BOOTING
N
N/*----------------------------------------------------------------------------
N  Define SYSCLK
N *----------------------------------------------------------------------------*/
N#define __HXT       (12000000UL)    /*!< External Crystal Clock Frequency     */
N#define __LIRC      (10000UL)       /*!< Internal 10K RC Oscillator Frequency */
N#define __HIRC      (48000000UL)    /*!< Internal 48M RC Oscillator Frequency */
N#define __HIRC_DIV2 (__HIRC/2)
N#define __LXT       (32768UL)       /*!< External Crystal Clock Frequency 32.768KHz */
N#define __HSI       (96000000UL)    /*!< PLL default output is 96MHz@24M HIRC_DIV2 */
N#define __HSI_DIV2  (__HSI/2)
N
Nextern uint32_t SystemCoreClock;    /*!< System Clock Frequency (Core Clock)  */
Nextern uint32_t CyclesPerUs;        /*!< Cycles per micro second              */
Nextern uint32_t PllClock;           /*!< PLL Output Clock Frequency           */
N
N#if USE_ASSERT
S/**
S * @brief      Assert Function
S *
S * @param[in]  expr  Expression to be evaluated
S *
S * @return     None
S *
S * @details    If the expression is false, an error message will be printed out
S *             from debug port (UART0 or UART1).
S */
S#define ASSERT_PARAM(expr)  { if (!(expr)) { AssertError((uint8_t*)__FILE__, __LINE__); } }
S
Svoid AssertError(uint8_t *file, uint32_t line);
N#else
N#define ASSERT_PARAM(expr)
N#endif
N
N#define assert_param(expr)  ASSERT_PARAM(expr)
N
N
N/**
N * @brief    System Initialization
N *
N * @param    None
N *
N * @return   None
N *
N * @details  The necessary initialization of system.
N */
Nextern void SystemInit(void);
N
N
N/**
N * @brief    Update the Variable SystemCoreClock
N *
N * @param    None
N *
N * @return   None
N *
N * @details  This function is used to update the variable SystemCoreClock
N *           and must be called whenever the core clock is changed.
N */
Nextern void SystemCoreClockUpdate(void);
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__SYSTEM_NUC121_H__*/
N
N/* Copyright (C) 2016 Nuvoton Technology Corp. All rights reserved. */
L 128 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N * Initialize the system clock
N *
N * @param  None
N * @return None
N *
N * @brief  Setup the microcontroller system
N *         Initialize the PLL and update the SystemFrequency variable
N */
Nextern void SystemInit(void);
N
N
N/******************************************************************************/
N/*                Device Specific Peripheral registers structures             */
N/******************************************************************************/
N/** @addtogroup REGISTER Control Register
N  @{
N*/
N
N#include "adc_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\adc_reg.h" 1
N/**************************************************************************//**
N * @file     adc_reg.h
N * @version  V1.00
N * @brief    ADC register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __ADC_REG_H__
N#define __ADC_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup ADC Analog to Digital Converter (ADC)
N    Memory Mapped Structure for ADC Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var ADC_T::ADDR
N     * Offset: 0x00~0x7C  ADC Data Register 0~31
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RSLT      |A/D Conversion Result
N     * |        |          |This field contains conversion result of ADC.
N     * |[16]    |OVERRUN   |Overrun Flag
N     * |        |          |If converted data in RSLT has not been read before new conversion result is loaded to this register, OVERRUN is set to 1
N     * |        |          |It is cleared by hardware after ADDR register is read
N     * |        |          |0 = Data in RSLT is not overwrote.
N     * |        |          |1 = Data in RSLT is overwrote.
N     * |[17]    |VALID     |Valid Flag
N     * |        |          |This bit will be set to 1 when the conversion of the corresponding channel is completed
N     * |        |          |This bit will be cleared to 0 by hardware after ADDR register is read
N     * |        |          |0 = Data in RSLT bits is not valid.
N     * |        |          |1 = Data in RSLT bits is valid.
N     * @var ADC_T::ADCR
N     * Offset: 0x80  ADC Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ADEN      |A/D Converter Enable Bit
N     * |        |          |0 = A/D converter Disabled.
N     * |        |          |1 = A/D converter Enabled.
N     * |        |          |Note: Before starting A/D conversion function, this bit should be set to 1
N     * |        |          |Clear it to 0 to disable A/D converter analog circuit to save power consumption.
N     * |[1]     |ADIE      |A/D Interrupt Enable Control
N     * |        |          |A/D conversion end interrupt request is generated if ADIE bit is set to 1.
N     * |        |          |0 = A/D interrupt function Disabled.
N     * |        |          |1 = A/D interrupt function Enabled.
N     * |[3:2]   |ADMD      |A/D Converter Operation Mode Control
N     * |        |          |00 = Single conversion.
N     * |        |          |01 = Burst conversion.
N     * |        |          |10 = Single-cycle Scan.
N     * |        |          |11 = Continuous Scan.
N     * |        |          |Note1: When changing the operation mode, software should clear ADST bit first.
N     * |        |          |Note2: In Burst mode, the A/D result data always at Data Register 0.
N     * |[5:4]   |TRGS      |Hardware Trigger Source
N     * |        |          |00 = A/D conversion is started by external STADC pin.
N     * |        |          |01 = Timer0 ~ Timer3 overflow pulse trigger.
N     * |        |          |10 = Reserved.
N     * |        |          |11 = A/D conversion is started by PWM trigger.
N     * |        |          |Note: Software should clear TRGEN bit and ADST bit to 0 before changing TRGS.
N     * |[7:6]   |TRGCOND   |External Trigger Condition
N     * |        |          |These two bits decide external pin STADC trigger event is level or edge
N     * |        |          |The signal must be kept at stable state at least 8 PCLKs for level trigger and at least 4 PCLKs for edge trigger.
N     * |        |          |00 = Low level.
N     * |        |          |01 = High level.
N     * |        |          |10 = Falling edge.
N     * |        |          |11 = Rising edge.
N     * |[8]     |TRGEN     |External Trigger Enable Control
N     * |        |          |Enable or disable triggering of A/D conversion by external STADC pin, PWM trigger and Timer trigger
N     * |        |          |If external trigger is enabled, the ADST bit can be set to 1 by the selected hardware trigger source.
N     * |        |          |0= External trigger Disabled.
N     * |        |          |1= External trigger Enabled.
N     * |        |          |Note: The ADC external trigger function is only supported in Single-cycle Scan mode.
N     * |[9]     |PTEN      |PDMA Transfer Enable Bit
N     * |        |          |When A/D conversion is completed, the converted data is loaded into ADDR0~11, ADDR29~ADDR30
N     * |        |          |Software can enable this bit to generate a PDMA data transfer request.
N     * |        |          |0 = PDMA data transfer Disabled.
N     * |        |          |1 = PDMA data transfer in ADDR0~11, ADDR29~ADDR30 Enabled.
N     * |        |          |Note: When PTEN=1, software must set ADIE=0 to disable interrupt.
N     * |[10]    |DIFFEN    |Differential Input Mode Control
N     * |        |          |Differential input voltage (Vdiff) = Vplus - Vminus,.
N     * |        |          |where Vplus is the analog input; Vminus is the inverted analog input.
N     * |        |          |The Vplus of differential input paired channel x is from ADC0_CHy pin; Vminus is from ADC0_CHz pin, x=0,1..5, y=2*x, z=y+1.
N     * |        |          |0 = Single-end analog input mode.
N     * |        |          |1 = Differential analog input mode.
N     * |        |          |Note: In Differential Input mode, only the even number of the two corresponding channels needs to be enabled in ADCHER register
N     * |        |          |The conversion result will be placed to the corresponding data register of the enabled channel.
N     * |[11]    |ADST      |A/D Conversion Start
N     * |        |          |ADST bit can be set to 1 from four sources: software, external pin STADC, PWM trigger and Timer trigger
N     * |        |          |ADST will be cleared to 0 by hardware automatically at the ends of Single mode and Single-cycle Scan mode
N     * |        |          |In Continuous Scan mode and Burst mode, A/D conversion is continuously performed until software writes 0 to this bit or chip is reset.
N     * |        |          |0 = Conversion stops and A/D converter enters idle state.
N     * |        |          |1 = Conversion starts.
N     * |[18:16] |SMPTSEL   |ADC Internal Sampling Time Selection
N     * |        |          |Total ADC conversion cycle = sampling cycle + 12.
N     * |        |          |000 = 2 ADC clock for sampling ; 14 ADC clock for complete conversion.
N     * |        |          |001 = 3 ADC clock for sampling ; 15 ADC clock for complete conversion.
N     * |        |          |010 = 4 ADC clock for sampling ; 16 ADC clock for complete conversion.
N     * |        |          |011 = 5 ADC clock for sampling ; 17 ADC clock for complete conversion.
N     * |        |          |100 = 6 ADC clock for sampling ; 18 ADC clock for complete conversion.
N     * |        |          |101 = 7 ADC clock for sampling ; 19 ADC clock for complete conversion.
N     * |        |          |110 = 8 ADC clock for sampling ; 20 ADC clock for complete conversion.
N     * |        |          |111 = 9 ADC clock for sampling ; 21 ADC clock for complete conversion.
N     * |[31]    |DMOF      |Differential Input Mode Output Format
N     * |        |          |If user enables differential input mode, the conversion result can be expressed with binary straight format (unsigned format) or 2's complement format (signed format).
N     * |        |          |0 = A/D Conversion result will be filled in RSLT at ADDRx registers with unsigned format (straight binary format).
N     * |        |          |1 = A/D Conversion result will be filled in RSLT at ADDRx registers with 2's complement format.
N     * @var ADC_T::ADCHER
N     * Offset: 0x84  ADC Channel Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |CHEN      |Analog Input Channel Enable Control
N     * |        |          |Set CHEN[11:0] to enable the corresponding analog input channel 11 ~ 0
N     * |        |          |If DIFFEN bit is set to 1, only the even number channel needs to be enabled.
N     * |        |          |Besides, set CHEN[29] to CHEN[30] will enable internal channel for band-gap voltage and temperature sensor respectively
N     * |        |          |Other bits are reserved.
N     * |        |          |0 = Channel Disabled.
N     * |        |          |1 = Channel Enabled.
N     * |        |          |Note 1 : If the internal channel for band-gap voltage (CHEN[29]) is active, the maximum sampling rate will be TBD SPS
N     * |        |          |Note 2 : If the internal channel for temperature sensor (CHEN[30]) is active, the maximum sampling rate will be 300k SPS
N     * @var ADC_T::ADCMPR
N     * Offset: 0x88/0x8C  ADC Compare Register 0 & 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CMPEN     |Compare Enable Control Bit
N     * |        |          |Set this bit to 1 to enable ADC controller to compare CMPD[11:0] with specified channel conversion result when converted data is loaded into ADDR register.
N     * |        |          |0 = Compare function Disabled.
N     * |        |          |1 = Compare function Enabled.
N     * |[1]     |CMPIE     |Compare Interrupt Enable Control Bit
N     * |        |          |If the compare function is enabled and the compare condition matches the setting of CMPCOND and CMPMATCNT, CMPFx bit will be asserted, in the meanwhile, if CMPIE is set to 1, a compare interrupt request is generated.
N     * |        |          |0 = Compare function interrupt Disabled.
N     * |        |          |1 = Compare function interrupt Enabled.
N     * |[2]     |CMPCOND   |Compare Condition
N     * |        |          |0= Set the compare condition as that when a 12-bit A/D conversion result is less than the 12-bit CMPD (ADCMPRx[27:16]), the internal match counter will increase one.
N     * |        |          |1= Set the compare condition as that when a 12-bit A/D conversion result is greater than or equal to the 12-bit CMPD (ADCMPRx[27:16]), the internal match counter will increase one.
N     * |        |          |Note: When the compare result meets the condition setting, the internal match counter will increase 1, otherwise, the internal match counter will be cleared to 0.
N     * |        |          |Note: When the internal counter reaches to (CMPMATCNT +1), the CMPFx bit will be set.
N     * |[7:3]   |CMPCH     |Compare Channel Selection
N     * |        |          |00000 = Channel 0 conversion result is selected to be compared.
N     * |        |          |00001 = Channel 1 conversion result is selected to be compared.
N     * |        |          |00010 = Channel 2 conversion result is selected to be compared.
N     * |        |          |00011 = Channel 3 conversion result is selected to be compared.
N     * |        |          |00100 = Channel 4 conversion result is selected to be compared.
N     * |        |          |00101 = Channel 5 conversion result is selected to be compared.
N     * |        |          |00110 = Channel 6 conversion result is selected to be compared.
N     * |        |          |00111 = Channel 7 conversion result is selected to be compared.
N     * |        |          |01000 = Channel 8 conversion result is selected to be compared.
N     * |        |          |01001 = Channel 9 conversion result is selected to be compared.
N     * |        |          |01010 = Channel 10 conversion result is selected to be compared.
N     * |        |          |01011 = Channel 11 conversion result is selected to be compared.
N     * |        |          |11101 = Band-gap voltage conversion result is selected to be compared.
N     * |        |          |11110 = Temperature sensor conversion result is selected to be compared.
N     * |        |          |Others = Reserved.
N     * |[11:8]  |CMPMATCNT |Compare Match Count
N     * |        |          |When the specified A/D channel analog conversion result matches the compare condition defined by CMPCOND, the internal match counter will increase 1, otherwise, the internal match counter will be cleared to 0
N     * |        |          |When the internal counter reaches the value to (CMPMATCNT +1), the CMPFx bit will be set.
N     * |[15]    |CMPWEN    |Compare Window Mode Enable Bit
N     * |        |          |0 = Compare Window Mode Disabled.
N     * |        |          |1 = Compare Window Mode Enabled.
N     * |        |          |Note: This bit is only presented in ADCMPR0 register.
N     * |[27:16] |CMPD      |Comparison Data
N     * |        |          |The 12-bit data is used to compare with conversion result of specified channel.
N     * |        |          |Note: CMPD should be filled in unsigned format (straight binary format).
N     * @var ADC_T::ADSR0
N     * Offset: 0x90  ADC Status Register0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ADF       |A/D Conversion End Flag
N     * |        |          |A status flag that indicates the end of A/D conversion. Software can write 1 to clear this bit.
N     * |        |          |ADF is set to 1 at the following three conditions:
N     * |        |          |1. When A/D conversion ends in Single mode.
N     * |        |          |2
N     * |        |          |When A/D conversion ends on all specified channels in Single-cycle Scan mode and Continuous Scan mode.
N     * |        |          |3. When more than 8 samples in FIFO in Burst mode.
N     * |[1]     |CMPF0     |Compare Flag 0
N     * |        |          |When the A/D conversion result of the selected channel meets setting condition in ADCMPR0 then this bit is set to 1
N     * |        |          |This bit is cleared by writing 1 to it.
N     * |        |          |0 = Conversion result in ADDR does not meet ADCMPR0 setting.
N     * |        |          |1 = Conversion result in ADDR meets ADCMPR0 setting.
N     * |[2]     |CMPF1     |Compare Flag 1
N     * |        |          |When the A/D conversion result of the selected channel meets setting condition in ADCMPR1 then this bit is set to 1; it is cleared by writing 1 to it
N     * |        |          |0 = Conversion result in ADDR does not meet ADCMPR1 setting.
N     * |        |          |1 = Conversion result in ADDR meets ADCMPR1 setting.
N     * |[7]     |BUSY      |BUSY/IDLE
N     * |        |          |This bit is a mirror of ADST bit in ADCR register. It is read only.
N     * |        |          |0 = A/D converter is in idle state.
N     * |        |          |1 = A/D converter is busy at conversion.
N     * |[8]     |VALIDF    |Data Valid Flag
N     * |        |          |If any one of VALID (ADDRx[17]) is set, this flag will be set to 1. This is a read only bit.
N     * |        |          |Note: When ADC is in burst mode and any conversion result is valid, this flag will be set to 1
N     * |[16]    |OVERRUNF  |Overrun Flag
N     * |        |          |If any one of OVERRUN (ADDRx[16]) is set, this flag will be set to 1. This is a read only bit.
N     * |        |          |Note: When ADC is in burst mode and the FIFO is overrun, this flag will be set to 1.
N     * |[31:27] |CHANNEL   |Current Conversion Channel
N     * |        |          |When BUSY=1, this filed reflects current conversion channel
N     * |        |          |When BUSY=0, it shows the number of the next converted channel.
N     * |        |          |It is read only.
N     * @var ADC_T::ADSR1
N     * Offset: 0x94  ADC Status Register1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |VALID     |Data Valid Flag
N     * |        |          |VALID[30:29, 11:0] are the mirror of the VALID bits in ADDR30[17] ~ ADDR29[17], ADDR11[17]~ ADDR0[17]
N     * |        |          |The other bits are reserved.
N     * |        |          |Note: When ADC is in burst mode and any conversion result is valid, VALID[30:29, 11:0] will be set to 1.
N     * @var ADC_T::ADSR2
N     * Offset: 0x98  ADC Status Register2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |OVERRUN   |Overrun Flag
N     * |        |          |OVERRUN[30:29, 11:0] are the mirror of the OVERRUN bit in ADDR30[16] ~ADDR29[16], ADDR11[16] ~ ADDR0[16]
N     * |        |          |The other bits are reserved.
N     * |        |          |Note: When ADC is in burst mode and the FIFO is overrun, OVERRUN[30:29, 11:0] will be set to 1.
N     * @var ADC_T::ADTDCR
N     * Offset: 0x9C  ADC Trigger Delay Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |PTDT      |PWM Trigger Delay Time
N     * |        |          |Set this field will delay ADC start conversion time after PWM trigger.
N     * |        |          |PWM trigger delay time is (4 * PTDT) * system clock
N     * @var ADC_T::ADPDMA
N     * Offset: 0x100  ADC PDMA Current Transfer Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[17:0]  |CURDAT    |ADC PDMA Current Transfer Data Register
N     * |        |          |When PDMA transferring, read this register can monitor current PDMA transfer data.
N     * |        |          |Current PDMA transfer data could be the content of ADDR0 ~ ADDR11 and ADDR29 ~ ADDR30.
N     * |        |          |This is a read only register.
N     */
N    __I  uint32_t ADDR[32];              /*!< [0x0000~0x007c] A/D Data Register 0~31                                    */
X    volatile const  uint32_t ADDR[32];               
N    __IO uint32_t ADCR;                  /*!< [0x0080] ADC Control Register                                             */
X    volatile uint32_t ADCR;                   
N    __IO uint32_t ADCHER;                /*!< [0x0084] ADC Channel Enable Register                                      */
X    volatile uint32_t ADCHER;                 
N    __IO uint32_t ADCMPR[2];             /*!< [0x0088/0x008c] ADC Compare Register 0 & 1                                */
X    volatile uint32_t ADCMPR[2];              
N    __IO uint32_t ADSR0;                 /*!< [0x0090] ADC Status Register0                                             */
X    volatile uint32_t ADSR0;                  
N    __I  uint32_t ADSR1;                 /*!< [0x0094] ADC Status Register1                                             */
X    volatile const  uint32_t ADSR1;                  
N    __I  uint32_t ADSR2;                 /*!< [0x0098] ADC Status Register2                                             */
X    volatile const  uint32_t ADSR2;                  
N    __IO uint32_t ADTDCR;                /*!< [0x009c] ADC Trigger Delay Control Register                               */
X    volatile uint32_t ADTDCR;                 
N    __I  uint32_t RESERVE0[24];
X    volatile const  uint32_t RESERVE0[24];
N    __I  uint32_t ADPDMA;                /*!< [0x0100] ADC PDMA Current Transfer Data Register                          */
X    volatile const  uint32_t ADPDMA;                 
N} ADC_T;
N
N/**
N    @addtogroup ADC_CONST ADC Bit Field Definition
N    Constant Definitions for ADC Controller
N@{ */
N
N/* ADDR Bit Field Definitions */
N#define ADC_ADDR_RSLT_Pos               (0)                                                /*!< ADC_T::ADDR: RSLT Position             */
N#define ADC_ADDR_RSLT_Msk               (0xfffful << ADC_ADDR_RSLT_Pos)                    /*!< ADC_T::ADDR: RSLT Mask                 */
N
N#define ADC_ADDR_OVERRUN_Pos            (16)                                               /*!< ADC_T::ADDR: OVERRUN Position          */
N#define ADC_ADDR_OVERRUN_Msk            (0x1ul << ADC_ADDR_OVERRUN_Pos)                    /*!< ADC_T::ADDR: OVERRUN Mask              */
N
N#define ADC_ADDR_VALID_Pos              (17)                                               /*!< ADC_T::ADDR: VALID Position            */
N#define ADC_ADDR_VALID_Msk              (0x1ul << ADC_ADDR_VALID_Pos)                      /*!< ADC_T::ADDR: VALID Mask                */
N
N/* ADCR Bit Field Definitions */
N#define ADC_ADCR_ADEN_Pos                (0)                                               /*!< ADC_T::ADCR: ADEN Position             */
N#define ADC_ADCR_ADEN_Msk                (0x1ul << ADC_ADCR_ADEN_Pos)                      /*!< ADC_T::ADCR: ADEN Mask                 */
N
N#define ADC_ADCR_ADIE_Pos                (1)                                               /*!< ADC_T::ADCR: ADIE Position             */
N#define ADC_ADCR_ADIE_Msk                (0x1ul << ADC_ADCR_ADIE_Pos)                      /*!< ADC_T::ADCR: ADIE Mask                 */
N
N#define ADC_ADCR_ADMD_Pos                (2)                                               /*!< ADC_T::ADCR: ADMD Position             */
N#define ADC_ADCR_ADMD_Msk                (0x3ul << ADC_ADCR_ADMD_Pos)                      /*!< ADC_T::ADCR: ADMD Mask                 */
N
N#define ADC_ADCR_TRGS_Pos                (4)                                               /*!< ADC_T::ADCR: TRGS Position             */
N#define ADC_ADCR_TRGS_Msk                (0x3ul << ADC_ADCR_TRGS_Pos)                      /*!< ADC_T::ADCR: TRGS Mask                 */
N
N#define ADC_ADCR_TRGCOND_Pos             (6)                                               /*!< ADC_T::ADCR: TRGCOND Position          */
N#define ADC_ADCR_TRGCOND_Msk             (0x3ul << ADC_ADCR_TRGCOND_Pos)                   /*!< ADC_T::ADCR: TRGCOND Mask              */
N
N#define ADC_ADCR_TRGEN_Pos               (8)                                               /*!< ADC_T::ADCR: TRGEN Position            */
N#define ADC_ADCR_TRGEN_Msk               (0x1ul << ADC_ADCR_TRGEN_Pos)                     /*!< ADC_T::ADCR: TRGEN Mask                */
N
N#define ADC_ADCR_PTEN_Pos                (9)                                               /*!< ADC_T::ADCR: PTEN Position             */
N#define ADC_ADCR_PTEN_Msk                (0x1ul << ADC_ADCR_PTEN_Pos)                      /*!< ADC_T::ADCR: PTEN Mask                 */
N
N#define ADC_ADCR_DIFFEN_Pos              (10)                                              /*!< ADC_T::ADCR: DIFFEN Position           */
N#define ADC_ADCR_DIFFEN_Msk              (0x1ul << ADC_ADCR_DIFFEN_Pos)                    /*!< ADC_T::ADCR: DIFFEN Mask               */
N
N#define ADC_ADCR_ADST_Pos                (11)                                              /*!< ADC_T::ADCR: ADST Position             */
N#define ADC_ADCR_ADST_Msk                (0x1ul << ADC_ADCR_ADST_Pos)                      /*!< ADC_T::ADCR: ADST Mask                 */
N
N#define ADC_ADCR_SMPTSEL_Pos             (16)                                              /*!< ADC_T::ADCR: SMPTSEL Position          */
N#define ADC_ADCR_SMPTSEL_Msk             (0x7ul << ADC_ADCR_SMPTSEL_Pos)                   /*!< ADC_T::ADCR: SMPTSEL Mask              */
N
N#define ADC_ADCR_DMOF_Pos                (31)                                              /*!< ADC_T::ADCR: DMOF Position             */
N#define ADC_ADCR_DMOF_Msk                (0x1ul << ADC_ADCR_DMOF_Pos)                      /*!< ADC_T::ADCR: DMOF Mask                 */
N
N/* ADCHER Bit Field Definitions */
N#define ADC_ADCHER_CHEN_Pos              (0)                                               /*!< ADC_T::ADCHER: CHEN Position           */
N#define ADC_ADCHER_CHEN_Msk              (0xfffffffful << ADC_ADCHER_CHEN_Pos)             /*!< ADC_T::ADCHER: CHEN Mask               */
N
N/* ADCMPR Bit Field Definitions */
N#define ADC_ADCMPR_CMPEN_Pos             (0)                                               /*!< ADC_T::ADCMPR: CMPEN Position          */
N#define ADC_ADCMPR_CMPEN_Msk             (0x1ul << ADC_ADCMPR_CMPEN_Pos)                   /*!< ADC_T::ADCMPR: CMPEN Mask              */
N
N#define ADC_ADCMPR_CMPIE_Pos             (1)                                               /*!< ADC_T::ADCMPR: CMPIE Position          */
N#define ADC_ADCMPR_CMPIE_Msk             (0x1ul << ADC_ADCMPR_CMPIE_Pos)                   /*!< ADC_T::ADCMPR: CMPIE Mask              */
N
N#define ADC_ADCMPR_CMPCOND_Pos           (2)                                               /*!< ADC_T::ADCMPR: CMPCOND Position        */
N#define ADC_ADCMPR_CMPCOND_Msk           (0x1ul << ADC_ADCMPR_CMPCOND_Pos)                 /*!< ADC_T::ADCMPR: CMPCOND Mask            */
N
N#define ADC_ADCMPR_CMPCH_Pos             (3)                                               /*!< ADC_T::ADCMPR: CMPCH Position          */
N#define ADC_ADCMPR_CMPCH_Msk             (0x1ful << ADC_ADCMPR_CMPCH_Pos)                  /*!< ADC_T::ADCMPR: CMPCH Mask              */
N
N#define ADC_ADCMPR_CMPMATCNT_Pos         (8)                                               /*!< ADC_T::ADCMPR: CMPMATCNT Position      */
N#define ADC_ADCMPR_CMPMATCNT_Msk         (0xful << ADC_ADCMPR_CMPMATCNT_Pos)               /*!< ADC_T::ADCMPR: CMPMATCNT Mask          */
N
N#define ADC_ADCMPR_CMPWEN_Pos            (15)                                              /*!< ADC_T::ADCMPR: CMPWEN Position         */
N#define ADC_ADCMPR_CMPWEN_Msk            (0x1ul << ADC_ADCMPR_CMPWEN_Pos)                  /*!< ADC_T::ADCMPR: CMPWEN Mask             */
N
N#define ADC_ADCMPR_CMPD_Pos              (16)                                              /*!< ADC_T::ADCMPR: CMPD Position           */
N#define ADC_ADCMPR_CMPD_Msk              (0xffful << ADC_ADCMPR_CMPD_Pos)                  /*!< ADC_T::ADCMPR: CMPD Mask               */
N
N/* ADSR0 Bit Field Definitions */
N#define ADC_ADSR0_ADF_Pos                (0)                                               /*!< ADC_T::ADSR0: ADF Position             */
N#define ADC_ADSR0_ADF_Msk                (0x1ul << ADC_ADSR0_ADF_Pos)                      /*!< ADC_T::ADSR0: ADF Mask                 */
N
N#define ADC_ADSR0_CMPF0_Pos              (1)                                               /*!< ADC_T::ADSR0: CMPF0 Position           */
N#define ADC_ADSR0_CMPF0_Msk              (0x1ul << ADC_ADSR0_CMPF0_Pos)                    /*!< ADC_T::ADSR0: CMPF0 Mask               */
N
N#define ADC_ADSR0_CMPF1_Pos              (2)                                               /*!< ADC_T::ADSR0: CMPF1 Position           */
N#define ADC_ADSR0_CMPF1_Msk              (0x1ul << ADC_ADSR0_CMPF1_Pos)                    /*!< ADC_T::ADSR0: CMPF1 Mask               */
N
N#define ADC_ADSR0_BUSY_Pos               (7)                                               /*!< ADC_T::ADSR0: BUSY Position            */
N#define ADC_ADSR0_BUSY_Msk               (0x1ul << ADC_ADSR0_BUSY_Pos)                     /*!< ADC_T::ADSR0: BUSY Mask                */
N
N#define ADC_ADSR0_VALIDF_Pos             (8)                                               /*!< ADC_T::ADSR0: VALIDF Position          */
N#define ADC_ADSR0_VALIDF_Msk             (0x1ul << ADC_ADSR0_VALIDF_Pos)                   /*!< ADC_T::ADSR0: VALIDF Mask              */
N
N#define ADC_ADSR0_OVERRUNF_Pos           (16)                                              /*!< ADC_T::ADSR0: OVERRUNF Position        */
N#define ADC_ADSR0_OVERRUNF_Msk           (0x1ul << ADC_ADSR0_OVERRUNF_Pos)                 /*!< ADC_T::ADSR0: OVERRUNF Mask            */
N
N#define ADC_ADSR0_CHANNEL_Pos            (27)                                              /*!< ADC_T::ADSR0: CHANNEL Position         */
N#define ADC_ADSR0_CHANNEL_Msk            (0x1ful << ADC_ADSR0_CHANNEL_Pos)                 /*!< ADC_T::ADSR0: CHANNEL Mask             */
N
N/* ADSR1 Bit Field Definitions */
N#define ADC_ADSR1_VALID_Pos              (0)                                               /*!< ADC_T::ADSR1: VALID Position           */
N#define ADC_ADSR1_VALID_Msk              (0xfffffffful << ADC_ADSR1_VALID_Pos)             /*!< ADC_T::ADSR1: VALID Mask               */
N
N/* ADSR2 Bit Field Definitions */
N#define ADC_ADSR2_OVERRUN_Pos            (0)                                               /*!< ADC_T::ADSR2: OVERRUN Position         */
N#define ADC_ADSR2_OVERRUN_Msk            (0xfffffffful << ADC_ADSR2_OVERRUN_Pos)           /*!< ADC_T::ADSR2: OVERRUN Mask             */
N
N/* ADTDCR Bit Field Definitions */
N#define ADC_ADTDCR_PTDT_Pos              (0)                                               /*!< ADC_T::ADTDCR: PTDT Position           */
N#define ADC_ADTDCR_PTDT_Msk              (0xfful << ADC_ADTDCR_PTDT_Pos)                   /*!< ADC_T::ADTDCR: PTDT Mask               */
N
N/* ADPDMA Bit Field Definitions */
N#define ADC_ADPDMA_CURDAT_Pos            (0)                                               /*!< ADC_T::ADPDMA: CURDAT Position         */
N#define ADC_ADPDMA_CURDAT_Msk            (0x3fffful << ADC_ADPDMA_CURDAT_Pos)              /*!< ADC_T::ADPDMA: CURDAT Mask             */
N
N/**@}*/ /* ADC_CONST */
N/**@}*/ /* end of ADC register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __ADC_REG_H__ */
L 153 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "bpwm_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\bpwm_reg.h" 1
N/**************************************************************************//**
N * @file     bpwm_reg.h
N * @version  V1.00
N * @brief    BPWM register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __BPWM_REG_H__
N#define __BPWM_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup BPWM Basic Pulse Width Modulation Controller (BPWM)
N    Memory Mapped Structure for BPWM Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var BPWM_T::CTL0
N     * Offset: 0x00  BPWM Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CTRLDn    |Center Load Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Center Lodaing mode is disable for corresponding BPWM channel n
N     * |        |          |1 = Center Lodaing mode is enable for corresponding BPWM channel n
N     * |        |          |In up-down counter type, PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the center point of a period
N     * |[16]    |IMMLDENn  |Immediately Load Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the end point or center point of each period by setting CTRLD bit.
N     * |        |          |1 = PERIOD/CMPDAT will load to PBUF and CMPBUF immediately when software update PERIOD/CMPDAT.
N     * |        |          |Note: If IMMLDENn is enabled, CTRLDn will be invalid.
N     * |[30]    |DBGHALT   |ICE Debug Mode Counter Halt (Write Protect)
N     * |        |          |If counter halt is enabled, BPWM all counters will keep current value until exit ICE debug mode.
N     * |        |          |0 = ICE debug mode counter halt disable.
N     * |        |          |1 = ICE debug mode counter halt enable.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * |[31]    |DBGTRIOFF |ICE Debug Mode Acknowledge Disable (Write Protect)
N     * |        |          |0 = ICE debug mode acknowledgement effects BPWM output.
N     * |        |          |BPWM pin will be forced as tri-state while ICE debug mode acknowledged.
N     * |        |          |1 = ICE debug mode acknowledgement disabled.
N     * |        |          |BPWM pin will keep output no matter ICE debug mode acknowledged or not.
N     * |        |          |Note: This register is write protected. Refer toSYS_REGLCTL register.
N     * @var BPWM_T::CTL1
N     * Offset: 0x04  BPWM Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |CNTTYPE0  |BPWM Counter Behavior Type 0
N     * |        |          |00 = Up counter type (supports in capture mode).
N     * |        |          |01 = Down count type (supports in capture mode).
N     * |        |          |10 = Up-down counter type.
N     * |        |          |11 = Reserved.
N     * @var BPWM_T::CLKSRC
N     * Offset: 0x10  BPWM Clock Source Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |ECLKSRC0  |BPWM_CH0/1 External Clock Source Select
N     * |        |          |000 = BPWMx_CLK, x denotes 0, 1.
N     * |        |          |001 = TIMER0 overflow.
N     * |        |          |010 = TIMER1 overflow.
N     * |        |          |011 = TIMER2 overflow.
N     * |        |          |100 = TIMER3 overflow.
N     * |        |          |Others = Reserved.
N     * @var BPWM_T::CLKPSC
N     * Offset: 0x14  BPWM Clock Pre-scale Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |CLKPSC    |BPWM Counter Clock Pre-scale
N     * |        |          |The clock of BPWM counter is decided by clock prescaler
N     * |        |          |Each BPWM pair share one BPWM counter clock prescaler
N     * |        |          |The clock of BPWM counter is divided by (CLKPSC+ 1)
N     * @var BPWM_T::CNTEN
N     * Offset: 0x20  BPWM Counter Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTEN0    |BPWM Counter Enable 0
N     * |        |          |0 = BPWM Counter and clock prescaler Stop Running.
N     * |        |          |1 = BPWM Counter and clock prescaler Start Running.
N     * @var BPWM_T::CNTCLR
N     * Offset: 0x24  BPWM Clear Counter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTCLR0   |Clear BPWM Counter Control Bit 0
N     * |        |          |It is automatically cleared by hardware.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear 16-bit BPWM counter to 0000H.
N     * @var BPWM_T::PERIOD
N     * Offset: 0x30  BPWM Period Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |PERIOD    |BPWM Period Register
N     * |        |          |Up-Count mode: In this mode, BPWM counter counts from 0 to PERIOD, and restarts from 0.
N     * |        |          |Down-Count mode: In this mode, BPWM counter counts from PERIOD to 0, and restarts from PERIOD.
N     * |        |          |BPWM period time = (PERIOD+1) * BPWM_CLK period.
N     * |        |          |Up-Down-Count mode: In this mode, BPWM counter counts from 0 to PERIOD, then decrements to 0 and repeats again.
N     * |        |          |BPWM period time = 2 * PERIOD * BPWM_CLK period.
N     * @var BPWM_T::CMPDAT
N     * Offset: 0x50~0x64  BPWM Comparator Register 0~5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CMP       |BPWM Comparator Register
N     * |        |          |CMP use to compare with CNT to generate BPWM waveform, interrupt and trigger ADC.
N     * |        |          |In independent mode, BPWM_CMPDAT0~5 denote as 6 independent BPWM_CH0~5 compared point.
N     * @var BPWM_T::CNT
N     * Offset: 0x90  BPWM Counter Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CNT       |BPWM Data Register (Read Only)
N     * |        |          |User can monitor CNT to know the current value in 16-bit period counter.
N     * |[16]    |DIRF      |BPWM Direction Indicator Flag (Read Only)
N     * |        |          |0 = Counter is Down count.
N     * |        |          |1 = Counter is UP count.
N     * @var BPWM_T::WGCTL0
N     * Offset: 0xB0  BPWM Generation Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |ZPCTLn    |BPWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM zero point output Low.
N     * |        |          |10 = BPWM zero point output High.
N     * |        |          |11 = BPWM zero point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to zero.
N     * |[27:16] |PRDPCTLn  |BPWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM period (center) point output Low.
N     * |        |          |10 = BPWM period (center) point output High.
N     * |        |          |11 = BPWM period (center) point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter count to (PERIODn+1).
N     * |        |          |Note: This bit is center point control when BPWM counter operating in up-down counter type.
N     * @var BPWM_T::WGCTL1
N     * Offset: 0xB4  BPWM Generation Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |CMPUCTLn  |BPWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare up point output Low.
N     * |        |          |10 = BPWM compare up point output High.
N     * |        |          |11 = BPWM compare up point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter up count to CMPDAT.
N     * |[27:16] |CMPDCTLn  |BPWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = BPWM compare down point output Low.
N     * |        |          |10 = BPWM compare down point output High.
N     * |        |          |11 = BPWM compare down point output Toggle.
N     * |        |          |BPWM can control output level when BPWM counter down count to CMPDAT.
N     * @var BPWM_T::MSKEN
N     * Offset: 0xB8  BPWM Mask Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |MSKENn    |BPWM Mask Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |The BPWM output signal will be masked when this bit is enabled
N     * |        |          |The corresponding BPWM channel n will output MSKDATn (BPWM_MSK[5:0]) data.
N     * |        |          |0 = BPWM output signal is non-masked.
N     * |        |          |1 = BPWM output signal is masked and output MSKDATn data.
N     * @var BPWM_T::MSK
N     * Offset: 0xBC  BPWM Mask Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |MSKDATn   |BPWM Mask Data Bit
N     * |        |          |This data bit control the state of BPWMn output pin, if corresponding mask function is enabled
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Output logic low to BPWMn.
N     * |        |          |1 = Output logic high to BPWMn.
N     * @var BPWM_T::POLCTL
N     * Offset: 0xD4  BPWM Pin Polar Inverse Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |PINVn     |BPWM PIN Polar Inverse Control Bits
N     * |        |          |The register controls polarity state of BPWM output
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM output polar inverse Disabled.
N     * |        |          |1 = BPWM output polar inverse Enabled.
N     * @var BPWM_T::POEN
N     * Offset: 0xD8  BPWM Output Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |POENn     |BPWM Pin Output Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM pin at tri-state.
N     * |        |          |1 = BPWM pin in output mode.
N     * @var BPWM_T::INTEN
N     * Offset: 0xE0  BPWM Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ZIEN0     |BPWM Zero Point Interrupt Enable 0
N     * |        |          |0 = Zero point interrupt Disabled.
N     * |        |          |1 = Zero point interrupt Enabled.
N     * |[8]     |PIEN0     |BPWM Period Point Interrupt Enable 0
N     * |        |          |0 = Period point interrupt Disabled.
N     * |        |          |1 = Period point interrupt Enabled.
N     * |        |          |Note: When up-down counter type period point means center point.
N     * |[21:16] |CMPUIENn  |BPWM Compare Up Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare up count interrupt Disabled.
N     * |        |          |1 = Compare up count interrupt Enabled.
N     * |        |          |.
N     * |[29:24] |CMPDIENn  |BPWM Compare Down Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Compare down count interrupt Disabled.
N     * |        |          |1 = Compare down count interrupt Enabled.
N     * @var BPWM_T::INTSTS0
N     * Offset: 0xE8  BPWM Interrupt Flag Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ZIF0      |BPWM Zero Point Interrupt Flag 0
N     * |        |          |This bit is set by hardware when BPWM_CH0 counter reaches zero, software can write 1 to clear this bit to zero.
N     * |[8]     |PIF0      |BPWM Period Point Interrupt Flag 0
N     * |        |          |This bit is set by hardware when BPWM_CH0 counter reaches BPWM_PERIOD0, software can write 1 to clear this bit to zero.
N     * |[21:16] |CMPUIFn   |BPWM Compare Up Count Interrupt Flag
N     * |        |          |Flag is set by hardware when BPWM counter up count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note1: If CMPDAT equal to PERIOD, this flag is not working in up counter type selection.
N     * |[29:24] |CMPDIFn   |BPWM Compare Down Count Interrupt Flag
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Flag is set by hardware when BPWM counter down count and reaches BPWM_CMPDATn, software can clear this bit by writing 1 to it.
N     * |        |          |Note1: If CMPDAT equal to PERIOD, this flag is not working in down counter type selection.
N     * @var BPWM_T::ADCTS0
N     * Offset: 0xF8  BPWM Trigger ADC Source Select Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |TRGSEL0   |BPWM_CH0 Trigger ADC Source Select
N     * |        |          |0000 = BPWM_CH0 zero point.
N     * |        |          |0001 = BPWM_CH0 period point.
N     * |        |          |0010 = BPWM_CH0 zero or period point.
N     * |        |          |0011 = BPWM_CH0 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH0 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH1 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH1 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[7]     |TRGEN0    |BPWM_CH0 Trigger ADC Enable Bit
N     * |[11:8]  |TRGSEL1   |BPWM_CH1 Trigger ADC Source Select
N     * |        |          |0000 = BPWM_CH0 zero point.
N     * |        |          |0001 = BPWM_CH0 period point.
N     * |        |          |0010 = BPWM_CH0 zero or period point.
N     * |        |          |0011 = BPWM_CH0 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH0 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH1 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH1 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[15]    |TRGEN1    |BPWM_CH1 Trigger ADC Enable Bit
N     * |[19:16] |TRGSEL2   |BPWM_CH2 Trigger ADC Source Select
N     * |        |          |0000 = BPWM_CH2 zero point.
N     * |        |          |0001 = BPWM_CH2 period point.
N     * |        |          |0010 = BPWM_CH2 zero or period point.
N     * |        |          |0011 = BPWM_CH2 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH2 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH3 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH3 down-count CMPDAT point.
N     * |        |          |Others reserved.
N     * |[23]    |TRGEN2    |BPWM_CH2 Trigger ADC Enable Bit
N     * |[27:24] |TRGSEL3   |BPWM_CH3 Trigger ADC Source Select
N     * |        |          |0000 = BPWM_CH2 zero point.
N     * |        |          |0001 = BPWM_CH2 period point.
N     * |        |          |0010 = BPWM_CH2 zero or period point.
N     * |        |          |0011 = BPWM_CH2 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH2 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH3 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH3 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[31]    |TRGEN3    |BPWM_CH3 Trigger ADC Enable Bit
N     * @var BPWM_T::ADCTS1
N     * Offset: 0xFC  BPWM Trigger ADC Source Select Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |TRGSEL4   |BPWM_CH4 Trigger ADC Source Select
N     * |        |          |0000 = BPWM_CH4 zero point.
N     * |        |          |0001 = BPWM_CH4 period point.
N     * |        |          |0010 = BPWM_CH4 zero or period point.
N     * |        |          |0011 = BPWM_CH4 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH4 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH5 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH5 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[7]     |TRGEN4    |BPWM_CH4 Trigger ADC Enable Bit
N     * |[11:8]  |TRGSEL5   |BPWM_CH5 Trigger ADC Source Select
N     * |        |          |0000 = BPWM_CH4 zero point.
N     * |        |          |0001 = BPWM_CH4 period point.
N     * |        |          |0010 = BPWM_CH4 zero or period point.
N     * |        |          |0011 = BPWM_CH4 up-count CMPDAT point.
N     * |        |          |0100 = BPWM_CH4 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = BPWM_CH5 up-count CMPDAT point.
N     * |        |          |1001 = BPWM_CH5 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[15]    |TRGEN5    |BPWM_CH5 Trigger ADC Enable Bit
N     * @var BPWM_T::SSCTL
N     * Offset: 0x110  BPWM Synchronous Start Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SSEN0     |BPWM Synchronous Start Function Enable 0
N     * |        |          |When synchronous start function is enabled, the BPWM_CH0 counter enable bit (CNTEN0) can be enabled by writing BPWM synchronous start trigger bit (CNTSEN).
N     * |        |          |0 = BPWM synchronous start function Disabled.
N     * |        |          |1 = BPWM synchronous start function Enabled.
N     * |[9:8]   |SSRC      |BPWM Synchronous Start Source Select
N     * |        |          |00 = Synchronous start source come from BPWM0.
N     * |        |          |01 = Synchronous start source come from BPWM1.
N     * |        |          |10 = Synchronous start source come from PWM0.
N     * |        |          |11 = Synchronous start source come from PWM1.
N     * @var BPWM_T::SSTRG
N     * Offset: 0x114  BPWM Synchronous Start Trigger Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTSEN    |BPWM Counter Synchronous Start Enable (Write Only)
N     * |        |          |If BPWM synchronous start function is Enabled
N     * |        |          |Set this bit is used to make selected BPWM channels (include BPWM0_CHn , BPWM1_CHn, n=0~5) start counting at the same time.
N     * |        |          |Writing this bit to 1 will also set the counter enable bit (CNTENn, n denotes channel 0 to 5) if correlated BPWM channel counter synchronous start function is enabled.
N     * @var BPWM_T::STATUS
N     * Offset: 0x120  BPWM Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTMAX0   |Time-base Counter 0 Equal to 0xFFFF Latched Status
N     * |        |          |0 = Indicates the time-base counter never reached its maximum value 0xFFFF.
N     * |        |          |1 = Indicates the time-base counter reached its maximum value, software can write 1 to clear this bit.
N     * |[21:16] |ADCTRGn   |ADC Start of Conversion Status
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Indicates no ADC start of conversion trigger event has occurred.
N     * |        |          |1 = Indicates an ADC start of conversion trigger event has occurred, software can write 1 to clear this bit.
N     * @var BPWM_T::CAPINEN
N     * Offset: 0x200  BPWM Capture Input Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CAPINENn  |Capture Input Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = BPWM Channel capture input path Disabled
N     * |        |          |The input of BPWM channel capture function is always regarded as 0.
N     * |        |          |1 = BPWM Channel capture input path Enabled
N     * |        |          |The input of BPWM channel capture function comes from correlative multifunction pin.
N     * @var BPWM_T::CAPCTL
N     * Offset: 0x204  BPWM Capture Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CAPENn    |Capture Function Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture function Disabled. RCAPDAT/FCAPDAT register will not be updated.
N     * |        |          |1 = Capture function Enabled
N     * |        |          |Capture latched the BPWM counter value when detected rising or falling edge of input signal and saved to RCAPDAT (Rising latch) and FCAPDAT (Falling latch).
N     * |[13:8]  |CAPINVn   |Capture Inverter Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture source inverter Disabled.
N     * |        |          |1 = Capture source inverter Enabled. Reverse the input signal from GPIO.
N     * |[21:16] |RCRLDENn  |Rising Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Rising capture reload counter Disabled.
N     * |        |          |1 = Rising capture reload counter Enabled.
N     * |[29:24] |FCRLDENn  |Falling Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Falling capture reload counter Disabled.
N     * |        |          |1 = Falling capture reload counter Enabled.
N     * @var BPWM_T::CAPSTS
N     * Offset: 0x208  BPWM Capture Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CRLIFOVn  |Capture Rising Latch Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if rising latch happened when the corresponding CRLIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CRLIF.
N     * |[13:8]  |CFLIFOVn  |Capture Falling Latch Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if falling latch happened when the corresponding CFLIF is 1
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CFLIF.
N     * @var BPWM_T::RCAPDAT0
N     * Offset: 0x20C  BPWM Rising Capture Data Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |BPWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::FCAPDAT0
N     * Offset: 0x210  BPWM Falling Capture Data Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |BPWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::RCAPDAT1
N     * Offset: 0x214  BPWM Rising Capture Data Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |BPWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::FCAPDAT1
N     * Offset: 0x218  BPWM Falling Capture Data Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |BPWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::RCAPDAT2
N     * Offset: 0x21C  BPWM Rising Capture Data Register 2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |BPWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::FCAPDAT2
N     * Offset: 0x220  BPWM Falling Capture Data Register 2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |BPWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::RCAPDAT3
N     * Offset: 0x224  BPWM Rising Capture Data Register 3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |BPWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::FCAPDAT3
N     * Offset: 0x228  BPWM Falling Capture Data Register 3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |BPWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::RCAPDAT4
N     * Offset: 0x22C  BPWM Rising Capture Data Register 4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |BPWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::FCAPDAT4
N     * Offset: 0x230  BPWM Falling Capture Data Register 4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |BPWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::RCAPDAT5
N     * Offset: 0x234  BPWM Rising Capture Data Register 5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |BPWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::FCAPDAT5
N     * Offset: 0x238  BPWM Falling Capture Data Register 5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |BPWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the BPWM counter value will be saved in this register.
N     * @var BPWM_T::CAPIEN
N     * Offset: 0x250  BPWM Capture Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CAPRIENn  |BPWM Capture Rising Latch Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture rising edge latch interrupt Disabled.
N     * |        |          |1 = Capture rising edge latch interrupt Enabled.
N     * |[13:8]  |CAPFIENn  |BPWM Capture Falling Latch Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = Capture falling edge latch interrupt Disabled.
N     * |        |          |1 = Capture falling edge latch interrupt Enabled.
N     * @var BPWM_T::CAPIF
N     * Offset: 0x254  BPWM Capture Interrupt Flag Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CRLIFn    |BPWM Capture Rising Latch Interrupt Flag
N     * |        |          |This bit is writing 1 to clear. Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture rising latch condition happened.
N     * |        |          |1 = Capture rising latch condition happened, this flag will be set to high.
N     * |[13:8]  |CFLIFn    |BPWM Capture Falling Latch Interrupt Flag
N     * |        |          |This bit is writing 1 to clear. Each bit n controls the corresponding BPWM channel n.
N     * |        |          |0 = No capture falling latch condition happened.
N     * |        |          |1 = Capture falling latch condition happened, this flag will be set to high.
N     * @var BPWM_T::PBUF
N     * Offset: 0x304  BPWM PERIOD Buffer
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |PBUF      |BPWM Period Register Buffer (Read Only)
N     * |        |          |Used as PERIOD active register.
N     * @var BPWM_T::CMPBUF
N     * Offset: 0x31C~0x330  BPWM CMPDAT0~5 Buffer
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CMPBUF    |BPWM Comparator Register Buffer (Read Only)
N     * |        |          |Used as CMP active register.
N     */
N    __IO uint32_t CTL0;                  /*!< [0x0000] BPWM Control Register 0                                          */
X    volatile uint32_t CTL0;                   
N    __IO uint32_t CTL1;                  /*!< [0x0004] BPWM Control Register 1                                          */
X    volatile uint32_t CTL1;                   
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __IO uint32_t CLKSRC;                /*!< [0x0010] BPWM Clock Source Register                                       */
X    volatile uint32_t CLKSRC;                 
N    __IO uint32_t CLKPSC;                /*!< [0x0014] BPWM Clock Pre-scale Register                                    */
X    volatile uint32_t CLKPSC;                 
N    __I  uint32_t RESERVE1[2];
X    volatile const  uint32_t RESERVE1[2];
N    __IO uint32_t CNTEN;                 /*!< [0x0020] BPWM Counter Enable Register                                     */
X    volatile uint32_t CNTEN;                  
N    __IO uint32_t CNTCLR;                /*!< [0x0024] BPWM Clear Counter Register                                      */
X    volatile uint32_t CNTCLR;                 
N    __I  uint32_t RESERVE2[2];
X    volatile const  uint32_t RESERVE2[2];
N    __IO uint32_t PERIOD;                /*!< [0x0030] BPWM Period Register                                             */
X    volatile uint32_t PERIOD;                 
N    __I  uint32_t RESERVE3[7];
X    volatile const  uint32_t RESERVE3[7];
N    __IO uint32_t CMPDAT[6];             /*!< [0x0050~0x0064] BPWM Comparator Register 0~5                              */
X    volatile uint32_t CMPDAT[6];              
N    __I  uint32_t RESERVE4[10];
X    volatile const  uint32_t RESERVE4[10];
N    __I  uint32_t CNT;                   /*!< [0x0090] BPWM Counter Register 0                                          */
X    volatile const  uint32_t CNT;                    
N    __I  uint32_t RESERVE5[7];
X    volatile const  uint32_t RESERVE5[7];
N    __IO uint32_t WGCTL0;                /*!< [0x00b0] BPWM Generation Register 0                                       */
X    volatile uint32_t WGCTL0;                 
N    __IO uint32_t WGCTL1;                /*!< [0x00b4] BPWM Generation Register 1                                       */
X    volatile uint32_t WGCTL1;                 
N    __IO uint32_t MSKEN;                 /*!< [0x00b8] BPWM Mask Enable Register                                        */
X    volatile uint32_t MSKEN;                  
N    __IO uint32_t MSK;                   /*!< [0x00bc] BPWM Mask Data Register                                          */
X    volatile uint32_t MSK;                    
N    __I  uint32_t RESERVE6[5];
X    volatile const  uint32_t RESERVE6[5];
N    __IO uint32_t POLCTL;                /*!< [0x00d4] BPWM Pin Polar Inverse Register                                  */
X    volatile uint32_t POLCTL;                 
N    __IO uint32_t POEN;                  /*!< [0x00d8] BPWM Output Enable Register                                      */
X    volatile uint32_t POEN;                   
N    __I  uint32_t RESERVE7[1];
X    volatile const  uint32_t RESERVE7[1];
N    __IO uint32_t INTEN;                 /*!< [0x00e0] BPWM Interrupt Enable Register                                   */
X    volatile uint32_t INTEN;                  
N    __I  uint32_t RESERVE8[1];
X    volatile const  uint32_t RESERVE8[1];
N    __IO uint32_t INTSTS0;               /*!< [0x00e8] BPWM Interrupt Flag Register 0                                   */
X    volatile uint32_t INTSTS0;                
N    __I  uint32_t RESERVE9[3];
X    volatile const  uint32_t RESERVE9[3];
N    __IO uint32_t ADCTS0;                /*!< [0x00f8] BPWM Trigger ADC Source Select Register 0                        */
X    volatile uint32_t ADCTS0;                 
N    __IO uint32_t ADCTS1;                /*!< [0x00fc] BPWM Trigger ADC Source Select Register 1                        */
X    volatile uint32_t ADCTS1;                 
N    __I  uint32_t RESERVE10[4];
X    volatile const  uint32_t RESERVE10[4];
N    __IO uint32_t SSCTL;                 /*!< [0x0110] BPWM Synchronous Start Control Register                          */
X    volatile uint32_t SSCTL;                  
N    __O  uint32_t SSTRG;                 /*!< [0x0114] BPWM Synchronous Start Trigger Register                          */
X    volatile  uint32_t SSTRG;                  
N    __I  uint32_t RESERVE11[2];
X    volatile const  uint32_t RESERVE11[2];
N    __IO uint32_t STATUS;                /*!< [0x0120] BPWM Status Register                                             */
X    volatile uint32_t STATUS;                 
N    __I  uint32_t RESERVE12[55];
X    volatile const  uint32_t RESERVE12[55];
N    __IO uint32_t CAPINEN;               /*!< [0x0200] BPWM Capture Input Enable Register                               */
X    volatile uint32_t CAPINEN;                
N    __IO uint32_t CAPCTL;                /*!< [0x0204] BPWM Capture Control Register                                    */
X    volatile uint32_t CAPCTL;                 
N    __I  uint32_t CAPSTS;                /*!< [0x0208] BPWM Capture Status Register                                     */
X    volatile const  uint32_t CAPSTS;                 
N    __I  uint32_t RCAPDAT0;              /*!< [0x020c] BPWM Rising Capture Data Register 0                              */
X    volatile const  uint32_t RCAPDAT0;               
N    __I  uint32_t FCAPDAT0;              /*!< [0x0210] BPWM Falling Capture Data Register 0                             */
X    volatile const  uint32_t FCAPDAT0;               
N    __I  uint32_t RCAPDAT1;              /*!< [0x0214] BPWM Rising Capture Data Register 1                              */
X    volatile const  uint32_t RCAPDAT1;               
N    __I  uint32_t FCAPDAT1;              /*!< [0x0218] BPWM Falling Capture Data Register 1                             */
X    volatile const  uint32_t FCAPDAT1;               
N    __I  uint32_t RCAPDAT2;              /*!< [0x021c] BPWM Rising Capture Data Register 2                              */
X    volatile const  uint32_t RCAPDAT2;               
N    __I  uint32_t FCAPDAT2;              /*!< [0x0220] BPWM Falling Capture Data Register 2                             */
X    volatile const  uint32_t FCAPDAT2;               
N    __I  uint32_t RCAPDAT3;              /*!< [0x0224] BPWM Rising Capture Data Register 3                              */
X    volatile const  uint32_t RCAPDAT3;               
N    __I  uint32_t FCAPDAT3;              /*!< [0x0228] BPWM Falling Capture Data Register 3                             */
X    volatile const  uint32_t FCAPDAT3;               
N    __I  uint32_t RCAPDAT4;              /*!< [0x022c] BPWM Rising Capture Data Register 4                              */
X    volatile const  uint32_t RCAPDAT4;               
N    __I  uint32_t FCAPDAT4;              /*!< [0x0230] BPWM Falling Capture Data Register 4                             */
X    volatile const  uint32_t FCAPDAT4;               
N    __I  uint32_t RCAPDAT5;              /*!< [0x0234] BPWM Rising Capture Data Register 5                              */
X    volatile const  uint32_t RCAPDAT5;               
N    __I  uint32_t FCAPDAT5;              /*!< [0x0238] BPWM Falling Capture Data Register 5                             */
X    volatile const  uint32_t FCAPDAT5;               
N    __I  uint32_t RESERVE13[5];
X    volatile const  uint32_t RESERVE13[5];
N    __IO uint32_t CAPIEN;                /*!< [0x0250] BPWM Capture Interrupt Enable Register                           */
X    volatile uint32_t CAPIEN;                 
N    __IO uint32_t CAPIF;                 /*!< [0x0254] BPWM Capture Interrupt Flag Register                             */
X    volatile uint32_t CAPIF;                  
N    __I  uint32_t RESERVE14[43];
X    volatile const  uint32_t RESERVE14[43];
N    __I  uint32_t PBUF;                  /*!< [0x0304] BPWM PERIOD Buffer                                               */
X    volatile const  uint32_t PBUF;                   
N    __I  uint32_t RESERVE15[5];
X    volatile const  uint32_t RESERVE15[5];
N    __I  uint32_t CMPBUF[6];             /*!< [0x031c~0x0330] BPWM CMPDAT0~5 Buffer                                     */
X    volatile const  uint32_t CMPBUF[6];              
N} BPWM_T;
N
N/**
N    @addtogroup BPWM_CONST BPWM Bit Field Definition
N    Constant Definitions for BPWM Controller
N@{ */
N
N#define BPWM_CTL0_CTRLD0_Pos              (0)                                              /*!< BPWM_T::CTL: CTRLD0 Position           */
N#define BPWM_CTL0_CTRLD0_Msk              (0x1ul << BPWM_CTL0_CTRLD0_Pos)                  /*!< BPWM_T::CTL: CTRLD0 Mask               */
N
N#define BPWM_CTL0_CTRLD1_Pos              (1)                                              /*!< BPWM_T::CTL: CTRLD1 Position           */
N#define BPWM_CTL0_CTRLD1_Msk              (0x1ul << BPWM_CTL0_CTRLD1_Pos)                  /*!< BPWM_T::CTL: CTRLD1 Mask               */
N
N#define BPWM_CTL0_CTRLD2_Pos              (2)                                              /*!< BPWM_T::CTL: CTRLD2 Position           */
N#define BPWM_CTL0_CTRLD2_Msk              (0x1ul << BPWM_CTL0_CTRLD2_Pos)                  /*!< BPWM_T::CTL: CTRLD2 Mask               */
N
N#define BPWM_CTL0_CTRLD3_Pos              (3)                                              /*!< BPWM_T::CTL: CTRLD3 Position           */
N#define BPWM_CTL0_CTRLD3_Msk              (0x1ul << BPWM_CTL0_CTRLD3_Pos)                  /*!< BPWM_T::CTL: CTRLD3 Mask               */
N
N#define BPWM_CTL0_CTRLD4_Pos              (4)                                              /*!< BPWM_T::CTL: CTRLD4 Position           */
N#define BPWM_CTL0_CTRLD4_Msk              (0x1ul << BPWM_CTL0_CTRLD4_Pos)                  /*!< BPWM_T::CTL: CTRLD4 Mask               */
N
N#define BPWM_CTL0_CTRLD5_Pos              (5)                                              /*!< BPWM_T::CTL: CTRLD5 Position           */
N#define BPWM_CTL0_CTRLD5_Msk              (0x1ul << BPWM_CTL0_CTRLD5_Pos)                  /*!< BPWM_T::CTL: CTRLD5 Mask               */
N
N#define BPWM_CTL0_IMMLDEN0_Pos            (16)                                             /*!< BPWM_T::CTL: IMMLDEN0 Position         */
N#define BPWM_CTL0_IMMLDEN0_Msk            (0x1ul << BPWM_CTL0_IMMLDEN0_Pos)                /*!< BPWM_T::CTL: IMMLDEN0 Mask             */
N
N#define BPWM_CTL0_IMMLDEN1_Pos            (17)                                             /*!< BPWM_T::CTL: IMMLDEN1 Position         */
N#define BPWM_CTL0_IMMLDEN1_Msk            (0x1ul << BPWM_CTL0_IMMLDEN1_Pos)                /*!< BPWM_T::CTL: IMMLDEN1 Mask             */
N
N#define BPWM_CTL0_IMMLDEN2_Pos            (18)                                             /*!< BPWM_T::CTL: IMMLDEN2 Position         */
N#define BPWM_CTL0_IMMLDEN2_Msk            (0x1ul << BPWM_CTL0_IMMLDEN2_Pos)                /*!< BPWM_T::CTL: IMMLDEN2 Mask             */
N
N#define BPWM_CTL0_IMMLDEN3_Pos            (19)                                             /*!< BPWM_T::CTL: IMMLDEN3 Position         */
N#define BPWM_CTL0_IMMLDEN3_Msk            (0x1ul << BPWM_CTL0_IMMLDEN3_Pos)                /*!< BPWM_T::CTL: IMMLDEN3 Mask             */
N
N#define BPWM_CTL0_IMMLDEN4_Pos            (20)                                             /*!< BPWM_T::CTL: IMMLDEN4 Position         */
N#define BPWM_CTL0_IMMLDEN4_Msk            (0x1ul << BPWM_CTL0_IMMLDEN4_Pos)                /*!< BPWM_T::CTL: IMMLDEN4 Mask             */
N
N#define BPWM_CTL0_IMMLDEN5_Pos            (21)                                             /*!< BPWM_T::CTL: IMMLDEN5 Position         */
N#define BPWM_CTL0_IMMLDEN5_Msk            (0x1ul << BPWM_CTL0_IMMLDEN5_Pos)                /*!< BPWM_T::CTL: IMMLDEN5 Mask             */
N
N#define BPWM_CTL0_DBGHALT_Pos            (30)                                              /*!< BPWM_T::CTL0: DBGHALT Position         */
N#define BPWM_CTL0_DBGHALT_Msk            (0x1ul << BPWM_CTL0_DBGHALT_Pos)                  /*!< BPWM_T::CTL0: DBGHALT Mask             */
N
N#define BPWM_CTL0_DBGTRIOFF_Pos          (31)                                              /*!< BPWM_T::CTL0: DBGTRIOFF Position       */
N#define BPWM_CTL0_DBGTRIOFF_Msk          (0x1ul << BPWM_CTL0_DBGTRIOFF_Pos)                /*!< BPWM_T::CTL0: DBGTRIOFF Mask           */
N
N#define BPWM_CTL1_CNTTYPE0_Pos           (0)                                               /*!< BPWM_T::CTL1: CNTTYPE0 Position        */
N#define BPWM_CTL1_CNTTYPE0_Msk           (0x3ul << BPWM_CTL1_CNTTYPE0_Pos)                 /*!< BPWM_T::CTL1: CNTTYPE0 Mask            */
N
N#define BPWM_CLKSRC_ECLKSRC0_Pos         (0)                                               /*!< BPWM_T::CLKSRC: ECLKSRC0 Position      */
N#define BPWM_CLKSRC_ECLKSRC0_Msk         (0x7ul << BPWM_CLKSRC_ECLKSRC0_Pos)               /*!< BPWM_T::CLKSRC: ECLKSRC0 Mask          */
N
N#define BPWM_CLKPSC_CLKPSC_Pos           (0)                                               /*!< BPWM_T::CLKPSC: CLKPSC Position        */
N#define BPWM_CLKPSC_CLKPSC_Msk           (0xffful << BPWM_CLKPSC_CLKPSC_Pos)               /*!< BPWM_T::CLKPSC: CLKPSC Mask            */
N
N#define BPWM_CNTEN_CNTEN0_Pos            (0)                                               /*!< BPWM_T::CNTEN: CNTEN0 Position         */
N#define BPWM_CNTEN_CNTEN0_Msk            (0x1ul << BPWM_CNTEN_CNTEN0_Pos)                  /*!< BPWM_T::CNTEN: CNTEN0 Mask             */
N
N#define BPWM_CNTCLR_CNTCLR0_Pos          (0)                                               /*!< BPWM_T::CNTCLR: CNTCLR0 Position       */
N#define BPWM_CNTCLR_CNTCLR0_Msk          (0x1ul << BPWM_CNTCLR_CNTCLR0_Pos)                /*!< BPWM_T::CNTCLR: CNTCLR0 Mask           */
N
N#define BPWM_PERIOD_PERIOD_Pos           (0)                                               /*!< BPWM_T::PERIOD: PERIOD Position        */
N#define BPWM_PERIOD_PERIOD_Msk           (0xfffful << BPWM_PERIOD_PERIOD_Pos)              /*!< BPWM_T::PERIOD: PERIOD Mask            */
N
N#define BPWM_CMPDAT_CMP_Pos              (0)                                               /*!< BPWM_T::CMPDAT: CMP Position           */
N#define BPWM_CMPDAT_CMP_Msk              (0xfffful << BPWM_CMPDAT_CMP_Pos)                 /*!< BPWM_T::CMPDAT: CMP Mask               */
N
N#define BPWM_CNT_CNT_Pos                 (0)                                               /*!< BPWM_T::CNT: CNT Position              */
N#define BPWM_CNT_CNT_Msk                 (0xfffful << BPWM_CNT_CNT_Pos)                    /*!< BPWM_T::CNT: CNT Mask                  */
N
N#define BPWM_CNT_DIRF_Pos                (16)                                              /*!< BPWM_T::CNT: DIRF Position             */
N#define BPWM_CNT_DIRF_Msk                (0x1ul << BPWM_CNT_DIRF_Pos)                      /*!< BPWM_T::CNT: DIRF Mask                 */
N
N#define BPWM_WGCTL0_ZPCTL0_Pos            (0)                                              /*!< BPWM_T::WGCTL0: ZPCTL0 Position        */
N#define BPWM_WGCTL0_ZPCTL0_Msk            (0x3ul << BPWM_WGCTL0_ZPCTL0_Pos)                /*!< BPWM_T::WGCTL0: ZPCTL0 Mask            */
N
N#define BPWM_WGCTL0_ZPCTL1_Pos            (2)                                              /*!< BPWM_T::WGCTL0: ZPCTL1 Position        */
N#define BPWM_WGCTL0_ZPCTL1_Msk            (0x3ul << BPWM_WGCTL0_ZPCTL1_Pos)                /*!< BPWM_T::WGCTL0: ZPCTL1 Mask            */
N
N#define BPWM_WGCTL0_ZPCTL2_Pos            (4)                                              /*!< BPWM_T::WGCTL0: ZPCTL2 Position        */
N#define BPWM_WGCTL0_ZPCTL2_Msk            (0x3ul << BPWM_WGCTL0_ZPCTL2_Pos)                /*!< BPWM_T::WGCTL0: ZPCTL2 Mask            */
N
N#define BPWM_WGCTL0_ZPCTL3_Pos            (6)                                              /*!< BPWM_T::WGCTL0: ZPCTL3 Position        */
N#define BPWM_WGCTL0_ZPCTL3_Msk            (0x3ul << BPWM_WGCTL0_ZPCTL3_Pos)                /*!< BPWM_T::WGCTL0: ZPCTL3 Mask            */
N
N#define BPWM_WGCTL0_ZPCTL4_Pos            (8)                                              /*!< BPWM_T::WGCTL0: ZPCTL4 Position        */
N#define BPWM_WGCTL0_ZPCTL4_Msk            (0x3ul << BPWM_WGCTL0_ZPCTL4_Pos)                /*!< BPWM_T::WGCTL0: ZPCTL4 Mask            */
N
N#define BPWM_WGCTL0_ZPCTL5_Pos            (10)                                             /*!< BPWM_T::WGCTL0: ZPCTL5 Position        */
N#define BPWM_WGCTL0_ZPCTL5_Msk            (0x3ul << BPWM_WGCTL0_ZPCTL5_Pos)                /*!< BPWM_T::WGCTL0: ZPCTL5 Mask            */
N
N#define BPWM_WGCTL0_PRDPCTL0_Pos          (16)                                             /*!< BPWM_T::WGCTL0: PRDPCTL0 Position      */
N#define BPWM_WGCTL0_PRDPCTL0_Msk          (0x3ul << BPWM_WGCTL0_PRDPCTL0_Pos)              /*!< BPWM_T::WGCTL0: PRDPCTL0 Mask          */
N
N#define BPWM_WGCTL0_PRDPCTL1_Pos          (18)                                             /*!< BPWM_T::WGCTL0: PRDPCTL1 Position      */
N#define BPWM_WGCTL0_PRDPCTL1_Msk          (0x3ul << BPWM_WGCTL0_PRDPCTL1_Pos)              /*!< BPWM_T::WGCTL0: PRDPCTL1 Mask          */
N
N#define BPWM_WGCTL0_PRDPCTL2_Pos          (20)                                             /*!< BPWM_T::WGCTL0: PRDPCTL2 Position      */
N#define BPWM_WGCTL0_PRDPCTL2_Msk          (0x3ul << BPWM_WGCTL0_PRDPCTL2_Pos)              /*!< BPWM_T::WGCTL0: PRDPCTL2 Mask          */
N
N#define BPWM_WGCTL0_PRDPCTL3_Pos          (22)                                             /*!< BPWM_T::WGCTL0: PRDPCTL3 Position      */
N#define BPWM_WGCTL0_PRDPCTL3_Msk          (0x3ul << BPWM_WGCTL0_PRDPCTL3_Pos)              /*!< BPWM_T::WGCTL0: PRDPCTL3 Mask          */
N
N#define BPWM_WGCTL0_PRDPCTL4_Pos          (24)                                             /*!< BPWM_T::WGCTL0: PRDPCTL4 Position      */
N#define BPWM_WGCTL0_PRDPCTL4_Msk          (0x3ul << BPWM_WGCTL0_PRDPCTL4_Pos)              /*!< BPWM_T::WGCTL0: PRDPCTL4 Mask          */
N
N#define BPWM_WGCTL0_PRDPCTL5_Pos          (26)                                             /*!< BPWM_T::WGCTL0: PRDPCTL5 Position      */
N#define BPWM_WGCTL0_PRDPCTL5_Msk          (0x3ul << BPWM_WGCTL0_PRDPCTL5_Pos)              /*!< BPWM_T::WGCTL0: PRDPCTL5 Mask          */
N
N#define BPWM_WGCTL1_CMPUCTL0_Pos          (0)                                              /*!< BPWM_T::WGCTL1: CMPUCTL0 Position      */
N#define BPWM_WGCTL1_CMPUCTL0_Msk          (0x3ul << BPWM_WGCTL1_CMPUCTL0_Pos)              /*!< BPWM_T::WGCTL1: CMPUCTL0 Mask          */
N
N#define BPWM_WGCTL1_CMPUCTL1_Pos          (2)                                              /*!< BPWM_T::WGCTL1: CMPUCTL1 Position      */
N#define BPWM_WGCTL1_CMPUCTL1_Msk          (0x3ul << BPWM_WGCTL1_CMPUCTL1_Pos)              /*!< BPWM_T::WGCTL1: CMPUCTL1 Mask          */
N
N#define BPWM_WGCTL1_CMPUCTL2_Pos          (4)                                              /*!< BPWM_T::WGCTL1: CMPUCTL2 Position      */
N#define BPWM_WGCTL1_CMPUCTL2_Msk          (0x3ul << BPWM_WGCTL1_CMPUCTL2_Pos)              /*!< BPWM_T::WGCTL1: CMPUCTL2 Mask          */
N
N#define BPWM_WGCTL1_CMPUCTL3_Pos          (6)                                              /*!< BPWM_T::WGCTL1: CMPUCTL3 Position      */
N#define BPWM_WGCTL1_CMPUCTL3_Msk          (0x3ul << BPWM_WGCTL1_CMPUCTL3_Pos)              /*!< BPWM_T::WGCTL1: CMPUCTL3 Mask          */
N
N#define BPWM_WGCTL1_CMPUCTL4_Pos          (8)                                              /*!< BPWM_T::WGCTL1: CMPUCTL4 Position      */
N#define BPWM_WGCTL1_CMPUCTL4_Msk          (0x3ul << BPWM_WGCTL1_CMPUCTL4_Pos)              /*!< BPWM_T::WGCTL1: CMPUCTL4 Mask          */
N
N#define BPWM_WGCTL1_CMPUCTL5_Pos          (10)                                             /*!< BPWM_T::WGCTL1: CMPUCTL5 Position      */
N#define BPWM_WGCTL1_CMPUCTL5_Msk          (0x3ul << BPWM_WGCTL1_CMPUCTL5_Pos)              /*!< BPWM_T::WGCTL1: CMPUCTL5 Mask          */
N
N#define BPWM_WGCTL1_CMPDCTL0_Pos          (16)                                             /*!< BPWM_T::WGCTL1: CMPDCTL0 Position      */
N#define BPWM_WGCTL1_CMPDCTL0_Msk          (0x3ul << BPWM_WGCTL1_CMPDCTL0_Pos)              /*!< BPWM_T::WGCTL1: CMPDCTL0 Mask          */
N
N#define BPWM_WGCTL1_CMPDCTL1_Pos          (18)                                             /*!< BPWM_T::WGCTL1: CMPDCTL1 Position      */
N#define BPWM_WGCTL1_CMPDCTL1_Msk          (0x3ul << BPWM_WGCTL1_CMPDCTL1_Pos)              /*!< BPWM_T::WGCTL1: CMPDCTL1 Mask          */
N
N#define BPWM_WGCTL1_CMPDCTL2_Pos          (20)                                             /*!< BPWM_T::WGCTL1: CMPDCTL2 Position      */
N#define BPWM_WGCTL1_CMPDCTL2_Msk          (0x3ul << BPWM_WGCTL1_CMPDCTL2_Pos)              /*!< BPWM_T::WGCTL1: CMPDCTL2 Mask          */
N
N#define BPWM_WGCTL1_CMPDCTL3_Pos          (22)                                             /*!< BPWM_T::WGCTL1: CMPDCTL3 Position      */
N#define BPWM_WGCTL1_CMPDCTL3_Msk          (0x3ul << BPWM_WGCTL1_CMPDCTL3_Pos)              /*!< BPWM_T::WGCTL1: CMPDCTL3 Mask          */
N
N#define BPWM_WGCTL1_CMPDCTL4_Pos          (24)                                             /*!< BPWM_T::WGCTL1: CMPDCTL4 Position      */
N#define BPWM_WGCTL1_CMPDCTL4_Msk          (0x3ul << BPWM_WGCTL1_CMPDCTL4_Pos)              /*!< BPWM_T::WGCTL1: CMPDCTL4 Mask          */
N
N#define BPWM_WGCTL1_CMPDCTL5_Pos          (26)                                             /*!< BPWM_T::WGCTL1: CMPDCTL5 Position      */
N#define BPWM_WGCTL1_CMPDCTL5_Msk          (0x3ul << BPWM_WGCTL1_CMPDCTL5_Pos)              /*!< BPWM_T::WGCTL1: CMPDCTL5 Mask          */
N
N
N#define BPWM_MSKEN_MSKEN0_Pos             (0)                                              /*!< BPWM_T::MSKEN: MSKEN0 Position         */
N#define BPWM_MSKEN_MSKEN0_Msk             (0x1ul << BPWM_MSKEN_MSKEN0_Pos)                 /*!< BPWM_T::MSKEN: MSKEN0 Mask             */
N
N#define BPWM_MSKEN_MSKEN1_Pos             (1)                                              /*!< BPWM_T::MSKEN: MSKEN1 Position         */
N#define BPWM_MSKEN_MSKEN1_Msk             (0x1ul << BPWM_MSKEN_MSKEN1_Pos)                 /*!< BPWM_T::MSKEN: MSKEN1 Mask             */
N
N#define BPWM_MSKEN_MSKEN2_Pos             (2)                                              /*!< BPWM_T::MSKEN: MSKEN2 Position         */
N#define BPWM_MSKEN_MSKEN2_Msk             (0x1ul << BPWM_MSKEN_MSKEN2_Pos)                 /*!< BPWM_T::MSKEN: MSKEN2 Mask             */
N
N#define BPWM_MSKEN_MSKEN3_Pos             (3)                                              /*!< BPWM_T::MSKEN: MSKEN3 Position         */
N#define BPWM_MSKEN_MSKEN3_Msk             (0x1ul << BPWM_MSKEN_MSKEN3_Pos)                 /*!< BPWM_T::MSKEN: MSKEN3 Mask             */
N
N#define BPWM_MSKEN_MSKEN4_Pos             (4)                                              /*!< BPWM_T::MSKEN: MSKEN4 Position         */
N#define BPWM_MSKEN_MSKEN4_Msk             (0x1ul << BPWM_MSKEN_MSKEN4_Pos)                 /*!< BPWM_T::MSKEN: MSKEN4 Mask             */
N
N#define BPWM_MSKEN_MSKEN5_Pos             (5)                                              /*!< BPWM_T::MSKEN: MSKEN5 Position         */
N#define BPWM_MSKEN_MSKEN5_Msk             (0x1ul << BPWM_MSKEN_MSKEN5_Pos)                 /*!< BPWM_T::MSKEN: MSKEN5 Mask             */
N
N#define BPWM_MSK_MSKDAT0_Pos              (0)                                              /*!< BPWM_T::MSK: MSKDAT0 Position          */
N#define BPWM_MSK_MSKDAT0_Msk              (0x1ul << BPWM_MSK_MSKDAT0_Pos)                  /*!< BPWM_T::MSK: MSKDAT0 Mask              */
N
N#define BPWM_MSK_MSKDAT1_Pos              (1)                                              /*!< BPWM_T::MSK: MSKDAT1 Position          */
N#define BPWM_MSK_MSKDAT1_Msk              (0x1ul << BPWM_MSK_MSKDAT1_Pos)                  /*!< BPWM_T::MSK: MSKDAT1 Mask              */
N
N#define BPWM_MSK_MSKDAT2_Pos              (2)                                              /*!< BPWM_T::MSK: MSKDAT2 Position          */
N#define BPWM_MSK_MSKDAT2_Msk              (0x1ul << BPWM_MSK_MSKDAT2_Pos)                  /*!< BPWM_T::MSK: MSKDAT2 Mask              */
N
N#define BPWM_MSK_MSKDAT3_Pos              (3)                                              /*!< BPWM_T::MSK: MSKDAT3 Position          */
N#define BPWM_MSK_MSKDAT3_Msk              (0x1ul << BPWM_MSK_MSKDAT3_Pos)                  /*!< BPWM_T::MSK: MSKDAT3 Mask              */
N
N#define BPWM_MSK_MSKDAT4_Pos              (4)                                              /*!< BPWM_T::MSK: MSKDAT4 Position          */
N#define BPWM_MSK_MSKDAT4_Msk              (0x1ul << BPWM_MSK_MSKDAT4_Pos)                  /*!< BPWM_T::MSK: MSKDAT4 Mask              */
N
N#define BPWM_MSK_MSKDAT5_Pos              (5)                                              /*!< BPWM_T::MSK: MSKDAT5 Position          */
N#define BPWM_MSK_MSKDAT5_Msk              (0x1ul << BPWM_MSK_MSKDAT5_Pos)                  /*!< BPWM_T::MSK: MSKDAT5 Mask              */
N
N#define BPWM_POLCTL_PINV0_Pos             (0)                                              /*!< BPWM_T::POLCTL: PINV0 Position         */
N#define BPWM_POLCTL_PINV0_Msk             (0x1ul << BPWM_POLCTL_PINV0_Pos)                 /*!< BPWM_T::POLCTL: PINV0 Mask             */
N
N#define BPWM_POLCTL_PINV1_Pos             (1)                                              /*!< BPWM_T::POLCTL: PINV1 Position         */
N#define BPWM_POLCTL_PINV1_Msk             (0x1ul << BPWM_POLCTL_PINV1_Pos)                 /*!< BPWM_T::POLCTL: PINV1 Mask             */
N
N#define BPWM_POLCTL_PINV2_Pos             (2)                                              /*!< BPWM_T::POLCTL: PINV2 Position         */
N#define BPWM_POLCTL_PINV2_Msk             (0x1ul << BPWM_POLCTL_PINV2_Pos)                 /*!< BPWM_T::POLCTL: PINV2 Mask             */
N
N#define BPWM_POLCTL_PINV3_Pos             (3)                                              /*!< BPWM_T::POLCTL: PINV3 Position         */
N#define BPWM_POLCTL_PINV3_Msk             (0x1ul << BPWM_POLCTL_PINV3_Pos)                 /*!< BPWM_T::POLCTL: PINV3 Mask             */
N
N#define BPWM_POLCTL_PINV4_Pos             (4)                                              /*!< BPWM_T::POLCTL: PINV4 Position         */
N#define BPWM_POLCTL_PINV4_Msk             (0x1ul << BPWM_POLCTL_PINV4_Pos)                 /*!< BPWM_T::POLCTL: PINV4 Mask             */
N
N#define BPWM_POLCTL_PINV5_Pos             (5)                                              /*!< BPWM_T::POLCTL: PINV5 Position         */
N#define BPWM_POLCTL_PINV5_Msk             (0x1ul << BPWM_POLCTL_PINV5_Pos)                 /*!< BPWM_T::POLCTL: PINV5 Mask             */
N
N#define BPWM_POEN_POEN0_Pos               (0)                                              /*!< BPWM_T::POEN: POEN0 Position           */
N#define BPWM_POEN_POEN0_Msk               (0x1ul << BPWM_POEN_POEN0_Pos)                   /*!< BPWM_T::POEN: POEN0 Mask               */
N
N#define BPWM_POEN_POEN1_Pos               (1)                                              /*!< BPWM_T::POEN: POEN1 Position           */
N#define BPWM_POEN_POEN1_Msk               (0x1ul << BPWM_POEN_POEN1_Pos)                   /*!< BPWM_T::POEN: POEN1 Mask               */
N
N#define BPWM_POEN_POEN2_Pos               (2)                                              /*!< BPWM_T::POEN: POEN2 Position           */
N#define BPWM_POEN_POEN2_Msk               (0x1ul << BPWM_POEN_POEN2_Pos)                   /*!< BPWM_T::POEN: POEN2 Mask               */
N
N#define BPWM_POEN_POEN3_Pos               (3)                                              /*!< BPWM_T::POEN: POEN3 Position           */
N#define BPWM_POEN_POEN3_Msk               (0x1ul << BPWM_POEN_POEN3_Pos)                   /*!< BPWM_T::POEN: POEN3 Mask               */
N
N#define BPWM_POEN_POEN4_Pos               (4)                                              /*!< BPWM_T::POEN: POEN4 Position           */
N#define BPWM_POEN_POEN4_Msk               (0x1ul << BPWM_POEN_POEN4_Pos)                   /*!< BPWM_T::POEN: POEN4 Mask               */
N
N#define BPWM_POEN_POEN5_Pos               (5)                                              /*!< BPWM_T::POEN: POEN5 Position           */
N#define BPWM_POEN_POEN5_Msk               (0x1ul << BPWM_POEN_POEN5_Pos)                   /*!< BPWM_T::POEN: POEN5 Mask               */
N
N#define BPWM_INTEN_ZIEN0_Pos             (0)                                               /*!< BPWM_T::INTEN: ZIEN0 Position          */
N#define BPWM_INTEN_ZIEN0_Msk             (0x1ul << BPWM_INTEN_ZIEN0_Pos)                   /*!< BPWM_T::INTEN: ZIEN0 Mask              */
N
N#define BPWM_INTEN_PIEN0_Pos             (8)                                               /*!< BPWM_T::INTEN: PIEN0 Position          */
N#define BPWM_INTEN_PIEN0_Msk             (0x1ul << BPWM_INTEN_PIEN0_Pos)                   /*!< BPWM_T::INTEN: PIEN0 Mask              */
N
N#define BPWM_INTEN_CMPUIEN0_Pos           (16)                                             /*!< BPWM_T::INTEN: CMPUIEN0 Position       */
N#define BPWM_INTEN_CMPUIEN0_Msk           (0x1ul << BPWM_INTEN_CMPUIEN0_Pos)               /*!< BPWM_T::INTEN: CMPUIEN0 Mask           */
N
N#define BPWM_INTEN_CMPUIEN1_Pos           (17)                                             /*!< BPWM_T::INTEN: CMPUIEN1 Position       */
N#define BPWM_INTEN_CMPUIEN1_Msk           (0x1ul << BPWM_INTEN_CMPUIEN1_Pos)               /*!< BPWM_T::INTEN: CMPUIEN1 Mask           */
N
N#define BPWM_INTEN_CMPUIEN2_Pos           (18)                                             /*!< BPWM_T::INTEN: CMPUIEN2 Position       */
N#define BPWM_INTEN_CMPUIEN2_Msk           (0x1ul << BPWM_INTEN_CMPUIEN2_Pos)               /*!< BPWM_T::INTEN: CMPUIEN2 Mask           */
N
N#define BPWM_INTEN_CMPUIEN3_Pos           (19)                                             /*!< BPWM_T::INTEN: CMPUIEN3 Position       */
N#define BPWM_INTEN_CMPUIEN3_Msk           (0x1ul << BPWM_INTEN_CMPUIEN3_Pos)               /*!< BPWM_T::INTEN: CMPUIEN3 Mask           */
N
N#define BPWM_INTEN_CMPUIEN4_Pos           (20)                                             /*!< BPWM_T::INTEN: CMPUIEN4 Position       */
N#define BPWM_INTEN_CMPUIEN4_Msk           (0x1ul << BPWM_INTEN_CMPUIEN4_Pos)               /*!< BPWM_T::INTEN: CMPUIEN4 Mask           */
N
N#define BPWM_INTEN_CMPUIEN5_Pos           (21)                                             /*!< BPWM_T::INTEN: CMPUIEN5 Position       */
N#define BPWM_INTEN_CMPUIEN5_Msk           (0x1ul << BPWM_INTEN_CMPUIEN5_Pos)               /*!< BPWM_T::INTEN: CMPUIEN5 Mask           */
N
N#define BPWM_INTEN_CMPDIEN0_Pos           (24)                                             /*!< BPWM_T::INTEN: CMPDIEN0 Position       */
N#define BPWM_INTEN_CMPDIEN0_Msk           (0x1ul << BPWM_INTEN_CMPDIEN0_Pos)               /*!< BPWM_T::INTEN: CMPDIEN0 Mask           */
N
N#define BPWM_INTEN_CMPDIEN1_Pos           (25)                                             /*!< BPWM_T::INTEN: CMPDIEN1 Position       */
N#define BPWM_INTEN_CMPDIEN1_Msk           (0x1ul << BPWM_INTEN_CMPDIEN1_Pos)               /*!< BPWM_T::INTEN: CMPDIEN1 Mask           */
N
N#define BPWM_INTEN_CMPDIEN2_Pos           (26)                                             /*!< BPWM_T::INTEN: CMPDIEN2 Position       */
N#define BPWM_INTEN_CMPDIEN2_Msk           (0x1ul << BPWM_INTEN_CMPDIEN2_Pos)               /*!< BPWM_T::INTEN: CMPDIEN2 Mask           */
N
N#define BPWM_INTEN_CMPDIEN3_Pos           (27)                                             /*!< BPWM_T::INTEN: CMPDIEN3 Position       */
N#define BPWM_INTEN_CMPDIEN3_Msk           (0x1ul << BPWM_INTEN_CMPDIEN3_Pos)               /*!< BPWM_T::INTEN: CMPDIEN3 Mask           */
N
N#define BPWM_INTEN_CMPDIEN4_Pos           (28)                                             /*!< BPWM_T::INTEN: CMPDIEN4 Position       */
N#define BPWM_INTEN_CMPDIEN4_Msk           (0x1ul << BPWM_INTEN_CMPDIEN4_Pos)               /*!< BPWM_T::INTEN: CMPDIEN4 Mask           */
N
N#define BPWM_INTEN_CMPDIEN5_Pos           (29)                                             /*!< BPWM_T::INTEN: CMPDIEN5 Position       */
N#define BPWM_INTEN_CMPDIEN5_Msk           (0x1ul << BPWM_INTEN_CMPDIEN5_Pos)               /*!< BPWM_T::INTEN: CMPDIEN5 Mask           */
N
N#define BPWM_INTSTS0_ZIF0_Pos            (0)                                               /*!< BPWM_T::INTSTS0: ZIF0 Position         */
N#define BPWM_INTSTS0_ZIF0_Msk            (0x1ul << BPWM_INTSTS0_ZIF0_Pos)                  /*!< BPWM_T::INTSTS0: ZIF0 Mask             */
N
N#define BPWM_INTSTS0_PIF0_Pos            (8)                                               /*!< BPWM_T::INTSTS0: PIF0 Position         */
N#define BPWM_INTSTS0_PIF0_Msk            (0x1ul << BPWM_INTSTS0_PIF0_Pos)                  /*!< BPWM_T::INTSTS0: PIF0 Mask             */
N
N#define BPWM_INTSTS0_CMPUIF0_Pos           (16)                                            /*!< BPWM_T::INTSTS0: CMPUIF0 Position      */
N#define BPWM_INTSTS0_CMPUIF0_Msk           (0x1ul << BPWM_INTSTS0_CMPUIF0_Pos)             /*!< BPWM_T::INTSTS0: CMPUIF0 Mask          */
N
N#define BPWM_INTSTS0_CMPUIF1_Pos           (17)                                            /*!< BPWM_T::INTSTS0: CMPUIF1 Position      */
N#define BPWM_INTSTS0_CMPUIF1_Msk           (0x1ul << BPWM_INTSTS0_CMPUIF1_Pos)             /*!< BPWM_T::INTSTS0: CMPUIF1 Mask          */
N
N#define BPWM_INTSTS0_CMPUIF2_Pos           (18)                                            /*!< BPWM_T::INTSTS0: CMPUIF2 Position      */
N#define BPWM_INTSTS0_CMPUIF2_Msk           (0x1ul << BPWM_INTSTS0_CMPUIF2_Pos)             /*!< BPWM_T::INTSTS0: CMPUIF2 Mask          */
N
N#define BPWM_INTSTS0_CMPUIF3_Pos           (19)                                            /*!< BPWM_T::INTSTS0: CMPUIF3 Position      */
N#define BPWM_INTSTS0_CMPUIF3_Msk           (0x1ul << BPWM_INTSTS0_CMPUIF3_Pos)             /*!< BPWM_T::INTSTS0: CMPUIF3 Mask          */
N
N#define BPWM_INTSTS0_CMPUIF4_Pos           (20)                                            /*!< BPWM_T::INTSTS0: CMPUIF4 Position      */
N#define BPWM_INTSTS0_CMPUIF4_Msk           (0x1ul << BPWM_INTSTS0_CMPUIF4_Pos)             /*!< BPWM_T::INTSTS0: CMPUIF4 Mask          */
N
N#define BPWM_INTSTS0_CMPUIF5_Pos           (21)                                            /*!< BPWM_T::INTSTS0: CMPUIF5 Position      */
N#define BPWM_INTSTS0_CMPUIF5_Msk           (0x1ul << BPWM_INTSTS0_CMPUIF5_Pos)             /*!< BPWM_T::INTSTS0: CMPUIF5 Mask          */
N
N#define BPWM_INTSTS0_CMPDIF0_Pos           (24)                                            /*!< BPWM_T::INTSTS0: CMPDIF0 Position      */
N#define BPWM_INTSTS0_CMPDIF0_Msk           (0x1ul << BPWM_INTSTS0_CMPDIF0_Pos)             /*!< BPWM_T::INTSTS0: CMPDIF0 Mask          */
N
N#define BPWM_INTSTS0_CMPDIF1_Pos           (25)                                            /*!< BPWM_T::INTSTS0: CMPDIF1 Position      */
N#define BPWM_INTSTS0_CMPDIF1_Msk           (0x1ul << BPWM_INTSTS0_CMPDIF1_Pos)             /*!< BPWM_T::INTSTS0: CMPDIF1 Mask          */
N
N#define BPWM_INTSTS0_CMPDIF2_Pos           (26)                                            /*!< BPWM_T::INTSTS0: CMPDIF2 Position      */
N#define BPWM_INTSTS0_CMPDIF2_Msk           (0x1ul << BPWM_INTSTS0_CMPDIF2_Pos)             /*!< BPWM_T::INTSTS0: CMPDIF2 Mask          */
N
N#define BPWM_INTSTS0_CMPDIF3_Pos           (27)                                            /*!< BPWM_T::INTSTS0: CMPDIF3 Position      */
N#define BPWM_INTSTS0_CMPDIF3_Msk           (0x1ul << BPWM_INTSTS0_CMPDIF3_Pos)             /*!< BPWM_T::INTSTS0: CMPDIF3 Mask          */
N
N#define BPWM_INTSTS0_CMPDIF4_Pos           (28)                                            /*!< BPWM_T::INTSTS0: CMPDIF4 Position      */
N#define BPWM_INTSTS0_CMPDIF4_Msk           (0x1ul << BPWM_INTSTS0_CMPDIF4_Pos)             /*!< BPWM_T::INTSTS0: CMPDIF4 Mask          */
N
N#define BPWM_INTSTS0_CMPDIF5_Pos           (29)                                            /*!< BPWM_T::INTSTS0: CMPDIF5 Position      */
N#define BPWM_INTSTS0_CMPDIF5_Msk           (0x1ul << BPWM_INTSTS0_CMPDIF5_Pos)             /*!< BPWM_T::INTSTS0: CMPDIF5 Mask          */
N
N#define BPWM_ADCTS0_TRGSEL0_Pos          (0)                                               /*!< BPWM_T::ADCTS0: TRGSEL0 Position       */
N#define BPWM_ADCTS0_TRGSEL0_Msk          (0xful << BPWM_ADCTS0_TRGSEL0_Pos)                /*!< BPWM_T::ADCTS0: TRGSEL0 Mask           */
N
N#define BPWM_ADCTS0_TRGEN0_Pos           (7)                                               /*!< BPWM_T::ADCTS0: TRGEN0 Position        */
N#define BPWM_ADCTS0_TRGEN0_Msk           (0x1ul << BPWM_ADCTS0_TRGEN0_Pos)                 /*!< BPWM_T::ADCTS0: TRGEN0 Mask            */
N
N#define BPWM_ADCTS0_TRGSEL1_Pos          (8)                                               /*!< BPWM_T::ADCTS0: TRGSEL1 Position       */
N#define BPWM_ADCTS0_TRGSEL1_Msk          (0xful << BPWM_ADCTS0_TRGSEL1_Pos)                /*!< BPWM_T::ADCTS0: TRGSEL1 Mask           */
N
N#define BPWM_ADCTS0_TRGEN1_Pos           (15)                                              /*!< BPWM_T::ADCTS0: TRGEN1 Position        */
N#define BPWM_ADCTS0_TRGEN1_Msk           (0x1ul << BPWM_ADCTS0_TRGEN1_Pos)                 /*!< BPWM_T::ADCTS0: TRGEN1 Mask            */
N
N#define BPWM_ADCTS0_TRGSEL2_Pos          (16)                                              /*!< BPWM_T::ADCTS0: TRGSEL2 Position       */
N#define BPWM_ADCTS0_TRGSEL2_Msk          (0xful << BPWM_ADCTS0_TRGSEL2_Pos)                /*!< BPWM_T::ADCTS0: TRGSEL2 Mask           */
N
N#define BPWM_ADCTS0_TRGEN2_Pos           (23)                                              /*!< BPWM_T::ADCTS0: TRGEN2 Position        */
N#define BPWM_ADCTS0_TRGEN2_Msk           (0x1ul << BPWM_ADCTS0_TRGEN2_Pos)                 /*!< BPWM_T::ADCTS0: TRGEN2 Mask            */
N
N#define BPWM_ADCTS0_TRGSEL3_Pos          (24)                                              /*!< BPWM_T::ADCTS0: TRGSEL3 Position       */
N#define BPWM_ADCTS0_TRGSEL3_Msk          (0xful << BPWM_ADCTS0_TRGSEL3_Pos)                /*!< BPWM_T::ADCTS0: TRGSEL3 Mask           */
N
N#define BPWM_ADCTS0_TRGEN3_Pos           (31)                                              /*!< BPWM_T::ADCTS0: TRGEN3 Position        */
N#define BPWM_ADCTS0_TRGEN3_Msk           (0x1ul << BPWM_ADCTS0_TRGEN3_Pos)                 /*!< BPWM_T::ADCTS0: TRGEN3 Mask            */
N
N#define BPWM_ADCTS1_TRGSEL4_Pos          (0)                                               /*!< BPWM_T::ADCTS1: TRGSEL4 Position       */
N#define BPWM_ADCTS1_TRGSEL4_Msk          (0xful << BPWM_ADCTS1_TRGSEL4_Pos)                /*!< BPWM_T::ADCTS1: TRGSEL4 Mask           */
N
N#define BPWM_ADCTS1_TRGEN4_Pos           (7)                                               /*!< BPWM_T::ADCTS1: TRGEN4 Position        */
N#define BPWM_ADCTS1_TRGEN4_Msk           (0x1ul << BPWM_ADCTS1_TRGEN4_Pos)                 /*!< BPWM_T::ADCTS1: TRGEN4 Mask            */
N
N#define BPWM_ADCTS1_TRGSEL5_Pos          (8)                                               /*!< BPWM_T::ADCTS1: TRGSEL5 Position       */
N#define BPWM_ADCTS1_TRGSEL5_Msk          (0xful << BPWM_ADCTS1_TRGSEL5_Pos)                /*!< BPWM_T::ADCTS1: TRGSEL5 Mask           */
N
N#define BPWM_ADCTS1_TRGEN5_Pos           (15)                                              /*!< BPWM_T::ADCTS1: TRGEN5 Position        */
N#define BPWM_ADCTS1_TRGEN5_Msk           (0x1ul << BPWM_ADCTS1_TRGEN5_Pos)                 /*!< BPWM_T::ADCTS1: TRGEN5 Mask            */
N
N#define BPWM_SSCTL_SSEN0_Pos             (0)                                               /*!< BPWM_T::SSCTL: SSEN0 Position          */
N#define BPWM_SSCTL_SSEN0_Msk             (0x1ul << BPWM_SSCTL_SSEN0_Pos)                   /*!< BPWM_T::SSCTL: SSEN0 Mask              */
N
N#define BPWM_SSCTL_SSRC_Pos              (8)                                               /*!< BPWM_T::SSCTL: SSRC Position           */
N#define BPWM_SSCTL_SSRC_Msk              (0x3ul << BPWM_SSCTL_SSRC_Pos)                    /*!< BPWM_T::SSCTL: SSRC Mask               */
N
N#define BPWM_SSTRG_CNTSEN_Pos            (0)                                               /*!< BPWM_T::SSTRG: CNTSEN Position         */
N#define BPWM_SSTRG_CNTSEN_Msk            (0x1ul << BPWM_SSTRG_CNTSEN_Pos)                  /*!< BPWM_T::SSTRG: CNTSEN Mask             */
N
N#define BPWM_STATUS_CNTMAX0_Pos          (0)                                               /*!< BPWM_T::STATUS: CNTMAX0 Position       */
N#define BPWM_STATUS_CNTMAX0_Msk          (0x1ul << BPWM_STATUS_CNTMAX0_Pos)                /*!< BPWM_T::STATUS: CNTMAX0 Mask           */
N
N#define BPWM_STATUS_ADCTRG0_Pos           (16)                                             /*!< BPWM_T::STATUS: ADCTRG0 Position       */
N#define BPWM_STATUS_ADCTRG0_Msk           (0x1ul << BPWM_STATUS_ADCTRG0_Pos)               /*!< BPWM_T::STATUS: ADCTRG0 Mask           */
N
N#define BPWM_STATUS_ADCTRG1_Pos           (17)                                             /*!< BPWM_T::STATUS: ADCTRG1 Position       */
N#define BPWM_STATUS_ADCTRG1_Msk           (0x1ul << BPWM_STATUS_ADCTRG1_Pos)               /*!< BPWM_T::STATUS: ADCTRG1 Mask           */
N
N#define BPWM_STATUS_ADCTRG2_Pos           (18)                                             /*!< BPWM_T::STATUS: ADCTRG2 Position       */
N#define BPWM_STATUS_ADCTRG2_Msk           (0x1ul << BPWM_STATUS_ADCTRG2_Pos)               /*!< BPWM_T::STATUS: ADCTRG2 Mask           */
N
N#define BPWM_STATUS_ADCTRG3_Pos           (19)                                             /*!< BPWM_T::STATUS: ADCTRG3 Position       */
N#define BPWM_STATUS_ADCTRG3_Msk           (0x1ul << BPWM_STATUS_ADCTRG3_Pos)               /*!< BPWM_T::STATUS: ADCTRG3 Mask           */
N
N#define BPWM_STATUS_ADCTRG4_Pos           (20)                                             /*!< BPWM_T::STATUS: ADCTRG4 Position       */
N#define BPWM_STATUS_ADCTRG4_Msk           (0x1ul << BPWM_STATUS_ADCTRG4_Pos)               /*!< BPWM_T::STATUS: ADCTRG4 Mask           */
N
N#define BPWM_STATUS_ADCTRG5_Pos           (21)                                             /*!< BPWM_T::STATUS: ADCTRG5 Position       */
N#define BPWM_STATUS_ADCTRG5_Msk           (0x1ul << BPWM_STATUS_ADCTRG5_Pos)               /*!< BPWM_T::STATUS: ADCTRG5 Mask           */
N
N#define BPWM_CAPINEN_CAPINEN0_Pos         (0)                                              /*!< BPWM_T::CAPINEN: CAPINEN0 Position     */
N#define BPWM_CAPINEN_CAPINEN0_Msk         (0x1ul << BPWM_CAPINEN_CAPINEN0_Pos)             /*!< BPWM_T::CAPINEN: CAPINEN0 Mask         */
N
N#define BPWM_CAPINEN_CAPINEN1_Pos         (1)                                              /*!< BPWM_T::CAPINEN: CAPINEN1 Position     */
N#define BPWM_CAPINEN_CAPINEN1_Msk         (0x1ul << BPWM_CAPINEN_CAPINEN1_Pos)             /*!< BPWM_T::CAPINEN: CAPINEN1 Mask         */
N
N#define BPWM_CAPINEN_CAPINEN2_Pos         (2)                                              /*!< BPWM_T::CAPINEN: CAPINEN2 Position     */
N#define BPWM_CAPINEN_CAPINEN2_Msk         (0x1ul << BPWM_CAPINEN_CAPINEN2_Pos)             /*!< BPWM_T::CAPINEN: CAPINEN2 Mask         */
N
N#define BPWM_CAPINEN_CAPINEN3_Pos         (3)                                              /*!< BPWM_T::CAPINEN: CAPINEN3 Position     */
N#define BPWM_CAPINEN_CAPINEN3_Msk         (0x1ul << BPWM_CAPINEN_CAPINEN3_Pos)             /*!< BPWM_T::CAPINEN: CAPINEN3 Mask         */
N
N#define BPWM_CAPINEN_CAPINEN4_Pos         (4)                                              /*!< BPWM_T::CAPINEN: CAPINEN4 Position     */
N#define BPWM_CAPINEN_CAPINEN4_Msk         (0x1ul << BPWM_CAPINEN_CAPINEN4_Pos)             /*!< BPWM_T::CAPINEN: CAPINEN4 Mask         */
N
N#define BPWM_CAPINEN_CAPINEN5_Pos         (5)                                              /*!< BPWM_T::CAPINEN: CAPINEN5 Position     */
N#define BPWM_CAPINEN_CAPINEN5_Msk         (0x1ul << BPWM_CAPINEN_CAPINEN5_Pos)             /*!< BPWM_T::CAPINEN: CAPINEN5 Mask         */
N
N#define BPWM_CAPCTL_CAPEN0_Pos            (0)                                              /*!< BPWM_T::CAPCTL: CAPEN0 Position        */
N#define BPWM_CAPCTL_CAPEN0_Msk            (0x1ul << BPWM_CAPCTL_CAPEN0_Pos)                /*!< BPWM_T::CAPCTL: CAPEN0 Mask            */
N
N#define BPWM_CAPCTL_CAPEN1_Pos            (1)                                              /*!< BPWM_T::CAPCTL: CAPEN1 Position        */
N#define BPWM_CAPCTL_CAPEN1_Msk            (0x1ul << BPWM_CAPCTL_CAPEN1_Pos)                /*!< BPWM_T::CAPCTL: CAPEN1 Mask            */
N
N#define BPWM_CAPCTL_CAPEN2_Pos            (2)                                              /*!< BPWM_T::CAPCTL: CAPEN2 Position        */
N#define BPWM_CAPCTL_CAPEN2_Msk            (0x1ul << BPWM_CAPCTL_CAPEN2_Pos)                /*!< BPWM_T::CAPCTL: CAPEN2 Mask            */
N
N#define BPWM_CAPCTL_CAPEN3_Pos            (3)                                              /*!< BPWM_T::CAPCTL: CAPEN3 Position        */
N#define BPWM_CAPCTL_CAPEN3_Msk            (0x1ul << BPWM_CAPCTL_CAPEN3_Pos)                /*!< BPWM_T::CAPCTL: CAPEN3 Mask            */
N
N#define BPWM_CAPCTL_CAPEN4_Pos            (4)                                              /*!< BPWM_T::CAPCTL: CAPEN4 Position        */
N#define BPWM_CAPCTL_CAPEN4_Msk            (0x1ul << BPWM_CAPCTL_CAPEN4_Pos)                /*!< BPWM_T::CAPCTL: CAPEN4 Mask            */
N
N#define BPWM_CAPCTL_CAPEN5_Pos            (5)                                              /*!< BPWM_T::CAPCTL: CAPEN5 Position        */
N#define BPWM_CAPCTL_CAPEN5_Msk            (0x1ul << BPWM_CAPCTL_CAPEN5_Pos)                /*!< BPWM_T::CAPCTL: CAPEN5 Mask            */
N
N#define BPWM_CAPCTL_CAPINV0_Pos           (8)                                              /*!< BPWM_T::CAPCTL: CAPINV0 Position       */
N#define BPWM_CAPCTL_CAPINV0_Msk           (0x1ul << BPWM_CAPCTL_CAPINV0_Pos)               /*!< BPWM_T::CAPCTL: CAPINV0 Mask           */
N
N#define BPWM_CAPCTL_CAPINV1_Pos           (9)                                              /*!< BPWM_T::CAPCTL: CAPINV1 Position       */
N#define BPWM_CAPCTL_CAPINV1_Msk           (0x1ul << BPWM_CAPCTL_CAPINV1_Pos)               /*!< BPWM_T::CAPCTL: CAPINV1 Mask           */
N
N#define BPWM_CAPCTL_CAPINV2_Pos           (10)                                             /*!< BPWM_T::CAPCTL: CAPINV2 Position       */
N#define BPWM_CAPCTL_CAPINV2_Msk           (0x1ul << BPWM_CAPCTL_CAPINV2_Pos)               /*!< BPWM_T::CAPCTL: CAPINV2 Mask           */
N
N#define BPWM_CAPCTL_CAPINV3_Pos           (11)                                             /*!< BPWM_T::CAPCTL: CAPINV3 Position       */
N#define BPWM_CAPCTL_CAPINV3_Msk           (0x1ul << BPWM_CAPCTL_CAPINV3_Pos)               /*!< BPWM_T::CAPCTL: CAPINV3 Mask           */
N
N#define BPWM_CAPCTL_CAPINV4_Pos           (12)                                             /*!< BPWM_T::CAPCTL: CAPINV4 Position       */
N#define BPWM_CAPCTL_CAPINV4_Msk           (0x1ul << BPWM_CAPCTL_CAPINV4_Pos)               /*!< BPWM_T::CAPCTL: CAPINV4 Mask           */
N
N#define BPWM_CAPCTL_CAPINV5_Pos           (13)                                             /*!< BPWM_T::CAPCTL: CAPINV5 Position       */
N#define BPWM_CAPCTL_CAPINV5_Msk           (0x1ul << BPWM_CAPCTL_CAPINV5_Pos)               /*!< BPWM_T::CAPCTL: CAPINV5 Mask           */
N
N#define BPWM_CAPCTL_RCRLDEN0_Pos          (16)                                             /*!< BPWM_T::CAPCTL: RCRLDEN0 Position      */
N#define BPWM_CAPCTL_RCRLDEN0_Msk          (0x1ul << BPWM_CAPCTL_RCRLDEN0_Pos)              /*!< BPWM_T::CAPCTL: RCRLDEN0 Mask          */
N
N#define BPWM_CAPCTL_RCRLDEN1_Pos          (17)                                             /*!< BPWM_T::CAPCTL: RCRLDEN1 Position      */
N#define BPWM_CAPCTL_RCRLDEN1_Msk          (0x1ul << BPWM_CAPCTL_RCRLDEN1_Pos)              /*!< BPWM_T::CAPCTL: RCRLDEN1 Mask          */
N
N#define BPWM_CAPCTL_RCRLDEN2_Pos          (18)                                             /*!< BPWM_T::CAPCTL: RCRLDEN2 Position      */
N#define BPWM_CAPCTL_RCRLDEN2_Msk          (0x1ul << BPWM_CAPCTL_RCRLDEN2_Pos)              /*!< BPWM_T::CAPCTL: RCRLDEN2 Mask          */
N
N#define BPWM_CAPCTL_RCRLDEN3_Pos          (19)                                             /*!< BPWM_T::CAPCTL: RCRLDEN3 Position      */
N#define BPWM_CAPCTL_RCRLDEN3_Msk          (0x1ul << BPWM_CAPCTL_RCRLDEN3_Pos)              /*!< BPWM_T::CAPCTL: RCRLDEN3 Mask          */
N
N#define BPWM_CAPCTL_RCRLDEN4_Pos          (20)                                             /*!< BPWM_T::CAPCTL: RCRLDEN4 Position      */
N#define BPWM_CAPCTL_RCRLDEN4_Msk          (0x1ul << BPWM_CAPCTL_RCRLDEN4_Pos)              /*!< BPWM_T::CAPCTL: RCRLDEN4 Mask          */
N
N#define BPWM_CAPCTL_RCRLDEN5_Pos          (21)                                             /*!< BPWM_T::CAPCTL: RCRLDEN5 Position      */
N#define BPWM_CAPCTL_RCRLDEN5_Msk          (0x1ul << BPWM_CAPCTL_RCRLDEN5_Pos)              /*!< BPWM_T::CAPCTL: RCRLDEN5 Mask          */
N
N#define BPWM_CAPCTL_FCRLDEN0_Pos          (24)                                             /*!< BPWM_T::CAPCTL: FCRLDEN0 Position      */
N#define BPWM_CAPCTL_FCRLDEN0_Msk          (0x1ul << BPWM_CAPCTL_FCRLDEN0_Pos)              /*!< BPWM_T::CAPCTL: FCRLDEN0 Mask          */
N
N#define BPWM_CAPCTL_FCRLDEN1_Pos          (25)                                             /*!< BPWM_T::CAPCTL: FCRLDEN1 Position      */
N#define BPWM_CAPCTL_FCRLDEN1_Msk          (0x1ul << BPWM_CAPCTL_FCRLDEN1_Pos)              /*!< BPWM_T::CAPCTL: FCRLDEN1 Mask          */
N
N#define BPWM_CAPCTL_FCRLDEN2_Pos          (26)                                             /*!< BPWM_T::CAPCTL: FCRLDEN2 Position      */
N#define BPWM_CAPCTL_FCRLDEN2_Msk          (0x1ul << BPWM_CAPCTL_FCRLDEN2_Pos)              /*!< BPWM_T::CAPCTL: FCRLDEN2 Mask          */
N
N#define BPWM_CAPCTL_FCRLDEN3_Pos          (27)                                             /*!< BPWM_T::CAPCTL: FCRLDEN3 Position      */
N#define BPWM_CAPCTL_FCRLDEN3_Msk          (0x1ul << BPWM_CAPCTL_FCRLDEN3_Pos)              /*!< BPWM_T::CAPCTL: FCRLDEN3 Mask          */
N
N#define BPWM_CAPCTL_FCRLDEN4_Pos          (28)                                             /*!< BPWM_T::CAPCTL: FCRLDEN4 Position      */
N#define BPWM_CAPCTL_FCRLDEN4_Msk          (0x1ul << BPWM_CAPCTL_FCRLDEN4_Pos)              /*!< BPWM_T::CAPCTL: FCRLDEN4 Mask          */
N
N#define BPWM_CAPCTL_FCRLDEN5_Pos          (29)                                             /*!< BPWM_T::CAPCTL: FCRLDEN5 Position      */
N#define BPWM_CAPCTL_FCRLDEN5_Msk          (0x1ul << BPWM_CAPCTL_FCRLDEN5_Pos)              /*!< BPWM_T::CAPCTL: FCRLDEN5 Mask          */
N
N#define BPWM_CAPSTS_CRLIFOV0_Pos          (0)                                              /*!< BPWM_T::CAPSTS: CRLIFOV0 Position      */
N#define BPWM_CAPSTS_CRLIFOV0_Msk          (0x1ul << BPWM_CAPSTS_CRLIFOV0_Pos)              /*!< BPWM_T::CAPSTS: CRLIFOV0 Mask          */
N
N#define BPWM_CAPSTS_CRLIFOV1_Pos          (1)                                              /*!< BPWM_T::CAPSTS: CRLIFOV1 Position      */
N#define BPWM_CAPSTS_CRLIFOV1_Msk          (0x1ul << BPWM_CAPSTS_CRLIFOV1_Pos)              /*!< BPWM_T::CAPSTS: CRLIFOV1 Mask          */
N
N#define BPWM_CAPSTS_CRLIFOV2_Pos          (2)                                              /*!< BPWM_T::CAPSTS: CRLIFOV2 Position      */
N#define BPWM_CAPSTS_CRLIFOV2_Msk          (0x1ul << BPWM_CAPSTS_CRLIFOV2_Pos)              /*!< BPWM_T::CAPSTS: CRLIFOV2 Mask          */
N
N#define BPWM_CAPSTS_CRLIFOV3_Pos          (3)                                              /*!< BPWM_T::CAPSTS: CRLIFOV3 Position      */
N#define BPWM_CAPSTS_CRLIFOV3_Msk          (0x1ul << BPWM_CAPSTS_CRLIFOV3_Pos)              /*!< BPWM_T::CAPSTS: CRLIFOV3 Mask          */
N
N#define BPWM_CAPSTS_CRLIFOV4_Pos          (4)                                              /*!< BPWM_T::CAPSTS: CRLIFOV4 Position      */
N#define BPWM_CAPSTS_CRLIFOV4_Msk          (0x1ul << BPWM_CAPSTS_CRLIFOV4_Pos)              /*!< BPWM_T::CAPSTS: CRLIFOV4 Mask          */
N
N#define BPWM_CAPSTS_CRLIFOV5_Pos          (5)                                              /*!< BPWM_T::CAPSTS: CRLIFOV5 Position      */
N#define BPWM_CAPSTS_CRLIFOV5_Msk          (0x1ul << BPWM_CAPSTS_CRLIFOV5_Pos)              /*!< BPWM_T::CAPSTS: CRLIFOV5 Mask          */
N
N#define BPWM_CAPSTS_CFLIFOV0_Pos          (8)                                              /*!< BPWM_T::CAPSTS: CFLIFOV0 Position      */
N#define BPWM_CAPSTS_CFLIFOV0_Msk          (0x1ul << BPWM_CAPSTS_CFLIFOV0_Pos)              /*!< BPWM_T::CAPSTS: CFLIFOV0 Mask          */
N
N#define BPWM_CAPSTS_CFLIFOV1_Pos          (9)                                              /*!< BPWM_T::CAPSTS: CFLIFOV1 Position      */
N#define BPWM_CAPSTS_CFLIFOV1_Msk          (0x1ul << BPWM_CAPSTS_CFLIFOV1_Pos)              /*!< BPWM_T::CAPSTS: CFLIFOV1 Mask          */
N
N#define BPWM_CAPSTS_CFLIFOV2_Pos          (10)                                             /*!< BPWM_T::CAPSTS: CFLIFOV2 Position      */
N#define BPWM_CAPSTS_CFLIFOV2_Msk          (0x1ul << BPWM_CAPSTS_CFLIFOV2_Pos)              /*!< BPWM_T::CAPSTS: CFLIFOV2 Mask          */
N
N#define BPWM_CAPSTS_CFLIFOV3_Pos          (11)                                             /*!< BPWM_T::CAPSTS: CFLIFOV3 Position      */
N#define BPWM_CAPSTS_CFLIFOV3_Msk          (0x1ul << BPWM_CAPSTS_CFLIFOV3_Pos)              /*!< BPWM_T::CAPSTS: CFLIFOV3 Mask          */
N
N#define BPWM_CAPSTS_CFLIFOV4_Pos          (12)                                             /*!< BPWM_T::CAPSTS: CFLIFOV4 Position      */
N#define BPWM_CAPSTS_CFLIFOV4_Msk          (0x1ul << BPWM_CAPSTS_CFLIFOV4_Pos)              /*!< BPWM_T::CAPSTS: CFLIFOV4 Mask          */
N
N#define BPWM_CAPSTS_CFLIFOV5_Pos          (13)                                             /*!< BPWM_T::CAPSTS: CFLIFOV5 Position      */
N#define BPWM_CAPSTS_CFLIFOV5_Msk          (0x1ul << BPWM_CAPSTS_CFLIFOV5_Pos)              /*!< BPWM_T::CAPSTS: CFLIFOV5 Mask          */
N
N#define BPWM_RCAPDAT0_RCAPDAT_Pos        (0)                                               /*!< BPWM_T::RCAPDAT0: RCAPDAT Position     */
N#define BPWM_RCAPDAT0_RCAPDAT_Msk        (0xfffful << BPWM_RCAPDAT0_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT0: RCAPDAT Mask         */
N
N#define BPWM_FCAPDAT0_FCAPDAT_Pos        (0)                                               /*!< BPWM_T::FCAPDAT0: FCAPDAT Position     */
N#define BPWM_FCAPDAT0_FCAPDAT_Msk        (0xfffful << BPWM_FCAPDAT0_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT0: FCAPDAT Mask         */
N
N#define BPWM_RCAPDAT1_RCAPDAT_Pos        (0)                                               /*!< BPWM_T::RCAPDAT1: RCAPDAT Position     */
N#define BPWM_RCAPDAT1_RCAPDAT_Msk        (0xfffful << BPWM_RCAPDAT1_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT1: RCAPDAT Mask         */
N
N#define BPWM_FCAPDAT1_FCAPDAT_Pos        (0)                                               /*!< BPWM_T::FCAPDAT1: FCAPDAT Position     */
N#define BPWM_FCAPDAT1_FCAPDAT_Msk        (0xfffful << BPWM_FCAPDAT1_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT1: FCAPDAT Mask         */
N
N#define BPWM_RCAPDAT2_RCAPDAT_Pos        (0)                                               /*!< BPWM_T::RCAPDAT2: RCAPDAT Position     */
N#define BPWM_RCAPDAT2_RCAPDAT_Msk        (0xfffful << BPWM_RCAPDAT2_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT2: RCAPDAT Mask         */
N
N#define BPWM_FCAPDAT2_FCAPDAT_Pos        (0)                                               /*!< BPWM_T::FCAPDAT2: FCAPDAT Position     */
N#define BPWM_FCAPDAT2_FCAPDAT_Msk        (0xfffful << BPWM_FCAPDAT2_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT2: FCAPDAT Mask         */
N
N#define BPWM_RCAPDAT3_RCAPDAT_Pos        (0)                                               /*!< BPWM_T::RCAPDAT3: RCAPDAT Position     */
N#define BPWM_RCAPDAT3_RCAPDAT_Msk        (0xfffful << BPWM_RCAPDAT3_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT3: RCAPDAT Mask         */
N
N#define BPWM_FCAPDAT3_FCAPDAT_Pos        (0)                                               /*!< BPWM_T::FCAPDAT3: FCAPDAT Position     */
N#define BPWM_FCAPDAT3_FCAPDAT_Msk        (0xfffful << BPWM_FCAPDAT3_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT3: FCAPDAT Mask         */
N
N#define BPWM_RCAPDAT4_RCAPDAT_Pos        (0)                                               /*!< BPWM_T::RCAPDAT4: RCAPDAT Position     */
N#define BPWM_RCAPDAT4_RCAPDAT_Msk        (0xfffful << BPWM_RCAPDAT4_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT4: RCAPDAT Mask         */
N
N#define BPWM_FCAPDAT4_FCAPDAT_Pos        (0)                                               /*!< BPWM_T::FCAPDAT4: FCAPDAT Position     */
N#define BPWM_FCAPDAT4_FCAPDAT_Msk        (0xfffful << BPWM_FCAPDAT4_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT4: FCAPDAT Mask         */
N
N#define BPWM_RCAPDAT5_RCAPDAT_Pos        (0)                                               /*!< BPWM_T::RCAPDAT5: RCAPDAT Position     */
N#define BPWM_RCAPDAT5_RCAPDAT_Msk        (0xfffful << BPWM_RCAPDAT5_RCAPDAT_Pos)           /*!< BPWM_T::RCAPDAT5: RCAPDAT Mask         */
N
N#define BPWM_FCAPDAT5_FCAPDAT_Pos        (0)                                               /*!< BPWM_T::FCAPDAT5: FCAPDAT Position     */
N#define BPWM_FCAPDAT5_FCAPDAT_Msk        (0xfffful << BPWM_FCAPDAT5_FCAPDAT_Pos)           /*!< BPWM_T::FCAPDAT5: FCAPDAT Mask         */
N
N#define BPWM_CAPIEN_CAPRIEN0_Pos          (0)                                              /*!< BPWM_T::CAPIEN: CAPRIEN0 Position      */
N#define BPWM_CAPIEN_CAPRIEN0_Msk          (0x1ul << BPWM_CAPIEN_CAPRIEN0_Pos)              /*!< BPWM_T::CAPIEN: CAPRIEN0 Mask          */
N
N#define BPWM_CAPIEN_CAPRIEN1_Pos          (1)                                              /*!< BPWM_T::CAPIEN: CAPRIEN1 Position      */
N#define BPWM_CAPIEN_CAPRIEN1_Msk          (0x1ul << BPWM_CAPIEN_CAPRIEN1_Pos)              /*!< BPWM_T::CAPIEN: CAPRIEN1 Mask          */
N
N#define BPWM_CAPIEN_CAPRIEN2_Pos          (2)                                              /*!< BPWM_T::CAPIEN: CAPRIEN2 Position      */
N#define BPWM_CAPIEN_CAPRIEN2_Msk          (0x1ul << BPWM_CAPIEN_CAPRIEN2_Pos)              /*!< BPWM_T::CAPIEN: CAPRIEN2 Mask          */
N
N#define BPWM_CAPIEN_CAPRIEN3_Pos          (3)                                              /*!< BPWM_T::CAPIEN: CAPRIEN3 Position      */
N#define BPWM_CAPIEN_CAPRIEN3_Msk          (0x1ul << BPWM_CAPIEN_CAPRIEN3_Pos)              /*!< BPWM_T::CAPIEN: CAPRIEN3 Mask          */
N
N#define BPWM_CAPIEN_CAPRIEN4_Pos          (4)                                              /*!< BPWM_T::CAPIEN: CAPRIEN4 Position      */
N#define BPWM_CAPIEN_CAPRIEN4_Msk          (0x1ul << BPWM_CAPIEN_CAPRIEN4_Pos)              /*!< BPWM_T::CAPIEN: CAPRIEN4 Mask          */
N
N#define BPWM_CAPIEN_CAPRIEN5_Pos          (5)                                              /*!< BPWM_T::CAPIEN: CAPRIEN5 Position      */
N#define BPWM_CAPIEN_CAPRIEN5_Msk          (0x1ul << BPWM_CAPIEN_CAPRIEN5_Pos)              /*!< BPWM_T::CAPIEN: CAPRIEN5 Mask          */
N
N#define BPWM_CAPIEN_CAPFIEN0_Pos          (8)                                              /*!< BPWM_T::CAPIEN: CAPFIEN0 Position      */
N#define BPWM_CAPIEN_CAPFIEN0_Msk          (0x1ul << BPWM_CAPIEN_CAPFIEN0_Pos)              /*!< BPWM_T::CAPIEN: CAPFIEN0 Mask          */
N
N#define BPWM_CAPIEN_CAPFIEN1_Pos          (9)                                              /*!< BPWM_T::CAPIEN: CAPFIEN1 Position      */
N#define BPWM_CAPIEN_CAPFIEN1_Msk          (0x1ul << BPWM_CAPIEN_CAPFIEN1_Pos)              /*!< BPWM_T::CAPIEN: CAPFIEN1 Mask          */
N
N#define BPWM_CAPIEN_CAPFIEN2_Pos          (10)                                             /*!< BPWM_T::CAPIEN: CAPFIEN2 Position      */
N#define BPWM_CAPIEN_CAPFIEN2_Msk          (0x1ul << BPWM_CAPIEN_CAPFIEN2_Pos)              /*!< BPWM_T::CAPIEN: CAPFIEN2 Mask          */
N
N#define BPWM_CAPIEN_CAPFIEN3_Pos          (11)                                             /*!< BPWM_T::CAPIEN: CAPFIEN3 Position      */
N#define BPWM_CAPIEN_CAPFIEN3_Msk          (0x1ul << BPWM_CAPIEN_CAPFIEN3_Pos)              /*!< BPWM_T::CAPIEN: CAPFIEN3 Mask          */
N
N#define BPWM_CAPIEN_CAPFIEN4_Pos          (12)                                             /*!< BPWM_T::CAPIEN: CAPFIEN4 Position      */
N#define BPWM_CAPIEN_CAPFIEN4_Msk          (0x1ul << BPWM_CAPIEN_CAPFIEN4_Pos)              /*!< BPWM_T::CAPIEN: CAPFIEN4 Mask          */
N
N#define BPWM_CAPIEN_CAPFIEN5_Pos          (13)                                             /*!< BPWM_T::CAPIEN: CAPFIEN5 Position      */
N#define BPWM_CAPIEN_CAPFIEN5_Msk          (0x1ul << BPWM_CAPIEN_CAPFIEN5_Pos)              /*!< BPWM_T::CAPIEN: CAPFIEN5 Mask          */
N
N#define BPWM_CAPIF_CRLIF0_Pos             (0)                                              /*!< BPWM_T::CAPIF: CRLIF0 Position         */
N#define BPWM_CAPIF_CRLIF0_Msk             (0x1ul << BPWM_CAPIF_CRLIF0_Pos)                 /*!< BPWM_T::CAPIF: CRLIF0 Mask             */
N
N#define BPWM_CAPIF_CRLIF1_Pos             (1)                                              /*!< BPWM_T::CAPIF: CRLIF1 Position         */
N#define BPWM_CAPIF_CRLIF1_Msk             (0x1ul << BPWM_CAPIF_CRLIF1_Pos)                 /*!< BPWM_T::CAPIF: CRLIF1 Mask             */
N
N#define BPWM_CAPIF_CRLIF2_Pos             (2)                                              /*!< BPWM_T::CAPIF: CRLIF2 Position         */
N#define BPWM_CAPIF_CRLIF2_Msk             (0x1ul << BPWM_CAPIF_CRLIF2_Pos)                 /*!< BPWM_T::CAPIF: CRLIF2 Mask             */
N
N#define BPWM_CAPIF_CRLIF3_Pos             (3)                                              /*!< BPWM_T::CAPIF: CRLIF3 Position         */
N#define BPWM_CAPIF_CRLIF3_Msk             (0x1ul << BPWM_CAPIF_CRLIF3_Pos)                 /*!< BPWM_T::CAPIF: CRLIF3 Mask             */
N
N#define BPWM_CAPIF_CRLIF4_Pos             (4)                                              /*!< BPWM_T::CAPIF: CRLIF4 Position         */
N#define BPWM_CAPIF_CRLIF4_Msk             (0x1ul << BPWM_CAPIF_CRLIF4_Pos)                 /*!< BPWM_T::CAPIF: CRLIF4 Mask             */
N
N#define BPWM_CAPIF_CRLIF5_Pos             (5)                                              /*!< BPWM_T::CAPIF: CRLIF5 Position         */
N#define BPWM_CAPIF_CRLIF5_Msk             (0x1ul << BPWM_CAPIF_CRLIF5_Pos)                 /*!< BPWM_T::CAPIF: CRLIF5 Mask             */
N
N#define BPWM_CAPIF_CFLIF0_Pos             (8)                                              /*!< BPWM_T::CAPIF: CFLIF0 Position         */
N#define BPWM_CAPIF_CFLIF0_Msk             (0x1ul << BPWM_CAPIF_CFLIF0_Pos)                 /*!< BPWM_T::CAPIF: CFLIF0 Mask             */
N
N#define BPWM_CAPIF_CFLIF1_Pos             (9)                                              /*!< BPWM_T::CAPIF: CFLIF1 Position         */
N#define BPWM_CAPIF_CFLIF1_Msk             (0x1ul << BPWM_CAPIF_CFLIF1_Pos)                 /*!< BPWM_T::CAPIF: CFLIF1 Mask             */
N
N#define BPWM_CAPIF_CFLIF2_Pos             (10)                                             /*!< BPWM_T::CAPIF: CFLIF2 Position         */
N#define BPWM_CAPIF_CFLIF2_Msk             (0x1ul << BPWM_CAPIF_CFLIF2_Pos)                 /*!< BPWM_T::CAPIF: CFLIF2 Mask             */
N
N#define BPWM_CAPIF_CFLIF3_Pos             (11)                                             /*!< BPWM_T::CAPIF: CFLIF3 Position         */
N#define BPWM_CAPIF_CFLIF3_Msk             (0x1ul << BPWM_CAPIF_CFLIF3_Pos)                 /*!< BPWM_T::CAPIF: CFLIF3 Mask             */
N
N#define BPWM_CAPIF_CFLIF4_Pos             (12)                                             /*!< BPWM_T::CAPIF: CFLIF4 Position         */
N#define BPWM_CAPIF_CFLIF4_Msk             (0x1ul << BPWM_CAPIF_CFLIF4_Pos)                 /*!< BPWM_T::CAPIF: CFLIF4 Mask             */
N
N#define BPWM_CAPIF_CFLIF5_Pos             (13)                                             /*!< BPWM_T::CAPIF: CFLIF5 Position         */
N#define BPWM_CAPIF_CFLIF5_Msk             (0x1ul << BPWM_CAPIF_CFLIF5_Pos)                 /*!< BPWM_T::CAPIF: CFLIF5 Mask             */
N
N#define BPWM_PBUF_PBUF_Pos               (0)                                               /*!< BPWM_T::PBUF: PBUF Position            */
N#define BPWM_PBUF_PBUF_Msk               (0xfffful << BPWM_PBUF_PBUF_Pos)                  /*!< BPWM_T::PBUF: PBUF Mask                */
N
N#define BPWM_CMPBUF_CMPBUF_Pos           (0)                                               /*!< BPWM_T::CMPBUF: CMPBUF Position        */
N#define BPWM_CMPBUF_CMPBUF_Msk           (0xfffful << BPWM_CMPBUF_CMPBUF_Pos)              /*!< BPWM_T::CMPBUF: CMPBUF Mask            */
N
N/**@}*/ /* BPWM_CONST */
N/**@}*/ /* end of BPWM register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __BPWM_REG_H__ */
L 154 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "clk_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\clk_reg.h" 1
N/**************************************************************************//**
N * @file     clk_reg.h
N * @version  V1.00
N * @brief    CLK register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __CLK_REG_H__
N#define __CLK_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup CLK System Clock Controller (CLK)
N    Memory Mapped Structure for CLK Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var CLK_T::PWRCTL
N     * Offset: 0x00  System Power-down Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |XTLEN     |External HXT or LXT Crystal Oscillator Enable Bit (Write Protect)
N     * |        |          |The default clock source is from HIRC
N     * |        |          |These two bits are default set to "00" and the PF.0 and PF.1 pins are GPIO.
N     * |        |          |00 = HXT & LXT Disabled (default).
N     * |        |          |01 = HXT Enabled.
N     * |        |          |10 = LXT Enabled.
N     * |        |          |11 = Reserved.
N     * |        |          |Note 1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note 2: This bit is over-written by CFOSC (CONFIG0[26]) after reset.
N     * |[2]     |HIRCEN    |HIRC Enable Bit (Write Protect)
N     * |        |          |0 = 48 MHz internal high speed RC oscillator (HIRC) Disabled.
N     * |        |          |1 = 48 MHz internal high speed RC oscillator (HIRC) Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[3]     |LIRCEN    |LIRC Enable Bit (Write Protect)
N     * |        |          |0 = 10 kHz internal low speed RC oscillator (LIRC) Disabled.
N     * |        |          |1 = 10 kHz internal low speed RC oscillator (LIRC) Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[4]     |PDWKDLY   |Enable the Wake-up Delay Counter (Write Protect)
N     * |        |          |When the chip wakes up from Power-down mode, the clock control will delay certain clock cycles to wait system clock stable.
N     * |        |          |The delayed clock cycle is 4096 clock cycles when chip work at 4~24 MHz external high speed crystal oscillator (HXT), and 512 clock cycles when chip work at 48 MHz internal high speed RC oscillator (HIRC).
N     * |        |          |0 = Clock cycles delay Disabled.
N     * |        |          |1 = Clock cycles delay Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[5]     |PDWKIEN   |Power-down Mode Wake-up Interrupt Enable Bit (Write Protect)
N     * |        |          |0 = Power-down mode wake-up interrupt Disabled.
N     * |        |          |1 = Power-down mode wake-up interrupt Enabled.
N     * |        |          |Note1: The interrupt will occur when both PDWKIF and PDWKIEN are high.
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[6]     |PDWKIF    |Power-down Mode Wake-up Interrupt Status
N     * |        |          |Set by "Power-down wake-up event", it indicates that resume from Power-down mode"
N     * |        |          |The flag is set if the EINT0~5, GPIO, USBD, UART0, WDT, BOD, TMR0~3 or I2C0~1 wake-up occurred.
N     * |        |          |Note1: Write 1 to clear the bit to 0.
N     * |        |          |Note2: This bit works only if PDWKIEN (CLK_PWRCTL[5]) set to 1.
N     * |[7]     |PDEN      |System Power-down Enable (Write Protect)
N     * |        |          |When this bit is set to 1, Power-down mode is enabled and chip keeps active till the CPU sleep mode is also active and then the chip enters Power-down mode.
N     * |        |          |When chip wakes up from Power-down mode, this bit is auto cleared
N     * |        |          |Users need to set this bit again for next Power-down.
N     * |        |          |In Power-down mode, HXT and the HIRC will be disabled in this mode, but LXT and LIRC are not controlled by Power-down mode.
N     * |        |          |In Power-down mode, the PLL and system clock are disabled, and ignored the clock source selection
N     * |        |          |The clocks of peripheral are not controlled by Power-down mode, if the peripheral clock source is from LXT or LIRC.
N     * |        |          |0 = Chip operating normally or chip in idle mode because of WFI command.
N     * |        |          |1 = Chip enters Power-down mode instant or wait CPU sleep command WFI.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[11:10] |HXTGAIN   |HXT Gain Control Bit (Write Protect)
N     * |        |          |This is a protected register. Please refer to open lock sequence to program it.
N     * |        |          |Gain control is used to enlarge the gain of crystal to make sure crystal work normally
N     * |        |          |If gain control is enabled, crystal will consume more power than gain control off.
N     * |        |          |00 = HXT frequency is lower than from 8 MHz.
N     * |        |          |01 = HXT frequency is from 8 MHz to 12 MHz.
N     * |        |          |10 = HXT frequency is from 12 MHz to 16 MHz.
N     * |        |          |11 = HXT frequency is higher than 16 MHz.
N     * |        |          |Note 1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note 2: This bit is over-written by XT1XSG (CONFIG0[18:17]) after reset.
N     * |[12]    |HXTSELTYP |HXT Crystal Type Select Bit (Write Protect)
N     * |        |          |This is a protected register. Please refer to open lock sequence to program it.
N     * |        |          |0 = Select INV type.
N     * |        |          |1 = Select GM type.
N     * |        |          |Note 1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note 2: This bit is over-written by XT1TYP (CONFIG0[16]) after reset.
N     * @var CLK_T::AHBCLK
N     * Offset: 0x04  AHB Devices Clock Enable Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |PDMACKEN  |PDMA Controller Clock Enable Bit
N     * |        |          |0 = PDMA peripheral clock Disabled.
N     * |        |          |1 = PDMA peripheral clock Enabled.
N     * |[2]     |ISPCKEN   |Flash ISP Controller Clock Enable Bit
N     * |        |          |0 = Flash ISP peripheral clock Disabled.
N     * |        |          |1 = Flash ISP peripheral clock Enabled.
N     * |[15]    |FMCIDLE   |Flash Memory Controller Clock Enable Bit in IDLE Mode
N     * |        |          |0 = FMC peripheral clock Disabled when chip operating at IDLE mode.
N     * |        |          |1 = FMC peripheral clock Enabled when chip operating at IDLE mode.
N     * |[16]    |GPIOACKEN |General Purpose I/O PA Group Clock Enable Bit
N     * |        |          |0 = GPIO PA group clock Disabled.
N     * |        |          |1 = GPIO PA group clock Enabled.
N     * |[17]    |GPIOBCKEN |General Purpose I/O PB Group Clock Enable Bit
N     * |        |          |0 = GPIO PB group clock Disabled.
N     * |        |          |1 = GPIO PB group clock Enabled.
N     * |[18]    |GPIOCCKEN |General Purpose I/O PC Group Clock Enable Bit
N     * |        |          |0 = GPIO PC group clock Disabled.
N     * |        |          |1 = GPIO PC group clock Enabled.
N     * |[19]    |GPIODCKEN |General Purpose I/O PD Group Clock Enable Bit
N     * |        |          |0 = GPIO PD group clock Disabled.
N     * |        |          |1 = GPIO PD group clock Enabled.
N     * |[20]    |GPIOECKEN |General Purpose I/O PE Group Clock Enable Bit
N     * |        |          |0 = GPIO PE group clock Disabled.
N     * |        |          |1 = GPIO PE group clock Enabled.
N     * |[21]    |GPIOFCKEN |General Purpose I/O PF Group Clock Enable Bit
N     * |        |          |0 = GPIO PF group clock Disabled.
N     * |        |          |1 = GPIO PF group clock Enabled.
N     * @var CLK_T::APBCLK0
N     * Offset: 0x08  APB Devices Clock Enable Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WDTCKEN   |Watchdog Timer Clock Enable Bit (Write Protect)
N     * |        |          |0 = Watchdog Timer Clock Disabled.
N     * |        |          |1 = Watchdog Timer Clock Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[2]     |TMR0CKEN  |Timer0 Clock Enable Bit
N     * |        |          |0 = Timer0 Clock Disabled.
N     * |        |          |1 = Timer0 Clock Enabled.
N     * |[3]     |TMR1CKEN  |Timer1 Clock Enable Bit
N     * |        |          |0 = Timer1 Clock Disabled.
N     * |        |          |1 = Timer1 Clock Enabled.
N     * |[4]     |TMR2CKEN  |Timer2 Clock Enable Bit
N     * |        |          |0 = Timer2 Clock Disabled.
N     * |        |          |1 = Timer2 Clock Enabled.
N     * |[5]     |TMR3CKEN  |Timer3 Clock Enable Bit
N     * |        |          |0 = Timer3 Clock Disabled.
N     * |        |          |1 = Timer3 Clock Enabled.
N     * |[6]     |CLKOCKEN  |CLKO Clock Enable Bit
N     * |        |          |0 = CLKO Clock Disabled.
N     * |        |          |1 = CLKO Clock Enabled.
N     * |[8]     |I2C0CKEN  |I2C0 Clock Enable Bit
N     * |        |          |0 = I2C0 Clock Disabled.
N     * |        |          |1 = I2C0 Clock Enabled.
N     * |[9]     |I2C1CKEN  |I2C1 Clock Enable Bit
N     * |        |          |0 = I2C1 Clock Disabled.
N     * |        |          |1 = I2C1 Clock Enabled.
N     * |[12]    |SPI0CKEN  |SPI0 Clock Enable Bit
N     * |        |          |0 = SPI0 Clock Disabled.
N     * |        |          |1 = SPI0 Clock Enabled.
N     * |[16]    |UART0CKEN |UART0 Clock Enable Bit
N     * |        |          |0 = UART0 clock Disabled.
N     * |        |          |1 = UART0 clock Enabled.
N     * |[20]    |BPWM0CKEN |BPWM0 Clock Enable Bit
N     * |        |          |0 = BPWM0 clock Disabled.
N     * |        |          |1 = BPWM0 clock Enabled.
N     * |[21]    |BPWM1CKEN |BPWM1 Clock Enable Bit
N     * |        |          |0 = BPWM1 clock Disabled.
N     * |        |          |1 = BPWM1 clock Enabled.
N     * |[22]    |PWM0CKEN  |PWM0 Clock Enable Bit
N     * |        |          |0 = PWM0 clock Disabled.
N     * |        |          |1 = PWM0 clock Enabled.
N     * |[23]    |PWM1CKEN  |PWM1 Clock Enable Bit
N     * |        |          |0 = PWM1 clock Disabled.
N     * |        |          |1 = PWM1 clock Enabled.
N     * |[27]    |USBDCKEN  |USB Device Clock Enable Bit
N     * |        |          |0 = USB Device clock Disabled.
N     * |        |          |1 = USB Device clock Enabled.
N     * |[28]    |ADCCKEN   |Analog-digital-converter (EADC) Clock Enable Bit
N     * |        |          |0 = ADC clock Disabled.
N     * |        |          |1 = ADC clock Enabled.
N     * @var CLK_T::STATUS
N     * Offset: 0x0C  Clock Status Monitor Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |HXTSTB    |HXT Clock Source Stable Flag (Read Only)
N     * |        |          |0 = 4~24 MHz external high speed crystal oscillator (HXT) clock is not stable or disabled.
N     * |        |          |1 = 4~24 MHz external high speed crystal oscillator (HXT)clock is stable and enabled.
N     * |[1]     |LXTSTB    |LXT Clock Source Stable Flag (Read Only)
N     * |        |          |0 = 32.768 kHz external low speed crystal oscillator (LXT) clock is not stable or disabled.
N     * |        |          |1 = 32.768 kHz external low speed crystal oscillator (LXT) clock is stabled and enabled.
N     * |[2]     |PLLSTB    |Internal PLL Clock Source Stable Flag (Read Only)
N     * |        |          |0 = Internal PLL clock is not stable or disabled.
N     * |        |          |1 = Internal PLL clock is stable and enabled.
N     * |[3]     |LIRCSTB   |LIRC Clock Source Stable Flag (Read Only)
N     * |        |          |0 = 10 kHz internal low speed RC oscillator (LIRC) clock is not stable or disabled.
N     * |        |          |1 = 10 kHz internal low speed RC oscillator (LIRC) clock is stable and enabled.
N     * |[4]     |HIRCSTB   |HIRC Clock Source Stable Flag (Read Only)
N     * |        |          |0 = 48 MHz internal high speed RC oscillator (HIRC) clock is not stable or disabled.
N     * |        |          |1 = 48 MHz internal high speed RC oscillator (HIRC) clock is stabe and enabled.
N     * |[7]     |CLKSFAIL  |Clock Switching Fail Flag (Read Only)
N     * |        |          |This bit is updated when software switches system clock source
N     * |        |          |If switch target clock is stable, this bit will be set to 0
N     * |        |          |If switch target clock is not stable, this bit will be set to 1.
N     * |        |          |0 = Clock switching success.
N     * |        |          |1 = Clock switching failure.
N     * |        |          |Note 1: Clock switch will finish automatically when target clcok is stable even if this bit already set to 1.
N     * @var CLK_T::CLKSEL0
N     * Offset: 0x10  Clock Source Select Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |HCLKSEL   |HCLK Clock Source Selection (Write Protect)
N     * |        |          |Before clock switching, the related clock sources (both pre-select and new-select) must be turned on.
N     * |        |          |The default value is reloaded from the value of CFOSC (CONFIG0[26:24]) in user configuration register of Flash controller by any reset
N     * |        |          |Therefore the default value is either 000b or 111b.
N     * |        |          |000 = Clock source from HXT.
N     * |        |          |001 = Clock source from LXT.
N     * |        |          |010 = Clock source from PLL clock.
N     * |        |          |011 = Clock source from LIRC.
N     * |        |          |100 = Clock source from HIRC (48 MHz).
N     * |        |          |101 = Clock source from PLL clock divided by 2.
N     * |        |          |111 = Clock source from HIRC clock divided by 2 (24 MHz).
N     * |        |          |Other = Reserved.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[5:3]   |STCLKSEL  |Cortex-M0 SysTick Clock Source Selection (Write Protect)
N     * |        |          |If SYST_CTRL[2]=0, SysTick uses listed clock source below.
N     * |        |          |000 = Clock source from HXT.
N     * |        |          |001 = Clock source from LXT.
N     * |        |          |010 = Clock source from HXT/2.
N     * |        |          |011 = Clock source from HCLK/2.
N     * |        |          |111 = Clock source from HIRC/4 (12 MHz).
N     * |        |          |Note: if SysTick clock source is not from HCLK (i.e
N     * |        |          |SYST_CTRL[2] = 0), SysTick clock source must less than or equal to HCLK/2.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[6]     |PCLK0SEL  |PCLK0 Clock Source Selection (Write Protect)
N     * |        |          |0 = APB0 BUS clock source from HCLK.
N     * |        |          |1 = APB0 BUS clock source from HCLK/2.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[7]     |PCLK1SEL  |PCLK1 Clock Source Selection (Write Protect)
N     * |        |          |0 = APB1 BUS clock source from HCLK.
N     * |        |          |1 = APB1 BUS clock source from HCLK/2.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var CLK_T::CLKSEL1
N     * Offset: 0x14  Clock Source Select Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |WDTSEL    |Watchdog Timer Clock Source Selection (Write Protect)
N     * |        |          |00 = Reserved.
N     * |        |          |01 = Clock source from 32.768 kHz external low speed crystal oscillator (LXT) clock.
N     * |        |          |10 = Clock source from HCLK/2048 clock.
N     * |        |          |11 = Clock source from 10 kHz internal low speed RC oscillator (LIRC) clock.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[3:2]   |ADCSEL    |ADC Peripheral Clock Source Selection
N     * |        |          |00 = Clock source is from HXT.
N     * |        |          |01 = Clock source is from PLL.
N     * |        |          |10 = Clock source is from PCLK0.
N     * |        |          |11 = Clock source is from HIRC/2 (24 MHz).
N     * |[10:8]  |TMR0SEL   |TIMER0 Clock Source Selection
N     * |        |          |000 = Clock source from 4~24 MHz external high speed crystal oscillator (HXT) clock.
N     * |        |          |001 = Clock source from 32.768 kHz external low speed crystal oscillator (LXT) clock.
N     * |        |          |010 = Clock source from PCLK0.
N     * |        |          |011 = Clock source from external clock T0 pin.
N     * |        |          |101 = Clock source from 10 kHz internal low speed RC oscillator (LIRC) clock.
N     * |        |          |111 = Clock source from 24 MHz internal high speed RC oscillator (HIRC/2) clock.
N     * |        |          |Others = Reserved.
N     * |[14:12] |TMR1SEL   |TIMER1 Clock Source Selection
N     * |        |          |000 = Clock source from 4~24 MHz external high speed crystal oscillator (HXT) clock.
N     * |        |          |001 = Clock source from 32.768 kHz external low speed crystal oscillator (LXT) clock.
N     * |        |          |010 = Clock source from PCLK0.
N     * |        |          |011 = Clock source from external clock T1 pin.
N     * |        |          |101 = Clock source from 10 kHz internal low speed RC oscillator (LIRC) clock.
N     * |        |          |111 = Clock source from 24 MHz internal high speed RC oscillator (HIRC/2) clock.
N     * |        |          |Others = Reserved.
N     * |[18:16] |TMR2SEL   |TIMER2 Clock Source Selection
N     * |        |          |000 = Clock source from 4~24 MHz external high speed crystal oscillator (HXT) clock.
N     * |        |          |001 = Clock source from 32.768 kHz external low speed crystal oscillator (LXT) clock.
N     * |        |          |010 = Clock source from PCLK1.
N     * |        |          |011 = Clock source from external clock T2 pin.
N     * |        |          |101 = Clock source from 10 kHz internal low speed RC oscillator (LIRC) clock.
N     * |        |          |111 = Clock source from 24 MHz internal high speed RC oscillator (HIRC/2) clock.
N     * |        |          |Others = Reserved.
N     * |[22:20] |TMR3SEL   |TIMER3 Clock Source Selection
N     * |        |          |000 = Clock source from 4~24 MHz external high speed crystal oscillator (HXT) clock.
N     * |        |          |001 = Clock source from 32.768 kHz external low speed crystal oscillator (LXT) clock.
N     * |        |          |010 = Clock source from PCLK1.
N     * |        |          |011 = Clock source from external clock T3 pin.
N     * |        |          |101 = Clock source from 10 kHz internal low speed RC oscillator (LIRC) clock.
N     * |        |          |111 = Clock source from 24 MHz internal high speed RC oscillator (HIRC/2) clock.
N     * |        |          |Others = Reserved.
N     * |[25:24] |UARTSEL   |UART Clock Source Selection
N     * |        |          |00 = Clock source from 4~24 MHz external high speed crystal oscillator (HXT) clock.
N     * |        |          |01 = Clock source from PLL clock.
N     * |        |          |10 = Clock source from 32.768 kHz external low speed crystal oscillator (LXT) clock.
N     * |        |          |11 = Clock source from 24 MHz internal high speed RC oscillator (HIRC/2) clock.
N     * |[28]    |BPWM0SEL  |BPWM0 Clock Source Selection
N     * |        |          |The peripheral clock source of BPWM0 is defined by BPWM0SEL.
N     * |        |          |0 = Clock source from PLL clock.
N     * |        |          |1 = Clock source from PCLK0.
N     * |[29]    |BPWM1SEL  |BPWM1 Clock Source Selection
N     * |        |          |The peripheral clock source of BPWM1 is defined by BPWM1SEL.
N     * |        |          |0 = Clock source from PLL clock.
N     * |        |          |1 = Clock source from PCLK1.
N     * |[30]    |PWM0SEL   |PWM0 Clock Source Selection
N     * |        |          |The peripheral clock source of PWM1 is defined by PWM0SEL.
N     * |        |          |0 = Clock source from PLL clock.
N     * |        |          |1 = Clock source from PCLK0.
N     * |[31]    |PWM1SEL   |PWM1 Clock Source Selection
N     * |        |          |The peripheral clock source of PWM1 is defined by PWM1SEL.
N     * |        |          |0 = Clock source from PLL clock.
N     * |        |          |1 = Clock source from PCLK1.
N     * @var CLK_T::CLKDIV0
N     * Offset: 0x18  Clock Divider Number Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |HCLKDIV   |HCLK Clock Divide Number From HCLK Clock Source
N     * |        |          |HCLK clock frequency = (HCLK clock source frequency) / (HCLKDIV + 1).
N     * |[7:4]   |USBDIV    |USB Clock Divide Number From PLL Clock
N     * |        |          |USB clock frequency = (PLL frequency) / (USBDIV + 1).
N     * |[11:8]  |UARTDIV   |UART Clock Divide Number From UART Clock Source
N     * |        |          |UART clock frequency = (UART clock source frequency) / (UARTDIV + 1).
N     * |[23:16] |ADCDIV    |ADC Clock Divide Number From EADC Clock Source
N     * |        |          |ADC clock frequency = (ADC clock source frequency) / (ADCDIV + 1).
N     * @var CLK_T::CLKSEL2
N     * Offset: 0x1C  Clock Source Select Control Register 2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4:2]   |CLKOSEL   |Clock Divider Clock Source Selection
N     * |        |          |000 = Clock source from 4~24 MHz external high speed crystal oscillator (HXT) clock.
N     * |        |          |001 = Clock source from 32.768 kHz external low speed crystal oscillator (LXT) clock.
N     * |        |          |010 = Clock source from HCLK.
N     * |        |          |011 = Clock source from 48 MHz internal high speed RC oscillator (HIRC) clock and devided by 2
N     * |        |          |(HIRC/2 = 24 MHz).
N     * |        |          |101 = Clock source from 48 MHz internal high speed RC oscillator (HIRC) clock.
N     * |        |          |111 = Clock source from SOF (USB Start Of Frame) event. (not 50% duty cycle)
N     * |        |          |Others = Reserved.
N     * |[17:16] |WWDTSEL   |Window Watchdog Timer Clock Source Selection
N     * |        |          |10 = Clock source from HCLK/2048 clock.
N     * |        |          |11 = Clock source from 10 kHz internal low speed RC oscillator (LIRC).
N     * |        |          |Others = Reserved.
N     * |[25:24] |SPI0SEL   |SPI0 Clock Source Selection
N     * |        |          |00 = Clock source from 4~24 MHz external high speed crystal oscillator (HXT) clock.
N     * |        |          |01 = Clock source from PLL clock.
N     * |        |          |10 = Clock source from PCLK0.
N     * |        |          |11 = Clock source from 48 MHz internal high speed RC oscillator (HIRC) clock.
N     * @var CLK_T::PLLCTL
N     * Offset: 0x20  PLL Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]   |FBDIV     |PLL Feedback Divider Control
N     * |        |          |Refer to the formulas below the table.
N     * |[13:9]  |INDIV     |PLL Input Divider Control
N     * |        |          |Refer to the formulas below the table.
N     * |[15:14] |OUTDIV    |PLL Output Divider Control
N     * |        |          |Refer to the formulas below the table.
N     * |[16]    |PD        |Power-down Mode
N     * |        |          |If set the PDEN bit to 1 in CLK_PWRCTL register, the PLL will enter Power-down mode, too.
N     * |        |          |0 = PLL is in normal mode.
N     * |        |          |1 = PLL is in Power-down mode (default).
N     * |[17]    |BP        |PLL Bypass Control
N     * |        |          |0 = PLL is in normal mode (default).
N     * |        |          |1 = PLL clock output is same as PLL input clock FIN.
N     * |[18]    |OE        |PLL OE (FOUT Enable) Pin Control
N     * |        |          |0 = PLL FOUT Enabled.
N     * |        |          |1 = PLL FOUT is fixed low.
N     * |[19]    |PLLSRC    |PLL Source Clock Selection
N     * |        |          |0 = PLL source clock from external 4~24 MHz high-speed crystal (HXT).
N     * |        |          |1 = PLL source clock from internal 24 MHz high-speed oscillator (HIRC/2).
N     * |[23]    |STBSEL    |PLL Stable Counter Selection
N     * |        |          |0 = PLL stable time is 6144 PLL source clock (suitable for source clock is equal to or less than 12MHz).
N     * |        |          |1 = PLL stable time is 12288 PLL source clock (suitable for source clock is larger than 12MHz).
N     * @var CLK_T::CLKOCTL
N     * Offset: 0x24  Clock Output Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |FREQSEL   |Clock Output Frequency Selection
N     * |        |          |The formula of output frequency is
N     * |        |          |Fout = Fin/2(N+1).
N     * |        |          |Fin is the input clock frequency.
N     * |        |          |Fout is the frequency of divider output clock.
N     * |        |          |N is the 4-bit value of FREQSEL[3:0].
N     * |[4]     |CLKOEN    |Clock Output Enable Bit
N     * |        |          |0 = Clock Output function Disabled.
N     * |        |          |1 = Clock Output function Enabled.
N     * |[5]     |DIV1EN    |Clock Output Divide One Enable Bit
N     * |        |          |0 = Clock Output will output clock with source frequency divided by FREQSEL.
N     * |        |          |1 = Clock Output will output clock with source frequency.
N     * @var CLK_T::APBCLK1
N     * Offset: 0x30  APB Devices Clock Enable Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8]     |USCI0CKEN |USCI0 Clock Enable Bit
N     * |        |          |0 = USCI0 clock Disabled.
N     * |        |          |1 = USCI0 clock Enabled.
N     * @var CLK_T::CLKSEL3
N     * Offset: 0x34  Clock Source Select Control Register 3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8]     |USBDSEL   |USBD Clock Source Selection
N     * |        |          |0 = Clock source from 48MHz internal hight speed RC oscillator clock.
N     * |        |          |1 = Clock source from PLL clock.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var CLK_T::CLKDCTL
N     * Offset: 0x70  Clock Fail Detector Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4]     |HXTFDEN   |HXT Clock Fail Detector Enable Bit
N     * |        |          |0 = 4~24 MHz external high speed crystal oscillator (HXT) clock Fail detector Disabled.
N     * |        |          |1 = 4~24 MHz external high speed crystal oscillator (HXT) clock Fail detector Enabled.
N     * |[5]     |HXTFIEN   |HXT Clock Fail Interrupt Enable Bit
N     * |        |          |0 = 4~24 MHz external high speed crystal oscillator (HXT)clock Fail interrupt Disabled.
N     * |        |          |1 = 4~24 MHz external high speed crystal oscillator (HXT)clock Fail interrupt Enabled.
N     * |[12]    |LXTFDEN   |LXT Clock Fail Detector Enable Bit
N     * |        |          |0 = 32.768 kHz external low speed crystal oscillator (LXT) clock Fail detector Disabled.
N     * |        |          |1 = 32.768 kHz external low speed crystal oscillator (LXT) clock Fail detector Enabled.
N     * |[13]    |LXTFIEN   |LXT Clock Fail Interrupt Enable Bit
N     * |        |          |0 = 32.768 kHz external low speed crystal oscillator (LXT) clock Fail interrupt Disabled.
N     * |        |          |1 = 32.768 kHz external low speed crystal oscillator (LXT) clock Fail interrupt Enabled.
N     * |[16]    |HXTFQDEN  |HXT Clock Frequency Monitor Enable Bit
N     * |        |          |0 = 4~24 MHz external high speed crystal oscillator (HXT) clock frequency monitor Disabled.
N     * |        |          |1 = 4~24 MHz external high speed crystal oscillator (HXT) clock frequency monitor Enabled.
N     * |[17]    |HXTFQIEN  |HXT Clock Frequency Monitor Interrupt Enable Bit
N     * |        |          |0 = 4~24 MHz external high speed crystal oscillator (HXT) clock frequency monitor fail interrupt Disabled.
N     * |        |          |1 = 4~24 MHz external high speed crystal oscillator (HXT) clock frequency monitor fail interrupt Enabled.
N     * @var CLK_T::CLKDSTS
N     * Offset: 0x74  Clock Fail Detector Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |HXTFIF    |HXT Clock Fail Interrupt Flag
N     * |        |          |0 = 4~24 MHz external high speed crystal oscillator (HXT) clock normal.
N     * |        |          |1 = 4~24 MHz external high speed crystal oscillator (HXT) clock stop.
N     * |        |          |Note: Write 1 to clear the bit to 0.
N     * |[1]     |LXTFIF    |LXT Clock Fail Interrupt Flag
N     * |        |          |0 = 32.768 kHz external low speed crystal oscillator (LXT) clock normal.
N     * |        |          |1 = 32.768 kHz external low speed crystal oscillator (LXT) stop.
N     * |        |          |Note: Write 1 to clear the bit to 0.
N     * |[8]     |HXTFQIF   |HXT Clock Frequency Monitor Interrupt Flag
N     * |        |          |0 = 4~24 MHz external high speed crystal oscillator (HXT) clock normal.
N     * |        |          |1 = 4~24 MHz external high speed crystal oscillator (HXT) clock frequency abnormal.
N     * |        |          |Note: Write 1 to clear the bit to 0.
N     * @var CLK_T::CDUPB
N     * Offset: 0x78  Clock Frequency Detector Upper Boundary Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |UPERBD    |HXT Clock Frequency Detector Upper Boundary
N     * |        |          |The bits define the high value of frequency monitor window.
N     * |        |          |When HXT frequency monitor value higher than this register, the HXT frequency detect fail interrupt flag will set to 1.Note: The boundary is defined as the maximun value of HXT among 266 HIRC clock time
N     * @var CLK_T::CDLOWB
N     * Offset: 0x7C  Clock Frequency Detector Low Boundary Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |LOWERBD   |HXT Clock Frequency Detector Low Boundary
N     * |        |          |The bits define the low value of frequency monitor window.
N     * |        |          |When HXT frequency monitor value lower than this register, the HXT frequency detect fail interrupt flag will set to 1.
N     * |        |          |Note: The boundary is defined as the minimun value of HXT among 246 HIRC clock time
N     */
N    __IO uint32_t PWRCTL;                /*!< [0x0000] System Power-down Control Register                               */
X    volatile uint32_t PWRCTL;                 
N    __IO uint32_t AHBCLK;                /*!< [0x0004] AHB Devices Clock Enable Control Register                        */
X    volatile uint32_t AHBCLK;                 
N    __IO uint32_t APBCLK0;               /*!< [0x0008] APB Devices Clock Enable Control Register 0                      */
X    volatile uint32_t APBCLK0;                
N    __I  uint32_t STATUS;                /*!< [0x000c] Clock Status Monitor Register                                    */
X    volatile const  uint32_t STATUS;                 
N    __IO uint32_t CLKSEL0;               /*!< [0x0010] Clock Source Select Control Register 0                           */
X    volatile uint32_t CLKSEL0;                
N    __IO uint32_t CLKSEL1;               /*!< [0x0014] Clock Source Select Control Register 1                           */
X    volatile uint32_t CLKSEL1;                
N    __IO uint32_t CLKDIV0;               /*!< [0x0018] Clock Divider Number Register 0                                  */
X    volatile uint32_t CLKDIV0;                
N    __IO uint32_t CLKSEL2;               /*!< [0x001c] Clock Source Select Control Register 2                           */
X    volatile uint32_t CLKSEL2;                
N    __IO uint32_t PLLCTL;                /*!< [0x0020] PLL Control Register                                             */
X    volatile uint32_t PLLCTL;                 
N    __IO uint32_t CLKOCTL;               /*!< [0x0024] Clock Output Control Register                                    */
X    volatile uint32_t CLKOCTL;                
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __IO uint32_t APBCLK1;               /*!< [0x0030] APB Devices Clock Enable Control Register 1                      */
X    volatile uint32_t APBCLK1;                
N    __IO uint32_t CLKSEL3;               /*!< [0x0034] Clock Source Select Control Register 3                           */
X    volatile uint32_t CLKSEL3;                
N    __I  uint32_t RESERVE1[14];
X    volatile const  uint32_t RESERVE1[14];
N    __IO uint32_t CLKDCTL;               /*!< [0x0070] Clock Fail Detector Control Register                             */
X    volatile uint32_t CLKDCTL;                
N    __IO uint32_t CLKDSTS;               /*!< [0x0074] Clock Fail Detector Status Register                              */
X    volatile uint32_t CLKDSTS;                
N    __IO uint32_t CDUPB;                 /*!< [0x0078] Clock Frequency Detector Upper Boundary Register                 */
X    volatile uint32_t CDUPB;                  
N    __IO uint32_t CDLOWB;                /*!< [0x007c] Clock Frequency Detector Low Boundary Register                   */
X    volatile uint32_t CDLOWB;                 
N} CLK_T;
N
N/**
N    @addtogroup CLK_CONST CLK Bit Field Definition
N    Constant Definitions for CLK Controller
N@{ */
N
N#define CLK_PWRCTL_XTLEN_Pos             (0)                                               /*!< CLK_T::PWRCTL: XTLEN Position          */
N#define CLK_PWRCTL_XTLEN_Msk             (0x3ul << CLK_PWRCTL_XTLEN_Pos)                   /*!< CLK_T::PWRCTL: XTLEN Mask              */
N
N#define CLK_PWRCTL_HIRCEN_Pos            (2)                                               /*!< CLK_T::PWRCTL: HIRCEN Position         */
N#define CLK_PWRCTL_HIRCEN_Msk            (0x1ul << CLK_PWRCTL_HIRCEN_Pos)                  /*!< CLK_T::PWRCTL: HIRCEN Mask             */
N
N#define CLK_PWRCTL_LIRCEN_Pos            (3)                                               /*!< CLK_T::PWRCTL: LIRCEN Position         */
N#define CLK_PWRCTL_LIRCEN_Msk            (0x1ul << CLK_PWRCTL_LIRCEN_Pos)                  /*!< CLK_T::PWRCTL: LIRCEN Mask             */
N
N#define CLK_PWRCTL_PDWKDLY_Pos           (4)                                               /*!< CLK_T::PWRCTL: PDWKDLY Position        */
N#define CLK_PWRCTL_PDWKDLY_Msk           (0x1ul << CLK_PWRCTL_PDWKDLY_Pos)                 /*!< CLK_T::PWRCTL: PDWKDLY Mask            */
N
N#define CLK_PWRCTL_PDWKIEN_Pos           (5)                                               /*!< CLK_T::PWRCTL: PDWKIEN Position        */
N#define CLK_PWRCTL_PDWKIEN_Msk           (0x1ul << CLK_PWRCTL_PDWKIEN_Pos)                 /*!< CLK_T::PWRCTL: PDWKIEN Mask            */
N
N#define CLK_PWRCTL_PDWKIF_Pos            (6)                                               /*!< CLK_T::PWRCTL: PDWKIF Position         */
N#define CLK_PWRCTL_PDWKIF_Msk            (0x1ul << CLK_PWRCTL_PDWKIF_Pos)                  /*!< CLK_T::PWRCTL: PDWKIF Mask             */
N
N#define CLK_PWRCTL_PDEN_Pos              (7)                                               /*!< CLK_T::PWRCTL: PDEN Position           */
N#define CLK_PWRCTL_PDEN_Msk              (0x1ul << CLK_PWRCTL_PDEN_Pos)                    /*!< CLK_T::PWRCTL: PDEN Mask               */
N
N#define CLK_PWRCTL_HXTGAIN_Pos           (10)                                              /*!< CLK_T::PWRCTL: HXTGAIN Position        */
N#define CLK_PWRCTL_HXTGAIN_Msk           (0x3ul << CLK_PWRCTL_HXTGAIN_Pos)                 /*!< CLK_T::PWRCTL: HXTGAIN Mask            */
N
N#define CLK_PWRCTL_HXTSELTYP_Pos         (12)                                              /*!< CLK_T::PWRCTL: HXTSELTYP Position      */
N#define CLK_PWRCTL_HXTSELTYP_Msk         (0x1ul << CLK_PWRCTL_HXTSELTYP_Pos)               /*!< CLK_T::PWRCTL: HXTSELTYP Mask          */
N
N#define CLK_AHBCLK_PDMACKEN_Pos          (1)                                               /*!< CLK_T::AHBCLK: PDMACKEN Position       */
N#define CLK_AHBCLK_PDMACKEN_Msk          (0x1ul << CLK_AHBCLK_PDMACKEN_Pos)                /*!< CLK_T::AHBCLK: PDMACKEN Mask           */
N
N#define CLK_AHBCLK_ISPCKEN_Pos           (2)                                               /*!< CLK_T::AHBCLK: ISPCKEN Position        */
N#define CLK_AHBCLK_ISPCKEN_Msk           (0x1ul << CLK_AHBCLK_ISPCKEN_Pos)                 /*!< CLK_T::AHBCLK: ISPCKEN Mask            */
N
N#define CLK_AHBCLK_FMCIDLE_Pos           (15)                                              /*!< CLK_T::AHBCLK: FMCIDLE Position        */
N#define CLK_AHBCLK_FMCIDLE_Msk           (0x1ul << CLK_AHBCLK_FMCIDLE_Pos)                 /*!< CLK_T::AHBCLK: FMCIDLE Mask            */
N
N#define CLK_AHBCLK_GPIOACKEN_Pos         (16)                                              /*!< CLK_T::AHBCLK: GPIOACKEN Position      */
N#define CLK_AHBCLK_GPIOACKEN_Msk         (0x1ul << CLK_AHBCLK_GPIOACKEN_Pos)               /*!< CLK_T::AHBCLK: GPIOACKEN Mask          */
N
N#define CLK_AHBCLK_GPIOBCKEN_Pos         (17)                                              /*!< CLK_T::AHBCLK: GPIOBCKEN Position      */
N#define CLK_AHBCLK_GPIOBCKEN_Msk         (0x1ul << CLK_AHBCLK_GPIOBCKEN_Pos)               /*!< CLK_T::AHBCLK: GPIOBCKEN Mask          */
N
N#define CLK_AHBCLK_GPIOCCKEN_Pos         (18)                                              /*!< CLK_T::AHBCLK: GPIOCCKEN Position      */
N#define CLK_AHBCLK_GPIOCCKEN_Msk         (0x1ul << CLK_AHBCLK_GPIOCCKEN_Pos)               /*!< CLK_T::AHBCLK: GPIOCCKEN Mask          */
N
N#define CLK_AHBCLK_GPIODCKEN_Pos         (19)                                              /*!< CLK_T::AHBCLK: GPIODCKEN Position      */
N#define CLK_AHBCLK_GPIODCKEN_Msk         (0x1ul << CLK_AHBCLK_GPIODCKEN_Pos)               /*!< CLK_T::AHBCLK: GPIODCKEN Mask          */
N
N#define CLK_AHBCLK_GPIOECKEN_Pos         (20)                                              /*!< CLK_T::AHBCLK: GPIOECKEN Position      */
N#define CLK_AHBCLK_GPIOECKEN_Msk         (0x1ul << CLK_AHBCLK_GPIOECKEN_Pos)               /*!< CLK_T::AHBCLK: GPIOECKEN Mask          */
N
N#define CLK_AHBCLK_GPIOFCKEN_Pos         (21)                                              /*!< CLK_T::AHBCLK: GPIOFCKEN Position      */
N#define CLK_AHBCLK_GPIOFCKEN_Msk         (0x1ul << CLK_AHBCLK_GPIOFCKEN_Pos)               /*!< CLK_T::AHBCLK: GPIOFCKEN Mask          */
N
N#define CLK_APBCLK0_WDTCKEN_Pos          (0)                                               /*!< CLK_T::APBCLK0: WDTCKEN Position       */
N#define CLK_APBCLK0_WDTCKEN_Msk          (0x1ul << CLK_APBCLK0_WDTCKEN_Pos)                /*!< CLK_T::APBCLK0: WDTCKEN Mask           */
N
N#define CLK_APBCLK0_TMR0CKEN_Pos         (2)                                               /*!< CLK_T::APBCLK0: TMR0CKEN Position      */
N#define CLK_APBCLK0_TMR0CKEN_Msk         (0x1ul << CLK_APBCLK0_TMR0CKEN_Pos)               /*!< CLK_T::APBCLK0: TMR0CKEN Mask          */
N
N#define CLK_APBCLK0_TMR1CKEN_Pos         (3)                                               /*!< CLK_T::APBCLK0: TMR1CKEN Position      */
N#define CLK_APBCLK0_TMR1CKEN_Msk         (0x1ul << CLK_APBCLK0_TMR1CKEN_Pos)               /*!< CLK_T::APBCLK0: TMR1CKEN Mask          */
N
N#define CLK_APBCLK0_TMR2CKEN_Pos         (4)                                               /*!< CLK_T::APBCLK0: TMR2CKEN Position      */
N#define CLK_APBCLK0_TMR2CKEN_Msk         (0x1ul << CLK_APBCLK0_TMR2CKEN_Pos)               /*!< CLK_T::APBCLK0: TMR2CKEN Mask          */
N
N#define CLK_APBCLK0_TMR3CKEN_Pos         (5)                                               /*!< CLK_T::APBCLK0: TMR3CKEN Position      */
N#define CLK_APBCLK0_TMR3CKEN_Msk         (0x1ul << CLK_APBCLK0_TMR3CKEN_Pos)               /*!< CLK_T::APBCLK0: TMR3CKEN Mask          */
N
N#define CLK_APBCLK0_CLKOCKEN_Pos         (6)                                               /*!< CLK_T::APBCLK0: CLKOCKEN Position      */
N#define CLK_APBCLK0_CLKOCKEN_Msk         (0x1ul << CLK_APBCLK0_CLKOCKEN_Pos)               /*!< CLK_T::APBCLK0: CLKOCKEN Mask          */
N
N#define CLK_APBCLK0_I2C0CKEN_Pos         (8)                                               /*!< CLK_T::APBCLK0: I2C0CKEN Position      */
N#define CLK_APBCLK0_I2C0CKEN_Msk         (0x1ul << CLK_APBCLK0_I2C0CKEN_Pos)               /*!< CLK_T::APBCLK0: I2C0CKEN Mask          */
N
N#define CLK_APBCLK0_I2C1CKEN_Pos         (9)                                               /*!< CLK_T::APBCLK0: I2C1CKEN Position      */
N#define CLK_APBCLK0_I2C1CKEN_Msk         (0x1ul << CLK_APBCLK0_I2C1CKEN_Pos)               /*!< CLK_T::APBCLK0: I2C1CKEN Mask          */
N
N#define CLK_APBCLK0_SPI0CKEN_Pos         (12)                                              /*!< CLK_T::APBCLK0: SPI0CKEN Position      */
N#define CLK_APBCLK0_SPI0CKEN_Msk         (0x1ul << CLK_APBCLK0_SPI0CKEN_Pos)               /*!< CLK_T::APBCLK0: SPI0CKEN Mask          */
N
N#define CLK_APBCLK0_UART0CKEN_Pos        (16)                                              /*!< CLK_T::APBCLK0: UART0CKEN Position     */
N#define CLK_APBCLK0_UART0CKEN_Msk        (0x1ul << CLK_APBCLK0_UART0CKEN_Pos)              /*!< CLK_T::APBCLK0: UART0CKEN Mask         */
N
N#define CLK_APBCLK0_BPWM0CKEN_Pos        (20)                                              /*!< CLK_T::APBCLK0: BPWM0CKEN Position     */
N#define CLK_APBCLK0_BPWM0CKEN_Msk        (0x1ul << CLK_APBCLK0_BPWM0CKEN_Pos)              /*!< CLK_T::APBCLK0: BPWM0CKEN Mask         */
N
N#define CLK_APBCLK0_BPWM1CKEN_Pos        (21)                                              /*!< CLK_T::APBCLK0: BPWM1CKEN Position     */
N#define CLK_APBCLK0_BPWM1CKEN_Msk        (0x1ul << CLK_APBCLK0_BPWM1CKEN_Pos)              /*!< CLK_T::APBCLK0: BPWM1CKEN Mask         */
N
N#define CLK_APBCLK0_PWM0CKEN_Pos         (22)                                              /*!< CLK_T::APBCLK0: PWM0CKEN Position      */
N#define CLK_APBCLK0_PWM0CKEN_Msk         (0x1ul << CLK_APBCLK0_PWM0CKEN_Pos)               /*!< CLK_T::APBCLK0: PWM0CKEN Mask          */
N
N#define CLK_APBCLK0_PWM1CKEN_Pos         (23)                                              /*!< CLK_T::APBCLK0: PWM1CKEN Position      */
N#define CLK_APBCLK0_PWM1CKEN_Msk         (0x1ul << CLK_APBCLK0_PWM1CKEN_Pos)               /*!< CLK_T::APBCLK0: PWM1CKEN Mask          */
N
N#define CLK_APBCLK0_USBDCKEN_Pos         (27)                                              /*!< CLK_T::APBCLK0: USBDCKEN Position      */
N#define CLK_APBCLK0_USBDCKEN_Msk         (0x1ul << CLK_APBCLK0_USBDCKEN_Pos)               /*!< CLK_T::APBCLK0: USBDCKEN Mask          */
N
N#define CLK_APBCLK0_ADCCKEN_Pos          (28)                                              /*!< CLK_T::APBCLK0: ADCCKEN Position       */
N#define CLK_APBCLK0_ADCCKEN_Msk          (0x1ul << CLK_APBCLK0_ADCCKEN_Pos)                /*!< CLK_T::APBCLK0: ADCCKEN Mask           */
N
N#define CLK_STATUS_HXTSTB_Pos            (0)                                               /*!< CLK_T::STATUS: HXTSTB Position         */
N#define CLK_STATUS_HXTSTB_Msk            (0x1ul << CLK_STATUS_HXTSTB_Pos)                  /*!< CLK_T::STATUS: HXTSTB Mask             */
N
N#define CLK_STATUS_LXTSTB_Pos            (1)                                               /*!< CLK_T::STATUS: LXTSTB Position         */
N#define CLK_STATUS_LXTSTB_Msk            (0x1ul << CLK_STATUS_LXTSTB_Pos)                  /*!< CLK_T::STATUS: LXTSTB Mask             */
N
N#define CLK_STATUS_PLLSTB_Pos            (2)                                               /*!< CLK_T::STATUS: PLLSTB Position         */
N#define CLK_STATUS_PLLSTB_Msk            (0x1ul << CLK_STATUS_PLLSTB_Pos)                  /*!< CLK_T::STATUS: PLLSTB Mask             */
N
N#define CLK_STATUS_LIRCSTB_Pos           (3)                                               /*!< CLK_T::STATUS: LIRCSTB Position        */
N#define CLK_STATUS_LIRCSTB_Msk           (0x1ul << CLK_STATUS_LIRCSTB_Pos)                 /*!< CLK_T::STATUS: LIRCSTB Mask            */
N
N#define CLK_STATUS_HIRCSTB_Pos           (4)                                               /*!< CLK_T::STATUS: HIRCSTB Position        */
N#define CLK_STATUS_HIRCSTB_Msk           (0x1ul << CLK_STATUS_HIRCSTB_Pos)                 /*!< CLK_T::STATUS: HIRCSTB Mask            */
N
N#define CLK_STATUS_CLKSFAIL_Pos          (7)                                               /*!< CLK_T::STATUS: CLKSFAIL Position       */
N#define CLK_STATUS_CLKSFAIL_Msk          (0x1ul << CLK_STATUS_CLKSFAIL_Pos)                /*!< CLK_T::STATUS: CLKSFAIL Mask           */
N
N#define CLK_CLKSEL0_HCLKSEL_Pos          (0)                                               /*!< CLK_T::CLKSEL0: HCLKSEL Position       */
N#define CLK_CLKSEL0_HCLKSEL_Msk          (0x7ul << CLK_CLKSEL0_HCLKSEL_Pos)                /*!< CLK_T::CLKSEL0: HCLKSEL Mask           */
N
N#define CLK_CLKSEL0_STCLKSEL_Pos         (3)                                               /*!< CLK_T::CLKSEL0: STCLKSEL Position      */
N#define CLK_CLKSEL0_STCLKSEL_Msk         (0x7ul << CLK_CLKSEL0_STCLKSEL_Pos)               /*!< CLK_T::CLKSEL0: STCLKSEL Mask          */
N
N#define CLK_CLKSEL0_PCLK0SEL_Pos         (6)                                               /*!< CLK_T::CLKSEL0: PCLK0SEL Position      */
N#define CLK_CLKSEL0_PCLK0SEL_Msk         (0x1ul << CLK_CLKSEL0_PCLK0SEL_Pos)               /*!< CLK_T::CLKSEL0: PCLK0SEL Mask          */
N
N#define CLK_CLKSEL0_PCLK1SEL_Pos         (7)                                               /*!< CLK_T::CLKSEL0: PCLK1SEL Position      */
N#define CLK_CLKSEL0_PCLK1SEL_Msk         (0x1ul << CLK_CLKSEL0_PCLK1SEL_Pos)               /*!< CLK_T::CLKSEL0: PCLK1SEL Mask          */
N
N#define CLK_CLKSEL1_WDTSEL_Pos           (0)                                               /*!< CLK_T::CLKSEL1: WDTSEL Position        */
N#define CLK_CLKSEL1_WDTSEL_Msk           (0x3ul << CLK_CLKSEL1_WDTSEL_Pos)                 /*!< CLK_T::CLKSEL1: WDTSEL Mask            */
N
N#define CLK_CLKSEL1_ADCSEL_Pos           (2)                                               /*!< CLK_T::CLKSEL1: ADCSEL Position        */
N#define CLK_CLKSEL1_ADCSEL_Msk           (0x3ul << CLK_CLKSEL1_ADCSEL_Pos)                 /*!< CLK_T::CLKSEL1: ADCSEL Mask            */
N
N#define CLK_CLKSEL1_TMR0SEL_Pos          (8)                                               /*!< CLK_T::CLKSEL1: TMR0SEL Position       */
N#define CLK_CLKSEL1_TMR0SEL_Msk          (0x7ul << CLK_CLKSEL1_TMR0SEL_Pos)                /*!< CLK_T::CLKSEL1: TMR0SEL Mask           */
N
N#define CLK_CLKSEL1_TMR1SEL_Pos          (12)                                              /*!< CLK_T::CLKSEL1: TMR1SEL Position       */
N#define CLK_CLKSEL1_TMR1SEL_Msk          (0x7ul << CLK_CLKSEL1_TMR1SEL_Pos)                /*!< CLK_T::CLKSEL1: TMR1SEL Mask           */
N
N#define CLK_CLKSEL1_TMR2SEL_Pos          (16)                                              /*!< CLK_T::CLKSEL1: TMR2SEL Position       */
N#define CLK_CLKSEL1_TMR2SEL_Msk          (0x7ul << CLK_CLKSEL1_TMR2SEL_Pos)                /*!< CLK_T::CLKSEL1: TMR2SEL Mask           */
N
N#define CLK_CLKSEL1_TMR3SEL_Pos          (20)                                              /*!< CLK_T::CLKSEL1: TMR3SEL Position       */
N#define CLK_CLKSEL1_TMR3SEL_Msk          (0x7ul << CLK_CLKSEL1_TMR3SEL_Pos)                /*!< CLK_T::CLKSEL1: TMR3SEL Mask           */
N
N#define CLK_CLKSEL1_UARTSEL_Pos          (24)                                              /*!< CLK_T::CLKSEL1: UARTSEL Position       */
N#define CLK_CLKSEL1_UARTSEL_Msk          (0x3ul << CLK_CLKSEL1_UARTSEL_Pos)                /*!< CLK_T::CLKSEL1: UARTSEL Mask           */
N
N#define CLK_CLKSEL1_BPWM0SEL_Pos         (28)                                              /*!< CLK_T::CLKSEL1: BPWM0SEL Position      */
N#define CLK_CLKSEL1_BPWM0SEL_Msk         (0x1ul << CLK_CLKSEL1_BPWM0SEL_Pos)               /*!< CLK_T::CLKSEL1: BPWM0SEL Mask          */
N
N#define CLK_CLKSEL1_BPWM1SEL_Pos         (29)                                              /*!< CLK_T::CLKSEL1: BPWM1SEL Position      */
N#define CLK_CLKSEL1_BPWM1SEL_Msk         (0x1ul << CLK_CLKSEL1_BPWM1SEL_Pos)               /*!< CLK_T::CLKSEL1: BPWM1SEL Mask          */
N
N#define CLK_CLKSEL1_PWM0SEL_Pos          (30)                                              /*!< CLK_T::CLKSEL1: PWM0SEL Position       */
N#define CLK_CLKSEL1_PWM0SEL_Msk          (0x1ul << CLK_CLKSEL1_PWM0SEL_Pos)                /*!< CLK_T::CLKSEL1: PWM0SEL Mask           */
N
N#define CLK_CLKSEL1_PWM1SEL_Pos          (31)                                              /*!< CLK_T::CLKSEL1: PWM1SEL Position       */
N#define CLK_CLKSEL1_PWM1SEL_Msk          (0x1ul << CLK_CLKSEL1_PWM1SEL_Pos)                /*!< CLK_T::CLKSEL1: PWM1SEL Mask           */
N
N#define CLK_CLKDIV0_HCLKDIV_Pos          (0)                                               /*!< CLK_T::CLKDIV0: HCLKDIV Position       */
N#define CLK_CLKDIV0_HCLKDIV_Msk          (0xful << CLK_CLKDIV0_HCLKDIV_Pos)                /*!< CLK_T::CLKDIV0: HCLKDIV Mask           */
N
N#define CLK_CLKDIV0_USBDIV_Pos           (4)                                               /*!< CLK_T::CLKDIV0: USBDIV Position        */
N#define CLK_CLKDIV0_USBDIV_Msk           (0xful << CLK_CLKDIV0_USBDIV_Pos)                 /*!< CLK_T::CLKDIV0: USBDIV Mask            */
N
N#define CLK_CLKDIV0_UARTDIV_Pos          (8)                                               /*!< CLK_T::CLKDIV0: UARTDIV Position       */
N#define CLK_CLKDIV0_UARTDIV_Msk          (0xful << CLK_CLKDIV0_UARTDIV_Pos)                /*!< CLK_T::CLKDIV0: UARTDIV Mask           */
N
N#define CLK_CLKDIV0_ADCDIV_Pos           (16)                                              /*!< CLK_T::CLKDIV0: ADCDIV Position        */
N#define CLK_CLKDIV0_ADCDIV_Msk           (0xfful << CLK_CLKDIV0_ADCDIV_Pos)                /*!< CLK_T::CLKDIV0: ADCDIV Mask            */
N
N#define CLK_CLKSEL2_CLKOSEL_Pos          (2)                                               /*!< CLK_T::CLKSEL2: CLKOSEL Position       */
N#define CLK_CLKSEL2_CLKOSEL_Msk          (0x7ul << CLK_CLKSEL2_CLKOSEL_Pos)                /*!< CLK_T::CLKSEL2: CLKOSEL Mask           */
N
N#define CLK_CLKSEL2_WWDTSEL_Pos          (16)                                              /*!< CLK_T::CLKSEL2: WWDTSEL Position       */
N#define CLK_CLKSEL2_WWDTSEL_Msk          (0x3ul << CLK_CLKSEL2_WWDTSEL_Pos)                /*!< CLK_T::CLKSEL2: WWDTSEL Mask           */
N
N#define CLK_CLKSEL2_SPI0SEL_Pos          (24)                                              /*!< CLK_T::CLKSEL2: SPI0SEL Position       */
N#define CLK_CLKSEL2_SPI0SEL_Msk          (0x3ul << CLK_CLKSEL2_SPI0SEL_Pos)                /*!< CLK_T::CLKSEL2: SPI0SEL Mask           */
N
N#define CLK_PLLCTL_FBDIV_Pos             (0)                                               /*!< CLK_T::PLLCTL: FBDIV Position          */
N#define CLK_PLLCTL_FBDIV_Msk             (0x1fful << CLK_PLLCTL_FBDIV_Pos)                 /*!< CLK_T::PLLCTL: FBDIV Mask              */
N
N#define CLK_PLLCTL_INDIV_Pos             (9)                                               /*!< CLK_T::PLLCTL: INDIV Position          */
N#define CLK_PLLCTL_INDIV_Msk             (0x1ful << CLK_PLLCTL_INDIV_Pos)                  /*!< CLK_T::PLLCTL: INDIV Mask              */
N
N#define CLK_PLLCTL_OUTDIV_Pos            (14)                                              /*!< CLK_T::PLLCTL: OUTDIV Position         */
N#define CLK_PLLCTL_OUTDIV_Msk            (0x3ul << CLK_PLLCTL_OUTDIV_Pos)                  /*!< CLK_T::PLLCTL: OUTDIV Mask             */
N
N#define CLK_PLLCTL_PD_Pos                (16)                                              /*!< CLK_T::PLLCTL: PD Position             */
N#define CLK_PLLCTL_PD_Msk                (0x1ul << CLK_PLLCTL_PD_Pos)                      /*!< CLK_T::PLLCTL: PD Mask                 */
N
N#define CLK_PLLCTL_BP_Pos                (17)                                              /*!< CLK_T::PLLCTL: BP Position             */
N#define CLK_PLLCTL_BP_Msk                (0x1ul << CLK_PLLCTL_BP_Pos)                      /*!< CLK_T::PLLCTL: BP Mask                 */
N
N#define CLK_PLLCTL_OE_Pos                (18)                                              /*!< CLK_T::PLLCTL: OE Position             */
N#define CLK_PLLCTL_OE_Msk                (0x1ul << CLK_PLLCTL_OE_Pos)                      /*!< CLK_T::PLLCTL: OE Mask                 */
N
N#define CLK_PLLCTL_PLLSRC_Pos            (19)                                              /*!< CLK_T::PLLCTL: PLLSRC Position         */
N#define CLK_PLLCTL_PLLSRC_Msk            (0x1ul << CLK_PLLCTL_PLLSRC_Pos)                  /*!< CLK_T::PLLCTL: PLLSRC Mask             */
N
N#define CLK_PLLCTL_STBSEL_Pos            (23)                                              /*!< CLK_T::PLLCTL: STBSEL Position         */
N#define CLK_PLLCTL_STBSEL_Msk            (0x1ul << CLK_PLLCTL_STBSEL_Pos)                  /*!< CLK_T::PLLCTL: STBSEL Mask             */
N
N#define CLK_CLKOCTL_FREQSEL_Pos          (0)                                               /*!< CLK_T::CLKOCTL: FREQSEL Position       */
N#define CLK_CLKOCTL_FREQSEL_Msk          (0xful << CLK_CLKOCTL_FREQSEL_Pos)                /*!< CLK_T::CLKOCTL: FREQSEL Mask           */
N
N#define CLK_CLKOCTL_CLKOEN_Pos           (4)                                               /*!< CLK_T::CLKOCTL: CLKOEN Position        */
N#define CLK_CLKOCTL_CLKOEN_Msk           (0x1ul << CLK_CLKOCTL_CLKOEN_Pos)                 /*!< CLK_T::CLKOCTL: CLKOEN Mask            */
N
N#define CLK_CLKOCTL_DIV1EN_Pos           (5)                                               /*!< CLK_T::CLKOCTL: DIV1EN Position        */
N#define CLK_CLKOCTL_DIV1EN_Msk           (0x1ul << CLK_CLKOCTL_DIV1EN_Pos)                 /*!< CLK_T::CLKOCTL: DIV1EN Mask            */
N
N#define CLK_APBCLK1_USCI0CKEN_Pos        (8)                                               /*!< CLK_T::APBCLK1: USCI0CKEN Position     */
N#define CLK_APBCLK1_USCI0CKEN_Msk        (0x1ul << CLK_APBCLK1_USCI0CKEN_Pos)              /*!< CLK_T::APBCLK1: USCI0CKEN Mask         */
N
N#define CLK_CLKSEL3_USBDSEL_Pos          (8)                                               /*!< CLK_T::CLKSEL3: USBDSEL Position       */
N#define CLK_CLKSEL3_USBDSEL_Msk          (0x1ul << CLK_CLKSEL3_USBDSEL_Pos)                /*!< CLK_T::CLKSEL3: USBDSEL Mask           */
N
N#define CLK_CLKDCTL_HXTFDEN_Pos          (4)                                               /*!< CLK_T::CLKDCTL: HXTFDEN Position       */
N#define CLK_CLKDCTL_HXTFDEN_Msk          (0x1ul << CLK_CLKDCTL_HXTFDEN_Pos)                /*!< CLK_T::CLKDCTL: HXTFDEN Mask           */
N
N#define CLK_CLKDCTL_HXTFIEN_Pos          (5)                                               /*!< CLK_T::CLKDCTL: HXTFIEN Position       */
N#define CLK_CLKDCTL_HXTFIEN_Msk          (0x1ul << CLK_CLKDCTL_HXTFIEN_Pos)                /*!< CLK_T::CLKDCTL: HXTFIEN Mask           */
N
N#define CLK_CLKDCTL_LXTFDEN_Pos          (12)                                              /*!< CLK_T::CLKDCTL: LXTFDEN Position       */
N#define CLK_CLKDCTL_LXTFDEN_Msk          (0x1ul << CLK_CLKDCTL_LXTFDEN_Pos)                /*!< CLK_T::CLKDCTL: LXTFDEN Mask           */
N
N#define CLK_CLKDCTL_LXTFIEN_Pos          (13)                                              /*!< CLK_T::CLKDCTL: LXTFIEN Position       */
N#define CLK_CLKDCTL_LXTFIEN_Msk          (0x1ul << CLK_CLKDCTL_LXTFIEN_Pos)                /*!< CLK_T::CLKDCTL: LXTFIEN Mask           */
N
N#define CLK_CLKDCTL_HXTFQDEN_Pos         (16)                                              /*!< CLK_T::CLKDCTL: HXTFQDEN Position      */
N#define CLK_CLKDCTL_HXTFQDEN_Msk         (0x1ul << CLK_CLKDCTL_HXTFQDEN_Pos)               /*!< CLK_T::CLKDCTL: HXTFQDEN Mask          */
N
N#define CLK_CLKDCTL_HXTFQIEN_Pos         (17)                                              /*!< CLK_T::CLKDCTL: HXTFQIEN Position      */
N#define CLK_CLKDCTL_HXTFQIEN_Msk         (0x1ul << CLK_CLKDCTL_HXTFQIEN_Pos)               /*!< CLK_T::CLKDCTL: HXTFQIEN Mask          */
N
N#define CLK_CLKDSTS_HXTFIF_Pos           (0)                                               /*!< CLK_T::CLKDSTS: HXTFIF Position        */
N#define CLK_CLKDSTS_HXTFIF_Msk           (0x1ul << CLK_CLKDSTS_HXTFIF_Pos)                 /*!< CLK_T::CLKDSTS: HXTFIF Mask            */
N
N#define CLK_CLKDSTS_LXTFIF_Pos           (1)                                               /*!< CLK_T::CLKDSTS: LXTFIF Position        */
N#define CLK_CLKDSTS_LXTFIF_Msk           (0x1ul << CLK_CLKDSTS_LXTFIF_Pos)                 /*!< CLK_T::CLKDSTS: LXTFIF Mask            */
N
N#define CLK_CLKDSTS_HXTFQIF_Pos          (8)                                               /*!< CLK_T::CLKDSTS: HXTFQIF Position       */
N#define CLK_CLKDSTS_HXTFQIF_Msk          (0x1ul << CLK_CLKDSTS_HXTFQIF_Pos)                /*!< CLK_T::CLKDSTS: HXTFQIF Mask           */
N
N#define CLK_CDUPB_UPERBD_Pos             (0)                                               /*!< CLK_T::CDUPB: UPERBD Position          */
N#define CLK_CDUPB_UPERBD_Msk             (0x3fful << CLK_CDUPB_UPERBD_Pos)                 /*!< CLK_T::CDUPB: UPERBD Mask              */
N
N#define CLK_CDLOWB_LOWERBD_Pos           (0)                                               /*!< CLK_T::CDLOWB: LOWERBD Position        */
N#define CLK_CDLOWB_LOWERBD_Msk           (0x3fful << CLK_CDLOWB_LOWERBD_Pos)               /*!< CLK_T::CDLOWB: LOWERBD Mask            */
N
N/**@}*/ /* CLK_CONST */
N/**@}*/ /* end of CLK register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __CLK_REG_H__ */
L 155 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "fmc_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\fmc_reg.h" 1
N/**************************************************************************//**
N * @file     fmc_reg.h
N * @version  V1.00
N * @brief    FMC register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __FMC_REG_H__
N#define __FMC_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup FMC Flash Memory Controller (FMC)
N    Memory Mapped Structure for FMC Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var FMC_T::ISPCTL
N     * Offset: 0x00  ISP Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ISPEN     |ISP Enable (Write Protection)
N     * |        |          |ISP function enable bit. Set this bit to enable ISP function.
N     * |        |          |0 = ISP function Disabled.
N     * |        |          |1 = ISP function Enabled.
N     * |[1]     |BS        |Boot Select (Write Protection)
N     * |        |          |Set/clear this bit to select next booting from LDROM/APROM, respectively
N     * |        |          |This bit also functions as chip booting status flag, which can be used to check where chip booted from
N     * |        |          |This bit is initiated with the inversed value of CBS[1] (CONFIG0[7]) after any reset is happened except CPU reset (RSTS_CPU is 1) or system reset (RSTS_SYS) is happened
N     * |        |          |0 = Booting from APROM.
N     * |        |          |1 = Booting from LDROM.
N     * |[2]     |SPUEN     |SPROM Update Enable (Write Protection)
N     * |        |          |0 = SPROM cannot be updated.
N     * |        |          |1 = SPROM can be updated.
N     * |[3]     |APUEN     |APROM Update Enable (Write Protection)
N     * |        |          |0 = APROM cannot be updated when the chip runs in APROM.
N     * |        |          |1 = APROM can be updated when the chip runs in APROM.
N     * |[4]     |CFGUEN    |CONFIG Update Enable (Write Protection)
N     * |        |          |0 = CONFIG cannot be updated.
N     * |        |          |1 = CONFIG can be updated.
N     * |[5]     |LDUEN     |LDROM Update Enable (Write Protection)
N     * |        |          |LDROM update enable bit.
N     * |        |          |0 = LDROM cannot be updated.
N     * |        |          |1 = LDROM can be updated.
N     * |[6]     |ISPFF     |ISP Fail Flag (Write Protection)
N     * |        |          |This bit is set by hardware when a triggered ISP meets any of the following conditions:
N     * |        |          |This bit needs to be cleared by writing 1 to it.
N     * |        |          |(1) APROM writes to itself if APUEN is set to 0.
N     * |        |          |(2) LDROM writes to itself if LDUEN is set to 0.
N     * |        |          |(3) CONFIG is erased/programmed if CFGUEN is set to 0.
N     * |        |          |(4) SPROM is erased/programmed if SPUEN is set to 0
N     * |        |          |(5) SPROM is programmed at SPROM secured mode.
N     * |        |          |(6) Page Erase command at LOCK mode with ICE connection
N     * |        |          |(7) Erase or Program command at brown-out detected
N     * |        |          |(8) Destination address is illegal, such as over an available range.
N     * |        |          |(9) Invalid ISP commands
N     * @var FMC_T::ISPADDR
N     * Offset: 0x04  ISP Address Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |ISPADDR   |ISP Address
N     * |        |          |The NuMicro Nuc121TM series is equipped with embedded flash
N     * |        |          |ISPADDR[1:0] must be kept 00 for ISP 32-bit operation
N     * |        |          |and ISPADDR[8:0] must be kept all 0 for Vector Page Re-map Command
N     * |        |          |For CRC32 Checksum Calculation command, this field is the flash starting address for checksum calculation, 512 bytes alignment is necessary for checksum calculation.
N     * @var FMC_T::ISPDAT
N     * Offset: 0x08  ISP Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |ISPDAT    |ISP Data
N     * |        |          |Write data to this register before ISP program operation.
N     * |        |          |Read data from this register after ISP read operation.
N     * |        |          |For Run CRC32 Checksum Calculation command, ISPDAT is the memory size (byte) and 512 bytes alignment
N     * |        |          |For ISP Read Checksum command, ISPDAT is the checksum result
N     * |        |          |If ISPDAT = 0x0000_0000, it means that (1) the checksum calculation is in progress, or (2) the memory range for checksum calculation is incorrect.
N     * @var FMC_T::ISPCMD
N     * Offset: 0x0C  ISP Command Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[6:0]   |CMD       |ISP CMD
N     * |        |          |ISP command table is shown below:
N     * |        |          |0x00= FLASH Read.
N     * |        |          |0x04= Read Unique ID.
N     * |        |          |0x0B= Read Company ID.
N     * |        |          |0x0C= Read Device ID.
N     * |        |          |0x0D= Read CRC32 Checksum.
N     * |        |          |0x21= FLASH 32-bit Program.
N     * |        |          |0x22= FLASH Page Erase.
N     * |        |          |0x2D= Run CRC32 Checksum Calculation.
N     * |        |          |0x2E= Vector Remap.
N     * |        |          |The other commands are invalid.
N     * @var FMC_T::ISPTRG
N     * Offset: 0x10  ISP Trigger Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ISPGO     |ISP Start Trigger (Write Protection)
N     * |        |          |Write 1 to start ISP operation and this bit will be cleared to 0 by hardware automatically when ISP operation is finished.
N     * |        |          |0 = ISP operation is finished.
N     * |        |          |1 = ISP is progressed.
N     * @var FMC_T::DFBA
N     * Offset: 0x14  Data Flash Base Address
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |DFBA      |Data Flash Base Address
N     * |        |          |This register indicates Data Flash start address. It is a read only register.
N     * |        |          |The Data Flash is shared with APROM. the content of this register is loaded from CONFIG1
N     * |        |          |This register is valid when DFEN (CONFIG0[0]) =0 .
N     * @var FMC_T::FTCTL
N     * Offset: 0x18  Flash Access Time Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[6:4]   |FOM       |Frequency Optimization Mode (Write Protect)
N     * |        |          |The NuMicro Nuc121TM series support adjustable flash access timing to optimize the flash access cycles in different working frequency.
N     * |        |          |0x1 = Frequency <= 24MHz.
N     * |        |          |Others = Frequency <= 50MHz.
N     * |        |          |Note: x denotes the bit is don't care.
N     * @var FMC_T::ISPSTS
N     * Offset: 0x40  ISP Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ISPBUSY   |ISP BUSY (Read Only)
N     * |        |          |0 = ISP operation is finished.
N     * |        |          |1 = ISP operation is busy.
N     * |[2:1]   |CBS       |Boot Selection of CONFIG (Read Only)
N     * |        |          |This bit is initiated with the CBS (CONFIG0[7:6]) after any reset is happened except CPU reset (RSTS_CPU is 1) or system reset (RSTS_SYS) is happened.
N     * |        |          |00 = LDROM with IAP mode.
N     * |        |          |01 = LDROM without IAP mode.
N     * |        |          |10 = APROM with IAP mode.
N     * |        |          |11 = APROM without IAP mode.
N     * |[6]     |ISPFF     |ISP Fail Flag (Write Protection)
N     * |        |          |This bit is the mirror of ISPFF (FMC_ISPCTL[6]), it needs to be cleared by writing 1 to FMC_ISPCTL[6] or FMC_ISPSTS[6]
N     * |        |          |This bit is set by hardware when a triggered ISP meets any of the following conditions:
N     * |        |          |(1) APROM writes to itself if APUEN is set to 0.
N     * |        |          |(2) LDROM writes to itself if LDUEN is set to 0.
N     * |        |          |(3) CONFIG is erased/programmed if CFGUEN is set to 0.
N     * |        |          |(4) SPROM is erased/programmed if SPUEN is set to 0
N     * |        |          |(5) SPROM is programmed at SPROM secured mode.
N     * |        |          |(6) Page Erase command at LOCK mode with ICE connection
N     * |        |          |(7) Erase or Program command at brown-out detected
N     * |        |          |(8) Destination address is illegal, such as over an available range.
N     * |        |          |(9) Invalid ISP commands
N     * |[29:9]  |VECMAP    |Vector Page Mapping Address (Read Only)
N     * |        |          |All access to 0x0000_0000~0x0000_01FF is remapped to the flash memory or SRAM address {VECMAP[20:0], 9'b0} ~ {VECMAP[20:0], 9'h1FF}, except SPROM.
N     * |        |          |VECMAP [20:19] = 00 system vector address is mapped to flash memory.
N     * |        |          |VECMAP [20:19] = 10 system vector address is mapped to SRAM memory.
N     * |        |          |VECMAP [18:12] should be 0.
N     * |        |          |Note: vector mapping is page alignment (512 byte), so VECMAP start from bit10.
N     * |[31]    |SCODE     |Security Code Active Flag
N     * |        |          |This bit is set to 1 by hardware when detecting SPROM secured code is active at flash initialization, or software writes 1 to this bit to make secured code active; this bit is only cleared by SPROM page erase operation.
N     * |        |          |0 = SPROM secured code is inactive.
N     * |        |          |1 = SPROM secured code is active.
N     */
N    __IO uint32_t ISPCTL;                /*!< [0x0000] ISP Control Register                                             */
X    volatile uint32_t ISPCTL;                 
N    __IO uint32_t ISPADDR;               /*!< [0x0004] ISP Address Register                                             */
X    volatile uint32_t ISPADDR;                
N    __IO uint32_t ISPDAT;                /*!< [0x0008] ISP Data Register                                                */
X    volatile uint32_t ISPDAT;                 
N    __IO uint32_t ISPCMD;                /*!< [0x000c] ISP Command Register                                             */
X    volatile uint32_t ISPCMD;                 
N    __IO uint32_t ISPTRG;                /*!< [0x0010] ISP Trigger Control Register                                     */
X    volatile uint32_t ISPTRG;                 
N    __I  uint32_t DFBA;                  /*!< [0x0014] Data Flash Base Address                                          */
X    volatile const  uint32_t DFBA;                   
N    __IO uint32_t FTCTL;                 /*!< [0x0018] Flash Access Time Control Register                               */
X    volatile uint32_t FTCTL;                  
N    __I  uint32_t RESERVE0[9];
X    volatile const  uint32_t RESERVE0[9];
N    __IO uint32_t ISPSTS;                /*!< [0x0040] ISP Status Register                                              */
X    volatile uint32_t ISPSTS;                 
N} FMC_T;
N
N/**
N    @addtogroup FMC_CONST FMC Bit Field Definition
N    Constant Definitions for FMC Controller
N@{ */
N
N#define FMC_ISPCTL_ISPEN_Pos             (0)                                               /*!< FMC_T::ISPCTL: ISPEN Position          */
N#define FMC_ISPCTL_ISPEN_Msk             (0x1ul << FMC_ISPCTL_ISPEN_Pos)                   /*!< FMC_T::ISPCTL: ISPEN Mask              */
N
N#define FMC_ISPCTL_BS_Pos                (1)                                               /*!< FMC_T::ISPCTL: BS Position             */
N#define FMC_ISPCTL_BS_Msk                (0x1ul << FMC_ISPCTL_BS_Pos)                      /*!< FMC_T::ISPCTL: BS Mask                 */
N
N#define FMC_ISPCTL_SPUEN_Pos             (2)                                               /*!< FMC_T::ISPCTL: SPUEN Position          */
N#define FMC_ISPCTL_SPUEN_Msk             (0x1ul << FMC_ISPCTL_SPUEN_Pos)                   /*!< FMC_T::ISPCTL: SPUEN Mask              */
N
N#define FMC_ISPCTL_APUEN_Pos             (3)                                               /*!< FMC_T::ISPCTL: APUEN Position          */
N#define FMC_ISPCTL_APUEN_Msk             (0x1ul << FMC_ISPCTL_APUEN_Pos)                   /*!< FMC_T::ISPCTL: APUEN Mask              */
N
N#define FMC_ISPCTL_CFGUEN_Pos            (4)                                               /*!< FMC_T::ISPCTL: CFGUEN Position         */
N#define FMC_ISPCTL_CFGUEN_Msk            (0x1ul << FMC_ISPCTL_CFGUEN_Pos)                  /*!< FMC_T::ISPCTL: CFGUEN Mask             */
N
N#define FMC_ISPCTL_LDUEN_Pos             (5)                                               /*!< FMC_T::ISPCTL: LDUEN Position          */
N#define FMC_ISPCTL_LDUEN_Msk             (0x1ul << FMC_ISPCTL_LDUEN_Pos)                   /*!< FMC_T::ISPCTL: LDUEN Mask              */
N
N#define FMC_ISPCTL_ISPFF_Pos             (6)                                               /*!< FMC_T::ISPCTL: ISPFF Position          */
N#define FMC_ISPCTL_ISPFF_Msk             (0x1ul << FMC_ISPCTL_ISPFF_Pos)                   /*!< FMC_T::ISPCTL: ISPFF Mask              */
N
N#define FMC_ISPADDR_ISPADDR_Pos          (0)                                               /*!< FMC_T::ISPADDR: ISPADDR Position       */
N#define FMC_ISPADDR_ISPADDR_Msk          (0xfffffffful << FMC_ISPADDR_ISPADDR_Pos)         /*!< FMC_T::ISPADDR: ISPADDR Mask           */
N
N#define FMC_ISPDAT_ISPDAT_Pos            (0)                                               /*!< FMC_T::ISPDAT: ISPDAT Position         */
N#define FMC_ISPDAT_ISPDAT_Msk            (0xfffffffful << FMC_ISPDAT_ISPDAT_Pos)           /*!< FMC_T::ISPDAT: ISPDAT Mask             */
N
N#define FMC_ISPCMD_CMD_Pos               (0)                                               /*!< FMC_T::ISPCMD: CMD Position            */
N#define FMC_ISPCMD_CMD_Msk               (0x7ful << FMC_ISPCMD_CMD_Pos)                    /*!< FMC_T::ISPCMD: CMD Mask                */
N
N#define FMC_ISPTRG_ISPGO_Pos             (0)                                               /*!< FMC_T::ISPTRG: ISPGO Position          */
N#define FMC_ISPTRG_ISPGO_Msk             (0x1ul << FMC_ISPTRG_ISPGO_Pos)                   /*!< FMC_T::ISPTRG: ISPGO Mask              */
N
N#define FMC_DFBA_DFBA_Pos                (0)                                               /*!< FMC_T::DFBA: DFBA Position             */
N#define FMC_DFBA_DFBA_Msk                (0xfffffffful << FMC_DFBA_DFBA_Pos)               /*!< FMC_T::DFBA: DFBA Mask                 */
N
N#define FMC_FTCTL_FOM_Pos                (4)                                               /*!< FMC_T::FTCTL: FOM Position             */
N#define FMC_FTCTL_FOM_Msk                (0x7ul << FMC_FTCTL_FOM_Pos)                      /*!< FMC_T::FTCTL: FOM Mask                 */
N
N#define FMC_ISPSTS_ISPBUSY_Pos           (0)                                               /*!< FMC_T::ISPSTS: ISPBUSY Position        */
N#define FMC_ISPSTS_ISPBUSY_Msk           (0x1ul << FMC_ISPSTS_ISPBUSY_Pos)                 /*!< FMC_T::ISPSTS: ISPBUSY Mask            */
N
N#define FMC_ISPSTS_CBS_Pos               (1)                                               /*!< FMC_T::ISPSTS: CBS Position            */
N#define FMC_ISPSTS_CBS_Msk               (0x3ul << FMC_ISPSTS_CBS_Pos)                     /*!< FMC_T::ISPSTS: CBS Mask                */
N
N#define FMC_ISPSTS_ISPFF_Pos             (6)                                               /*!< FMC_T::ISPSTS: ISPFF Position          */
N#define FMC_ISPSTS_ISPFF_Msk             (0x1ul << FMC_ISPSTS_ISPFF_Pos)                   /*!< FMC_T::ISPSTS: ISPFF Mask              */
N
N#define FMC_ISPSTS_VECMAP_Pos            (9)                                               /*!< FMC_T::ISPSTS: VECMAP Position         */
N#define FMC_ISPSTS_VECMAP_Msk            (0x1ffffful << FMC_ISPSTS_VECMAP_Pos)             /*!< FMC_T::ISPSTS: VECMAP Mask             */
N
N#define FMC_ISPSTS_SCODE_Pos             (31)                                              /*!< FMC_T::ISPSTS: SCODE Position          */
N#define FMC_ISPSTS_SCODE_Msk             (0x1ul << FMC_ISPSTS_SCODE_Pos)                   /*!< FMC_T::ISPSTS: SCODE Mask              */
N
N/**@}*/ /* FMC_CONST */
N/**@}*/ /* end of FMC register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __FMC_REG_H__ */
L 156 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "gpio_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\gpio_reg.h" 1
N/**************************************************************************//**
N * @file     gpio_reg.h
N * @version  V1.00
N * @brief    GPIO register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __GPIO_REG_H__
N#define __GPIO_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup GPIO General Purpose Input/Output Controller (GPIO)
N    Memory Mapped Structure for GPIO Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var GPIO_T::MODE
N     * Offset: 0x00/0x40/0x80/0xC0/0x100/0x140  Port A~F I/O Mode Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2n+1:2n]|MODEn    |Port A-F I/O Pin[n] Mode Control
N     * |        |          |Determine each I/O mode of Px.n pins.
N     * |        |          |00 = Px.n is in Input mode.
N     * |        |          |01 = Px.n is in Push-pull Output mode.
N     * |        |          |10 = Px.n is in Open-drain Output mode.
N     * |        |          |11 = Px.n is in Quasi-bidirectional mode.
N     * |        |          |Note1: The initial value of this field is defined by CIOINI (CONFIG0 [10])
N     * |        |          |If CIOINI is set to 1, all existed pins will be quasi-bidirectional mode after chip powered on
N     * |        |          |For exampel, PA default value is 0xFFF00000
N     * |        |          |If CIOINI is set to 0, the default value is 0x0000_0000 and all pins will be input mode after chip powered on.
N     * |        |          |Note2:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note3: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * @var GPIO_T::DINOFF
N     * Offset: 0x04/0x44/0x84/0xC4/0x104/0x144  Port A~F Digital Input Path Disable Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n+16]  |DINOFFn   |Port A-F Pin[n] Digital Input Path Disable Control
N     * |        |          |Each of these bits is used to control if the digital input path of corresponding Px.n pin is disabled.
N     * |        |          |User can disable GPIO digital input path by setting DINOFF (Px_DINOFF[n]) to avoid input current leakage
N     * |        |          |When GPIO digital input path is disabled, the digital input pin value PIN (PxPIN[n]) is tied to low
N     * |        |          |By the way, the GPIO digital input path is force disabled by hardware and DINOFF control is useless when I/O function configure as ADC/ACMP/ext
N     * |        |          |XTL.
N     * |        |          |0 = Px.n digital input path Enabled.
N     * |        |          |1 = Px.n digital input path Disabled (digital input tied to low).
N     * |        |          |Note1:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note2: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * @var GPIO_T::DOUT
N     * Offset: 0x08/0x48/0x88/0xC8/0x108/0x148  Port A~F Data Output Value
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |DOUTn     |Port A-F Pin[n] Output Value
N     * |        |          |Each of these bits controls the status of a Px.n pin when the Px.n is configured as Push-pull output, Open-drain output or Quasi-bidirectional mode.
N     * |        |          |0 = Px.n will drive Low if the Px.n pin is configured as Push-pull output, Open-drain output or Quasi-bidirectional mode.
N     * |        |          |1 = Px.n will drive High if the Px.n pin is configured as Push-pull output or Quasi-bidirectional mode.
N     * |        |          |Note1:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note2: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * @var GPIO_T::DATMSK
N     * Offset: 0x0C/0x4C/0x8C/0xCC/0x10C/0x14C  Port A~F Data Output Write Mask
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |DATMSKn   |Port A-F Pin[n] Data Output Write Mask
N     * |        |          |These bits are used to protect the corresponding DOUT (Px_DOUT[n]) bit
N     * |        |          |When the DATMSK (Px_DATMSK[n]) bit is set to 1, the corresponding DOUT (Px_DOUT[n]) bit is protected
N     * |        |          |If the write signal is masked, writing data to the protect bit is ignored.
N     * |        |          |0 = Corresponding DOUT (Px_DOUT[n]) bit can be updated.
N     * |        |          |1 = Corresponding DOUT (Px_DOUT[n]) bit protected.
N     * |        |          |Note1: This function only protects the corresponding DOUT (Px_DOUT[n]) bit, and will not protect the corresponding PDIO (Pxn_PDIO[0]) bit.
N     * |        |          |Note2:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note3: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * @var GPIO_T::PIN
N     * Offset: 0x10/0x50/0x90/0xD0/0x110/0x150  Port A~F Pin Value
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |PINn      |Port A-FPin[n] Pin Value
N     * |        |          |Each bit of the register reflects the actual status of the respective Px.n pin
N     * |        |          |If the bit is 1, it indicates the corresponding pin status is high; else the pin status is low.
N     * |        |          |Note1:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note2: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * @var GPIO_T::DBEN
N     * Offset: 0x14/0x54/0x94/0xD4/0x114/0x154  Port A~F De-Bounce Enable Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |DBENn     |Port A-F Pin[n] Input Signal De-bounce Enable Bit
N     * |        |          |The DBEN[n] bit is used to enable the de-bounce function for each corresponding bit
N     * |        |          |If the input signal pulse width cannot be sampled by continuous two de-bounce sample cycle, the input signal transition is seen as the signal bounce and will not trigger the interrupt
N     * |        |          |The de-bounce clock source is controlled by DBCLKSRC (GPIO_DBCTL [4]), one de-bounce sample cycle period is controlled by DBCLKSEL (GPIO_DBCTL [3:0]).
N     * |        |          |0 = Px.n de-bounce function Disabled.
N     * |        |          |1 = Px.n de-bounce function Enabled.
N     * |        |          |The de-bounce function is valid only for edge triggered interrupt
N     * |        |          |If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
N     * |        |          |Note1:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note2: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * @var GPIO_T::INTTYPE
N     * Offset: 0x18/0x58/0x98/0xD8/0x118/0x158  Port A~F Interrupt Mode Trigger Type Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |TYPEn     |Port A-F Pin[n] Edge or Level Detection Interrupt Trigger Type Control
N     * |        |          |TYPE (Px_INTTYPE[n]) bit is used to control the triggered interrupt is by level trigger or by edge trigger
N     * |        |          |If the interrupt is by edge trigger, the trigger source can be controlled by de-bounce
N     * |        |          |If the interrupt is by level trigger, the input source is sampled by one HCLK clock and generates the interrupt.
N     * |        |          |0 = Edge trigger interrupt.
N     * |        |          |1 = Level trigger interrupt.
N     * |        |          |If the pin is set as the level trigger interrupt, only one level can be set on the registers RHIEN (Px_INTEN[n+16])/FLIEN (Px_INTEN[n])
N     * |        |          |If both levels to trigger interrupt are set, the setting is ignored and no interrupt will occur.
N     * |        |          |The de-bounce function is valid only for edge triggered interrupt
N     * |        |          |If the interrupt mode is level triggered, the de-bounce enable bit is ignored.
N     * |        |          |Note1:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note2: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * @var GPIO_T::INTEN
N     * Offset: 0x1C/0x5C/0x9C/0xDC/0x11C/0x15C  Port A~F Interrupt Enable Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |FLIENn    |Port A-f Pin[n] Falling Edge or Low Level Interrupt Trigger Type Enable Bit
N     * |        |          |The FLIEN (Px_INTEN[n]) bit is used to enable the interrupt for each of the corresponding input Px.n pin
N     * |        |          |Set bit to 1 also enable the pin wake-up function.
N     * |        |          |When setting the FLIEN (Px_INTEN[n]) bit to 1 :
N     * |        |          |If the interrupt is level trigger (TYPE (Px_INTTYPE[n]) bit is set to 1), the input Px.n pin will generate the interrupt while this pin state is at low level.
N     * |        |          |If the interrupt is edge trigger(TYPE (Px_INTTYPE[n]) bit is set to 0), the input Px.n pin will generate the interrupt while this pin state changed from high to low.
N     * |        |          |0 = Px.n level low or high to low interrupt Disabled.
N     * |        |          |1 = Px.n level low or high to low interrupt Enabled.
N     * |        |          |Note1:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note2: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * |[n+16]  |RHIENn    |Port A-F Pin[n] Rising Edge or High Level Interrupt Trigger Type Enable Bit
N     * |        |          |The RHIEN (Px_INTEN[n+16]) bit is used to enable the interrupt for each of the corresponding input Px.n pin
N     * |        |          |Set bit to 1 also enable the pin wake-up function.
N     * |        |          |When setting the RHIEN (Px_INTEN[n+16]) bit to 1 :
N     * |        |          |If the interrupt is level trigger (TYPE (Px_INTTYPE[n]) bit is set to 1), the input Px.n pin will generate the interrupt while this pin state is at high level.
N     * |        |          |If the interrupt is edge trigger (TYPE (Px_INTTYPE[n]) bit is set to 0), the input Px.n pin will generate the interrupt while this pin state changed from low to high.
N     * |        |          |0 = Px.n level high or low to high interrupt Disabled.
N     * |        |          |1 = Px.n level high or low to high interrupt Enabled.
N     * |        |          |Note1:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note2: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * @var GPIO_T::INTSRC
N     * Offset: 0x20/0x60/0xA0/0xE0/0x120/0x160  Port A~F Interrupt Source Flag
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |INTSRCn   |Port A-F Pin[n] Interrupt Source Flag
N     * |        |          |Write Operation :
N     * |        |          |0 = No action.
N     * |        |          |1 = Clear the corresponding pending interrupt.
N     * |        |          |Read Operation :
N     * |        |          |0 = No interrupt at Px.n.
N     * |        |          |1 = Px.n generates an interrupt.
N     * |        |          |Note1:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note2: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * @var GPIO_T::SMTEN
N     * Offset: 0x24/0x64/0xA4/0xE4/0x124/0x164  Port A~F Input Schmitt Trigger Enable
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |SMTENn    |Port A-F Pin[n] Input Schmitt Trigger Enable Bit
N     * |        |          |0 = Px.n input schmitt trigger function Disabled.
N     * |        |          |1 = Px.n input schmitt trigger function Enabled.
N     * |        |          |Note1:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note2: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * @var GPIO_T::SLEWCTL
N     * Offset: 0x28/0x68/0xA8/0xE8/0x128/0x168  Port A~F High Slew Rate Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |HSRENn    |Port A-F Pin[n] High Slew Rate Control
N     * |        |          |0 = Px.n output with basic slew rate.
N     * |        |          |1 = Px.n output with higher slew rate.
N     * |        |          |Note1:
N     * |        |          |n = 10~15 for port A.
N     * |        |          |Max. n=15 for port B.
N     * |        |          |Max. n=13 for port C.
N     * |        |          |Max. n=11 for port D.
N     * |        |          |Max. n=2 for port E.
N     * |        |          |Max. n=5 for port F.
N     * |        |          |Note2: The PB.11, PC.6/PC.7, PD.6/D.7 pin is ignored.
N     * @var GPIO_T::DRVCTL
N     * Offset: 0xAC  Port C High Drive Strength Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[n]     |HDRVENn   |Port C Pin[n] Driving Strength Control
N     * |        |          |0 = Px.n output with basic driving strength.
N     * |        |          |1 = Px.n output with high driving strength.
N     * |        |          |Note:
N     * |        |          |n=0,1..5 for port C.
N     */
N    __IO uint32_t MODE;               /*!< [0x00/0x40/0x80/0xc0/0x100/0x140] Port A~F I/O Mode Control                    */
X    volatile uint32_t MODE;                
N    __IO uint32_t DINOFF;             /*!< [0x04/0x44/0x84/0xc4/0x104/0x144] Port A~F Digital Input Path Disable Control  */
X    volatile uint32_t DINOFF;              
N    __IO uint32_t DOUT;               /*!< [0x08/0x48/0x88/0xc8/0x108/0x148] Port A~F Data Output Value                   */
X    volatile uint32_t DOUT;                
N    __IO uint32_t DATMSK;             /*!< [0x0c/0x4c/0x8c/0xcc/0x10c/0x14c] Port A~F Data Output Write Mask              */
X    volatile uint32_t DATMSK;              
N    __I  uint32_t PIN;                /*!< [0x10/0x50/0x90/0xd0/0x110/0x150] Port A~F Pin Value                           */
X    volatile const  uint32_t PIN;                 
N    __IO uint32_t DBEN;               /*!< [0x14/0x54/0x94/0xd4/0x114/0x154] Port A~F De-Bounce Enable Control            */
X    volatile uint32_t DBEN;                
N    __IO uint32_t INTTYPE;            /*!< [0x18/0x58/0x98/0xd8/0x118/0x158] Port A~F Interrupt Mode Trigger Type Control */
X    volatile uint32_t INTTYPE;             
N    __IO uint32_t INTEN;              /*!< [0x1c/0x5c/0x9c/0xdc/0x11c/0x15c] Port A~F Interrupt Enable Control            */
X    volatile uint32_t INTEN;               
N    __IO uint32_t INTSRC;             /*!< [0x20/0x60/0xa0/0xe0/0x120/0x160] Port A~F Interrupt Source Flag               */
X    volatile uint32_t INTSRC;              
N    __IO uint32_t SMTEN;              /*!< [0x24/0x64/0xa4/0xe4/0x124/0x164] Port A~F Input Schmitt Trigger Enable        */
X    volatile uint32_t SMTEN;               
N    __IO uint32_t SLEWCTL;            /*!< [0x28/0x68/0xa8/0xe8/0x128/0x168] Port A~F High Slew Rate Control              */
X    volatile uint32_t SLEWCTL;             
N    __IO uint32_t DRVCTL;             /*!< [0x00ac] Port C High Drive Strength Control                                    */
X    volatile uint32_t DRVCTL;              
N} GPIO_T;
N
Ntypedef struct
N{
N    /**
N     * @var GPIO_DBCTL_T::DBCTL
N     * Offset: 0x180  Interrupt De-bounce Control
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |DBCLKSEL  |De-bounce Sampling Cycle Selection
N     * |        |          |0000 = Sample interrupt input once per 1 clocks.
N     * |        |          |0001 = Sample interrupt input once per 2 clocks.
N     * |        |          |0010 = Sample interrupt input once per 4 clocks.
N     * |        |          |0011 = Sample interrupt input once per 8 clocks.
N     * |        |          |0100 = Sample interrupt input once per 16 clocks.
N     * |        |          |0101 = Sample interrupt input once per 32 clocks.
N     * |        |          |0110 = Sample interrupt input once per 64 clocks.
N     * |        |          |0111 = Sample interrupt input once per 128 clocks.
N     * |        |          |1000 = Sample interrupt input once per 256 clocks.
N     * |        |          |1001 = Sample interrupt input once per 2*256 clocks.
N     * |        |          |1010 = Sample interrupt input once per 4*256 clocks.
N     * |        |          |1011 = Sample interrupt input once per 8*256 clocks.
N     * |        |          |1100 = Sample interrupt input once per 16*256 clocks.
N     * |        |          |1101 = Sample interrupt input once per 32*256 clocks.
N     * |        |          |1110 = Sample interrupt input once per 64*256 clocks.
N     * |        |          |1111 = Sample interrupt input once per 128*256 clocks.
N     * |[4]     |DBCLKSRC  |De-bounce Counter Clock Source Selection
N     * |        |          |0 = De-bounce counter clock source is the HCLK.
N     * |        |          |1 = De-bounce counter clock source is the internal 10 kHz internal low speed oscillator.
N     * |[5]     |ICLKON    |Interrupt Clock on Mode
N     * |        |          |0 = Edge detection circuit is active only if I/O pin corresponding RHIEN (Px_INTEN[n+16])/FLIEN (Px_INTEN[n]) bit is set to 1.
N     * |        |          |1 = All I/O pins edge detection circuit is always active after reset.
N     * |        |          |Note: It is recommended to disable this bit to save system power if no special application concern.
N     */
N    __IO uint32_t DBCTL;            /*!< [0x0180] Interrupt De-bounce Control                                      */
X    volatile uint32_t DBCTL;             
N} GPIO_DBCTL_T;
N
N/**
N    @addtogroup GPIO_CONST GPIO Bit Field Definition
N    Constant Definitions for GPIO Controller
N@{ */
N
N#define GPIO_MODE_MODE0_Pos              (0)                                               /*!< GPIO_T::MODE: MODE0 Position           */
N#define GPIO_MODE_MODE0_Msk              (0x3ul << GPIO_MODE_MODE0_Pos)                    /*!< GPIO_T::MODE: MODE0 Mask               */
N
N#define GPIO_MODE_MODE1_Pos              (2)                                               /*!< GPIO_T::MODE: MODE1 Position           */
N#define GPIO_MODE_MODE1_Msk              (0x3ul << GPIO_MODE_MODE1_Pos)                    /*!< GPIO_T::MODE: MODE1 Mask               */
N
N#define GPIO_MODE_MODE2_Pos              (4)                                               /*!< GPIO_T::MODE: MODE2 Position           */
N#define GPIO_MODE_MODE2_Msk              (0x3ul << GPIO_MODE_MODE2_Pos)                    /*!< GPIO_T::MODE: MODE2 Mask               */
N
N#define GPIO_MODE_MODE3_Pos              (6)                                               /*!< GPIO_T::MODE: MODE3 Position           */
N#define GPIO_MODE_MODE3_Msk              (0x3ul << GPIO_MODE_MODE3_Pos)                    /*!< GPIO_T::MODE: MODE3 Mask               */
N
N#define GPIO_MODE_MODE4_Pos              (8)                                               /*!< GPIO_T::MODE: MODE4 Position           */
N#define GPIO_MODE_MODE4_Msk              (0x3ul << GPIO_MODE_MODE4_Pos)                    /*!< GPIO_T::MODE: MODE4 Mask               */
N
N#define GPIO_MODE_MODE5_Pos              (10)                                              /*!< GPIO_T::MODE: MODE5 Position           */
N#define GPIO_MODE_MODE5_Msk              (0x3ul << GPIO_MODE_MODE5_Pos)                    /*!< GPIO_T::MODE: MODE5 Mask               */
N
N#define GPIO_MODE_MODE6_Pos              (12)                                              /*!< GPIO_T::MODE: MODE6 Position           */
N#define GPIO_MODE_MODE6_Msk              (0x3ul << GPIO_MODE_MODE6_Pos)                    /*!< GPIO_T::MODE: MODE6 Mask               */
N
N#define GPIO_MODE_MODE7_Pos              (14)                                              /*!< GPIO_T::MODE: MODE7 Position           */
N#define GPIO_MODE_MODE7_Msk              (0x3ul << GPIO_MODE_MODE7_Pos)                    /*!< GPIO_T::MODE: MODE7 Mask               */
N
N#define GPIO_MODE_MODE8_Pos              (16)                                              /*!< GPIO_T::MODE: MODE8 Position           */
N#define GPIO_MODE_MODE8_Msk              (0x3ul << GPIO_MODE_MODE8_Pos)                    /*!< GPIO_T::MODE: MODE8 Mask               */
N
N#define GPIO_MODE_MODE9_Pos              (18)                                              /*!< GPIO_T::MODE: MODE9 Position           */
N#define GPIO_MODE_MODE9_Msk              (0x3ul << GPIO_MODE_MODE9_Pos)                    /*!< GPIO_T::MODE: MODE9 Mask               */
N
N#define GPIO_MODE_MODE10_Pos             (20)                                              /*!< GPIO_T::MODE: MODE10 Position          */
N#define GPIO_MODE_MODE10_Msk             (0x3ul << GPIO_MODE_MODE10_Pos)                   /*!< GPIO_T::MODE: MODE10 Mask              */
N
N#define GPIO_MODE_MODE11_Pos             (22)                                              /*!< GPIO_T::MODE: MODE11 Position          */
N#define GPIO_MODE_MODE11_Msk             (0x3ul << GPIO_MODE_MODE11_Pos)                   /*!< GPIO_T::MODE: MODE11 Mask              */
N
N#define GPIO_MODE_MODE12_Pos             (24)                                              /*!< GPIO_T::MODE: MODE12 Position          */
N#define GPIO_MODE_MODE12_Msk             (0x3ul << GPIO_MODE_MODE12_Pos)                   /*!< GPIO_T::MODE: MODE12 Mask              */
N
N#define GPIO_MODE_MODE13_Pos             (26)                                              /*!< GPIO_T::MODE: MODE13 Position          */
N#define GPIO_MODE_MODE13_Msk             (0x3ul << GPIO_MODE_MODE13_Pos)                   /*!< GPIO_T::MODE: MODE13 Mask              */
N
N#define GPIO_MODE_MODE14_Pos             (28)                                              /*!< GPIO_T::MODE: MODE14 Position          */
N#define GPIO_MODE_MODE14_Msk             (0x3ul << GPIO_MODE_MODE14_Pos)                   /*!< GPIO_T::MODE: MODE14 Mask              */
N
N#define GPIO_MODE_MODE15_Pos             (30)                                              /*!< GPIO_T::MODE: MODE15 Position          */
N#define GPIO_MODE_MODE15_Msk             (0x3ul << GPIO_MODE_MODE15_Pos)                   /*!< GPIO_T::MODE: MODE15 Mask              */
N
N#define GPIO_DINOFF_DINOFF0_Pos          (16)                                              /*!< GPIO_T::DINOFF: DINOFF0 Position       */
N#define GPIO_DINOFF_DINOFF0_Msk          (0x1ul << GPIO_DINOFF_DINOFF0_Pos)                /*!< GPIO_T::DINOFF: DINOFF0 Mask           */
N
N#define GPIO_DINOFF_DINOFF1_Pos          (17)                                              /*!< GPIO_T::DINOFF: DINOFF1 Position       */
N#define GPIO_DINOFF_DINOFF1_Msk          (0x1ul << GPIO_DINOFF_DINOFF1_Pos)                /*!< GPIO_T::DINOFF: DINOFF1 Mask           */
N
N#define GPIO_DINOFF_DINOFF2_Pos          (18)                                              /*!< GPIO_T::DINOFF: DINOFF2 Position       */
N#define GPIO_DINOFF_DINOFF2_Msk          (0x1ul << GPIO_DINOFF_DINOFF2_Pos)                /*!< GPIO_T::DINOFF: DINOFF2 Mask           */
N
N#define GPIO_DINOFF_DINOFF3_Pos          (19)                                              /*!< GPIO_T::DINOFF: DINOFF3 Position       */
N#define GPIO_DINOFF_DINOFF3_Msk          (0x1ul << GPIO_DINOFF_DINOFF3_Pos)                /*!< GPIO_T::DINOFF: DINOFF3 Mask           */
N
N#define GPIO_DINOFF_DINOFF4_Pos          (20)                                              /*!< GPIO_T::DINOFF: DINOFF4 Position       */
N#define GPIO_DINOFF_DINOFF4_Msk          (0x1ul << GPIO_DINOFF_DINOFF4_Pos)                /*!< GPIO_T::DINOFF: DINOFF4 Mask           */
N
N#define GPIO_DINOFF_DINOFF5_Pos          (21)                                              /*!< GPIO_T::DINOFF: DINOFF5 Position       */
N#define GPIO_DINOFF_DINOFF5_Msk          (0x1ul << GPIO_DINOFF_DINOFF5_Pos)                /*!< GPIO_T::DINOFF: DINOFF5 Mask           */
N
N#define GPIO_DINOFF_DINOFF6_Pos          (22)                                              /*!< GPIO_T::DINOFF: DINOFF6 Position       */
N#define GPIO_DINOFF_DINOFF6_Msk          (0x1ul << GPIO_DINOFF_DINOFF6_Pos)                /*!< GPIO_T::DINOFF: DINOFF6 Mask           */
N
N#define GPIO_DINOFF_DINOFF7_Pos          (23)                                              /*!< GPIO_T::DINOFF: DINOFF7 Position       */
N#define GPIO_DINOFF_DINOFF7_Msk          (0x1ul << GPIO_DINOFF_DINOFF7_Pos)                /*!< GPIO_T::DINOFF: DINOFF7 Mask           */
N
N#define GPIO_DINOFF_DINOFF8_Pos          (24)                                              /*!< GPIO_T::DINOFF: DINOFF8 Position       */
N#define GPIO_DINOFF_DINOFF8_Msk          (0x1ul << GPIO_DINOFF_DINOFF8_Pos)                /*!< GPIO_T::DINOFF: DINOFF8 Mask           */
N
N#define GPIO_DINOFF_DINOFF9_Pos          (25)                                              /*!< GPIO_T::DINOFF: DINOFF9 Position       */
N#define GPIO_DINOFF_DINOFF9_Msk          (0x1ul << GPIO_DINOFF_DINOFF9_Pos)                /*!< GPIO_T::DINOFF: DINOFF9 Mask           */
N
N#define GPIO_DINOFF_DINOFF10_Pos         (26)                                              /*!< GPIO_T::DINOFF: DINOFF10 Position      */
N#define GPIO_DINOFF_DINOFF10_Msk         (0x1ul << GPIO_DINOFF_DINOFF10_Pos)               /*!< GPIO_T::DINOFF: DINOFF10 Mask          */
N
N#define GPIO_DINOFF_DINOFF11_Pos         (27)                                              /*!< GPIO_T::DINOFF: DINOFF11 Position      */
N#define GPIO_DINOFF_DINOFF11_Msk         (0x1ul << GPIO_DINOFF_DINOFF11_Pos)               /*!< GPIO_T::DINOFF: DINOFF11 Mask          */
N
N#define GPIO_DINOFF_DINOFF12_Pos         (28)                                              /*!< GPIO_T::DINOFF: DINOFF12 Position      */
N#define GPIO_DINOFF_DINOFF12_Msk         (0x1ul << GPIO_DINOFF_DINOFF12_Pos)               /*!< GPIO_T::DINOFF: DINOFF12 Mask          */
N
N#define GPIO_DINOFF_DINOFF13_Pos         (29)                                              /*!< GPIO_T::DINOFF: DINOFF13 Position      */
N#define GPIO_DINOFF_DINOFF13_Msk         (0x1ul << GPIO_DINOFF_DINOFF13_Pos)               /*!< GPIO_T::DINOFF: DINOFF13 Mask          */
N
N#define GPIO_DINOFF_DINOFF14_Pos         (30)                                              /*!< GPIO_T::DINOFF: DINOFF14 Position      */
N#define GPIO_DINOFF_DINOFF14_Msk         (0x1ul << GPIO_DINOFF_DINOFF14_Pos)               /*!< GPIO_T::DINOFF: DINOFF14 Mask          */
N
N#define GPIO_DINOFF_DINOFF15_Pos         (31)                                              /*!< GPIO_T::DINOFF: DINOFF15 Position      */
N#define GPIO_DINOFF_DINOFF15_Msk         (0x1ul << GPIO_DINOFF_DINOFF15_Pos)               /*!< GPIO_T::DINOFF: DINOFF15 Mask          */
N
N#define GPIO_DOUT_DOUT0_Pos              (0)                                               /*!< GPIO_T::DOUT: DOUT0 Position           */
N#define GPIO_DOUT_DOUT0_Msk              (0x1ul << GPIO_DOUT_DOUT0_Pos)                    /*!< GPIO_T::DOUT: DOUT0 Mask               */
N
N#define GPIO_DOUT_DOUT1_Pos              (1)                                               /*!< GPIO_T::DOUT: DOUT1 Position           */
N#define GPIO_DOUT_DOUT1_Msk              (0x1ul << GPIO_DOUT_DOUT1_Pos)                    /*!< GPIO_T::DOUT: DOUT1 Mask               */
N
N#define GPIO_DOUT_DOUT2_Pos              (2)                                               /*!< GPIO_T::DOUT: DOUT2 Position           */
N#define GPIO_DOUT_DOUT2_Msk              (0x1ul << GPIO_DOUT_DOUT2_Pos)                    /*!< GPIO_T::DOUT: DOUT2 Mask               */
N
N#define GPIO_DOUT_DOUT3_Pos              (3)                                               /*!< GPIO_T::DOUT: DOUT3 Position           */
N#define GPIO_DOUT_DOUT3_Msk              (0x1ul << GPIO_DOUT_DOUT3_Pos)                    /*!< GPIO_T::DOUT: DOUT3 Mask               */
N
N#define GPIO_DOUT_DOUT4_Pos              (4)                                               /*!< GPIO_T::DOUT: DOUT4 Position           */
N#define GPIO_DOUT_DOUT4_Msk              (0x1ul << GPIO_DOUT_DOUT4_Pos)                    /*!< GPIO_T::DOUT: DOUT4 Mask               */
N
N#define GPIO_DOUT_DOUT5_Pos              (5)                                               /*!< GPIO_T::DOUT: DOUT5 Position           */
N#define GPIO_DOUT_DOUT5_Msk              (0x1ul << GPIO_DOUT_DOUT5_Pos)                    /*!< GPIO_T::DOUT: DOUT5 Mask               */
N
N#define GPIO_DOUT_DOUT6_Pos              (6)                                               /*!< GPIO_T::DOUT: DOUT6 Position           */
N#define GPIO_DOUT_DOUT6_Msk              (0x1ul << GPIO_DOUT_DOUT6_Pos)                    /*!< GPIO_T::DOUT: DOUT6 Mask               */
N
N#define GPIO_DOUT_DOUT7_Pos              (7)                                               /*!< GPIO_T::DOUT: DOUT7 Position           */
N#define GPIO_DOUT_DOUT7_Msk              (0x1ul << GPIO_DOUT_DOUT7_Pos)                    /*!< GPIO_T::DOUT: DOUT7 Mask               */
N
N#define GPIO_DOUT_DOUT8_Pos              (8)                                               /*!< GPIO_T::DOUT: DOUT8 Position           */
N#define GPIO_DOUT_DOUT8_Msk              (0x1ul << GPIO_DOUT_DOUT8_Pos)                    /*!< GPIO_T::DOUT: DOUT8 Mask               */
N
N#define GPIO_DOUT_DOUT9_Pos              (9)                                               /*!< GPIO_T::DOUT: DOUT9 Position           */
N#define GPIO_DOUT_DOUT9_Msk              (0x1ul << GPIO_DOUT_DOUT9_Pos)                    /*!< GPIO_T::DOUT: DOUT9 Mask               */
N
N#define GPIO_DOUT_DOUT10_Pos             (10)                                              /*!< GPIO_T::DOUT: DOUT10 Position          */
N#define GPIO_DOUT_DOUT10_Msk             (0x1ul << GPIO_DOUT_DOUT10_Pos)                   /*!< GPIO_T::DOUT: DOUT10 Mask              */
N
N#define GPIO_DOUT_DOUT11_Pos             (11)                                              /*!< GPIO_T::DOUT: DOUT11 Position          */
N#define GPIO_DOUT_DOUT11_Msk             (0x1ul << GPIO_DOUT_DOUT11_Pos)                   /*!< GPIO_T::DOUT: DOUT11 Mask              */
N
N#define GPIO_DOUT_DOUT12_Pos             (12)                                              /*!< GPIO_T::DOUT: DOUT12 Position          */
N#define GPIO_DOUT_DOUT12_Msk             (0x1ul << GPIO_DOUT_DOUT12_Pos)                   /*!< GPIO_T::DOUT: DOUT12 Mask              */
N
N#define GPIO_DOUT_DOUT13_Pos             (13)                                              /*!< GPIO_T::DOUT: DOUT13 Position          */
N#define GPIO_DOUT_DOUT13_Msk             (0x1ul << GPIO_DOUT_DOUT13_Pos)                   /*!< GPIO_T::DOUT: DOUT13 Mask              */
N
N#define GPIO_DOUT_DOUT14_Pos             (14)                                              /*!< GPIO_T::DOUT: DOUT14 Position          */
N#define GPIO_DOUT_DOUT14_Msk             (0x1ul << GPIO_DOUT_DOUT14_Pos)                   /*!< GPIO_T::DOUT: DOUT14 Mask              */
N
N#define GPIO_DOUT_DOUT15_Pos             (15)                                              /*!< GPIO_T::DOUT: DOUT15 Position          */
N#define GPIO_DOUT_DOUT15_Msk             (0x1ul << GPIO_DOUT_DOUT15_Pos)                   /*!< GPIO_T::DOUT: DOUT15 Mask              */
N
N#define GPIO_DATMSK_DATMSK0_Pos          (0)                                               /*!< GPIO_T::DATMSK: DATMSK0 Position       */
N#define GPIO_DATMSK_DATMSK0_Msk          (0x1ul << GPIO_DATMSK_DATMSK0_Pos)                /*!< GPIO_T::DATMSK: DATMSK0 Mask           */
N
N#define GPIO_DATMSK_DATMSK1_Pos          (1)                                               /*!< GPIO_T::DATMSK: DATMSK1 Position       */
N#define GPIO_DATMSK_DATMSK1_Msk          (0x1ul << GPIO_DATMSK_DATMSK1_Pos)                /*!< GPIO_T::DATMSK: DATMSK1 Mask           */
N
N#define GPIO_DATMSK_DATMSK2_Pos          (2)                                               /*!< GPIO_T::DATMSK: DATMSK2 Position       */
N#define GPIO_DATMSK_DATMSK2_Msk          (0x1ul << GPIO_DATMSK_DATMSK2_Pos)                /*!< GPIO_T::DATMSK: DATMSK2 Mask           */
N
N#define GPIO_DATMSK_DATMSK3_Pos          (3)                                               /*!< GPIO_T::DATMSK: DATMSK3 Position       */
N#define GPIO_DATMSK_DATMSK3_Msk          (0x1ul << GPIO_DATMSK_DATMSK3_Pos)                /*!< GPIO_T::DATMSK: DATMSK3 Mask           */
N
N#define GPIO_DATMSK_DATMSK4_Pos          (4)                                               /*!< GPIO_T::DATMSK: DATMSK4 Position       */
N#define GPIO_DATMSK_DATMSK4_Msk          (0x1ul << GPIO_DATMSK_DATMSK4_Pos)                /*!< GPIO_T::DATMSK: DATMSK4 Mask           */
N
N#define GPIO_DATMSK_DATMSK5_Pos          (5)                                               /*!< GPIO_T::DATMSK: DATMSK5 Position       */
N#define GPIO_DATMSK_DATMSK5_Msk          (0x1ul << GPIO_DATMSK_DATMSK5_Pos)                /*!< GPIO_T::DATMSK: DATMSK5 Mask           */
N
N#define GPIO_DATMSK_DATMSK6_Pos          (6)                                               /*!< GPIO_T::DATMSK: DATMSK6 Position       */
N#define GPIO_DATMSK_DATMSK6_Msk          (0x1ul << GPIO_DATMSK_DATMSK6_Pos)                /*!< GPIO_T::DATMSK: DATMSK6 Mask           */
N
N#define GPIO_DATMSK_DATMSK7_Pos          (7)                                               /*!< GPIO_T::DATMSK: DATMSK7 Position       */
N#define GPIO_DATMSK_DATMSK7_Msk          (0x1ul << GPIO_DATMSK_DATMSK7_Pos)                /*!< GPIO_T::DATMSK: DATMSK7 Mask           */
N
N#define GPIO_DATMSK_DATMSK8_Pos          (8)                                               /*!< GPIO_T::DATMSK: DATMSK8 Position       */
N#define GPIO_DATMSK_DATMSK8_Msk          (0x1ul << GPIO_DATMSK_DATMSK8_Pos)                /*!< GPIO_T::DATMSK: DATMSK8 Mask           */
N
N#define GPIO_DATMSK_DATMSK9_Pos          (9)                                               /*!< GPIO_T::DATMSK: DATMSK9 Position       */
N#define GPIO_DATMSK_DATMSK9_Msk          (0x1ul << GPIO_DATMSK_DATMSK9_Pos)                /*!< GPIO_T::DATMSK: DATMSK9 Mask           */
N
N#define GPIO_DATMSK_DATMSK10_Pos         (10)                                              /*!< GPIO_T::DATMSK: DATMSK10 Position      */
N#define GPIO_DATMSK_DATMSK10_Msk         (0x1ul << GPIO_DATMSK_DATMSK10_Pos)               /*!< GPIO_T::DATMSK: DATMSK10 Mask          */
N
N#define GPIO_DATMSK_DATMSK11_Pos         (11)                                              /*!< GPIO_T::DATMSK: DATMSK11 Position      */
N#define GPIO_DATMSK_DATMSK11_Msk         (0x1ul << GPIO_DATMSK_DATMSK11_Pos)               /*!< GPIO_T::DATMSK: DATMSK11 Mask          */
N
N#define GPIO_DATMSK_DATMSK12_Pos         (12)                                              /*!< GPIO_T::DATMSK: DATMSK12 Position      */
N#define GPIO_DATMSK_DATMSK12_Msk         (0x1ul << GPIO_DATMSK_DATMSK12_Pos)               /*!< GPIO_T::DATMSK: DATMSK12 Mask          */
N
N#define GPIO_DATMSK_DATMSK13_Pos         (13)                                              /*!< GPIO_T::DATMSK: DATMSK13 Position      */
N#define GPIO_DATMSK_DATMSK13_Msk         (0x1ul << GPIO_DATMSK_DATMSK13_Pos)               /*!< GPIO_T::DATMSK: DATMSK13 Mask          */
N
N#define GPIO_DATMSK_DATMSK14_Pos         (14)                                              /*!< GPIO_T::DATMSK: DATMSK14 Position      */
N#define GPIO_DATMSK_DATMSK14_Msk         (0x1ul << GPIO_DATMSK_DATMSK14_Pos)               /*!< GPIO_T::DATMSK: DATMSK14 Mask          */
N
N#define GPIO_DATMSK_DATMSK15_Pos         (15)                                              /*!< GPIO_T::DATMSK: DATMSK15 Position      */
N#define GPIO_DATMSK_DATMSK15_Msk         (0x1ul << GPIO_DATMSK_DATMSK15_Pos)               /*!< GPIO_T::DATMSK: DATMSK15 Mask          */
N
N#define GPIO_PIN_PIN0_Pos                (0)                                               /*!< GPIO_T::PIN: PIN0 Position             */
N#define GPIO_PIN_PIN0_Msk                (0x1ul << GPIO_PIN_PIN0_Pos)                      /*!< GPIO_T::PIN: PIN0 Mask                 */
N
N#define GPIO_PIN_PIN1_Pos                (1)                                               /*!< GPIO_T::PIN: PIN1 Position             */
N#define GPIO_PIN_PIN1_Msk                (0x1ul << GPIO_PIN_PIN1_Pos)                      /*!< GPIO_T::PIN: PIN1 Mask                 */
N
N#define GPIO_PIN_PIN2_Pos                (2)                                               /*!< GPIO_T::PIN: PIN2 Position             */
N#define GPIO_PIN_PIN2_Msk                (0x1ul << GPIO_PIN_PIN2_Pos)                      /*!< GPIO_T::PIN: PIN2 Mask                 */
N
N#define GPIO_PIN_PIN3_Pos                (3)                                               /*!< GPIO_T::PIN: PIN3 Position             */
N#define GPIO_PIN_PIN3_Msk                (0x1ul << GPIO_PIN_PIN3_Pos)                      /*!< GPIO_T::PIN: PIN3 Mask                 */
N
N#define GPIO_PIN_PIN4_Pos                (4)                                               /*!< GPIO_T::PIN: PIN4 Position             */
N#define GPIO_PIN_PIN4_Msk                (0x1ul << GPIO_PIN_PIN4_Pos)                      /*!< GPIO_T::PIN: PIN4 Mask                 */
N
N#define GPIO_PIN_PIN5_Pos                (5)                                               /*!< GPIO_T::PIN: PIN5 Position             */
N#define GPIO_PIN_PIN5_Msk                (0x1ul << GPIO_PIN_PIN5_Pos)                      /*!< GPIO_T::PIN: PIN5 Mask                 */
N
N#define GPIO_PIN_PIN6_Pos                (6)                                               /*!< GPIO_T::PIN: PIN6 Position             */
N#define GPIO_PIN_PIN6_Msk                (0x1ul << GPIO_PIN_PIN6_Pos)                      /*!< GPIO_T::PIN: PIN6 Mask                 */
N
N#define GPIO_PIN_PIN7_Pos                (7)                                               /*!< GPIO_T::PIN: PIN7 Position             */
N#define GPIO_PIN_PIN7_Msk                (0x1ul << GPIO_PIN_PIN7_Pos)                      /*!< GPIO_T::PIN: PIN7 Mask                 */
N
N#define GPIO_PIN_PIN8_Pos                (8)                                               /*!< GPIO_T::PIN: PIN8 Position             */
N#define GPIO_PIN_PIN8_Msk                (0x1ul << GPIO_PIN_PIN8_Pos)                      /*!< GPIO_T::PIN: PIN8 Mask                 */
N
N#define GPIO_PIN_PIN9_Pos                (9)                                               /*!< GPIO_T::PIN: PIN9 Position             */
N#define GPIO_PIN_PIN9_Msk                (0x1ul << GPIO_PIN_PIN9_Pos)                      /*!< GPIO_T::PIN: PIN9 Mask                 */
N
N#define GPIO_PIN_PIN10_Pos               (10)                                              /*!< GPIO_T::PIN: PIN10 Position            */
N#define GPIO_PIN_PIN10_Msk               (0x1ul << GPIO_PIN_PIN10_Pos)                     /*!< GPIO_T::PIN: PIN10 Mask                */
N
N#define GPIO_PIN_PIN11_Pos               (11)                                              /*!< GPIO_T::PIN: PIN11 Position            */
N#define GPIO_PIN_PIN11_Msk               (0x1ul << GPIO_PIN_PIN11_Pos)                     /*!< GPIO_T::PIN: PIN11 Mask                */
N
N#define GPIO_PIN_PIN12_Pos               (12)                                              /*!< GPIO_T::PIN: PIN12 Position            */
N#define GPIO_PIN_PIN12_Msk               (0x1ul << GPIO_PIN_PIN12_Pos)                     /*!< GPIO_T::PIN: PIN12 Mask                */
N
N#define GPIO_PIN_PIN13_Pos               (13)                                              /*!< GPIO_T::PIN: PIN13 Position            */
N#define GPIO_PIN_PIN13_Msk               (0x1ul << GPIO_PIN_PIN13_Pos)                     /*!< GPIO_T::PIN: PIN13 Mask                */
N
N#define GPIO_PIN_PIN14_Pos               (14)                                              /*!< GPIO_T::PIN: PIN14 Position            */
N#define GPIO_PIN_PIN14_Msk               (0x1ul << GPIO_PIN_PIN14_Pos)                     /*!< GPIO_T::PIN: PIN14 Mask                */
N
N#define GPIO_PIN_PIN15_Pos               (15)                                              /*!< GPIO_T::PIN: PIN15 Position            */
N#define GPIO_PIN_PIN15_Msk               (0x1ul << GPIO_PIN_PIN15_Pos)                     /*!< GPIO_T::PIN: PIN15 Mask                */
N
N#define GPIO_DBEN_DBEN0_Pos              (0)                                               /*!< GPIO_T::DBEN: DBEN0 Position           */
N#define GPIO_DBEN_DBEN0_Msk              (0x1ul << GPIO_DBEN_DBEN0_Pos)                    /*!< GPIO_T::DBEN: DBEN0 Mask               */
N
N#define GPIO_DBEN_DBEN1_Pos              (1)                                               /*!< GPIO_T::DBEN: DBEN1 Position           */
N#define GPIO_DBEN_DBEN1_Msk              (0x1ul << GPIO_DBEN_DBEN1_Pos)                    /*!< GPIO_T::DBEN: DBEN1 Mask               */
N
N#define GPIO_DBEN_DBEN2_Pos              (2)                                               /*!< GPIO_T::DBEN: DBEN2 Position           */
N#define GPIO_DBEN_DBEN2_Msk              (0x1ul << GPIO_DBEN_DBEN2_Pos)                    /*!< GPIO_T::DBEN: DBEN2 Mask               */
N
N#define GPIO_DBEN_DBEN3_Pos              (3)                                               /*!< GPIO_T::DBEN: DBEN3 Position           */
N#define GPIO_DBEN_DBEN3_Msk              (0x1ul << GPIO_DBEN_DBEN3_Pos)                    /*!< GPIO_T::DBEN: DBEN3 Mask               */
N
N#define GPIO_DBEN_DBEN4_Pos              (4)                                               /*!< GPIO_T::DBEN: DBEN4 Position           */
N#define GPIO_DBEN_DBEN4_Msk              (0x1ul << GPIO_DBEN_DBEN4_Pos)                    /*!< GPIO_T::DBEN: DBEN4 Mask               */
N
N#define GPIO_DBEN_DBEN5_Pos              (5)                                               /*!< GPIO_T::DBEN: DBEN5 Position           */
N#define GPIO_DBEN_DBEN5_Msk              (0x1ul << GPIO_DBEN_DBEN5_Pos)                    /*!< GPIO_T::DBEN: DBEN5 Mask               */
N
N#define GPIO_DBEN_DBEN6_Pos              (6)                                               /*!< GPIO_T::DBEN: DBEN6 Position           */
N#define GPIO_DBEN_DBEN6_Msk              (0x1ul << GPIO_DBEN_DBEN6_Pos)                    /*!< GPIO_T::DBEN: DBEN6 Mask               */
N
N#define GPIO_DBEN_DBEN7_Pos              (7)                                               /*!< GPIO_T::DBEN: DBEN7 Position           */
N#define GPIO_DBEN_DBEN7_Msk              (0x1ul << GPIO_DBEN_DBEN7_Pos)                    /*!< GPIO_T::DBEN: DBEN7 Mask               */
N
N#define GPIO_DBEN_DBEN8_Pos              (8)                                               /*!< GPIO_T::DBEN: DBEN8 Position           */
N#define GPIO_DBEN_DBEN8_Msk              (0x1ul << GPIO_DBEN_DBEN8_Pos)                    /*!< GPIO_T::DBEN: DBEN8 Mask               */
N
N#define GPIO_DBEN_DBEN9_Pos              (9)                                               /*!< GPIO_T::DBEN: DBEN9 Position           */
N#define GPIO_DBEN_DBEN9_Msk              (0x1ul << GPIO_DBEN_DBEN9_Pos)                    /*!< GPIO_T::DBEN: DBEN9 Mask               */
N
N#define GPIO_DBEN_DBEN10_Pos             (10)                                              /*!< GPIO_T::DBEN: DBEN10 Position          */
N#define GPIO_DBEN_DBEN10_Msk             (0x1ul << GPIO_DBEN_DBEN10_Pos)                   /*!< GPIO_T::DBEN: DBEN10 Mask              */
N
N#define GPIO_DBEN_DBEN11_Pos             (11)                                              /*!< GPIO_T::DBEN: DBEN11 Position          */
N#define GPIO_DBEN_DBEN11_Msk             (0x1ul << GPIO_DBEN_DBEN11_Pos)                   /*!< GPIO_T::DBEN: DBEN11 Mask              */
N
N#define GPIO_DBEN_DBEN12_Pos             (12)                                              /*!< GPIO_T::DBEN: DBEN12 Position          */
N#define GPIO_DBEN_DBEN12_Msk             (0x1ul << GPIO_DBEN_DBEN12_Pos)                   /*!< GPIO_T::DBEN: DBEN12 Mask              */
N
N#define GPIO_DBEN_DBEN13_Pos             (13)                                              /*!< GPIO_T::DBEN: DBEN13 Position          */
N#define GPIO_DBEN_DBEN13_Msk             (0x1ul << GPIO_DBEN_DBEN13_Pos)                   /*!< GPIO_T::DBEN: DBEN13 Mask              */
N
N#define GPIO_DBEN_DBEN14_Pos             (14)                                              /*!< GPIO_T::DBEN: DBEN14 Position          */
N#define GPIO_DBEN_DBEN14_Msk             (0x1ul << GPIO_DBEN_DBEN14_Pos)                   /*!< GPIO_T::DBEN: DBEN14 Mask              */
N
N#define GPIO_DBEN_DBEN15_Pos             (15)                                              /*!< GPIO_T::DBEN: DBEN15 Position          */
N#define GPIO_DBEN_DBEN15_Msk             (0x1ul << GPIO_DBEN_DBEN15_Pos)                   /*!< GPIO_T::DBEN: DBEN15 Mask              */
N
N#define GPIO_INTTYPE_TYPE0_Pos           (0)                                               /*!< GPIO_T::INTTYPE: TYPE0 Position        */
N#define GPIO_INTTYPE_TYPE0_Msk           (0x1ul << GPIO_INTTYPE_TYPE0_Pos)                 /*!< GPIO_T::INTTYPE: TYPE0 Mask            */
N
N#define GPIO_INTTYPE_TYPE1_Pos           (1)                                               /*!< GPIO_T::INTTYPE: TYPE1 Position        */
N#define GPIO_INTTYPE_TYPE1_Msk           (0x1ul << GPIO_INTTYPE_TYPE1_Pos)                 /*!< GPIO_T::INTTYPE: TYPE1 Mask            */
N
N#define GPIO_INTTYPE_TYPE2_Pos           (2)                                               /*!< GPIO_T::INTTYPE: TYPE2 Position        */
N#define GPIO_INTTYPE_TYPE2_Msk           (0x1ul << GPIO_INTTYPE_TYPE2_Pos)                 /*!< GPIO_T::INTTYPE: TYPE2 Mask            */
N
N#define GPIO_INTTYPE_TYPE3_Pos           (3)                                               /*!< GPIO_T::INTTYPE: TYPE3 Position        */
N#define GPIO_INTTYPE_TYPE3_Msk           (0x1ul << GPIO_INTTYPE_TYPE3_Pos)                 /*!< GPIO_T::INTTYPE: TYPE3 Mask            */
N
N#define GPIO_INTTYPE_TYPE4_Pos           (4)                                               /*!< GPIO_T::INTTYPE: TYPE4 Position        */
N#define GPIO_INTTYPE_TYPE4_Msk           (0x1ul << GPIO_INTTYPE_TYPE4_Pos)                 /*!< GPIO_T::INTTYPE: TYPE4 Mask            */
N
N#define GPIO_INTTYPE_TYPE5_Pos           (5)                                               /*!< GPIO_T::INTTYPE: TYPE5 Position        */
N#define GPIO_INTTYPE_TYPE5_Msk           (0x1ul << GPIO_INTTYPE_TYPE5_Pos)                 /*!< GPIO_T::INTTYPE: TYPE5 Mask            */
N
N#define GPIO_INTTYPE_TYPE6_Pos           (6)                                               /*!< GPIO_T::INTTYPE: TYPE6 Position        */
N#define GPIO_INTTYPE_TYPE6_Msk           (0x1ul << GPIO_INTTYPE_TYPE6_Pos)                 /*!< GPIO_T::INTTYPE: TYPE6 Mask            */
N
N#define GPIO_INTTYPE_TYPE7_Pos           (7)                                               /*!< GPIO_T::INTTYPE: TYPE7 Position        */
N#define GPIO_INTTYPE_TYPE7_Msk           (0x1ul << GPIO_INTTYPE_TYPE7_Pos)                 /*!< GPIO_T::INTTYPE: TYPE7 Mask            */
N
N#define GPIO_INTTYPE_TYPE8_Pos           (8)                                               /*!< GPIO_T::INTTYPE: TYPE8 Position        */
N#define GPIO_INTTYPE_TYPE8_Msk           (0x1ul << GPIO_INTTYPE_TYPE8_Pos)                 /*!< GPIO_T::INTTYPE: TYPE8 Mask            */
N
N#define GPIO_INTTYPE_TYPE9_Pos           (9)                                               /*!< GPIO_T::INTTYPE: TYPE9 Position        */
N#define GPIO_INTTYPE_TYPE9_Msk           (0x1ul << GPIO_INTTYPE_TYPE9_Pos)                 /*!< GPIO_T::INTTYPE: TYPE9 Mask            */
N
N#define GPIO_INTTYPE_TYPE10_Pos          (10)                                              /*!< GPIO_T::INTTYPE: TYPE10 Position       */
N#define GPIO_INTTYPE_TYPE10_Msk          (0x1ul << GPIO_INTTYPE_TYPE10_Pos)                /*!< GPIO_T::INTTYPE: TYPE10 Mask           */
N
N#define GPIO_INTTYPE_TYPE11_Pos          (11)                                              /*!< GPIO_T::INTTYPE: TYPE11 Position       */
N#define GPIO_INTTYPE_TYPE11_Msk          (0x1ul << GPIO_INTTYPE_TYPE11_Pos)                /*!< GPIO_T::INTTYPE: TYPE11 Mask           */
N
N#define GPIO_INTTYPE_TYPE12_Pos          (12)                                              /*!< GPIO_T::INTTYPE: TYPE12 Position       */
N#define GPIO_INTTYPE_TYPE12_Msk          (0x1ul << GPIO_INTTYPE_TYPE12_Pos)                /*!< GPIO_T::INTTYPE: TYPE12 Mask           */
N
N#define GPIO_INTTYPE_TYPE13_Pos          (13)                                              /*!< GPIO_T::INTTYPE: TYPE13 Position       */
N#define GPIO_INTTYPE_TYPE13_Msk          (0x1ul << GPIO_INTTYPE_TYPE13_Pos)                /*!< GPIO_T::INTTYPE: TYPE13 Mask           */
N
N#define GPIO_INTTYPE_TYPE14_Pos          (14)                                              /*!< GPIO_T::INTTYPE: TYPE14 Position       */
N#define GPIO_INTTYPE_TYPE14_Msk          (0x1ul << GPIO_INTTYPE_TYPE14_Pos)                /*!< GPIO_T::INTTYPE: TYPE14 Mask           */
N
N#define GPIO_INTTYPE_TYPE15_Pos          (15)                                              /*!< GPIO_T::INTTYPE: TYPE15 Position       */
N#define GPIO_INTTYPE_TYPE15_Msk          (0x1ul << GPIO_INTTYPE_TYPE15_Pos)                /*!< GPIO_T::INTTYPE: TYPE15 Mask           */
N
N#define GPIO_INTEN_FLIEN0_Pos            (0)                                               /*!< GPIO_T::INTEN: FLIEN0 Position         */
N#define GPIO_INTEN_FLIEN0_Msk            (0x1ul << GPIO_INTEN_FLIEN0_Pos)                  /*!< GPIO_T::INTEN: FLIEN0 Mask             */
N
N#define GPIO_INTEN_FLIEN1_Pos            (1)                                               /*!< GPIO_T::INTEN: FLIEN1 Position         */
N#define GPIO_INTEN_FLIEN1_Msk            (0x1ul << GPIO_INTEN_FLIEN1_Pos)                  /*!< GPIO_T::INTEN: FLIEN1 Mask             */
N
N#define GPIO_INTEN_FLIEN2_Pos            (2)                                               /*!< GPIO_T::INTEN: FLIEN2 Position         */
N#define GPIO_INTEN_FLIEN2_Msk            (0x1ul << GPIO_INTEN_FLIEN2_Pos)                  /*!< GPIO_T::INTEN: FLIEN2 Mask             */
N
N#define GPIO_INTEN_FLIEN3_Pos            (3)                                               /*!< GPIO_T::INTEN: FLIEN3 Position         */
N#define GPIO_INTEN_FLIEN3_Msk            (0x1ul << GPIO_INTEN_FLIEN3_Pos)                  /*!< GPIO_T::INTEN: FLIEN3 Mask             */
N
N#define GPIO_INTEN_FLIEN4_Pos            (4)                                               /*!< GPIO_T::INTEN: FLIEN4 Position         */
N#define GPIO_INTEN_FLIEN4_Msk            (0x1ul << GPIO_INTEN_FLIEN4_Pos)                  /*!< GPIO_T::INTEN: FLIEN4 Mask             */
N
N#define GPIO_INTEN_FLIEN5_Pos            (5)                                               /*!< GPIO_T::INTEN: FLIEN5 Position         */
N#define GPIO_INTEN_FLIEN5_Msk            (0x1ul << GPIO_INTEN_FLIEN5_Pos)                  /*!< GPIO_T::INTEN: FLIEN5 Mask             */
N
N#define GPIO_INTEN_FLIEN6_Pos            (6)                                               /*!< GPIO_T::INTEN: FLIEN6 Position         */
N#define GPIO_INTEN_FLIEN6_Msk            (0x1ul << GPIO_INTEN_FLIEN6_Pos)                  /*!< GPIO_T::INTEN: FLIEN6 Mask             */
N
N#define GPIO_INTEN_FLIEN7_Pos            (7)                                               /*!< GPIO_T::INTEN: FLIEN7 Position         */
N#define GPIO_INTEN_FLIEN7_Msk            (0x1ul << GPIO_INTEN_FLIEN7_Pos)                  /*!< GPIO_T::INTEN: FLIEN7 Mask             */
N
N#define GPIO_INTEN_FLIEN8_Pos            (8)                                               /*!< GPIO_T::INTEN: FLIEN8 Position         */
N#define GPIO_INTEN_FLIEN8_Msk            (0x1ul << GPIO_INTEN_FLIEN8_Pos)                  /*!< GPIO_T::INTEN: FLIEN8 Mask             */
N
N#define GPIO_INTEN_FLIEN9_Pos            (9)                                               /*!< GPIO_T::INTEN: FLIEN9 Position         */
N#define GPIO_INTEN_FLIEN9_Msk            (0x1ul << GPIO_INTEN_FLIEN9_Pos)                  /*!< GPIO_T::INTEN: FLIEN9 Mask             */
N
N#define GPIO_INTEN_FLIEN10_Pos           (10)                                              /*!< GPIO_T::INTEN: FLIEN10 Position        */
N#define GPIO_INTEN_FLIEN10_Msk           (0x1ul << GPIO_INTEN_FLIEN10_Pos)                 /*!< GPIO_T::INTEN: FLIEN10 Mask            */
N
N#define GPIO_INTEN_FLIEN11_Pos           (11)                                              /*!< GPIO_T::INTEN: FLIEN11 Position        */
N#define GPIO_INTEN_FLIEN11_Msk           (0x1ul << GPIO_INTEN_FLIEN11_Pos)                 /*!< GPIO_T::INTEN: FLIEN11 Mask            */
N
N#define GPIO_INTEN_FLIEN12_Pos           (12)                                              /*!< GPIO_T::INTEN: FLIEN12 Position        */
N#define GPIO_INTEN_FLIEN12_Msk           (0x1ul << GPIO_INTEN_FLIEN12_Pos)                 /*!< GPIO_T::INTEN: FLIEN12 Mask            */
N
N#define GPIO_INTEN_FLIEN13_Pos           (13)                                              /*!< GPIO_T::INTEN: FLIEN13 Position        */
N#define GPIO_INTEN_FLIEN13_Msk           (0x1ul << GPIO_INTEN_FLIEN13_Pos)                 /*!< GPIO_T::INTEN: FLIEN13 Mask            */
N
N#define GPIO_INTEN_FLIEN14_Pos           (14)                                              /*!< GPIO_T::INTEN: FLIEN14 Position        */
N#define GPIO_INTEN_FLIEN14_Msk           (0x1ul << GPIO_INTEN_FLIEN14_Pos)                 /*!< GPIO_T::INTEN: FLIEN14 Mask            */
N
N#define GPIO_INTEN_FLIEN15_Pos           (15)                                              /*!< GPIO_T::INTEN: FLIEN15 Position        */
N#define GPIO_INTEN_FLIEN15_Msk           (0x1ul << GPIO_INTEN_FLIEN15_Pos)                 /*!< GPIO_T::INTEN: FLIEN15 Mask            */
N
N#define GPIO_INTEN_RHIEN0_Pos            (16)                                              /*!< GPIO_T::INTEN: RHIEN0 Position         */
N#define GPIO_INTEN_RHIEN0_Msk            (0x1ul << GPIO_INTEN_RHIEN0_Pos)                  /*!< GPIO_T::INTEN: RHIEN0 Mask             */
N
N#define GPIO_INTEN_RHIEN1_Pos            (17)                                              /*!< GPIO_T::INTEN: RHIEN1 Position         */
N#define GPIO_INTEN_RHIEN1_Msk            (0x1ul << GPIO_INTEN_RHIEN1_Pos)                  /*!< GPIO_T::INTEN: RHIEN1 Mask             */
N
N#define GPIO_INTEN_RHIEN2_Pos            (18)                                              /*!< GPIO_T::INTEN: RHIEN2 Position         */
N#define GPIO_INTEN_RHIEN2_Msk            (0x1ul << GPIO_INTEN_RHIEN2_Pos)                  /*!< GPIO_T::INTEN: RHIEN2 Mask             */
N
N#define GPIO_INTEN_RHIEN3_Pos            (19)                                              /*!< GPIO_T::INTEN: RHIEN3 Position         */
N#define GPIO_INTEN_RHIEN3_Msk            (0x1ul << GPIO_INTEN_RHIEN3_Pos)                  /*!< GPIO_T::INTEN: RHIEN3 Mask             */
N
N#define GPIO_INTEN_RHIEN4_Pos            (20)                                              /*!< GPIO_T::INTEN: RHIEN4 Position         */
N#define GPIO_INTEN_RHIEN4_Msk            (0x1ul << GPIO_INTEN_RHIEN4_Pos)                  /*!< GPIO_T::INTEN: RHIEN4 Mask             */
N
N#define GPIO_INTEN_RHIEN5_Pos            (21)                                              /*!< GPIO_T::INTEN: RHIEN5 Position         */
N#define GPIO_INTEN_RHIEN5_Msk            (0x1ul << GPIO_INTEN_RHIEN5_Pos)                  /*!< GPIO_T::INTEN: RHIEN5 Mask             */
N
N#define GPIO_INTEN_RHIEN6_Pos            (22)                                              /*!< GPIO_T::INTEN: RHIEN6 Position         */
N#define GPIO_INTEN_RHIEN6_Msk            (0x1ul << GPIO_INTEN_RHIEN6_Pos)                  /*!< GPIO_T::INTEN: RHIEN6 Mask             */
N
N#define GPIO_INTEN_RHIEN7_Pos            (23)                                              /*!< GPIO_T::INTEN: RHIEN7 Position         */
N#define GPIO_INTEN_RHIEN7_Msk            (0x1ul << GPIO_INTEN_RHIEN7_Pos)                  /*!< GPIO_T::INTEN: RHIEN7 Mask             */
N
N#define GPIO_INTEN_RHIEN8_Pos            (24)                                              /*!< GPIO_T::INTEN: RHIEN8 Position         */
N#define GPIO_INTEN_RHIEN8_Msk            (0x1ul << GPIO_INTEN_RHIEN8_Pos)                  /*!< GPIO_T::INTEN: RHIEN8 Mask             */
N
N#define GPIO_INTEN_RHIEN9_Pos            (25)                                              /*!< GPIO_T::INTEN: RHIEN9 Position         */
N#define GPIO_INTEN_RHIEN9_Msk            (0x1ul << GPIO_INTEN_RHIEN9_Pos)                  /*!< GPIO_T::INTEN: RHIEN9 Mask             */
N
N#define GPIO_INTEN_RHIEN10_Pos           (26)                                              /*!< GPIO_T::INTEN: RHIEN10 Position        */
N#define GPIO_INTEN_RHIEN10_Msk           (0x1ul << GPIO_INTEN_RHIEN10_Pos)                 /*!< GPIO_T::INTEN: RHIEN10 Mask            */
N
N#define GPIO_INTEN_RHIEN11_Pos           (27)                                              /*!< GPIO_T::INTEN: RHIEN11 Position        */
N#define GPIO_INTEN_RHIEN11_Msk           (0x1ul << GPIO_INTEN_RHIEN11_Pos)                 /*!< GPIO_T::INTEN: RHIEN11 Mask            */
N
N#define GPIO_INTEN_RHIEN12_Pos           (28)                                              /*!< GPIO_T::INTEN: RHIEN12 Position        */
N#define GPIO_INTEN_RHIEN12_Msk           (0x1ul << GPIO_INTEN_RHIEN12_Pos)                 /*!< GPIO_T::INTEN: RHIEN12 Mask            */
N
N#define GPIO_INTEN_RHIEN13_Pos           (29)                                              /*!< GPIO_T::INTEN: RHIEN13 Position        */
N#define GPIO_INTEN_RHIEN13_Msk           (0x1ul << GPIO_INTEN_RHIEN13_Pos)                 /*!< GPIO_T::INTEN: RHIEN13 Mask            */
N
N#define GPIO_INTEN_RHIEN14_Pos           (30)                                              /*!< GPIO_T::INTEN: RHIEN14 Position        */
N#define GPIO_INTEN_RHIEN14_Msk           (0x1ul << GPIO_INTEN_RHIEN14_Pos)                 /*!< GPIO_T::INTEN: RHIEN14 Mask            */
N
N#define GPIO_INTEN_RHIEN15_Pos           (31)                                              /*!< GPIO_T::INTEN: RHIEN15 Position        */
N#define GPIO_INTEN_RHIEN15_Msk           (0x1ul << GPIO_INTEN_RHIEN15_Pos)                 /*!< GPIO_T::INTEN: RHIEN15 Mask            */
N
N#define GPIO_INTSRC_INTSRC0_Pos          (0)                                               /*!< GPIO_T::INTSRC: INTSRC0 Position       */
N#define GPIO_INTSRC_INTSRC0_Msk          (0x1ul << GPIO_INTSRC_INTSRC0_Pos)                /*!< GPIO_T::INTSRC: INTSRC0 Mask           */
N
N#define GPIO_INTSRC_INTSRC1_Pos          (1)                                               /*!< GPIO_T::INTSRC: INTSRC1 Position       */
N#define GPIO_INTSRC_INTSRC1_Msk          (0x1ul << GPIO_INTSRC_INTSRC1_Pos)                /*!< GPIO_T::INTSRC: INTSRC1 Mask           */
N
N#define GPIO_INTSRC_INTSRC2_Pos          (2)                                               /*!< GPIO_T::INTSRC: INTSRC2 Position       */
N#define GPIO_INTSRC_INTSRC2_Msk          (0x1ul << GPIO_INTSRC_INTSRC2_Pos)                /*!< GPIO_T::INTSRC: INTSRC2 Mask           */
N
N#define GPIO_INTSRC_INTSRC3_Pos          (3)                                               /*!< GPIO_T::INTSRC: INTSRC3 Position       */
N#define GPIO_INTSRC_INTSRC3_Msk          (0x1ul << GPIO_INTSRC_INTSRC3_Pos)                /*!< GPIO_T::INTSRC: INTSRC3 Mask           */
N
N#define GPIO_INTSRC_INTSRC4_Pos          (4)                                               /*!< GPIO_T::INTSRC: INTSRC4 Position       */
N#define GPIO_INTSRC_INTSRC4_Msk          (0x1ul << GPIO_INTSRC_INTSRC4_Pos)                /*!< GPIO_T::INTSRC: INTSRC4 Mask           */
N
N#define GPIO_INTSRC_INTSRC5_Pos          (5)                                               /*!< GPIO_T::INTSRC: INTSRC5 Position       */
N#define GPIO_INTSRC_INTSRC5_Msk          (0x1ul << GPIO_INTSRC_INTSRC5_Pos)                /*!< GPIO_T::INTSRC: INTSRC5 Mask           */
N
N#define GPIO_INTSRC_INTSRC6_Pos          (6)                                               /*!< GPIO_T::INTSRC: INTSRC6 Position       */
N#define GPIO_INTSRC_INTSRC6_Msk          (0x1ul << GPIO_INTSRC_INTSRC6_Pos)                /*!< GPIO_T::INTSRC: INTSRC6 Mask           */
N
N#define GPIO_INTSRC_INTSRC7_Pos          (7)                                               /*!< GPIO_T::INTSRC: INTSRC7 Position       */
N#define GPIO_INTSRC_INTSRC7_Msk          (0x1ul << GPIO_INTSRC_INTSRC7_Pos)                /*!< GPIO_T::INTSRC: INTSRC7 Mask           */
N
N#define GPIO_INTSRC_INTSRC8_Pos          (8)                                               /*!< GPIO_T::INTSRC: INTSRC8 Position       */
N#define GPIO_INTSRC_INTSRC8_Msk          (0x1ul << GPIO_INTSRC_INTSRC8_Pos)                /*!< GPIO_T::INTSRC: INTSRC8 Mask           */
N
N#define GPIO_INTSRC_INTSRC9_Pos          (9)                                               /*!< GPIO_T::INTSRC: INTSRC9 Position       */
N#define GPIO_INTSRC_INTSRC9_Msk          (0x1ul << GPIO_INTSRC_INTSRC9_Pos)                /*!< GPIO_T::INTSRC: INTSRC9 Mask           */
N
N#define GPIO_INTSRC_INTSRC10_Pos         (10)                                              /*!< GPIO_T::INTSRC: INTSRC10 Position      */
N#define GPIO_INTSRC_INTSRC10_Msk         (0x1ul << GPIO_INTSRC_INTSRC10_Pos)               /*!< GPIO_T::INTSRC: INTSRC10 Mask          */
N
N#define GPIO_INTSRC_INTSRC11_Pos         (11)                                              /*!< GPIO_T::INTSRC: INTSRC11 Position      */
N#define GPIO_INTSRC_INTSRC11_Msk         (0x1ul << GPIO_INTSRC_INTSRC11_Pos)               /*!< GPIO_T::INTSRC: INTSRC11 Mask          */
N
N#define GPIO_INTSRC_INTSRC12_Pos         (12)                                              /*!< GPIO_T::INTSRC: INTSRC12 Position      */
N#define GPIO_INTSRC_INTSRC12_Msk         (0x1ul << GPIO_INTSRC_INTSRC12_Pos)               /*!< GPIO_T::INTSRC: INTSRC12 Mask          */
N
N#define GPIO_INTSRC_INTSRC13_Pos         (13)                                              /*!< GPIO_T::INTSRC: INTSRC13 Position      */
N#define GPIO_INTSRC_INTSRC13_Msk         (0x1ul << GPIO_INTSRC_INTSRC13_Pos)               /*!< GPIO_T::INTSRC: INTSRC13 Mask          */
N
N#define GPIO_INTSRC_INTSRC14_Pos         (14)                                              /*!< GPIO_T::INTSRC: INTSRC14 Position      */
N#define GPIO_INTSRC_INTSRC14_Msk         (0x1ul << GPIO_INTSRC_INTSRC14_Pos)               /*!< GPIO_T::INTSRC: INTSRC14 Mask          */
N
N#define GPIO_INTSRC_INTSRC15_Pos         (15)                                              /*!< GPIO_T::INTSRC: INTSRC15 Position      */
N#define GPIO_INTSRC_INTSRC15_Msk         (0x1ul << GPIO_INTSRC_INTSRC15_Pos)               /*!< GPIO_T::INTSRC: INTSRC15 Mask          */
N
N#define GPIO_SMTEN_SMTEN0_Pos            (0)                                               /*!< GPIO_T::SMTEN: SMTEN0 Position         */
N#define GPIO_SMTEN_SMTEN0_Msk            (0x1ul << GPIO_SMTEN_SMTEN0_Pos)                  /*!< GPIO_T::SMTEN: SMTEN0 Mask             */
N
N#define GPIO_SMTEN_SMTEN1_Pos            (1)                                               /*!< GPIO_T::SMTEN: SMTEN1 Position         */
N#define GPIO_SMTEN_SMTEN1_Msk            (0x1ul << GPIO_SMTEN_SMTEN1_Pos)                  /*!< GPIO_T::SMTEN: SMTEN1 Mask             */
N
N#define GPIO_SMTEN_SMTEN2_Pos            (2)                                               /*!< GPIO_T::SMTEN: SMTEN2 Position         */
N#define GPIO_SMTEN_SMTEN2_Msk            (0x1ul << GPIO_SMTEN_SMTEN2_Pos)                  /*!< GPIO_T::SMTEN: SMTEN2 Mask             */
N
N#define GPIO_SMTEN_SMTEN3_Pos            (3)                                               /*!< GPIO_T::SMTEN: SMTEN3 Position         */
N#define GPIO_SMTEN_SMTEN3_Msk            (0x1ul << GPIO_SMTEN_SMTEN3_Pos)                  /*!< GPIO_T::SMTEN: SMTEN3 Mask             */
N
N#define GPIO_SMTEN_SMTEN4_Pos            (4)                                               /*!< GPIO_T::SMTEN: SMTEN4 Position         */
N#define GPIO_SMTEN_SMTEN4_Msk            (0x1ul << GPIO_SMTEN_SMTEN4_Pos)                  /*!< GPIO_T::SMTEN: SMTEN4 Mask             */
N
N#define GPIO_SMTEN_SMTEN5_Pos            (5)                                               /*!< GPIO_T::SMTEN: SMTEN5 Position         */
N#define GPIO_SMTEN_SMTEN5_Msk            (0x1ul << GPIO_SMTEN_SMTEN5_Pos)                  /*!< GPIO_T::SMTEN: SMTEN5 Mask             */
N
N#define GPIO_SMTEN_SMTEN6_Pos            (6)                                               /*!< GPIO_T::SMTEN: SMTEN6 Position         */
N#define GPIO_SMTEN_SMTEN6_Msk            (0x1ul << GPIO_SMTEN_SMTEN6_Pos)                  /*!< GPIO_T::SMTEN: SMTEN6 Mask             */
N
N#define GPIO_SMTEN_SMTEN7_Pos            (7)                                               /*!< GPIO_T::SMTEN: SMTEN7 Position         */
N#define GPIO_SMTEN_SMTEN7_Msk            (0x1ul << GPIO_SMTEN_SMTEN7_Pos)                  /*!< GPIO_T::SMTEN: SMTEN7 Mask             */
N
N#define GPIO_SMTEN_SMTEN8_Pos            (8)                                               /*!< GPIO_T::SMTEN: SMTEN8 Position         */
N#define GPIO_SMTEN_SMTEN8_Msk            (0x1ul << GPIO_SMTEN_SMTEN8_Pos)                  /*!< GPIO_T::SMTEN: SMTEN8 Mask             */
N
N#define GPIO_SMTEN_SMTEN9_Pos            (9)                                               /*!< GPIO_T::SMTEN: SMTEN9 Position         */
N#define GPIO_SMTEN_SMTEN9_Msk            (0x1ul << GPIO_SMTEN_SMTEN9_Pos)                  /*!< GPIO_T::SMTEN: SMTEN9 Mask             */
N
N#define GPIO_SMTEN_SMTEN10_Pos           (10)                                              /*!< GPIO_T::SMTEN: SMTEN10 Position        */
N#define GPIO_SMTEN_SMTEN10_Msk           (0x1ul << GPIO_SMTEN_SMTEN10_Pos)                 /*!< GPIO_T::SMTEN: SMTEN10 Mask            */
N
N#define GPIO_SMTEN_SMTEN11_Pos           (11)                                              /*!< GPIO_T::SMTEN: SMTEN11 Position        */
N#define GPIO_SMTEN_SMTEN11_Msk           (0x1ul << GPIO_SMTEN_SMTEN11_Pos)                 /*!< GPIO_T::SMTEN: SMTEN11 Mask            */
N
N#define GPIO_SMTEN_SMTEN12_Pos           (12)                                              /*!< GPIO_T::SMTEN: SMTEN12 Position        */
N#define GPIO_SMTEN_SMTEN12_Msk           (0x1ul << GPIO_SMTEN_SMTEN12_Pos)                 /*!< GPIO_T::SMTEN: SMTEN12 Mask            */
N
N#define GPIO_SMTEN_SMTEN13_Pos           (13)                                              /*!< GPIO_T::SMTEN: SMTEN13 Position        */
N#define GPIO_SMTEN_SMTEN13_Msk           (0x1ul << GPIO_SMTEN_SMTEN13_Pos)                 /*!< GPIO_T::SMTEN: SMTEN13 Mask            */
N
N#define GPIO_SMTEN_SMTEN14_Pos           (14)                                              /*!< GPIO_T::SMTEN: SMTEN14 Position        */
N#define GPIO_SMTEN_SMTEN14_Msk           (0x1ul << GPIO_SMTEN_SMTEN14_Pos)                 /*!< GPIO_T::SMTEN: SMTEN14 Mask            */
N
N#define GPIO_SMTEN_SMTEN15_Pos           (15)                                              /*!< GPIO_T::SMTEN: SMTEN15 Position        */
N#define GPIO_SMTEN_SMTEN15_Msk           (0x1ul << GPIO_SMTEN_SMTEN15_Pos)                 /*!< GPIO_T::SMTEN: SMTEN15 Mask            */
N
N#define GPIO_SLEWCTL_HSREN0_Pos          (0)                                               /*!< GPIO_T::SLEWCTL: HSREN0 Position       */
N#define GPIO_SLEWCTL_HSREN0_Msk          (0x1ul << GPIO_SLEWCTL_HSREN0_Pos)                /*!< GPIO_T::SLEWCTL: HSREN0 Mask           */
N
N#define GPIO_SLEWCTL_HSREN1_Pos          (1)                                               /*!< GPIO_T::SLEWCTL: HSREN1 Position       */
N#define GPIO_SLEWCTL_HSREN1_Msk          (0x1ul << GPIO_SLEWCTL_HSREN1_Pos)                /*!< GPIO_T::SLEWCTL: HSREN1 Mask           */
N
N#define GPIO_SLEWCTL_HSREN2_Pos          (2)                                               /*!< GPIO_T::SLEWCTL: HSREN2 Position       */
N#define GPIO_SLEWCTL_HSREN2_Msk          (0x1ul << GPIO_SLEWCTL_HSREN2_Pos)                /*!< GPIO_T::SLEWCTL: HSREN2 Mask           */
N
N#define GPIO_SLEWCTL_HSREN3_Pos          (3)                                               /*!< GPIO_T::SLEWCTL: HSREN3 Position       */
N#define GPIO_SLEWCTL_HSREN3_Msk          (0x1ul << GPIO_SLEWCTL_HSREN3_Pos)                /*!< GPIO_T::SLEWCTL: HSREN3 Mask           */
N
N#define GPIO_SLEWCTL_HSREN4_Pos          (4)                                               /*!< GPIO_T::SLEWCTL: HSREN4 Position       */
N#define GPIO_SLEWCTL_HSREN4_Msk          (0x1ul << GPIO_SLEWCTL_HSREN4_Pos)                /*!< GPIO_T::SLEWCTL: HSREN4 Mask           */
N
N#define GPIO_SLEWCTL_HSREN5_Pos          (5)                                               /*!< GPIO_T::SLEWCTL: HSREN5 Position       */
N#define GPIO_SLEWCTL_HSREN5_Msk          (0x1ul << GPIO_SLEWCTL_HSREN5_Pos)                /*!< GPIO_T::SLEWCTL: HSREN5 Mask           */
N
N#define GPIO_SLEWCTL_HSREN6_Pos          (6)                                               /*!< GPIO_T::SLEWCTL: HSREN6 Position       */
N#define GPIO_SLEWCTL_HSREN6_Msk          (0x1ul << GPIO_SLEWCTL_HSREN6_Pos)                /*!< GPIO_T::SLEWCTL: HSREN6 Mask           */
N
N#define GPIO_SLEWCTL_HSREN7_Pos          (7)                                               /*!< GPIO_T::SLEWCTL: HSREN7 Position       */
N#define GPIO_SLEWCTL_HSREN7_Msk          (0x1ul << GPIO_SLEWCTL_HSREN7_Pos)                /*!< GPIO_T::SLEWCTL: HSREN7 Mask           */
N
N#define GPIO_SLEWCTL_HSREN8_Pos          (8)                                               /*!< GPIO_T::SLEWCTL: HSREN8 Position       */
N#define GPIO_SLEWCTL_HSREN8_Msk          (0x1ul << GPIO_SLEWCTL_HSREN8_Pos)                /*!< GPIO_T::SLEWCTL: HSREN8 Mask           */
N
N#define GPIO_SLEWCTL_HSREN9_Pos          (9)                                               /*!< GPIO_T::SLEWCTL: HSREN9 Position       */
N#define GPIO_SLEWCTL_HSREN9_Msk          (0x1ul << GPIO_SLEWCTL_HSREN9_Pos)                /*!< GPIO_T::SLEWCTL: HSREN9 Mask           */
N
N#define GPIO_SLEWCTL_HSREN10_Pos         (10)                                              /*!< GPIO_T::SLEWCTL: HSREN10 Position      */
N#define GPIO_SLEWCTL_HSREN10_Msk         (0x1ul << GPIO_SLEWCTL_HSREN10_Pos)               /*!< GPIO_T::SLEWCTL: HSREN10 Mask          */
N
N#define GPIO_SLEWCTL_HSREN11_Pos         (11)                                              /*!< GPIO_T::SLEWCTL: HSREN11 Position      */
N#define GPIO_SLEWCTL_HSREN11_Msk         (0x1ul << GPIO_SLEWCTL_HSREN11_Pos)               /*!< GPIO_T::SLEWCTL: HSREN11 Mask          */
N
N#define GPIO_SLEWCTL_HSREN12_Pos         (12)                                              /*!< GPIO_T::SLEWCTL: HSREN12 Position      */
N#define GPIO_SLEWCTL_HSREN12_Msk         (0x1ul << GPIO_SLEWCTL_HSREN12_Pos)               /*!< GPIO_T::SLEWCTL: HSREN12 Mask          */
N
N#define GPIO_SLEWCTL_HSREN13_Pos         (13)                                              /*!< GPIO_T::SLEWCTL: HSREN13 Position      */
N#define GPIO_SLEWCTL_HSREN13_Msk         (0x1ul << GPIO_SLEWCTL_HSREN13_Pos)               /*!< GPIO_T::SLEWCTL: HSREN13 Mask          */
N
N#define GPIO_SLEWCTL_HSREN14_Pos         (14)                                              /*!< GPIO_T::SLEWCTL: HSREN14 Position      */
N#define GPIO_SLEWCTL_HSREN14_Msk         (0x1ul << GPIO_SLEWCTL_HSREN14_Pos)               /*!< GPIO_T::SLEWCTL: HSREN14 Mask          */
N
N#define GPIO_SLEWCTL_HSREN15_Pos         (15)                                              /*!< GPIO_T::SLEWCTL: HSREN15 Position      */
N#define GPIO_SLEWCTL_HSREN15_Msk         (0x1ul << GPIO_SLEWCTL_HSREN15_Pos)               /*!< GPIO_T::SLEWCTL: HSREN15 Mask          */
N
N#define GPIO_DRVCTL_HDRVEN1_Pos          (1)                                               /*!< GPIO_T::DRVCTL: HDRVEN1 Position       */
N#define GPIO_DRVCTL_HDRVEN1_Msk          (0x1ul << GPIO_DRVCTL_HDRVEN1_Pos)                /*!< GPIO_T::DRVCTL: HDRVEN1 Mask           */
N
N#define GPIO_DRVCTL_HDRVEN2_Pos          (2)                                               /*!< GPIO_T::DRVCTL: HDRVEN2 Position       */
N#define GPIO_DRVCTL_HDRVEN2_Msk          (0x1ul << GPIO_DRVCTL_HDRVEN2_Pos)                /*!< GPIO_T::DRVCTL: HDRVEN2 Mask           */
N
N#define GPIO_DRVCTL_HDRVEN3_Pos          (3)                                               /*!< GPIO_T::DRVCTL: HDRVEN3 Position       */
N#define GPIO_DRVCTL_HDRVEN3_Msk          (0x1ul << GPIO_DRVCTL_HDRVEN3_Pos)                /*!< GPIO_T::DRVCTL: HDRVEN3 Mask           */
N
N#define GPIO_DRVCTL_HDRVEN4_Pos          (4)                                               /*!< GPIO_T::DRVCTL: HDRVEN4 Position       */
N#define GPIO_DRVCTL_HDRVEN4_Msk          (0x1ul << GPIO_DRVCTL_HDRVEN4_Pos)                /*!< GPIO_T::DRVCTL: HDRVEN4 Mask           */
N
N#define GPIO_DRVCTL_HDRVEN5_Pos          (5)                                               /*!< GPIO_T::DRVCTL: HDRVEN5 Position       */
N#define GPIO_DRVCTL_HDRVEN5_Msk          (0x1ul << GPIO_DRVCTL_HDRVEN5_Pos)                /*!< GPIO_T::DRVCTL: HDRVEN5 Mask           */
N
N#define GPIO_DBCTL_DBCLKSEL_Pos          (0)                                               /*!< GPIO_T::DBCTL: DBCLKSEL Position       */
N#define GPIO_DBCTL_DBCLKSEL_Msk          (0xful << GPIO_DBCTL_DBCLKSEL_Pos)                /*!< GPIO_T::DBCTL: DBCLKSEL Mask           */
N
N#define GPIO_DBCTL_DBCLKSRC_Pos          (4)                                               /*!< GPIO_T::DBCTL: DBCLKSRC Position       */
N#define GPIO_DBCTL_DBCLKSRC_Msk          (0x1ul << GPIO_DBCTL_DBCLKSRC_Pos)                /*!< GPIO_T::DBCTL: DBCLKSRC Mask           */
N
N#define GPIO_DBCTL_ICLKON_Pos            (5)                                               /*!< GPIO_T::DBCTL: ICLKON Position         */
N#define GPIO_DBCTL_ICLKON_Msk            (0x1ul << GPIO_DBCTL_ICLKON_Pos)                  /*!< GPIO_T::DBCTL: ICLKON Mask             */
N
N/**@}*/ /* GPIO_CONST */
N/**@}*/ /* end of GPIO register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __GPIO_REG_H__ */
L 157 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "i2c_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\i2c_reg.h" 1
N/**************************************************************************//**
N * @file     i2c_reg.h
N * @version  V1.00
N * @brief    I2C register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __I2C_REG_H__
N#define __I2C_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup I2C Inter-IC Bus Controller (I2C)
N    Memory Mapped Structure for I2C Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var I2C_T::CTL
N     * Offset: 0x00  I2C Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2]     |AA        |Assert Acknowledge Control
N     * |        |          |When AA =1 prior to address or data is received, an acknowledged (low level to SDA) will be returned during the acknowledge clock pulse on the SCL line when 1.) A slave is acknowledging the address sent from master, 2.) The receiver devices are acknowledging the data sent by transmitter
N     * |        |          |When AA=0 prior to address or data received, a Not acknowledged (high level to SDA) will be returned during the acknowledge clock pulse on the SCL line
N     * |[3]     |SI        |I2C Interrupt Flag
N     * |        |          |When a new I2C state is present in the I2C_STATUS register, the SI flag is set by hardware
N     * |        |          |If bit INTEN (I2C_CTL [7]) is set, the I2C interrupt is requested
N     * |        |          |SI must be cleared by software
N     * |        |          |Clear SI by writing 1 to this bit.
N     * |        |          |For ACKMEN is set in slave read mode, the SI flag is set in 8th clock period for user to confirm the acknowledge bit and 9th clock period for user to read the data in the data buffer.
N     * |[4]     |STO       |I2C STOP Control
N     * |        |          |In Master mode, setting STO to transmit a STOP condition to bus then I2C controller will check the bus condition if a STOP condition is detected
N     * |        |          |This bit will be cleared by hardware automatically.
N     * |[5]     |STA       |I2C START Control
N     * |        |          |Setting STA to logic 1 to enter Master mode, the I2C hardware sends a START or repeat START condition to bus when the bus is free.
N     * |[6]     |I2CEN     |I2C Controller Enable Bit
N     * |        |          |Set to enable I2C serial function controller
N     * |        |          |When I2CEN=1 the I2C serial function enable
N     * |        |          |The multi-function pin function must set to SDA, and SCL of I2C function first.
N     * |        |          |0 = I2C controller Disabled.
N     * |        |          |1 = I2C controller Enabled.
N     * |[7]     |INTEN     |Enable Interrupt
N     * |        |          |0 = I2C interrupt Disabled.
N     * |        |          |1 = I2C interrupt Enabled.
N     * @var I2C_T::ADDR0
N     * Offset: 0x04  I2C Slave Address Register0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |GC        |General Call Function
N     * |        |          |0 = General Call Function Disabled.
N     * |        |          |1 = General Call Function Enabled.
N     * |[7:1]   |ADDR      |I2C Address
N     * |        |          |The content of this register is irrelevant when I2C is in Master mode
N     * |        |          |In the slave mode, the seven most significant bits must be loaded with the chip's own address
N     * |        |          |The I2C hardware will react if either of the address is matched.
N     * @var I2C_T::DAT
N     * Offset: 0x08  I2C Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |DAT       |I2C Data
N     * |        |          |Bit [7:0] is located with the 8-bit transferred/received data of I2C serial port.
N     * @var I2C_T::STATUS
N     * Offset: 0x0C  I2C Status Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |STATUS    |I2C Status
N     * |        |          |The three least significant bits are always 0
N     * |        |          |The five most significant bits contain the status code
N     * |        |          |There are 28 possible status codes
N     * |        |          |When the content of I2C_STATUS is F8H, no serial interrupt is requested
N     * |        |          |Others I2C_STATUS values correspond to defined I2C states
N     * |        |          |When each of these states is entered, a status interrupt is requested (SI = 1)
N     * |        |          |A valid status code is present in I2C_STATUS one cycle after SI is set by hardware and is still present one cycle after SI has been reset by software
N     * |        |          |In addition, states 00H stands for a Bus Error
N     * |        |          |A Bus Error occurs when a START or STOP condition is present at an illegal position in the formation frame
N     * |        |          |Example of illegal position are during the serial transfer of an address byte, a data byte or an acknowledge bit.
N     * @var I2C_T::CLKDIV
N     * Offset: 0x10  I2C Clock Divided Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |DIVIDER   |I2C Clock Divided
N     * |        |          |Indicates the I2C clock rate: Data Baud Rate of I2C = (system clock) / (4x (I2C_CLKDIV+1)).
N     * |        |          |Note: The minimum value of I2C_CLKDIV is 4.
N     * @var I2C_T::TOCTL
N     * Offset: 0x14  I2C Time-out Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TOIF      |Time-out Flag
N     * |        |          |This bit is set by hardware when I2C time-out happened and it can interrupt CPU if I2C interrupt enable bit (INTEN) is set to 1.
N     * |        |          |Note: Software can write 1 to clear this bit.
N     * |[1]     |TOCDIV4   |Time-out Counter Input Clock Divided by 4
N     * |        |          |When it Enabled, The time-out period is extend 4 times.
N     * |        |          |0 = Time-out period is extend 4 times Disabled.
N     * |        |          |1 = Time-out period is extend 4 times Enabled.
N     * |[2]     |TOCEN     |Time-out Counter Enable Bit
N     * |        |          |When Enabled, the 14-bit time-out counter will start counting when SI is clear
N     * |        |          |Setting flag SI to '1' will reset counter and re-start up counting after SI is cleared.
N     * |        |          |0 = Time-out counter Disabled.
N     * |        |          |1 = Time-out counter Enabled.
N     * @var I2C_T::ADDR1
N     * Offset: 0x18  I2C Slave Address Register1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |GC        |General Call Function
N     * |        |          |0 = General Call Function Disabled.
N     * |        |          |1 = General Call Function Enabled.
N     * |[7:1]   |ADDR      |I2C Address
N     * |        |          |The content of this register is irrelevant when I2C is in Master mode
N     * |        |          |In the slave mode, the seven most significant bits must be loaded with the chip's own address
N     * |        |          |The I2C hardware will react if either of the address is matched.
N     * @var I2C_T::ADDR2
N     * Offset: 0x1C  I2C Slave Address Register2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |GC        |General Call Function
N     * |        |          |0 = General Call Function Disabled.
N     * |        |          |1 = General Call Function Enabled.
N     * |[7:1]   |ADDR      |I2C Address
N     * |        |          |The content of this register is irrelevant when I2C is in Master mode
N     * |        |          |In the slave mode, the seven most significant bits must be loaded with the chip's own address
N     * |        |          |The I2C hardware will react if either of the address is matched.
N     * @var I2C_T::ADDR3
N     * Offset: 0x20  I2C Slave Address Register3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |GC        |General Call Function
N     * |        |          |0 = General Call Function Disabled.
N     * |        |          |1 = General Call Function Enabled.
N     * |[7:1]   |ADDR      |I2C Address
N     * |        |          |The content of this register is irrelevant when I2C is in Master mode
N     * |        |          |In the slave mode, the seven most significant bits must be loaded with the chip's own address
N     * |        |          |The I2C hardware will react if either of the address is matched.
N     * @var I2C_T::ADDRMSK0
N     * Offset: 0x24  I2C Slave Address Mask Register0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:1]   |ADDRMSK   |I2C Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register.).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care.).
N     * |        |          |I2C bus controllers support multiple address recognition with four address mask register
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * @var I2C_T::ADDRMSK1
N     * Offset: 0x28  I2C Slave Address Mask Register1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:1]   |ADDRMSK   |I2C Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register.).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care.).
N     * |        |          |I2C bus controllers support multiple address recognition with four address mask register
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * @var I2C_T::ADDRMSK2
N     * Offset: 0x2C  I2C Slave Address Mask Register2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:1]   |ADDRMSK   |I2C Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register.).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care.).
N     * |        |          |I2C bus controllers support multiple address recognition with four address mask register
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * @var I2C_T::ADDRMSK3
N     * Offset: 0x30  I2C Slave Address Mask Register3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:1]   |ADDRMSK   |I2C Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register.).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care.).
N     * |        |          |I2C bus controllers support multiple address recognition with four address mask register
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * @var I2C_T::WKCTL
N     * Offset: 0x3C  I2C Wake-up Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKEN      |I2C Wake-up Enable Bit
N     * |        |          |0 = I2C wake-up function Disabled.
N     * |        |          |1= I2C wake-up function Enabled.
N     * |[7]     |NHDBUSEN  |I2C No Hold BUS Enable Bit
N     * |        |          |0 = I2C don't hold bus after wake-up disable.
N     * |        |          |1= I2C don't hold bus after wake-up enable.
N     * |        |          |Note: I2C controller could response when WKIF event is not clear, it may cause error data transmitted or received
N     * |        |          |If data transmitted or received when WKIF event is not clear, user must reset I2C controller and execute the original operation again.
N     * @var I2C_T::WKSTS
N     * Offset: 0x40  I2C Wake-up Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKIF      |I2C Wake-up Flag
N     * |        |          |When chip is woken up from Power-down mode by I2C, this bit is set to 1
N     * |        |          |Software can write 1 to clear this bit.
N     * |[1]     |WKAKDONE  |Wakeup Address Frame Acknowledge Bit Done
N     * |        |          |0 = The ACK bit cycle of address match frame isn't done.
N     * |        |          |1 = The ACK bit cycle of address match frame is done in power-down.
N     * |        |          |Note: This bit can't release WKIF. Software can write 1 to clear this bit.
N     * |[2]     |WRSTSWK   |Read/Write Status Bit in Address Wakeup Frame
N     * |        |          |0 = Write command be record on the address match wakeup frame.
N     * |        |          |1 = Read command be record on the address match wakeup frame.
N     * |        |          |Note: This bit will be cleared when software can write 1 to WKAKDONE bit.
N     * @var I2C_T::CTL1
N     * Offset: 0x44  I2C Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TXPDMAEN  |PDMA Transmit Channel Available
N     * |        |          |0 = Transmit PDMA function disable.
N     * |        |          |1 = Transmit PDMA function enable.
N     * |[1]     |RXPDMAEN  |PDMA Receive Channel Available
N     * |        |          |0 = Receive PDMA function disable.
N     * |        |          |1 = Receive PDMA function enable.
N     * |[2]     |PDMARST   |PDMA Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the PDMA control logic. This bit will be cleared to 0 automatically.
N     * |[3]     |OVRIEN    |I2C over Run Interrupt Control Bit
N     * |        |          |Setting OVRIEN to logic 1 will send a interrupt to system when the TWOBUFEN bit is enabled and there is over run event in received buffer.
N     * |[4]     |UDRIEN    |I2C Under Run Interrupt Control Bit
N     * |        |          |Setting UDRIEN to logic 1 will send a interrupt to system when the TWOBUFEN bit is enabled and there is under run event happened in transmitted buffer.
N     * |[5]     |TWOBUFEN  |Two-level Buffer Enable Bit
N     * |        |          |0 = Two-level buffer Disabled.
N     * |        |          |1 = Two-level buffer Enabled.
N     * |        |          |Set to enable the two-level buffer for I2C transmitted or received buffer
N     * |        |          |It is used to improve the performance of the I2C bus
N     * |        |          |If this bit is set = 1, the control bit of STA for repeat start or STO bit should be set after the current SI is clear
N     * |        |          |For example: if there are 4 data shall be transmitted and then stop it
N     * |        |          |The STO bit shall be set after the 3rd data's SI event being clear
N     * |        |          |In this time, the 4th data can be transmitted and the I2C stop after the 4th data transmission done.
N     * |[6]     |TWOBUFRST |Two-level Buffer Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the related counters, two-level buffer state machine, and the content of data buffer.
N     * |[7]     |NSTRETCH  |No Stretch on the I2C Bus
N     * |        |          |0 = The I2C SCL bus is stretched by hardware if the SI is not cleared in master mode.
N     * |        |          |1 = The I2C SCL bus is not stretched by hardware if the SI is not cleared in master mode.
N     * |[8]     |PDMASTR   |PDMA Stretch Bit
N     * |        |          |0 = I2C send STOP automatically after PDMA transfer done. (only master TX)
N     * |        |          |1 = I2C SCL bus is stretched by hardware after PDMA transfer done if the SI is not cleared
N     * |        |          |(only master TX)
N     * @var I2C_T::STATUS1
N     * Offset: 0x48  I2C Status Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4]     |FULL      |Two-level Buffer Full
N     * |        |          |This bit indicates two-level buffer TX or RX full or not when the TWOBUFEN = 1.
N     * |        |          |This bit is set when buffer full.
N     * |[5]     |EMPTY     |Two-level Buffer Empty
N     * |        |          |This bit indicates two-level buffer TX or RX empty or not when the TWOBUFEN = 1.
N     * |        |          |This bit is set when buffer empty.
N     * |[6]     |OVR       |I2C over Run Status Bit
N     * |        |          |This bit indicates the received two-level buffer TX or RX is over run when the TWOBUFEN = 1.
N     * |[7]     |UDR       |I2C Under Run Status Bit
N     * |        |          |This bit indicates the transmitted two-level buffer TX or RX is under run when the TWOBUFEN = 1.
N     * |[8]     |ONBUSY    |Bus Busy
N     * |        |          |Indicates that a communication is in progress on the bus
N     * |        |          |It is set by hardware when a START condition is detected
N     * |        |          |It is cleared by hardware when a STOP condition is detected.
N     * |        |          |0 = The bus is IDLE (both SCLK and SDA High).
N     * |        |          |1 = The bus is busy.
N     * @var I2C_T::TMCTL
N     * Offset: 0x4C  I2C Timing Configure Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |STCTL     |Setup Time Configure Control Register
N     * |        |          |This field is used to generate a delay timing between SDA falling edge and SCL rising edge in transmission mode.
N     * |        |          |The delay setup time is numbers of peripheral clock = STCTL x PCLK.
N     * |        |          |Note: Setup time setting should not make SCL output less than three PCLKs.
N     * |[11:6]  |HTCTL     |Hold Time Configure Control Register
N     * |        |          |This field is used to generate the delay timing between SCL falling edge and SDA rising edge in transmission mode.
N     * |        |          |The delay hold time is numbers of peripheral clock = HTCTL x PCLK.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] I2C Control Register 0                                           */
X    volatile uint32_t CTL;                    
N    __IO uint32_t ADDR0;                 /*!< [0x0004] I2C Slave Address Register0                                      */
X    volatile uint32_t ADDR0;                  
N    __IO uint32_t DAT;                   /*!< [0x0008] I2C Data Register                                                */
X    volatile uint32_t DAT;                    
N    __I  uint32_t STATUS;                /*!< [0x000c] I2C Status Register 0                                            */
X    volatile const  uint32_t STATUS;                 
N    __IO uint32_t CLKDIV;                /*!< [0x0010] I2C Clock Divided Register                                       */
X    volatile uint32_t CLKDIV;                 
N    __IO uint32_t TOCTL;                 /*!< [0x0014] I2C Time-out Control Register                                    */
X    volatile uint32_t TOCTL;                  
N    __IO uint32_t ADDR1;                 /*!< [0x0018] I2C Slave Address Register1                                      */
X    volatile uint32_t ADDR1;                  
N    __IO uint32_t ADDR2;                 /*!< [0x001c] I2C Slave Address Register2                                      */
X    volatile uint32_t ADDR2;                  
N    __IO uint32_t ADDR3;                 /*!< [0x0020] I2C Slave Address Register3                                      */
X    volatile uint32_t ADDR3;                  
N    __IO uint32_t ADDRMSK0;              /*!< [0x0024] I2C Slave Address Mask Register0                                 */
X    volatile uint32_t ADDRMSK0;               
N    __IO uint32_t ADDRMSK1;              /*!< [0x0028] I2C Slave Address Mask Register1                                 */
X    volatile uint32_t ADDRMSK1;               
N    __IO uint32_t ADDRMSK2;              /*!< [0x002c] I2C Slave Address Mask Register2                                 */
X    volatile uint32_t ADDRMSK2;               
N    __IO uint32_t ADDRMSK3;              /*!< [0x0030] I2C Slave Address Mask Register3                                 */
X    volatile uint32_t ADDRMSK3;               
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __IO uint32_t WKCTL;                 /*!< [0x003c] I2C Wake-up Control Register                                     */
X    volatile uint32_t WKCTL;                  
N    __IO uint32_t WKSTS;                 /*!< [0x0040] I2C Wake-up Status Register                                      */
X    volatile uint32_t WKSTS;                  
N    __IO uint32_t CTL1;                  /*!< [0x0044] I2C Control Register 1                                           */
X    volatile uint32_t CTL1;                   
N    __I  uint32_t STATUS1;               /*!< [0x0048] I2C Status Register 1                                            */
X    volatile const  uint32_t STATUS1;                
N    __IO uint32_t TMCTL;                 /*!< [0x004c] I2C Timing Configure Control Register                            */
X    volatile uint32_t TMCTL;                  
N} I2C_T;
N
N/**
N    @addtogroup I2C_CONST I2C Bit Field Definition
N    Constant Definitions for I2C Controller
N@{ */
N
N#define I2C_CTL_AA_Pos                   (2)                                               /*!< I2C_T::CTL: AA Position                */
N#define I2C_CTL_AA_Msk                   (0x1ul << I2C_CTL_AA_Pos)                         /*!< I2C_T::CTL: AA Mask                    */
N
N#define I2C_CTL_SI_Pos                   (3)                                               /*!< I2C_T::CTL: SI Position                */
N#define I2C_CTL_SI_Msk                   (0x1ul << I2C_CTL_SI_Pos)                         /*!< I2C_T::CTL: SI Mask                    */
N
N#define I2C_CTL_STO_Pos                  (4)                                               /*!< I2C_T::CTL: STO Position               */
N#define I2C_CTL_STO_Msk                  (0x1ul << I2C_CTL_STO_Pos)                        /*!< I2C_T::CTL: STO Mask                   */
N
N#define I2C_CTL_STA_Pos                  (5)                                               /*!< I2C_T::CTL: STA Position               */
N#define I2C_CTL_STA_Msk                  (0x1ul << I2C_CTL_STA_Pos)                        /*!< I2C_T::CTL: STA Mask                   */
N
N#define I2C_CTL_I2CEN_Pos                (6)                                               /*!< I2C_T::CTL: I2CEN Position             */
N#define I2C_CTL_I2CEN_Msk                (0x1ul << I2C_CTL_I2CEN_Pos)                      /*!< I2C_T::CTL: I2CEN Mask                 */
N
N#define I2C_CTL_INTEN_Pos                (7)                                               /*!< I2C_T::CTL: INTEN Position             */
N#define I2C_CTL_INTEN_Msk                (0x1ul << I2C_CTL_INTEN_Pos)                      /*!< I2C_T::CTL: INTEN Mask                 */
N
N#define I2C_ADDR0_GC_Pos                 (0)                                               /*!< I2C_T::ADDR0: GC Position              */
N#define I2C_ADDR0_GC_Msk                 (0x1ul << I2C_ADDR0_GC_Pos)                       /*!< I2C_T::ADDR0: GC Mask                  */
N
N#define I2C_ADDR0_ADDR_Pos               (1)                                               /*!< I2C_T::ADDR0: ADDR Position            */
N#define I2C_ADDR0_ADDR_Msk               (0x7ful << I2C_ADDR0_ADDR_Pos)                    /*!< I2C_T::ADDR0: ADDR Mask                */
N
N#define I2C_DAT_DAT_Pos                  (0)                                               /*!< I2C_T::DAT: DAT Position               */
N#define I2C_DAT_DAT_Msk                  (0xfful << I2C_DAT_DAT_Pos)                       /*!< I2C_T::DAT: DAT Mask                   */
N
N#define I2C_STATUS_STATUS_Pos            (0)                                               /*!< I2C_T::STATUS: STATUS Position         */
N#define I2C_STATUS_STATUS_Msk            (0xfful << I2C_STATUS_STATUS_Pos)                 /*!< I2C_T::STATUS: STATUS Mask             */
N
N#define I2C_CLKDIV_DIVIDER_Pos           (0)                                               /*!< I2C_T::CLKDIV: DIVIDER Position        */
N#define I2C_CLKDIV_DIVIDER_Msk           (0xfful << I2C_CLKDIV_DIVIDER_Pos)                /*!< I2C_T::CLKDIV: DIVIDER Mask            */
N
N#define I2C_TOCTL_TOIF_Pos               (0)                                               /*!< I2C_T::TOCTL: TOIF Position            */
N#define I2C_TOCTL_TOIF_Msk               (0x1ul << I2C_TOCTL_TOIF_Pos)                     /*!< I2C_T::TOCTL: TOIF Mask                */
N
N#define I2C_TOCTL_TOCDIV4_Pos            (1)                                               /*!< I2C_T::TOCTL: TOCDIV4 Position         */
N#define I2C_TOCTL_TOCDIV4_Msk            (0x1ul << I2C_TOCTL_TOCDIV4_Pos)                  /*!< I2C_T::TOCTL: TOCDIV4 Mask             */
N
N#define I2C_TOCTL_TOCEN_Pos              (2)                                               /*!< I2C_T::TOCTL: TOCEN Position           */
N#define I2C_TOCTL_TOCEN_Msk              (0x1ul << I2C_TOCTL_TOCEN_Pos)                    /*!< I2C_T::TOCTL: TOCEN Mask               */
N
N#define I2C_ADDR1_GC_Pos                 (0)                                               /*!< I2C_T::ADDR1: GC Position              */
N#define I2C_ADDR1_GC_Msk                 (0x1ul << I2C_ADDR1_GC_Pos)                       /*!< I2C_T::ADDR1: GC Mask                  */
N
N#define I2C_ADDR1_ADDR_Pos               (1)                                               /*!< I2C_T::ADDR1: ADDR Position            */
N#define I2C_ADDR1_ADDR_Msk               (0x7ful << I2C_ADDR1_ADDR_Pos)                    /*!< I2C_T::ADDR1: ADDR Mask                */
N
N#define I2C_ADDR2_GC_Pos                 (0)                                               /*!< I2C_T::ADDR2: GC Position              */
N#define I2C_ADDR2_GC_Msk                 (0x1ul << I2C_ADDR2_GC_Pos)                       /*!< I2C_T::ADDR2: GC Mask                  */
N
N#define I2C_ADDR2_ADDR_Pos               (1)                                               /*!< I2C_T::ADDR2: ADDR Position            */
N#define I2C_ADDR2_ADDR_Msk               (0x7ful << I2C_ADDR2_ADDR_Pos)                    /*!< I2C_T::ADDR2: ADDR Mask                */
N
N#define I2C_ADDR3_GC_Pos                 (0)                                               /*!< I2C_T::ADDR3: GC Position              */
N#define I2C_ADDR3_GC_Msk                 (0x1ul << I2C_ADDR3_GC_Pos)                       /*!< I2C_T::ADDR3: GC Mask                  */
N
N#define I2C_ADDR3_ADDR_Pos               (1)                                               /*!< I2C_T::ADDR3: ADDR Position            */
N#define I2C_ADDR3_ADDR_Msk               (0x7ful << I2C_ADDR3_ADDR_Pos)                    /*!< I2C_T::ADDR3: ADDR Mask                */
N
N#define I2C_ADDRMSK0_ADDRMSK_Pos         (1)                                               /*!< I2C_T::ADDRMSK0: ADDRMSK Position      */
N#define I2C_ADDRMSK0_ADDRMSK_Msk         (0x7ful << I2C_ADDRMSK0_ADDRMSK_Pos)              /*!< I2C_T::ADDRMSK0: ADDRMSK Mask          */
N
N#define I2C_ADDRMSK1_ADDRMSK_Pos         (1)                                               /*!< I2C_T::ADDRMSK1: ADDRMSK Position      */
N#define I2C_ADDRMSK1_ADDRMSK_Msk         (0x7ful << I2C_ADDRMSK1_ADDRMSK_Pos)              /*!< I2C_T::ADDRMSK1: ADDRMSK Mask          */
N
N#define I2C_ADDRMSK2_ADDRMSK_Pos         (1)                                               /*!< I2C_T::ADDRMSK2: ADDRMSK Position      */
N#define I2C_ADDRMSK2_ADDRMSK_Msk         (0x7ful << I2C_ADDRMSK2_ADDRMSK_Pos)              /*!< I2C_T::ADDRMSK2: ADDRMSK Mask          */
N
N#define I2C_ADDRMSK3_ADDRMSK_Pos         (1)                                               /*!< I2C_T::ADDRMSK3: ADDRMSK Position      */
N#define I2C_ADDRMSK3_ADDRMSK_Msk         (0x7ful << I2C_ADDRMSK3_ADDRMSK_Pos)              /*!< I2C_T::ADDRMSK3: ADDRMSK Mask          */
N
N#define I2C_WKCTL_WKEN_Pos               (0)                                               /*!< I2C_T::WKCTL: WKEN Position            */
N#define I2C_WKCTL_WKEN_Msk               (0x1ul << I2C_WKCTL_WKEN_Pos)                     /*!< I2C_T::WKCTL: WKEN Mask                */
N
N#define I2C_WKCTL_NHDBUSEN_Pos           (7)                                               /*!< I2C_T::WKCTL: NHDBUSEN Position        */
N#define I2C_WKCTL_NHDBUSEN_Msk           (0x1ul << I2C_WKCTL_NHDBUSEN_Pos)                 /*!< I2C_T::WKCTL: NHDBUSEN Mask            */
N
N#define I2C_WKSTS_WKIF_Pos               (0)                                               /*!< I2C_T::WKSTS: WKIF Position            */
N#define I2C_WKSTS_WKIF_Msk               (0x1ul << I2C_WKSTS_WKIF_Pos)                     /*!< I2C_T::WKSTS: WKIF Mask                */
N
N#define I2C_WKSTS_WKAKDONE_Pos           (1)                                               /*!< I2C_T::WKSTS: WKAKDONE Position        */
N#define I2C_WKSTS_WKAKDONE_Msk           (0x1ul << I2C_WKSTS_WKAKDONE_Pos)                 /*!< I2C_T::WKSTS: WKAKDONE Mask            */
N
N#define I2C_WKSTS_WRSTSWK_Pos            (2)                                               /*!< I2C_T::WKSTS: WRSTSWK Position         */
N#define I2C_WKSTS_WRSTSWK_Msk            (0x1ul << I2C_WKSTS_WRSTSWK_Pos)                  /*!< I2C_T::WKSTS: WRSTSWK Mask             */
N
N#define I2C_CTL1_TXPDMAEN_Pos            (0)                                               /*!< I2C_T::CTL1: TXPDMAEN Position         */
N#define I2C_CTL1_TXPDMAEN_Msk            (0x1ul << I2C_CTL1_TXPDMAEN_Pos)                  /*!< I2C_T::CTL1: TXPDMAEN Mask             */
N
N#define I2C_CTL1_RXPDMAEN_Pos            (1)                                               /*!< I2C_T::CTL1: RXPDMAEN Position         */
N#define I2C_CTL1_RXPDMAEN_Msk            (0x1ul << I2C_CTL1_RXPDMAEN_Pos)                  /*!< I2C_T::CTL1: RXPDMAEN Mask             */
N
N#define I2C_CTL1_PDMARST_Pos             (2)                                               /*!< I2C_T::CTL1: PDMARST Position          */
N#define I2C_CTL1_PDMARST_Msk             (0x1ul << I2C_CTL1_PDMARST_Pos)                   /*!< I2C_T::CTL1: PDMARST Mask              */
N
N#define I2C_CTL1_OVRIEN_Pos              (3)                                               /*!< I2C_T::CTL1: OVRIEN Position           */
N#define I2C_CTL1_OVRIEN_Msk              (0x1ul << I2C_CTL1_OVRIEN_Pos)                    /*!< I2C_T::CTL1: OVRIEN Mask               */
N
N#define I2C_CTL1_UDRIEN_Pos              (4)                                               /*!< I2C_T::CTL1: UDRIEN Position           */
N#define I2C_CTL1_UDRIEN_Msk              (0x1ul << I2C_CTL1_UDRIEN_Pos)                    /*!< I2C_T::CTL1: UDRIEN Mask               */
N
N#define I2C_CTL1_TWOBUFEN_Pos            (5)                                               /*!< I2C_T::CTL1: TWOBUFEN Position         */
N#define I2C_CTL1_TWOBUFEN_Msk            (0x1ul << I2C_CTL1_TWOBUFEN_Pos)                  /*!< I2C_T::CTL1: TWOBUFEN Mask             */
N
N#define I2C_CTL1_TWOBUFRST_Pos           (6)                                               /*!< I2C_T::CTL1: TWOBUFRST Position        */
N#define I2C_CTL1_TWOBUFRST_Msk           (0x1ul << I2C_CTL1_TWOBUFRST_Pos)                 /*!< I2C_T::CTL1: TWOBUFRST Mask            */
N
N#define I2C_CTL1_NSTRETCH_Pos            (7)                                               /*!< I2C_T::CTL1: NSTRETCH Position         */
N#define I2C_CTL1_NSTRETCH_Msk            (0x1ul << I2C_CTL1_NSTRETCH_Pos)                  /*!< I2C_T::CTL1: NSTRETCH Mask             */
N
N#define I2C_CTL1_PDMASTR_Pos             (8)                                               /*!< I2C_T::CTL1: PDMASTR Position          */
N#define I2C_CTL1_PDMASTR_Msk             (0x1ul << I2C_CTL1_PDMASTR_Pos)                   /*!< I2C_T::CTL1: PDMASTR Mask              */
N
N#define I2C_STATUS1_FULL_Pos             (4)                                               /*!< I2C_T::STATUS1: FULL Position          */
N#define I2C_STATUS1_FULL_Msk             (0x1ul << I2C_STATUS1_FULL_Pos)                   /*!< I2C_T::STATUS1: FULL Mask              */
N
N#define I2C_STATUS1_EMPTY_Pos            (5)                                               /*!< I2C_T::STATUS1: EMPTY Position         */
N#define I2C_STATUS1_EMPTY_Msk            (0x1ul << I2C_STATUS1_EMPTY_Pos)                  /*!< I2C_T::STATUS1: EMPTY Mask             */
N
N#define I2C_STATUS1_OVR_Pos              (6)                                               /*!< I2C_T::STATUS1: OVR Position           */
N#define I2C_STATUS1_OVR_Msk              (0x1ul << I2C_STATUS1_OVR_Pos)                    /*!< I2C_T::STATUS1: OVR Mask               */
N
N#define I2C_STATUS1_UDR_Pos              (7)                                               /*!< I2C_T::STATUS1: UDR Position           */
N#define I2C_STATUS1_UDR_Msk              (0x1ul << I2C_STATUS1_UDR_Pos)                    /*!< I2C_T::STATUS1: UDR Mask               */
N
N#define I2C_STATUS1_ONBUSY_Pos           (8)                                               /*!< I2C_T::STATUS1: ONBUSY Position        */
N#define I2C_STATUS1_ONBUSY_Msk           (0x1ul << I2C_STATUS1_ONBUSY_Pos)                 /*!< I2C_T::STATUS1: ONBUSY Mask            */
N
N#define I2C_TMCTL_STCTL_Pos              (0)                                               /*!< I2C_T::TMCTL: STCTL Position           */
N#define I2C_TMCTL_STCTL_Msk              (0x3ful << I2C_TMCTL_STCTL_Pos)                   /*!< I2C_T::TMCTL: STCTL Mask               */
N
N#define I2C_TMCTL_HTCTL_Pos              (6)                                               /*!< I2C_T::TMCTL: HTCTL Position           */
N#define I2C_TMCTL_HTCTL_Msk              (0x3ful << I2C_TMCTL_HTCTL_Pos)                   /*!< I2C_T::TMCTL: HTCTL Mask               */
N
N/**@}*/ /* I2C_CONST */
N/**@}*/ /* end of I2C register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __I2C_REG_H__ */
L 158 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "int_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\int_reg.h" 1
N/**************************************************************************//**
N * @file     int_reg.h
N * @version  V1.00
N * @brief    INT register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __INT_REG_H__
N#define __INT_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup INT Interrupt Source Register (INT)
N    Memory Mapped Structure for INT Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var INT_T::IRQ_SRC
N     * Offset: 0x00~0x7C  IRQ0~31 Interrupt Source Identity
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |INT_SRC   |Interrupt Source
N     * |        |          |Define the interrupt sources for interrupt event.
N     * @var INT_T::NMI_SEL
N     * Offset: 0x80  NMI Source Interrupt Select Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4:0]   |NMI_SEL   |NMI Interrupt Source Selection
N     * |        |          |The NMI interrupt to Cortex-M0 can be selected from one of the peripheral interrupt by setting NMI_SEL.
N     * |[8]     |NMI_EN    |NMI Interrupt Enable Bit (Write Protect)
N     * |        |          |0 = NMI interrupt Disabled.
N     * |        |          |1 = NMI interrupt Enabled.
N     * |        |          |Note: This bit is the protected bit, and programming it needs to write "59h", "16h", and "88h" to address 0x5000_0100 to disable register protection
N     * |        |          |Refer to the register REGWRPROT at address GCR_BA+0x100.
N     * @var INT_T::MCU_IRQ
N     * Offset: 0x84  MCU Interrupt Request Source Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |MCU_IRQ   |MCU IRQ Source Register
N     * |        |          |The MCU_IRQ collects all the interrupts from the peripherals and generates the synchronous interrupt to Cortex-M0
N     * |        |          |There are two modes to generate interrupt to Cortex-M0, the normal mode and test mode.
N     * |        |          |The MCU_IRQ collects all interrupts from each peripheral and synchronizes them and interrupts the Cortex-M0.
N     * |        |          |When the MCU_IRQ[n] is 0: Set MCU_IRQ[n] 1 will generate an interrupt to Cortex-M0 NVIC[n].
N     * |        |          |When the MCU_IRQ[n] is 1 (mean an interrupt is assert), setting 1 to the MCU_IRQ[n] 1 will clear the interrupt and setting MCU_IRQ[n] 0: has no effect
N     * @var INT_T::MCU_IRQCR
N     * Offset: 0x88  MCU Interrupt Request Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |FAST_IRQ  |Fast IRQ Latency Enable Bit
N     * |        |          |0 = MCU IRQ latency is fixed at 13 clock cycles of HCLK, MCU will enter IRQ handler after this fixed latency when interrupt happened.
N     * |        |          |1 = MCU IRQ latency will not fixed, MCU will enter IRQ handler as soon as possible when interrupt happened.
N     */
N    __I  uint32_t IRQ_SRC[32];           /*!< [0x0000~0x007c] IRQ0~31 Interrupt Source Identity                         */
X    volatile const  uint32_t IRQ_SRC[32];            
N    __IO uint32_t NMI_SEL;               /*!< [0x0080] NMI Source Interrupt Select Control Register                     */
X    volatile uint32_t NMI_SEL;                
N    __IO uint32_t MCU_IRQ;               /*!< [0x0084] MCU Interrupt Request Source Register                            */
X    volatile uint32_t MCU_IRQ;                
N    __IO uint32_t MCU_IRQCR;             /*!< [0x0088] MCU Interrupt Request Control Register                           */
X    volatile uint32_t MCU_IRQCR;              
N} INT_T;
N
N/**
N    @addtogroup INT_CONST INT Bit Field Definition
N    Constant Definitions for INT Controller
N@{ */
N
N#define INT_IRQ_SRC_INT_SRC_Pos              (0)                                               /*!< INT_T::SRC: INT_SRC Position           */
N#define INT_IRQ_SRC_INT_SRC_Msk              (0xful << INT_IRQ_SRC_INT_SRC_Pos)                /*!< INT_T::SRC: INT_SRC Mask               */
N
N#define INT_NMI_SEL_NMI_SEL_Pos              (0)                                               /*!< INT_T::SEL: NMI_SEL Position           */
N#define INT_NMI_SEL_NMI_SEL_Msk              (0x1ful << INT_NMI_SEL_NMI_SEL_Pos)               /*!< INT_T::SEL: NMI_SEL Mask               */
N
N#define INT_NMI_SEL_NMI_EN_Pos               (8)                                               /*!< INT_T::SEL: NMI_EN Position            */
N#define INT_NMI_SEL_NMI_EN_Msk               (0x1ul << INT_NMI_SEL_NMI_EN_Pos)                 /*!< INT_T::SEL: NMI_EN Mask                */
N
N#define INT_MCU_IRQ_MCU_IRQ_Pos              (0)                                               /*!< INT_T::IRQ: MCU_IRQ Position           */
N#define INT_MCU_IRQ_MCU_IRQ_Msk              (0xfffffffful << INT_MCU_IRQ_MCU_IRQ_Pos)         /*!< INT_T::IRQ: MCU_IRQ Mask               */
N
N#define INT_MCU_IRQCR_FAST_IRQ_Pos           (0)                                               /*!< INT_T::IRQCR: FAST_IRQ Position        */
N#define INT_MCU_IRQCR_FAST_IRQ_Msk           (0x1ul << INT_MCU_IRQCR_FAST_IRQ_Pos)             /*!< INT_T::IRQCR: FAST_IRQ Mask            */
N
N/**@}*/ /* INT_CONST */
N/**@}*/ /* end of INT register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __INT_REG_H__ */
L 159 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "pdma_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\pdma_reg.h" 1
N/**************************************************************************//**
N * @file     pdma_reg.h
N * @version  V1.00
N * @brief    PDMA register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __PDMA_REG_H__
N#define __PDMA_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup PDMA Peripheral Direct Memory Access Controller (PDMA)
N    Memory Mapped Structure for PDMA Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var PDMA_DSCT_T::CTL
N     * Offset: 0x00/0x10/0x20/0x30/0x40  Descriptor Table Control Register of PDMA Channel 0~4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |OPMODE    |PDMA Operation Mode Selection
N     * |        |          |00 = Idle state: Channel is stopped or this table is complete, when PDMA finish channel table task, OPMODE will be cleared to idle state automatically.
N     * |        |          |01 = Basic mode: The descriptor table only has one task
N     * |        |          |When this task is finished, the PDMA_INTSTS[n] will be asserted.
N     * |        |          |10 = Scatter-Gather mode: When operating in this mode, user must give the first descriptor table address in PDMA_DSCT_FIRST register; PDMA controller will ignore this task, then load the next task to execute.
N     * |        |          |11 = Reserved.
N     * |        |          |Note: Before filling transfer task in the Descriptor Table, user must check if the descriptor table is complete.
N     * |[2]     |TXTYPE    |Transfer Type
N     * |        |          |0 = Burst transfer type.
N     * |        |          |1 = Single transfer type.
N     * |[6:4]   |BURSIZE   |Burst Size
N     * |        |          |This field is used for peripheral to determine the burst size or used for determine the re-arbitration size.
N     * |        |          |000 = 128 Transfers.
N     * |        |          |001 = 64 Transfers.
N     * |        |          |010 = 32 Transfers.
N     * |        |          |011 = 16 Transfers.
N     * |        |          |100 = 8 Transfers.
N     * |        |          |101 = 4 Transfers.
N     * |        |          |110 = 2 Transfers.
N     * |        |          |111 = 1 Transfers.
N     * |        |          |Note: This field is only useful in burst transfer type.
N     * |[7]     |TBINTDIS  |Table Interrupt Disable Bit
N     * |        |          |This field can be used to decide whether to enable table interrupt or not
N     * |        |          |If the TBINTDIS bit is set when PDMA controller finishes transfer task, it will not generates interrupt.
N     * |        |          |0 = Table interrupt Enabled.
N     * |        |          |1 = Table interrupt Disabled.
N     * |        |          |Note: If this bit set to '1', the TEMPTYF will not be set.
N     * |[9:8]   |SAINC     |Source Address Increment
N     * |        |          |This field is used to set the source address increment size.
N     * |        |          |11 = No increment (fixed address).
N     * |        |          |Others = Increment and size is depended on TXWIDTH selection.
N     * |[11:10] |DAINC     |Destination Address Increment
N     * |        |          |This field is used to set the destination address increment size.
N     * |        |          |11 = No increment (fixed address).
N     * |        |          |Others = Increment and size is depended on TXWIDTH selection.
N     * |[13:12] |TXWIDTH   |Transfer Width Selection
N     * |        |          |This field is used for transfer width.
N     * |        |          |00 = One byte (8 bit) is transferred for every operation.
N     * |        |          |01= One half-word (16 bit) is transferred for every operation.
N     * |        |          |10 = One word (32-bit) is transferred for every operation.
N     * |        |          |11 = Reserved.
N     * |        |          |Note: The PDMA transfer source address (PDMA_DSCT_SA) and PDMA transfer destination address (PDMA_DSCT_DA) should be alignment under the TXWIDTH selection
N     * |[29:16] |TXCNT     |Transfer Count
N     * |        |          |The TXCNT represents the required number of PDMA transfer, the real transfer count is (TXCNT + 1); The maximum transfer count is 16384 , every transfer may be byte, half-word or word that is dependent on TXWIDTH field.
N     * |        |          |Note: When PDMA finish each transfer data, this field will be decrease immediately.
N     * @var PDMA_DSCT_T::SA
N     * Offset: 0x04/0x14/0x24/0x34/0x44  Source Address Register of PDMA Channel 0~4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |SA        |PDMA Transfer Source Address Register
N     * |        |          |This field indicates a 32-bit source address of PDMA controller.
N     * @var PDMA_DSCT_T::DA
N     * Offset: 0x08/0x18/0x28/0x38/0x48  Destination Address Register of PDMA Channel 0~4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |DA        |PDMA Transfer Destination Address Register
N     * |        |          |This field indicates a 32-bit destination address of PDMA controller.
N     * @var PDMA_DSCT_T::FIRST
N     * Offset: 0x0C/0x1C/0x2C/0x3C/0x4C  First Scatter-Gather Descriptor Table Offset of PDMA Channel 0~4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FIRST     |PDMA First Descriptor Table Offset
N     * |        |          |This field indicates the offset of the first descriptor table address in system memory.
N     * |        |          |Write Operation:
N     * |        |          |If the system memory based address is 0x2000_0000 (PDMA_SCATBA), and the first descriptor table is start from 0x2000_0100, then this field must fill in 0x0100.
N     * |        |          |Read Operation:
N     * |        |          |When operating in scatter-gather mode, the last two bits FIRST[1:0] will become reserved.
N     * |        |          |Note1: The first descriptor table address must be word boundary.
N     * |        |          |Note2: Before filled transfer task in the descriptor table, user must check if the descriptor table is complete.
N     */
N    __IO uint32_t CTL;             /*!< [0x00/0x10/0x20/0x30/0x40] Descriptor Table Control Register of PDMA Channel 0~4              */
X    volatile uint32_t CTL;              
N    __IO uint32_t SA;              /*!< [0x04/0x14/0x24/0x34/0x44] Source Address Register of PDMA Channel 0~4                        */
X    volatile uint32_t SA;               
N    __IO uint32_t DA;              /*!< [0x08/0x18/0x28/0x38/0x48] Destination Address Register of PDMA Channel 0~4                   */
X    volatile uint32_t DA;               
N    union
N    {
N        __IO uint32_t FIRST;       /*!< [0x0C/0x1C/0x2C/0x3C/0x4C] First Scatter-Gather Descriptor Table Offset of PDMA Channel 0~4   */
X        volatile uint32_t FIRST;        
N        __IO uint32_t NEXT;        /*!< Next Scatter-Gather Descriptor Table Offset                                                   */
X        volatile uint32_t NEXT;         
N    };
N} PDMA_DSCT_T;
N
Ntypedef struct
N{
N    /**
N     * @var PDMA_T::CURSCAT
N     * Offset: 0x50~0x60  Current Scatter-Gather Descriptor Table Address of PDMA Channel 0~4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |CURADDR   |PDMA Current Description Address Register (Read Only)
N     * |        |          |This field indicates a 32-bit current external description address of PDMA controller.
N     * |        |          |Note: This field is read only and only used for Scatter-Gather mode to indicate the current external description address.
N     * @var PDMA_T::CHCTL
N     * Offset: 0x400  PDMA Channel Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CHEN0     |PDMA Channel N Enable Bit
N     * |        |          |Set this bit to 1 to enable PDMAn operation. Channel cannot be active if it is not set as enabled.
N     * |        |          |0 = PDMA channel [n] Disabled.
N     * |        |          |1 = PDMA channel [n] Enabled.
N     * |        |          |Note: Set PDMA_PAUSE or PDMA_RESET register will also clear this bit.
N     * |[1]     |CHEN1     |PDMA Channel N Enable Bit
N     * |        |          |Set this bit to 1 to enable PDMAn operation. Channel cannot be active if it is not set as enabled.
N     * |        |          |0 = PDMA channel [n] Disabled.
N     * |        |          |1 = PDMA channel [n] Enabled.
N     * |        |          |Note: Set PDMA_PAUSE or PDMA_RESET register will also clear this bit.
N     * |[2]     |CHEN2     |PDMA Channel N Enable Bit
N     * |        |          |Set this bit to 1 to enable PDMAn operation. Channel cannot be active if it is not set as enabled.
N     * |        |          |0 = PDMA channel [n] Disabled.
N     * |        |          |1 = PDMA channel [n] Enabled.
N     * |        |          |Note: Set PDMA_PAUSE or PDMA_RESET register will also clear this bit.
N     * |[3]     |CHEN3     |PDMA Channel N Enable Bit
N     * |        |          |Set this bit to 1 to enable PDMAn operation. Channel cannot be active if it is not set as enabled.
N     * |        |          |0 = PDMA channel [n] Disabled.
N     * |        |          |1 = PDMA channel [n] Enabled.
N     * |        |          |Note: Set PDMA_PAUSE or PDMA_RESET register will also clear this bit.
N     * |[4]     |CHEN4     |PDMA Channel N Enable Bit
N     * |        |          |Set this bit to 1 to enable PDMAn operation. Channel cannot be active if it is not set as enabled.
N     * |        |          |0 = PDMA channel [n] Disabled.
N     * |        |          |1 = PDMA channel [n] Enabled.
N     * |        |          |Note: Set PDMA_PAUSE or PDMA_RESET register will also clear this bit.
N     * @var PDMA_T::PAUSE
N     * Offset: 0x404  PDMA Transfer Pause Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |PAUSE0    |PDMA Channel N Transfer Pause Control Register (Write Only)
N     * |        |          |User can set PAUSEn bit field to pause the PDMA transfer.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Pause PDMA channel n transfer
N     * |        |          |When user sets PDMA_PAUSE bit, the operation will pause the on-going transfer, but not finish the rest of transfers, and then clear the channel enable bit (PDMA_CHCTL [CHEN]) and clear request active flag
N     * |        |          |If re-enable the paused channel agian, the remaining transfers will be processed.
N     * |[1]     |PAUSE1    |PDMA Channel N Transfer Pause Control Register (Write Only)
N     * |        |          |User can set PAUSEn bit field to pause the PDMA transfer.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Pause PDMA channel n transfer
N     * |        |          |When user sets PDMA_PAUSE bit, the operation will pause the on-going transfer, but not finish the rest of transfers, and then clear the channel enable bit (PDMA_CHCTL [CHEN]) and clear request active flag
N     * |        |          |If re-enable the paused channel agian, the remaining transfers will be processed.
N     * |[2]     |PAUSE2    |PDMA Channel N Transfer Pause Control Register (Write Only)
N     * |        |          |User can set PAUSEn bit field to pause the PDMA transfer.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Pause PDMA channel n transfer
N     * |        |          |When user sets PDMA_PAUSE bit, the operation will pause the on-going transfer, but not finish the rest of transfers, and then clear the channel enable bit (PDMA_CHCTL [CHEN]) and clear request active flag
N     * |        |          |If re-enable the paused channel agian, the remaining transfers will be processed.
N     * |[3]     |PAUSE3    |PDMA Channel N Transfer Pause Control Register (Write Only)
N     * |        |          |User can set PAUSEn bit field to pause the PDMA transfer.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Pause PDMA channel n transfer
N     * |        |          |When user sets PDMA_PAUSE bit, the operation will pause the on-going transfer, but not finish the rest of transfers, and then clear the channel enable bit (PDMA_CHCTL [CHEN]) and clear request active flag
N     * |        |          |If re-enable the paused channel agian, the remaining transfers will be processed.
N     * |[4]     |PAUSE4    |PDMA Channel N Transfer Pause Control Register (Write Only)
N     * |        |          |User can set PAUSEn bit field to pause the PDMA transfer.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Pause PDMA channel n transfer
N     * |        |          |When user sets PDMA_PAUSE bit, the operation will pause the on-going transfer, but not finish the rest of transfers, and then clear the channel enable bit (PDMA_CHCTL [CHEN]) and clear request active flag
N     * |        |          |If re-enable the paused channel agian, the remaining transfers will be processed.
N     * @var PDMA_T::SWREQ
N     * Offset: 0x408  PDMA Software Request Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SWREQ0    |PDMA Channel N Software Request Register (Write Only)
N     * |        |          |Set this bit to 1 to generate a software request to PDMA channel n.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Generate a software request.
N     * |        |          |Note1: User can read PDMA_TRGSTS register to know which channel is on active
N     * |        |          |Active flag may be triggered by software request or peripheral request.
N     * |        |          |Note2: If user does not enable corresponding PDMA channel, the software request will be ignored.
N     * |[1]     |SWREQ1    |PDMA Channel N Software Request Register (Write Only)
N     * |        |          |Set this bit to 1 to generate a software request to PDMA channel n.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Generate a software request.
N     * |        |          |Note1: User can read PDMA_TRGSTS register to know which channel is on active
N     * |        |          |Active flag may be triggered by software request or peripheral request.
N     * |        |          |Note2: If user does not enable corresponding PDMA channel, the software request will be ignored.
N     * |[2]     |SWREQ2    |PDMA Channel N Software Request Register (Write Only)
N     * |        |          |Set this bit to 1 to generate a software request to PDMA channel n.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Generate a software request.
N     * |        |          |Note1: User can read PDMA_TRGSTS register to know which channel is on active
N     * |        |          |Active flag may be triggered by software request or peripheral request.
N     * |        |          |Note2: If user does not enable corresponding PDMA channel, the software request will be ignored.
N     * |[3]     |SWREQ3    |PDMA Channel N Software Request Register (Write Only)
N     * |        |          |Set this bit to 1 to generate a software request to PDMA channel n.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Generate a software request.
N     * |        |          |Note1: User can read PDMA_TRGSTS register to know which channel is on active
N     * |        |          |Active flag may be triggered by software request or peripheral request.
N     * |        |          |Note2: If user does not enable corresponding PDMA channel, the software request will be ignored.
N     * |[4]     |SWREQ4    |PDMA Channel N Software Request Register (Write Only)
N     * |        |          |Set this bit to 1 to generate a software request to PDMA channel n.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Generate a software request.
N     * |        |          |Note1: User can read PDMA_TRGSTS register to know which channel is on active
N     * |        |          |Active flag may be triggered by software request or peripheral request.
N     * |        |          |Note2: If user does not enable corresponding PDMA channel, the software request will be ignored.
N     * @var PDMA_T::TRGSTS
N     * Offset: 0x40C  PDMA Channel Request Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |REQSTS0   |PDMA Channel N Request Status (Read Only)
N     * |        |          |This flag indicates whether channel[n] have a request or not, no matter request from software or peripheral
N     * |        |          |When PDMA controller finishes channel transfer, this bit will be cleared automatically.
N     * |        |          |0 = PDMA Channel n has no request.
N     * |        |          |1 = PDMA Channel n has a request.
N     * |        |          |Note: If user pauses or resets each PDMA transfer by setting PDMA_PAUSE or PDMA_RESET register respectively, this bit will be cleared automatically after finishing current transfer.
N     * |[1]     |REQSTS1   |PDMA Channel N Request Status (Read Only)
N     * |        |          |This flag indicates whether channel[n] have a request or not, no matter request from software or peripheral
N     * |        |          |When PDMA controller finishes channel transfer, this bit will be cleared automatically.
N     * |        |          |0 = PDMA Channel n has no request.
N     * |        |          |1 = PDMA Channel n has a request.
N     * |        |          |Note: If user pauses or resets each PDMA transfer by setting PDMA_PAUSE or PDMA_RESET register respectively, this bit will be cleared automatically after finishing current transfer.
N     * |[2]     |REQSTS2   |PDMA Channel N Request Status (Read Only)
N     * |        |          |This flag indicates whether channel[n] have a request or not, no matter request from software or peripheral
N     * |        |          |When PDMA controller finishes channel transfer, this bit will be cleared automatically.
N     * |        |          |0 = PDMA Channel n has no request.
N     * |        |          |1 = PDMA Channel n has a request.
N     * |        |          |Note: If user pauses or resets each PDMA transfer by setting PDMA_PAUSE or PDMA_RESET register respectively, this bit will be cleared automatically after finishing current transfer.
N     * |[3]     |REQSTS3   |PDMA Channel N Request Status (Read Only)
N     * |        |          |This flag indicates whether channel[n] have a request or not, no matter request from software or peripheral
N     * |        |          |When PDMA controller finishes channel transfer, this bit will be cleared automatically.
N     * |        |          |0 = PDMA Channel n has no request.
N     * |        |          |1 = PDMA Channel n has a request.
N     * |        |          |Note: If user pauses or resets each PDMA transfer by setting PDMA_PAUSE or PDMA_RESET register respectively, this bit will be cleared automatically after finishing current transfer.
N     * |[4]     |REQSTS4   |PDMA Channel N Request Status (Read Only)
N     * |        |          |This flag indicates whether channel[n] have a request or not, no matter request from software or peripheral
N     * |        |          |When PDMA controller finishes channel transfer, this bit will be cleared automatically.
N     * |        |          |0 = PDMA Channel n has no request.
N     * |        |          |1 = PDMA Channel n has a request.
N     * |        |          |Note: If user pauses or resets each PDMA transfer by setting PDMA_PAUSE or PDMA_RESET register respectively, this bit will be cleared automatically after finishing current transfer.
N     * @var PDMA_T::PRISET
N     * Offset: 0x410  PDMA Fixed Priority Setting Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |FPRISET0  |PDMA Channel N Fixed Priority Setting Register
N     * |        |          |Set this bit to 1 to enable fixed priority level.
N     * |        |          |Write Operation:
N     * |        |          |0 = No effect.
N     * |        |          |1 = Set PDMA channel [n] to fixed priority channel.
N     * |        |          |Read Operation:
N     * |        |          |0 = Corresponding PDMA channel is round-robin priority.
N     * |        |          |1 = Corresponding PDMA channel is fixed priority.
N     * |        |          |Note: This field only set to fixed priority, user should use PDMA_PRICLR register to clear fixed priority.
N     * |[1]     |FPRISET1  |PDMA Channel N Fixed Priority Setting Register
N     * |        |          |Set this bit to 1 to enable fixed priority level.
N     * |        |          |Write Operation:
N     * |        |          |0 = No effect.
N     * |        |          |1 = Set PDMA channel [n] to fixed priority channel.
N     * |        |          |Read Operation:
N     * |        |          |0 = Corresponding PDMA channel is round-robin priority.
N     * |        |          |1 = Corresponding PDMA channel is fixed priority.
N     * |        |          |Note: This field only set to fixed priority, user should use PDMA_PRICLR register to clear fixed priority.
N     * |[2]     |FPRISET2  |PDMA Channel N Fixed Priority Setting Register
N     * |        |          |Set this bit to 1 to enable fixed priority level.
N     * |        |          |Write Operation:
N     * |        |          |0 = No effect.
N     * |        |          |1 = Set PDMA channel [n] to fixed priority channel.
N     * |        |          |Read Operation:
N     * |        |          |0 = Corresponding PDMA channel is round-robin priority.
N     * |        |          |1 = Corresponding PDMA channel is fixed priority.
N     * |        |          |Note: This field only set to fixed priority, user should use PDMA_PRICLR register to clear fixed priority.
N     * |[3]     |FPRISET3  |PDMA Channel N Fixed Priority Setting Register
N     * |        |          |Set this bit to 1 to enable fixed priority level.
N     * |        |          |Write Operation:
N     * |        |          |0 = No effect.
N     * |        |          |1 = Set PDMA channel [n] to fixed priority channel.
N     * |        |          |Read Operation:
N     * |        |          |0 = Corresponding PDMA channel is round-robin priority.
N     * |        |          |1 = Corresponding PDMA channel is fixed priority.
N     * |        |          |Note: This field only set to fixed priority, user should use PDMA_PRICLR register to clear fixed priority.
N     * |[4]     |FPRISET4  |PDMA Channel N Fixed Priority Setting Register
N     * |        |          |Set this bit to 1 to enable fixed priority level.
N     * |        |          |Write Operation:
N     * |        |          |0 = No effect.
N     * |        |          |1 = Set PDMA channel [n] to fixed priority channel.
N     * |        |          |Read Operation:
N     * |        |          |0 = Corresponding PDMA channel is round-robin priority.
N     * |        |          |1 = Corresponding PDMA channel is fixed priority.
N     * |        |          |Note: This field only set to fixed priority, user should use PDMA_PRICLR register to clear fixed priority.
N     * @var PDMA_T::PRICLR
N     * Offset: 0x414  PDMA Fixed Priority Clear Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |FPRICLR0  |PDMA Channel N Fixed Priority Clear Register (Write Only)
N     * |        |          |Set this bit to 1 to clear fixed priority level.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear PDMA channel [n] fixed priority setting.
N     * |        |          |Note: User can read PDMA_PRISET register to know the channel priority.
N     * |[1]     |FPRICLR1  |PDMA Channel N Fixed Priority Clear Register (Write Only)
N     * |        |          |Set this bit to 1 to clear fixed priority level.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear PDMA channel [n] fixed priority setting.
N     * |        |          |Note: User can read PDMA_PRISET register to know the channel priority.
N     * |[2]     |FPRICLR2  |PDMA Channel N Fixed Priority Clear Register (Write Only)
N     * |        |          |Set this bit to 1 to clear fixed priority level.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear PDMA channel [n] fixed priority setting.
N     * |        |          |Note: User can read PDMA_PRISET register to know the channel priority.
N     * |[3]     |FPRICLR3  |PDMA Channel N Fixed Priority Clear Register (Write Only)
N     * |        |          |Set this bit to 1 to clear fixed priority level.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear PDMA channel [n] fixed priority setting.
N     * |        |          |Note: User can read PDMA_PRISET register to know the channel priority.
N     * |[4]     |FPRICLR4  |PDMA Channel N Fixed Priority Clear Register (Write Only)
N     * |        |          |Set this bit to 1 to clear fixed priority level.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear PDMA channel [n] fixed priority setting.
N     * |        |          |Note: User can read PDMA_PRISET register to know the channel priority.
N     * @var PDMA_T::INTEN
N     * Offset: 0x418  PDMA Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |INTEN0    |PDMA Channel N Interrupt Enable Register
N     * |        |          |This field is used for enabling PDMA channel[n] interrupt.
N     * |        |          |0 = PDMA channel n interrupt Disabled.
N     * |        |          |1 = PDMA channel n interrupt Enabled.
N     * |[1]     |INTEN1    |PDMA Channel N Interrupt Enable Register
N     * |        |          |This field is used for enabling PDMA channel[n] interrupt.
N     * |        |          |0 = PDMA channel n interrupt Disabled.
N     * |        |          |1 = PDMA channel n interrupt Enabled.
N     * |[2]     |INTEN2    |PDMA Channel N Interrupt Enable Register
N     * |        |          |This field is used for enabling PDMA channel[n] interrupt.
N     * |        |          |0 = PDMA channel n interrupt Disabled.
N     * |        |          |1 = PDMA channel n interrupt Enabled.
N     * |[3]     |INTEN3    |PDMA Channel N Interrupt Enable Register
N     * |        |          |This field is used for enabling PDMA channel[n] interrupt.
N     * |        |          |0 = PDMA channel n interrupt Disabled.
N     * |        |          |1 = PDMA channel n interrupt Enabled.
N     * |[4]     |INTEN4    |PDMA Channel N Interrupt Enable Register
N     * |        |          |This field is used for enabling PDMA channel[n] interrupt.
N     * |        |          |0 = PDMA channel n interrupt Disabled.
N     * |        |          |1 = PDMA channel n interrupt Enabled.
N     * @var PDMA_T::INTSTS
N     * Offset: 0x41C  PDMA Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ABTIF     |PDMA Read/Write Target Abort Interrupt Flag (Read-only)
N     * |        |          |This bit indicates that PDMA has target abort error; Software can read PDMA_ABTSTS register to find which channel has target abort error.
N     * |        |          |0 = No AHB bus ERROR response received.
N     * |        |          |1 = AHB bus ERROR response received.
N     * |[1]     |TDIF      |Transfer Done Interrupt Flag (Read Only)
N     * |        |          |This bit indicates that PDMA controller has finished transmission; User can read PDMA_TDSTS register to indicate which channel finished transfer.
N     * |        |          |0 = Not finished yet.
N     * |        |          |1 = PDMA channel has finished transmission.
N     * |[2]     |TEIF      |Table Empty Interrupt Flag (Read Only)
N     * |        |          |This bit indicates PDMA channel scatter-gather table is empty
N     * |        |          |User can read PDMA_SCATSTS register to indicate which channel scatter-gather table is empty.
N     * |        |          |0 = PDMA channel scatter-gather table is not empty.
N     * |        |          |1 = PDMA channel scatter-gather table is empty.
N     * |[8]     |REQTOF0   |PDMA Channel N Request Time-out Flag
N     * |        |          |This flag indicates that PDMA controller has waited peripheral request for a period defined by PDMA_TOCn, user can write 1 to clear these bits.
N     * |        |          |0 = No request time-out.
N     * |        |          |1 = Peripheral request time-out.
N     * |[9]     |REQTOF1   |PDMA Channel N Request Time-out Flag
N     * |        |          |This flag indicates that PDMA controller has waited peripheral request for a period defined by PDMA_TOCn, user can write 1 to clear these bits.
N     * |        |          |0 = No request time-out.
N     * |        |          |1 = Peripheral request time-out.
N     * @var PDMA_T::ABTSTS
N     * Offset: 0x420  PDMA Channel Read/Write Target Abort Flag Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ABTIF0    |PDMA Channel N Read/Write Target Abort Interrupt Status Flag
N     * |        |          |This bit indicates which PDMA controller has target abort error or transfer source and destination address not alignment; User can write 1 to clear these bits.
N     * |        |          |0 = No AHB bus ERROR response received when channel n transfer.
N     * |        |          |1 = AHB bus ERROR response received when channel n transfer.
N     * |[1]     |ABTIF1    |PDMA Channel N Read/Write Target Abort Interrupt Status Flag
N     * |        |          |This bit indicates which PDMA controller has target abort error or transfer source and destination address not alignment; User can write 1 to clear these bits.
N     * |        |          |0 = No AHB bus ERROR response received when channel n transfer.
N     * |        |          |1 = AHB bus ERROR response received when channel n transfer.
N     * |[2]     |ABTIF2    |PDMA Channel N Read/Write Target Abort Interrupt Status Flag
N     * |        |          |This bit indicates which PDMA controller has target abort error or transfer source and destination address not alignment; User can write 1 to clear these bits.
N     * |        |          |0 = No AHB bus ERROR response received when channel n transfer.
N     * |        |          |1 = AHB bus ERROR response received when channel n transfer.
N     * |[3]     |ABTIF3    |PDMA Channel N Read/Write Target Abort Interrupt Status Flag
N     * |        |          |This bit indicates which PDMA controller has target abort error or transfer source and destination address not alignment; User can write 1 to clear these bits.
N     * |        |          |0 = No AHB bus ERROR response received when channel n transfer.
N     * |        |          |1 = AHB bus ERROR response received when channel n transfer.
N     * |[4]     |ABTIF4    |PDMA Channel N Read/Write Target Abort Interrupt Status Flag
N     * |        |          |This bit indicates which PDMA controller has target abort error or transfer source and destination address not alignment; User can write 1 to clear these bits.
N     * |        |          |0 = No AHB bus ERROR response received when channel n transfer.
N     * |        |          |1 = AHB bus ERROR response received when channel n transfer.
N     * @var PDMA_T::TDSTS
N     * Offset: 0x424  PDMA Channel Transfer Done Flag Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TDIF0     |PDMA Channel N Transfer Done Flag Register
N     * |        |          |This bit indicates whether PDMA controller channel transfer has been finished or not, user can write 1 to clear these bits.
N     * |        |          |0 = PDMA channel transfer has not finished.
N     * |        |          |1 = PDMA channel has finished transmission.
N     * |[1]     |TDIF1     |PDMA Channel N Transfer Done Flag Register
N     * |        |          |This bit indicates whether PDMA controller channel transfer has been finished or not, user can write 1 to clear these bits.
N     * |        |          |0 = PDMA channel transfer has not finished.
N     * |        |          |1 = PDMA channel has finished transmission.
N     * |[2]     |TDIF2     |PDMA Channel N Transfer Done Flag Register
N     * |        |          |This bit indicates whether PDMA controller channel transfer has been finished or not, user can write 1 to clear these bits.
N     * |        |          |0 = PDMA channel transfer has not finished.
N     * |        |          |1 = PDMA channel has finished transmission.
N     * |[3]     |TDIF3     |PDMA Channel N Transfer Done Flag Register
N     * |        |          |This bit indicates whether PDMA controller channel transfer has been finished or not, user can write 1 to clear these bits.
N     * |        |          |0 = PDMA channel transfer has not finished.
N     * |        |          |1 = PDMA channel has finished transmission.
N     * |[4]     |TDIF4     |PDMA Channel N Transfer Done Flag Register
N     * |        |          |This bit indicates whether PDMA controller channel transfer has been finished or not, user can write 1 to clear these bits.
N     * |        |          |0 = PDMA channel transfer has not finished.
N     * |        |          |1 = PDMA channel has finished transmission.
N     * @var PDMA_T::SCATSTS
N     * Offset: 0x428  PDMA Scatter-Gather Table Empty Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TEMPTYF0  |This bit indicates which PDMA channel table is empty
N     * |        |          |when channel have a request ,
N     * |        |          |no matter request from software or peripheral,
N     * |        |          |but operation mode of channel descriptor table is idle mode,
N     * |        |          |or channel has finished current transfer and
N     * |        |          |next table operation mode is idle mode for PDMA Scatter-Gather mode.
N     * |        |          |User can write 1 to clear these bits.
N     * |        |          |0 = PDMA channel scatter-gather table is not empty.
N     * |        |          |1 = PDMA channel scatter-gather table is empty.
N     * |[1]     |TEMPTYF1  |This bit indicates which PDMA channel table is empty
N     * |        |          |when channel have a request ,
N     * |        |          |no matter request from software or peripheral,
N     * |        |          |but operation mode of channel descriptor table is idle mode,
N     * |        |          |or channel has finished current transfer and
N     * |        |          |next table operation mode is idle mode for PDMA Scatter-Gather mode.
N     * |        |          |User can write 1 to clear these bits.
N     * |        |          |0 = PDMA channel scatter-gather table is not empty.
N     * |        |          |1 = PDMA channel scatter-gather table is empty.
N     * |[2]     |TEMPTYF2  |This bit indicates which PDMA channel table is empty
N     * |        |          |when channel have a request ,
N     * |        |          |no matter request from software or peripheral,
N     * |        |          |but operation mode of channel descriptor table is idle mode,
N     * |        |          |or channel has finished current transfer and
N     * |        |          |next table operation mode is idle mode for PDMA Scatter-Gather mode.
N     * |        |          |User can write 1 to clear these bits.
N     * |        |          |0 = PDMA channel scatter-gather table is not empty.
N     * |        |          |1 = PDMA channel scatter-gather table is empty.
N     * |[3]     |TEMPTYF3  |This bit indicates which PDMA channel table is empty
N     * |        |          |when channel have a request ,
N     * |        |          |no matter request from software or peripheral,
N     * |        |          |but operation mode of channel descriptor table is idle mode,
N     * |        |          |or channel has finished current transfer and
N     * |        |          |next table operation mode is idle mode for PDMA Scatter-Gather mode.
N     * |        |          |User can write 1 to clear these bits.
N     * |        |          |0 = PDMA channel scatter-gather table is not empty.
N     * |        |          |1 = PDMA channel scatter-gather table is empty.
N     * |[4]     |TEMPTYF4  |This bit indicates which PDMA channel table is empty
N     * |        |          |when channel have a request ,
N     * |        |          |no matter request from software or peripheral,
N     * |        |          |but operation mode of channel descriptor table is idle mode,
N     * |        |          |or channel has finished current transfer and
N     * |        |          |next table operation mode is idle mode for PDMA Scatter-Gather mode.
N     * |        |          |User can write 1 to clear these bits.
N     * |        |          |0 = PDMA channel scatter-gather table is not empty.
N     * |        |          |1 = PDMA channel scatter-gather table is empty.
N     * @var PDMA_T::TACTSTS
N     * Offset: 0x42C  PDMA Transfer Active Flag Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TXACTF0   |PDMA Channel N Transfer on Active Flag Register (Read Only)
N     * |        |          |This bit indicates which PDMA channel is in active.
N     * |        |          |0 = PDMA channel is not finished.
N     * |        |          |1 = PDMA channel is active.
N     * |[1]     |TXACTF1   |PDMA Channel N Transfer on Active Flag Register (Read Only)
N     * |        |          |This bit indicates which PDMA channel is in active.
N     * |        |          |0 = PDMA channel is not finished.
N     * |        |          |1 = PDMA channel is active.
N     * |[2]     |TXACTF2   |PDMA Channel N Transfer on Active Flag Register (Read Only)
N     * |        |          |This bit indicates which PDMA channel is in active.
N     * |        |          |0 = PDMA channel is not finished.
N     * |        |          |1 = PDMA channel is active.
N     * |[3]     |TXACTF3   |PDMA Channel N Transfer on Active Flag Register (Read Only)
N     * |        |          |This bit indicates which PDMA channel is in active.
N     * |        |          |0 = PDMA channel is not finished.
N     * |        |          |1 = PDMA channel is active.
N     * |[4]     |TXACTF4   |PDMA Channel N Transfer on Active Flag Register (Read Only)
N     * |        |          |This bit indicates which PDMA channel is in active.
N     * |        |          |0 = PDMA channel is not finished.
N     * |        |          |1 = PDMA channel is active.
N     * @var PDMA_T::TOUTPSC
N     * Offset: 0x430  PDMA Time-out Prescaler Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |TOUTPSC0  |PDMA Channel 0 Time-out Clock Source Prescaler Bits
N     * |        |          |000 = PDMA channel 0 time-out clock source is HCLK/28.
N     * |        |          |001 = PDMA channel 0 time-out clock source is HCLK/29.
N     * |        |          |010 = PDMA channel 0 time-out clock source is HCLK/210.
N     * |        |          |011 = PDMA channel 0 time-out clock source is HCLK/211.
N     * |        |          |100 = PDMA channel 0 time-out clock source is HCLK/212.
N     * |        |          |101 = PDMA channel 0 time-out clock source is HCLK/213.
N     * |        |          |110 = PDMA channel 0 time-out clock source is HCLK/214.
N     * |        |          |111 = PDMA channel 0 time-out clock source is HCLK/215.
N     * |[6:4]   |TOUTPSC1  |PDMA Channel 1 Time-out Clock Source Prescaler Bits
N     * |        |          |000 = PDMA channel 1 time-out clock source is HCLK/28.
N     * |        |          |001 = PDMA channel 1 time-out clock source is HCLK/29.
N     * |        |          |010 = PDMA channel 1 time-out clock source is HCLK/210.
N     * |        |          |011 = PDMA channel 1 time-out clock source is HCLK/211.
N     * |        |          |100 = PDMA channel 1 time-out clock source is HCLK/212.
N     * |        |          |101 = PDMA channel 1 time-out clock source is HCLK/213.
N     * |        |          |110 = PDMA channel 1 time-out clock source is HCLK/214.
N     * |        |          |111 = PDMA channel 1 time-out clock source is HCLK/215.
N     * @var PDMA_T::TOUTEN
N     * Offset: 0x434  PDMA Time-out Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TOUTEN0   |PDMA Channel 0 Time-out Enable Bit
N     * |        |          |0 = PDMA Channel 0 time-out function Disable.
N     * |        |          |1 = PDMA Channel 0 time-out function Enable.
N     * |[1]     |TOUTEN1   |PDMA Channel 1 Time-out Enable Bit
N     * |        |          |0 = PDMA Channel 1 time-out function Disable.
N     * |        |          |1 = PDMA Channel 1 time-out function Enable.
N     * @var PDMA_T::TOUTIEN
N     * Offset: 0x438  PDMA Time-out Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TOUTIEN0  |PDMA Channel 0 Time-out Interrupt Enable Bit
N     * |        |          |0 = PDMA Channel 0 time-out interrupt Disable.
N     * |        |          |1 = PDMA Channel 0 time-out interrupt Enable.
N     * |[1]     |TOUTIEN1  |PDMA Channel 1 Time-out Interrupt Enable Bit
N     * |        |          |0 = PDMA Channel 1 time-out interrupt Disable.
N     * |        |          |1 = PDMA Channel 1 time-out interrupt Enable.
N     * @var PDMA_T::SCATBA
N     * Offset: 0x43C  PDMA Scatter-Gather Descriptor Table Base Address Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:16] |SCATBA    |PDMA Scatter-gather Descriptor Table Address Register
N     * |        |          |In Scatter-Gather mode, this is the base address for calculating the next link - list address
N     * |        |          |The next link address equation is
N     * |        |          |Next Link Address = PDMA_SCATBA + PDMA_DSCT_FIRST.
N     * |        |          |Note: Only useful in Scatter-Gather mode.
N     * @var PDMA_T::TOC0_1
N     * Offset: 0x440  PDMA Channel 0 and Channel 1 Time-out Counter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |TOC0      |Time-out Counter for Channel 0
N     * |        |          |This controls the period of time-out function for channel 0
N     * |        |          |The calculation unit is based on TOUTPSC0 (PDMA_TOUTPSC[2:0]) clock.
N     * |        |          |Time-out period = (Period of time-out clock) * (16-bit TOCn),n = 0 ~ 1.
N     * |[31:16] |TOC1      |Time-out Counter for Channel 1
N     * |        |          |This controls the period of time-out function for channel 1
N     * |        |          |The calculation unit is based on TOUTPSC1 (PDMA_TOUTPSC[6:4]) clock
N     * |        |          |The example of time-out period can refer TOC0 bit description.
N     * @var PDMA_T::RESET
N     * Offset: 0x460  PDMA channel Reset Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RESET0    |PDMA Channel N Reset Control Register
N     * |        |          |User can set this bit field to reset the PDMA channel.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset PDMA channel n
N     * |        |          |When user sets PDMA_RESET bit, the operation will finish the on-going transfer and then clear the channel enable bit (PDMA_CHCTL [CHEN]) and clear request active flag
N     * |        |          |If re-enable channel after channel reset, PDMA will re-load the channel description table to execute PDMA task.
N     * |        |          |Note: This bit will be cleared automatically after finishing reset process.
N     * |[1]     |RESET1    |PDMA Channel N Reset Control Register
N     * |        |          |User can set this bit field to reset the PDMA channel.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset PDMA channel n
N     * |        |          |When user sets PDMA_RESET bit, the operation will finish the on-going transfer and then clear the channel enable bit (PDMA_CHCTL [CHEN]) and clear request active flag
N     * |        |          |If re-enable channel after channel reset, PDMA will re-load the channel description table to execute PDMA task.
N     * |        |          |Note: This bit will be cleared automatically after finishing reset process.
N     * |[2]     |RESET2    |PDMA Channel N Reset Control Register
N     * |        |          |User can set this bit field to reset the PDMA channel.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset PDMA channel n
N     * |        |          |When user sets PDMA_RESET bit, the operation will finish the on-going transfer and then clear the channel enable bit (PDMA_CHCTL [CHEN]) and clear request active flag
N     * |        |          |If re-enable channel after channel reset, PDMA will re-load the channel description table to execute PDMA task.
N     * |        |          |Note: This bit will be cleared automatically after finishing reset process.
N     * |[3]     |RESET3    |PDMA Channel N Reset Control Register
N     * |        |          |User can set this bit field to reset the PDMA channel.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset PDMA channel n
N     * |        |          |When user sets PDMA_RESET bit, the operation will finish the on-going transfer and then clear the channel enable bit (PDMA_CHCTL [CHEN]) and clear request active flag
N     * |        |          |If re-enable channel after channel reset, PDMA will re-load the channel description table to execute PDMA task.
N     * |        |          |Note: This bit will be cleared automatically after finishing reset process.
N     * |[4]     |RESET4    |PDMA Channel N Reset Control Register
N     * |        |          |User can set this bit field to reset the PDMA channel.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset PDMA channel n
N     * |        |          |When user sets PDMA_RESET bit, the operation will finish the on-going transfer and then clear the channel enable bit (PDMA_CHCTL [CHEN]) and clear request active flag
N     * |        |          |If re-enable channel after channel reset, PDMA will re-load the channel description table to execute PDMA task.
N     * |        |          |Note: This bit will be cleared automatically after finishing reset process.
N     * @var PDMA_T::REQSEL0_3
N     * Offset: 0x480  PDMA Channel 0 to Channel 3 Request Source Select Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |REQSRC0   |Channel 0 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 0
N     * |        |          |User can configure the peripheral by setting REQSRC0.
N     * |        |          |0 = Disable PDMA peripheral request.
N     * |        |          |1 = reserved.
N     * |        |          |4 = Channel connects to UART_TX.
N     * |        |          |5 = Channel connects to UART_RX.
N     * |        |          |6 = Reserved.
N     * |        |          |7 = Reserved.
N     * |        |          |8 = Reserved.
N     * |        |          |9 = Reserved.
N     * |        |          |10 = Channel connects to USCI_TX.
N     * |        |          |11 = Channel connects to USCI_RX.
N     * |        |          |12 = Reserved.
N     * |        |          |13 = Reserved.
N     * |        |          |14 = Reserved.
N     * |        |          |15 = Reserved.
N     * |        |          |16 = Channel connects to SPI_TX.
N     * |        |          |17 = Channel connects to SPI_RX.
N     * |        |          |18 = Reserved.
N     * |        |          |19 = Reserved.
N     * |        |          |20 = Channel connects to ADC_RX.
N     * |        |          |21 = Channel connects to PWM0_P0_RX.
N     * |        |          |22 = Channel connects to PWM0_P1_RX.
N     * |        |          |23 = Channel connects to PWM0_P2_RX.
N     * |        |          |24 = Channel connects to PWM1_P0_RX.
N     * |        |          |25 = Channel connects to PWM1_P1_RX.
N     * |        |          |26 = Channel connects to PWM1_P2_RX.
N     * |        |          |27 = Reserved.
N     * |        |          |28 = Channel connects to I2C0_TX.
N     * |        |          |29 = Channel connects to I2C0_RX.
N     * |        |          |30 = Channel connects to I2C1_TX.
N     * |        |          |31 = Channel connects to I2C1_RX.
N     * |        |          |32 = Channel connects to TMR0.
N     * |        |          |33 = Channel connects to TMR1.
N     * |        |          |34 = Channel connects to TMR2.
N     * |        |          |35 = Channel connects to TMR3.
N     * |        |          |Others = Reserved.
N     * |        |          |Note 1: A peripheral can't assign to two channels at the same time.
N     * |        |          |Note 2: This field is useless when transfer between memory and memory.
N     * |[13:8]  |REQSRC1   |Channel 1 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 1
N     * |        |          |User can configure the peripheral setting by REQSRC1.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field
N     * |        |          |Please refer to the explanation of REQSRC0.
N     * |[21:16] |REQSRC2   |Channel 2 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 2
N     * |        |          |User can configure the peripheral setting by REQSRC2.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field
N     * |        |          |Please refer to the explanation of REQSRC0.
N     * |[29:24] |REQSRC3   |Channel 3 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 3
N     * |        |          |User can configure the peripheral setting by REQSRC3.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field
N     * |        |          |Please refer to the explanation of REQSRC0.
N     * @var PDMA_T::REQSEL4
N     * Offset: 0x484  PDMA Channel 4 Request Source Select Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |REQSRC4   |Channel 4 Request Source Selection
N     * |        |          |This filed defines which peripheral is connected to PDMA channel 4
N     * |        |          |User can configure the peripheral setting by REQSRC4.
N     * |        |          |Note: The channel configuration is the same as REQSRC0 field
N     * |        |          |Please refer to the explanation of REQSRC0.
N     */
N    PDMA_DSCT_T   DSCT[5];               /*!< [0x0000~0x004C] Descriptor Table Control Register of PDMA Channel 0~4     */
N    __I  uint32_t CURSCAT[5];            /*!< [0x0050~0x0060] Current Scatter-Gather Descriptor Table Address of PDMA Channel 0~4 */
X    volatile const  uint32_t CURSCAT[5];             
N    __I  uint32_t RESERVE0[231];
X    volatile const  uint32_t RESERVE0[231];
N    __IO uint32_t CHCTL;                 /*!< [0x0400] PDMA Channel Control Register                                    */
X    volatile uint32_t CHCTL;                  
N    __O  uint32_t PAUSE;                 /*!< [0x0404] PDMA Transfer Pause Control Register                             */
X    volatile  uint32_t PAUSE;                  
N    __O  uint32_t SWREQ;                 /*!< [0x0408] PDMA Software Request Register                                   */
X    volatile  uint32_t SWREQ;                  
N    __I  uint32_t TRGSTS;                /*!< [0x040c] PDMA Channel Request Status Register                             */
X    volatile const  uint32_t TRGSTS;                 
N    __IO uint32_t PRISET;                /*!< [0x0410] PDMA Fixed Priority Setting Register                             */
X    volatile uint32_t PRISET;                 
N    __O  uint32_t PRICLR;                /*!< [0x0414] PDMA Fixed Priority Clear Register                               */
X    volatile  uint32_t PRICLR;                 
N    __IO uint32_t INTEN;                 /*!< [0x0418] PDMA Interrupt Enable Register                                   */
X    volatile uint32_t INTEN;                  
N    __IO uint32_t INTSTS;                /*!< [0x041c] PDMA Interrupt Status Register                                   */
X    volatile uint32_t INTSTS;                 
N    __IO uint32_t ABTSTS;                /*!< [0x0420] PDMA Channel Read/Write Target Abort Flag Register               */
X    volatile uint32_t ABTSTS;                 
N    __IO uint32_t TDSTS;                 /*!< [0x0424] PDMA Channel Transfer Done Flag Register                         */
X    volatile uint32_t TDSTS;                  
N    __IO uint32_t SCATSTS;               /*!< [0x0428] PDMA Scatter-Gather Table Empty Status Register                  */
X    volatile uint32_t SCATSTS;                
N    __I  uint32_t TACTSTS;               /*!< [0x042c] PDMA Transfer Active Flag Register                               */
X    volatile const  uint32_t TACTSTS;                
N    __IO uint32_t TOUTPSC;               /*!< [0x0430] PDMA Time-out Prescaler Register                                 */
X    volatile uint32_t TOUTPSC;                
N    __IO uint32_t TOUTEN;                /*!< [0x0434] PDMA Time-out Enable Register                                    */
X    volatile uint32_t TOUTEN;                 
N    __IO uint32_t TOUTIEN;               /*!< [0x0438] PDMA Time-out Interrupt Enable Register                          */
X    volatile uint32_t TOUTIEN;                
N    __IO uint32_t SCATBA;                /*!< [0x043c] PDMA Scatter-Gather Descriptor Table Base Address Register       */
X    volatile uint32_t SCATBA;                 
N    __IO uint32_t TOC0_1;                /*!< [0x0440] PDMA Channel 0 and Channel 1 Time-out Counter Register           */
X    volatile uint32_t TOC0_1;                 
N    __I  uint32_t RESERVE1[7];
X    volatile const  uint32_t RESERVE1[7];
N    __IO uint32_t RESET;                 /*!< [0x0460] PDMA channel Reset Control Register                              */
X    volatile uint32_t RESET;                  
N    __I  uint32_t RESERVE2[7];
X    volatile const  uint32_t RESERVE2[7];
N    __IO uint32_t REQSEL0_3;             /*!< [0x0480] PDMA Channel 0 to Channel 3 Request Source Select Register       */
X    volatile uint32_t REQSEL0_3;              
N    __IO uint32_t REQSEL4;               /*!< [0x0484] PDMA Channel 4 Request Source Select Register                    */
X    volatile uint32_t REQSEL4;                
N} PDMA_T;
N
N/**
N    @addtogroup PDMA_CONST PDMA Bit Field Definition
N    Constant Definitions for PDMA Controller
N@{ */
N
N#define PDMA_DSCT_CTL_OPMODE_Pos        (0)                                                /*!< PDMA_T::DSCT_CTL: OPMODE Position      */
N#define PDMA_DSCT_CTL_OPMODE_Msk        (0x3ul << PDMA_DSCT_CTL_OPMODE_Pos)                /*!< PDMA_T::DSCT_CTL: OPMODE Mask          */
N
N#define PDMA_DSCT_CTL_TXTYPE_Pos        (2)                                                /*!< PDMA_T::DSCT_CTL: TXTYPE Position      */
N#define PDMA_DSCT_CTL_TXTYPE_Msk        (0x1ul << PDMA_DSCT_CTL_TXTYPE_Pos)                /*!< PDMA_T::DSCT_CTL: TXTYPE Mask          */
N
N#define PDMA_DSCT_CTL_BURSIZE_Pos       (4)                                                /*!< PDMA_T::DSCT_CTL: BURSIZE Position     */
N#define PDMA_DSCT_CTL_BURSIZE_Msk       (0x7ul << PDMA_DSCT_CTL_BURSIZE_Pos)               /*!< PDMA_T::DSCT_CTL: BURSIZE Mask         */
N
N#define PDMA_DSCT_CTL_TBINTDIS_Pos      (7)                                                /*!< PDMA_T::DSCT_CTL: TBINTDIS Position    */
N#define PDMA_DSCT_CTL_TBINTDIS_Msk      (0x1ul << PDMA_DSCT_CTL_TBINTDIS_Pos)              /*!< PDMA_T::DSCT_CTL: TBINTDIS Mask        */
N
N#define PDMA_DSCT_CTL_SAINC_Pos         (8)                                                /*!< PDMA_T::DSCT_CTL: SAINC Position       */
N#define PDMA_DSCT_CTL_SAINC_Msk         (0x3ul << PDMA_DSCT_CTL_SAINC_Pos)                 /*!< PDMA_T::DSCT_CTL: SAINC Mask           */
N
N#define PDMA_DSCT_CTL_DAINC_Pos         (10)                                               /*!< PDMA_T::DSCT_CTL: DAINC Position       */
N#define PDMA_DSCT_CTL_DAINC_Msk         (0x3ul << PDMA_DSCT_CTL_DAINC_Pos)                 /*!< PDMA_T::DSCT_CTL: DAINC Mask           */
N
N#define PDMA_DSCT_CTL_TXWIDTH_Pos       (12)                                               /*!< PDMA_T::DSCT_CTL: TXWIDTH Position     */
N#define PDMA_DSCT_CTL_TXWIDTH_Msk       (0x3ul << PDMA_DSCT_CTL_TXWIDTH_Pos)               /*!< PDMA_T::DSCT_CTL: TXWIDTH Mask         */
N
N#define PDMA_DSCT_CTL_TXCNT_Pos         (16)                                               /*!< PDMA_T::DSCT_CTL: TXCNT Position       */
N#define PDMA_DSCT_CTL_TXCNT_Msk         (0x3ffful << PDMA_DSCT_CTL_TXCNT_Pos)              /*!< PDMA_T::DSCT_CTL: TXCNT Mask           */
N
N#define PDMA_DSCT_SA_SA_Pos             (0)                                                /*!< PDMA_T::DSCT_SA: SA Position           */
N#define PDMA_DSCT_SA_SA_Msk             (0xfffffffful << PDMA_DSCT_SA_SA_Pos)              /*!< PDMA_T::DSCT_SA: SA Mask               */
N
N#define PDMA_DSCT_DA_DA_Pos             (0)                                                /*!< PDMA_T::DSCT_DA: DA Position           */
N#define PDMA_DSCT_DA_DA_Msk             (0xfffffffful << PDMA_DSCT_DA_DA_Pos)              /*!< PDMA_T::DSCT_DA: DA Mask               */
N
N#define PDMA_DSCT_FIRST_FIRST_Pos       (0)                                                /*!< PDMA_T::DSCT_FIRST: FIRST Position     */
N#define PDMA_DSCT_FIRST_FIRST_Msk       (0xfffful << PDMA_DSCT_FIRST_FIRST_Pos)            /*!< PDMA_T::DSCT_FIRST: FIRST Mask         */
N
N#define PDMA_CHCTL_CHEN0_Pos             (0)                                               /*!< PDMA_T::CHCTL: CHEN0 Position          */
N#define PDMA_CHCTL_CHEN0_Msk             (0x1ul << PDMA_CHCTL_CHEN0_Pos)                   /*!< PDMA_T::CHCTL: CHEN0 Mask              */
N
N#define PDMA_CHCTL_CHEN1_Pos             (1)                                               /*!< PDMA_T::CHCTL: CHEN1 Position          */
N#define PDMA_CHCTL_CHEN1_Msk             (0x1ul << PDMA_CHCTL_CHEN1_Pos)                   /*!< PDMA_T::CHCTL: CHEN1 Mask              */
N
N#define PDMA_CHCTL_CHEN2_Pos             (2)                                               /*!< PDMA_T::CHCTL: CHEN2 Position          */
N#define PDMA_CHCTL_CHEN2_Msk             (0x1ul << PDMA_CHCTL_CHEN2_Pos)                   /*!< PDMA_T::CHCTL: CHEN2 Mask              */
N
N#define PDMA_CHCTL_CHEN3_Pos             (3)                                               /*!< PDMA_T::CHCTL: CHEN3 Position          */
N#define PDMA_CHCTL_CHEN3_Msk             (0x1ul << PDMA_CHCTL_CHEN3_Pos)                   /*!< PDMA_T::CHCTL: CHEN3 Mask              */
N
N#define PDMA_CHCTL_CHEN4_Pos             (4)                                               /*!< PDMA_T::CHCTL: CHEN4 Position          */
N#define PDMA_CHCTL_CHEN4_Msk             (0x1ul << PDMA_CHCTL_CHEN4_Pos)                   /*!< PDMA_T::CHCTL: CHEN4 Mask              */
N
N#define PDMA_PAUSE_PAUSE0_Pos            (0)                                               /*!< PDMA_T::PAUSE: PAUSE0 Position         */
N#define PDMA_PAUSE_PAUSE0_Msk            (0x1ul << PDMA_PAUSE_PAUSE0_Pos)                  /*!< PDMA_T::PAUSE: PAUSE0 Mask             */
N
N#define PDMA_PAUSE_PAUSE1_Pos            (1)                                               /*!< PDMA_T::PAUSE: PAUSE1 Position         */
N#define PDMA_PAUSE_PAUSE1_Msk            (0x1ul << PDMA_PAUSE_PAUSE1_Pos)                  /*!< PDMA_T::PAUSE: PAUSE1 Mask             */
N
N#define PDMA_PAUSE_PAUSE2_Pos            (2)                                               /*!< PDMA_T::PAUSE: PAUSE2 Position         */
N#define PDMA_PAUSE_PAUSE2_Msk            (0x1ul << PDMA_PAUSE_PAUSE2_Pos)                  /*!< PDMA_T::PAUSE: PAUSE2 Mask             */
N
N#define PDMA_PAUSE_PAUSE3_Pos            (3)                                               /*!< PDMA_T::PAUSE: PAUSE3 Position         */
N#define PDMA_PAUSE_PAUSE3_Msk            (0x1ul << PDMA_PAUSE_PAUSE3_Pos)                  /*!< PDMA_T::PAUSE: PAUSE3 Mask             */
N
N#define PDMA_PAUSE_PAUSE4_Pos            (4)                                               /*!< PDMA_T::PAUSE: PAUSE4 Position         */
N#define PDMA_PAUSE_PAUSE4_Msk            (0x1ul << PDMA_PAUSE_PAUSE4_Pos)                  /*!< PDMA_T::PAUSE: PAUSE4 Mask             */
N
N#define PDMA_SWREQ_SWREQ0_Pos            (0)                                               /*!< PDMA_T::SWREQ: SWREQ0 Position         */
N#define PDMA_SWREQ_SWREQ0_Msk            (0x1ul << PDMA_SWREQ_SWREQ0_Pos)                  /*!< PDMA_T::SWREQ: SWREQ0 Mask             */
N
N#define PDMA_SWREQ_SWREQ1_Pos            (1)                                               /*!< PDMA_T::SWREQ: SWREQ1 Position         */
N#define PDMA_SWREQ_SWREQ1_Msk            (0x1ul << PDMA_SWREQ_SWREQ1_Pos)                  /*!< PDMA_T::SWREQ: SWREQ1 Mask             */
N
N#define PDMA_SWREQ_SWREQ2_Pos            (2)                                               /*!< PDMA_T::SWREQ: SWREQ2 Position         */
N#define PDMA_SWREQ_SWREQ2_Msk            (0x1ul << PDMA_SWREQ_SWREQ2_Pos)                  /*!< PDMA_T::SWREQ: SWREQ2 Mask             */
N
N#define PDMA_SWREQ_SWREQ3_Pos            (3)                                               /*!< PDMA_T::SWREQ: SWREQ3 Position         */
N#define PDMA_SWREQ_SWREQ3_Msk            (0x1ul << PDMA_SWREQ_SWREQ3_Pos)                  /*!< PDMA_T::SWREQ: SWREQ3 Mask             */
N
N#define PDMA_SWREQ_SWREQ4_Pos            (4)                                               /*!< PDMA_T::SWREQ: SWREQ4 Position         */
N#define PDMA_SWREQ_SWREQ4_Msk            (0x1ul << PDMA_SWREQ_SWREQ4_Pos)                  /*!< PDMA_T::SWREQ: SWREQ4 Mask             */
N
N#define PDMA_TRGSTS_REQSTS0_Pos          (0)                                               /*!< PDMA_T::TRGSTS: REQSTS0 Position       */
N#define PDMA_TRGSTS_REQSTS0_Msk          (0x1ul << PDMA_TRGSTS_REQSTS0_Pos)                /*!< PDMA_T::TRGSTS: REQSTS0 Mask           */
N
N#define PDMA_TRGSTS_REQSTS1_Pos          (1)                                               /*!< PDMA_T::TRGSTS: REQSTS1 Position       */
N#define PDMA_TRGSTS_REQSTS1_Msk          (0x1ul << PDMA_TRGSTS_REQSTS1_Pos)                /*!< PDMA_T::TRGSTS: REQSTS1 Mask           */
N
N#define PDMA_TRGSTS_REQSTS2_Pos          (2)                                               /*!< PDMA_T::TRGSTS: REQSTS2 Position       */
N#define PDMA_TRGSTS_REQSTS2_Msk          (0x1ul << PDMA_TRGSTS_REQSTS2_Pos)                /*!< PDMA_T::TRGSTS: REQSTS2 Mask           */
N
N#define PDMA_TRGSTS_REQSTS3_Pos          (3)                                               /*!< PDMA_T::TRGSTS: REQSTS3 Position       */
N#define PDMA_TRGSTS_REQSTS3_Msk          (0x1ul << PDMA_TRGSTS_REQSTS3_Pos)                /*!< PDMA_T::TRGSTS: REQSTS3 Mask           */
N
N#define PDMA_TRGSTS_REQSTS4_Pos          (4)                                               /*!< PDMA_T::TRGSTS: REQSTS4 Position       */
N#define PDMA_TRGSTS_REQSTS4_Msk          (0x1ul << PDMA_TRGSTS_REQSTS4_Pos)                /*!< PDMA_T::TRGSTS: REQSTS4 Mask           */
N
N#define PDMA_PRISET_FPRISET0_Pos         (0)                                               /*!< PDMA_T::PRISET: FPRISET0 Position      */
N#define PDMA_PRISET_FPRISET0_Msk         (0x1ul << PDMA_PRISET_FPRISET0_Pos)               /*!< PDMA_T::PRISET: FPRISET0 Mask          */
N
N#define PDMA_PRISET_FPRISET1_Pos         (1)                                               /*!< PDMA_T::PRISET: FPRISET1 Position      */
N#define PDMA_PRISET_FPRISET1_Msk         (0x1ul << PDMA_PRISET_FPRISET1_Pos)               /*!< PDMA_T::PRISET: FPRISET1 Mask          */
N
N#define PDMA_PRISET_FPRISET2_Pos         (2)                                               /*!< PDMA_T::PRISET: FPRISET2 Position      */
N#define PDMA_PRISET_FPRISET2_Msk         (0x1ul << PDMA_PRISET_FPRISET2_Pos)               /*!< PDMA_T::PRISET: FPRISET2 Mask          */
N
N#define PDMA_PRISET_FPRISET3_Pos         (3)                                               /*!< PDMA_T::PRISET: FPRISET3 Position      */
N#define PDMA_PRISET_FPRISET3_Msk         (0x1ul << PDMA_PRISET_FPRISET3_Pos)               /*!< PDMA_T::PRISET: FPRISET3 Mask          */
N
N#define PDMA_PRISET_FPRISET4_Pos         (4)                                               /*!< PDMA_T::PRISET: FPRISET4 Position      */
N#define PDMA_PRISET_FPRISET4_Msk         (0x1ul << PDMA_PRISET_FPRISET4_Pos)               /*!< PDMA_T::PRISET: FPRISET4 Mask          */
N
N#define PDMA_PRICLR_FPRICLR0_Pos         (0)                                               /*!< PDMA_T::PRICLR: FPRICLR0 Position      */
N#define PDMA_PRICLR_FPRICLR0_Msk         (0x1ul << PDMA_PRICLR_FPRICLR0_Pos)               /*!< PDMA_T::PRICLR: FPRICLR0 Mask          */
N
N#define PDMA_PRICLR_FPRICLR1_Pos         (1)                                               /*!< PDMA_T::PRICLR: FPRICLR1 Position      */
N#define PDMA_PRICLR_FPRICLR1_Msk         (0x1ul << PDMA_PRICLR_FPRICLR1_Pos)               /*!< PDMA_T::PRICLR: FPRICLR1 Mask          */
N
N#define PDMA_PRICLR_FPRICLR2_Pos         (2)                                               /*!< PDMA_T::PRICLR: FPRICLR2 Position      */
N#define PDMA_PRICLR_FPRICLR2_Msk         (0x1ul << PDMA_PRICLR_FPRICLR2_Pos)               /*!< PDMA_T::PRICLR: FPRICLR2 Mask          */
N
N#define PDMA_PRICLR_FPRICLR3_Pos         (3)                                               /*!< PDMA_T::PRICLR: FPRICLR3 Position      */
N#define PDMA_PRICLR_FPRICLR3_Msk         (0x1ul << PDMA_PRICLR_FPRICLR3_Pos)               /*!< PDMA_T::PRICLR: FPRICLR3 Mask          */
N
N#define PDMA_PRICLR_FPRICLR4_Pos         (4)                                               /*!< PDMA_T::PRICLR: FPRICLR4 Position      */
N#define PDMA_PRICLR_FPRICLR4_Msk         (0x1ul << PDMA_PRICLR_FPRICLR4_Pos)               /*!< PDMA_T::PRICLR: FPRICLR4 Mask          */
N
N#define PDMA_INTEN_INTEN0_Pos            (0)                                               /*!< PDMA_T::INTEN: INTEN0 Position         */
N#define PDMA_INTEN_INTEN0_Msk            (0x1ul << PDMA_INTEN_INTEN0_Pos)                  /*!< PDMA_T::INTEN: INTEN0 Mask             */
N
N#define PDMA_INTEN_INTEN1_Pos            (1)                                               /*!< PDMA_T::INTEN: INTEN1 Position         */
N#define PDMA_INTEN_INTEN1_Msk            (0x1ul << PDMA_INTEN_INTEN1_Pos)                  /*!< PDMA_T::INTEN: INTEN1 Mask             */
N
N#define PDMA_INTEN_INTEN2_Pos            (2)                                               /*!< PDMA_T::INTEN: INTEN2 Position         */
N#define PDMA_INTEN_INTEN2_Msk            (0x1ul << PDMA_INTEN_INTEN2_Pos)                  /*!< PDMA_T::INTEN: INTEN2 Mask             */
N
N#define PDMA_INTEN_INTEN3_Pos            (3)                                               /*!< PDMA_T::INTEN: INTEN3 Position         */
N#define PDMA_INTEN_INTEN3_Msk            (0x1ul << PDMA_INTEN_INTEN3_Pos)                  /*!< PDMA_T::INTEN: INTEN3 Mask             */
N
N#define PDMA_INTEN_INTEN4_Pos            (4)                                               /*!< PDMA_T::INTEN: INTEN4 Position         */
N#define PDMA_INTEN_INTEN4_Msk            (0x1ul << PDMA_INTEN_INTEN4_Pos)                  /*!< PDMA_T::INTEN: INTEN4 Mask             */
N
N#define PDMA_INTSTS_ABTIF_Pos            (0)                                               /*!< PDMA_T::INTSTS: ABTIF Position         */
N#define PDMA_INTSTS_ABTIF_Msk            (0x1ul << PDMA_INTSTS_ABTIF_Pos)                  /*!< PDMA_T::INTSTS: ABTIF Mask             */
N
N#define PDMA_INTSTS_TDIF_Pos             (1)                                               /*!< PDMA_T::INTSTS: TDIF Position          */
N#define PDMA_INTSTS_TDIF_Msk             (0x1ul << PDMA_INTSTS_TDIF_Pos)                   /*!< PDMA_T::INTSTS: TDIF Mask              */
N
N#define PDMA_INTSTS_TEIF_Pos             (2)                                               /*!< PDMA_T::INTSTS: TEIF Position          */
N#define PDMA_INTSTS_TEIF_Msk             (0x1ul << PDMA_INTSTS_TEIF_Pos)                   /*!< PDMA_T::INTSTS: TEIF Mask              */
N
N#define PDMA_INTSTS_REQTOF0_Pos          (8)                                               /*!< PDMA_T::INTSTS: REQTOF0 Position       */
N#define PDMA_INTSTS_REQTOF0_Msk          (0x1ul << PDMA_INTSTS_REQTOF0_Pos)                /*!< PDMA_T::INTSTS: REQTOF0 Mask           */
N
N#define PDMA_INTSTS_REQTOF1_Pos          (9)                                               /*!< PDMA_T::INTSTS: REQTOF1 Position       */
N#define PDMA_INTSTS_REQTOF1_Msk          (0x1ul << PDMA_INTSTS_REQTOF1_Pos)                /*!< PDMA_T::INTSTS: REQTOF1 Mask           */
N
N#define PDMA_ABTSTS_ABTIF0_Pos           (0)                                               /*!< PDMA_T::ABTSTS: ABTIF0 Position        */
N#define PDMA_ABTSTS_ABTIF0_Msk           (0x1ul << PDMA_ABTSTS_ABTIF0_Pos)                 /*!< PDMA_T::ABTSTS: ABTIF0 Mask            */
N
N#define PDMA_ABTSTS_ABTIF1_Pos           (1)                                               /*!< PDMA_T::ABTSTS: ABTIF1 Position        */
N#define PDMA_ABTSTS_ABTIF1_Msk           (0x1ul << PDMA_ABTSTS_ABTIF1_Pos)                 /*!< PDMA_T::ABTSTS: ABTIF1 Mask            */
N
N#define PDMA_ABTSTS_ABTIF2_Pos           (2)                                               /*!< PDMA_T::ABTSTS: ABTIF2 Position        */
N#define PDMA_ABTSTS_ABTIF2_Msk           (0x1ul << PDMA_ABTSTS_ABTIF2_Pos)                 /*!< PDMA_T::ABTSTS: ABTIF2 Mask            */
N
N#define PDMA_ABTSTS_ABTIF3_Pos           (3)                                               /*!< PDMA_T::ABTSTS: ABTIF3 Position        */
N#define PDMA_ABTSTS_ABTIF3_Msk           (0x1ul << PDMA_ABTSTS_ABTIF3_Pos)                 /*!< PDMA_T::ABTSTS: ABTIF3 Mask            */
N
N#define PDMA_ABTSTS_ABTIF4_Pos           (4)                                               /*!< PDMA_T::ABTSTS: ABTIF4 Position        */
N#define PDMA_ABTSTS_ABTIF4_Msk           (0x1ul << PDMA_ABTSTS_ABTIF4_Pos)                 /*!< PDMA_T::ABTSTS: ABTIF4 Mask            */
N
N#define PDMA_TDSTS_TDIF0_Pos             (0)                                               /*!< PDMA_T::TDSTS: TDIF0 Position          */
N#define PDMA_TDSTS_TDIF0_Msk             (0x1ul << PDMA_TDSTS_TDIF0_Pos)                   /*!< PDMA_T::TDSTS: TDIF0 Mask              */
N
N#define PDMA_TDSTS_TDIF1_Pos             (1)                                               /*!< PDMA_T::TDSTS: TDIF1 Position          */
N#define PDMA_TDSTS_TDIF1_Msk             (0x1ul << PDMA_TDSTS_TDIF1_Pos)                   /*!< PDMA_T::TDSTS: TDIF1 Mask              */
N
N#define PDMA_TDSTS_TDIF2_Pos             (2)                                               /*!< PDMA_T::TDSTS: TDIF2 Position          */
N#define PDMA_TDSTS_TDIF2_Msk             (0x1ul << PDMA_TDSTS_TDIF2_Pos)                   /*!< PDMA_T::TDSTS: TDIF2 Mask              */
N
N#define PDMA_TDSTS_TDIF3_Pos             (3)                                               /*!< PDMA_T::TDSTS: TDIF3 Position          */
N#define PDMA_TDSTS_TDIF3_Msk             (0x1ul << PDMA_TDSTS_TDIF3_Pos)                   /*!< PDMA_T::TDSTS: TDIF3 Mask              */
N
N#define PDMA_TDSTS_TDIF4_Pos             (4)                                               /*!< PDMA_T::TDSTS: TDIF4 Position          */
N#define PDMA_TDSTS_TDIF4_Msk             (0x1ul << PDMA_TDSTS_TDIF4_Pos)                   /*!< PDMA_T::TDSTS: TDIF4 Mask              */
N
N#define PDMA_SCATSTS_TEMPTYF0_Pos        (0)                                               /*!< PDMA_T::SCATST: TEMPTYF0 Position      */
N#define PDMA_SCATSTS_TEMPTYF0_Msk        (0x1ul << PDMA_SCATSTS_TEMPTYF0_Pos)              /*!< PDMA_T::SCATST: TEMPTYF0 Mask          */
N
N#define PDMA_SCATSTS_TEMPTYF1_Pos        (1)                                               /*!< PDMA_T::SCATST: TEMPTYF1 Position      */
N#define PDMA_SCATSTS_TEMPTYF1_Msk        (0x1ul << PDMA_SCATSTS_TEMPTYF1_Pos)              /*!< PDMA_T::SCATST: TEMPTYF1 Mask          */
N
N#define PDMA_SCATSTS_TEMPTYF2_Pos        (2)                                               /*!< PDMA_T::SCATST: TEMPTYF2 Position      */
N#define PDMA_SCATSTS_TEMPTYF2_Msk        (0x1ul << PDMA_SCATSTS_TEMPTYF2_Pos)              /*!< PDMA_T::SCATST: TEMPTYF2 Mask          */
N
N#define PDMA_SCATSTS_TEMPTYF3_Pos        (3)                                               /*!< PDMA_T::SCATST: TEMPTYF3 Position      */
N#define PDMA_SCATSTS_TEMPTYF3_Msk        (0x1ul << PDMA_SCATSTS_TEMPTYF3_Pos)              /*!< PDMA_T::SCATST: TEMPTYF3 Mask          */
N
N#define PDMA_SCATSTS_TEMPTYF4_Pos        (4)                                               /*!< PDMA_T::SCATST: TEMPTYF4 Position      */
N#define PDMA_SCATSTS_TEMPTYF4_Msk        (0x1ul << PDMA_SCATSTS_TEMPTYF4_Pos)              /*!< PDMA_T::SCATST: TEMPTYF4 Mask          */
N
N#define PDMA_TACTSTS_TXACTF0_Pos         (0)                                               /*!< PDMA_T::TACTSTS: TXACTF0 Position      */
N#define PDMA_TACTSTS_TXACTF0_Msk         (0x1ul << PDMA_TACTSTS_TXACTF0_Pos)               /*!< PDMA_T::TACTSTS: TXACTF0 Mask          */
N
N#define PDMA_TACTSTS_TXACTF1_Pos         (1)                                               /*!< PDMA_T::TACTSTS: TXACTF1 Position      */
N#define PDMA_TACTSTS_TXACTF1_Msk         (0x1ul << PDMA_TACTSTS_TXACTF1_Pos)               /*!< PDMA_T::TACTSTS: TXACTF1 Mask          */
N
N#define PDMA_TACTSTS_TXACTF2_Pos         (2)                                               /*!< PDMA_T::TACTSTS: TXACTF2 Position      */
N#define PDMA_TACTSTS_TXACTF2_Msk         (0x1ul << PDMA_TACTSTS_TXACTF2_Pos)               /*!< PDMA_T::TACTSTS: TXACTF2 Mask          */
N
N#define PDMA_TACTSTS_TXACTF3_Pos         (3)                                               /*!< PDMA_T::TACTSTS: TXACTF3 Position      */
N#define PDMA_TACTSTS_TXACTF3_Msk         (0x1ul << PDMA_TACTSTS_TXACTF3_Pos)               /*!< PDMA_T::TACTSTS: TXACTF3 Mask          */
N
N#define PDMA_TACTSTS_TXACTF4_Pos         (4)                                               /*!< PDMA_T::TACTSTS: TXACTF4 Position      */
N#define PDMA_TACTSTS_TXACTF4_Msk         (0x1ul << PDMA_TACTSTS_TXACTF4_Pos)               /*!< PDMA_T::TACTSTS: TXACTF4 Mask          */
N
N#define PDMA_TOUTPSC_TOUTPSC0_Pos        (0)                                               /*!< PDMA_T::TOUTPSC: TOUTPSC0 Position     */
N#define PDMA_TOUTPSC_TOUTPSC0_Msk        (0x7ul << PDMA_TOUTPSC_TOUTPSC0_Pos)              /*!< PDMA_T::TOUTPSC: TOUTPSC0 Mask         */
N
N#define PDMA_TOUTPSC_TOUTPSC1_Pos        (4)                                               /*!< PDMA_T::TOUTPSC: TOUTPSC1 Position     */
N#define PDMA_TOUTPSC_TOUTPSC1_Msk        (0x7ul << PDMA_TOUTPSC_TOUTPSC1_Pos)              /*!< PDMA_T::TOUTPSC: TOUTPSC1 Mask         */
N
N#define PDMA_TOUTEN_TOUTEN0_Pos          (0)                                               /*!< PDMA_T::TOUTEN: TOUTEN0 Position       */
N#define PDMA_TOUTEN_TOUTEN0_Msk          (0x1ul << PDMA_TOUTEN_TOUTEN0_Pos)                /*!< PDMA_T::TOUTEN: TOUTEN0 Mask           */
N
N#define PDMA_TOUTEN_TOUTEN1_Pos          (1)                                               /*!< PDMA_T::TOUTEN: TOUTEN1 Position       */
N#define PDMA_TOUTEN_TOUTEN1_Msk          (0x1ul << PDMA_TOUTEN_TOUTEN1_Pos)                /*!< PDMA_T::TOUTEN: TOUTEN1 Mask           */
N
N#define PDMA_TOUTIEN_TOUTIEN0_Pos        (0)                                               /*!< PDMA_T::TOUTIEN: TOUTIEN0 Position     */
N#define PDMA_TOUTIEN_TOUTIEN0_Msk        (0x1ul << PDMA_TOUTIEN_TOUTIEN0_Pos)              /*!< PDMA_T::TOUTIEN: TOUTIEN0 Mask         */
N
N#define PDMA_TOUTIEN_TOUTIEN1_Pos        (1)                                               /*!< PDMA_T::TOUTIEN: TOUTIEN1 Position     */
N#define PDMA_TOUTIEN_TOUTIEN1_Msk        (0x1ul << PDMA_TOUTIEN_TOUTIEN1_Pos)              /*!< PDMA_T::TOUTIEN: TOUTIEN1 Mask         */
N
N#define PDMA_SCATBA_SCATBA_Pos           (16)                                              /*!< PDMA_T::SCATBA: SCATBA Position        */
N#define PDMA_SCATBA_SCATBA_Msk           (0xfffful << PDMA_SCATBA_SCATBA_Pos)              /*!< PDMA_T::SCATBA: SCATBA Mask            */
N
N#define PDMA_TOC0_1_TOC0_Pos             (0)                                               /*!< PDMA_T::TOC0_1: TOC0 Position          */
N#define PDMA_TOC0_1_TOC0_Msk             (0xfffful << PDMA_TOC0_1_TOC0_Pos)                /*!< PDMA_T::TOC0_1: TOC0 Mask              */
N
N#define PDMA_TOC0_1_TOC1_Pos             (16)                                              /*!< PDMA_T::TOC0_1: TOC1 Position          */
N#define PDMA_TOC0_1_TOC1_Msk             (0xfffful << PDMA_TOC0_1_TOC1_Pos)                /*!< PDMA_T::TOC0_1: TOC1 Mask              */
N
N#define PDMA_RESET_RESET0_Pos            (0)                                               /*!< PDMA_T::RESET: RESET0 Position         */
N#define PDMA_RESET_RESET0_Msk            (0x1ul << PDMA_RESET_RESET0_Pos)                  /*!< PDMA_T::RESET: RESET0 Mask             */
N
N#define PDMA_RESET_RESET1_Pos            (1)                                               /*!< PDMA_T::RESET: RESET1 Position         */
N#define PDMA_RESET_RESET1_Msk            (0x1ul << PDMA_RESET_RESET1_Pos)                  /*!< PDMA_T::RESET: RESET1 Mask             */
N
N#define PDMA_RESET_RESET2_Pos            (2)                                               /*!< PDMA_T::RESET: RESET2 Position         */
N#define PDMA_RESET_RESET2_Msk            (0x1ul << PDMA_RESET_RESET2_Pos)                  /*!< PDMA_T::RESET: RESET2 Mask             */
N
N#define PDMA_RESET_RESET3_Pos            (3)                                               /*!< PDMA_T::RESET: RESET3 Position         */
N#define PDMA_RESET_RESET3_Msk            (0x1ul << PDMA_RESET_RESET3_Pos)                  /*!< PDMA_T::RESET: RESET3 Mask             */
N
N#define PDMA_RESET_RESET4_Pos            (4)                                               /*!< PDMA_T::RESET: RESET4 Position         */
N#define PDMA_RESET_RESET4_Msk            (0x1ul << PDMA_RESET_RESET4_Pos)                  /*!< PDMA_T::RESET: RESET4 Mask             */
N
N#define PDMA_REQSEL0_3_REQSRC0_Pos       (0)                                               /*!< PDMA_T::REQSEL0_3: REQSRC0 Position    */
N#define PDMA_REQSEL0_3_REQSRC0_Msk       (0x3ful << PDMA_REQSEL0_3_REQSRC0_Pos)            /*!< PDMA_T::REQSEL0_3: REQSRC0 Mask        */
N
N#define PDMA_REQSEL0_3_REQSRC1_Pos       (8)                                               /*!< PDMA_T::REQSEL0_3: REQSRC1 Position    */
N#define PDMA_REQSEL0_3_REQSRC1_Msk       (0x3ful << PDMA_REQSEL0_3_REQSRC1_Pos)            /*!< PDMA_T::REQSEL0_3: REQSRC1 Mask        */
N
N#define PDMA_REQSEL0_3_REQSRC2_Pos       (16)                                              /*!< PDMA_T::REQSEL0_3: REQSRC2 Position    */
N#define PDMA_REQSEL0_3_REQSRC2_Msk       (0x3ful << PDMA_REQSEL0_3_REQSRC2_Pos)            /*!< PDMA_T::REQSEL0_3: REQSRC2 Mask        */
N
N#define PDMA_REQSEL0_3_REQSRC3_Pos       (24)                                              /*!< PDMA_T::REQSEL0_3: REQSRC3 Position    */
N#define PDMA_REQSEL0_3_REQSRC3_Msk       (0x3ful << PDMA_REQSEL0_3_REQSRC3_Pos)            /*!< PDMA_T::REQSEL0_3: REQSRC3 Mask        */
N
N#define PDMA_REQSEL4_REQSRC4_Pos         (0)                                               /*!< PDMA_T::REQSEL4: REQSRC4 Position      */
N#define PDMA_REQSEL4_REQSRC4_Msk         (0x3ful << PDMA_REQSEL4_REQSRC4_Pos)              /*!< PDMA_T::REQSEL4: REQSRC4 Mask          */
N
N/**@}*/ /* PDMA_CONST */
N/**@}*/ /* end of PDMA register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __PDMA_REG_H__ */
L 160 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "pwm_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\pwm_reg.h" 1
N/**************************************************************************//**
N * @file     pwm_reg.h
N * @version  V1.00
N * @brief    PWM register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __PWM_REG_H__
N#define __PWM_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup PWM Pulse Width Modulation Controller (PWM)
N    Memory Mapped Structure for PWM Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var PWM_T::CTL0
N     * Offset: 0x00  PWM Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CTRLDn    |Center Load Enable Bits
N     * |        |          |0 = Center Lodaing mode is disable for corresponding PWM channel n
N     * |        |          |1 = Center Lodaing mode is enable for corresponding PWM channel n
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |In up-down counter type, PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the center point of a period
N     * |[16]    |IMMLDENn  |Immediately Load Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = PERIOD will load to PBUF at the end point of each period
N     * |        |          |CMPDAT will load to CMPBUF at the end point or center point of each period by setting CTRLD bit.
N     * |        |          |1 = PERIOD/CMPDAT will load to PBUF and CMPBUF immediately when software update PERIOD/CMPDAT.
N     * |        |          |Note: If IMMLDENn is enabled, WINLDENn and CTRLDn will be invalid.
N     * |[30]    |DBGHALT   |ICE Debug Mode Counter Halt (Write Protect)
N     * |        |          |If counter halt is enabled, PWM all counters will keep current value until exit ICE debug mode.
N     * |        |          |0 = ICE debug mode counter halt disable.
N     * |        |          |1 = ICE debug mode counter halt enable.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[31]    |DBGTRIOFF |ICE Debug Mode Acknowledge Disable (Write Protect)
N     * |        |          |0 = ICE debug mode acknowledgement affects PWM output.
N     * |        |          |PWM pin will be forced as tri-state while ICE debug mode acknowledged.
N     * |        |          |1 = ICE debug mode acknowledgement disabled.
N     * |        |          |PWM pin will keep output no matter ICE debug mode acknowledged or not.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::CTL1
N     * Offset: 0x04  PWM Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |CNTTYPE0  |PWM Counter Behavior Type 0
N     * |        |          |The two bits control channel1 and channel0
N     * |        |          |00 = Up counter type (supports in capture mode).
N     * |        |          |01 = Down count type (supports in capture mode).
N     * |        |          |10 = Up-down counter type.
N     * |        |          |11 = Reserved.
N     * |[5:4]   |CNTTYPE2  |PWM Counter Behavior Type 2
N     * |        |          |The two bits control channel3 and channel2
N     * |        |          |00 = Up counter type (supports in capture mode).
N     * |        |          |01 = Down count type (supports in capture mode).
N     * |        |          |10 = Up-down counter type.
N     * |        |          |11 = Reserved.
N     * |[9:8]   |CNTTYPE4  |PWM Counter Behavior Type 4
N     * |        |          |The two bits control channel5 and channel4
N     * |        |          |00 = Up counter type (supports in capture mode).
N     * |        |          |01 = Down count type (supports in capture mode).
N     * |        |          |10 = Up-down counter type.
N     * |        |          |11 = Reserved.
N     * |[26:24] |PWMMODEn  |PWM Mode
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = PWM independent mode.
N     * |        |          |1 = PWM complementary mode.
N     * |        |          |Note: When operating in group function, these bits must all set to the same mode.
N     * @var PWM_T::CLKSRC
N     * Offset: 0x10  PWM Clock Source Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |ECLKSRC0  |PWM_CH01 External Clock Source Select
N     * |        |          |000 = PWMx_CLK, x denotes 0 or 1.
N     * |        |          |001 = TIMER0 overflow.
N     * |        |          |010 = TIMER1 overflow.
N     * |        |          |011 = TIMER2 overflow.
N     * |        |          |100 = TIMER3 overflow.
N     * |        |          |Others = Reserved.
N     * |[10:8]  |ECLKSRC2  |PWM_CH23 External Clock Source Select
N     * |        |          |000 = PWMx_CLK, x denotes 0 or 1.
N     * |        |          |001 = TIMER0 overflow.
N     * |        |          |010 = TIMER1 overflow.
N     * |        |          |011 = TIMER2 overflow.
N     * |        |          |100 = TIMER3 overflow.
N     * |        |          |Others = Reserved.
N     * |[18:16] |ECLKSRC4  |PWM_CH45 External Clock Source Select
N     * |        |          |000 = PWMx_CLK, x denotes 0 or 1.
N     * |        |          |001 = TIMER0 overflow.
N     * |        |          |010 = TIMER1 overflow.
N     * |        |          |011 = TIMER2 overflow.
N     * |        |          |100 = TIMER3 overflow.
N     * |        |          |Others = Reserved.
N     * @var PWM_T::CLKPSC0_1
N     * Offset: 0x14  PWM Clock Pre-scale Register 0_1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |CLKPSC    |PWM Counter Clock Pre-scale
N     * |        |          |The clock of PWM counter is decided by clock prescaler
N     * |        |          |Each PWM pair share one PWM counter clock prescaler
N     * |        |          |The clock of PWM counter is divided by (CLKPSC+ 1)
N     * @var PWM_T::CLKPSC2_3
N     * Offset: 0x18  PWM Clock Pre-scale Register 2_3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |CLKPSC    |PWM Counter Clock Pre-scale
N     * |        |          |The clock of PWM counter is decided by clock prescaler
N     * |        |          |Each PWM pair share one PWM counter clock prescaler
N     * |        |          |The clock of PWM counter is divided by (CLKPSC+ 1)
N     * @var PWM_T::CLKPSC4_5
N     * Offset: 0x1C  PWM Clock Pre-scale Register 4_5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |CLKPSC    |PWM Counter Clock Pre-scale
N     * |        |          |The clock of PWM counter is decided by clock prescaler
N     * |        |          |Each PWM pair share one PWM counter clock prescaler
N     * |        |          |The clock of PWM counter is divided by (CLKPSC+ 1)
N     * @var PWM_T::CNTEN
N     * Offset: 0x20  PWM Counter Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTEN0    |PWM Counter Enable 0
N     * |        |          |0 = PWM Counter and clock prescaler Stop Running.
N     * |        |          |1 = PWM Counter and clock prescaler Start Running.
N     * |[2]     |CNTEN2    |PWM Counter Enable 2
N     * |        |          |0 = PWM Counter and clock prescaler Stop Running.
N     * |        |          |1 = PWM Counter and clock prescaler Start Running.
N     * |[4]     |CNTEN4    |PWM Counter Enable 4
N     * |        |          |0 = PWM Counter and clock prescaler Stop Running.
N     * |        |          |1 = PWM Counter and clock prescaler Start Running.
N     * @var PWM_T::CNTCLR
N     * Offset: 0x24  PWM Clear Counter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTCLR0   |Clear PWM Counter Control Bit 0
N     * |        |          |It is automatically cleared by hardware.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear 16-bit PWM counter to 0000H.
N     * |[2]     |CNTCLR2   |Clear PWM Counter Control Bit 2
N     * |        |          |It is automatically cleared by hardware.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear 16-bit PWM counter to 0000H.
N     * |[4]     |CNTCLR4   |Clear PWM Counter Control Bit 4
N     * |        |          |It is automatically cleared by hardware.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear 16-bit PWM counter to 0000H.
N     * @var PWM_T::PERIOD
N     * Offset: 0x30~0x44  PWM Period Register 0/2/4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |PERIOD    |PWM Period Register
N     * |        |          |Up-Count mode: In this mode, PWM counter counts from 0 to PERIOD, and restarts from 0.
N     * |        |          |Down-Count mode: In this mode, PWM counter counts from PERIOD to 0, and restarts from PERIOD.
N     * |        |          |PWM period time = (PERIOD+1) * PWM_CLK period.
N     * |        |          |Up-Down-Count mode: In this mode, PWM counter counts from 0 to PERIOD, then decrements to 0 and repeats again.
N     * |        |          |PWM period time = 2 * PERIOD * PWM_CLK period.
N     * @var PWM_T::CMPDAT
N     * Offset: 0x50~0x64  PWM Comparator Register 0~5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CMP       |PWM Comparator Register
N     * |        |          |CMP use to compare with CNT to generate PWM waveform, interrupt and trigger ADC.
N     * |        |          |In independent mode, PWM_CMPDAT0~5 denote as 6 independent PWM_CH0~5 compared point.
N     * |        |          |In complementary mode, PWM_CMPDAT0, 2, 4 denote as first compared point, and PWM_CMPDAT1, 3, 5 denote as second compared point for the corresponding 3 complementary pairs PWM_CH0 and PWM_CH1, PWM_CH2 and PWM_CH3, PWM_CH4 and PWM_CH5.
N     * @var PWM_T::DTCTL0_1
N     * Offset: 0x70  PWM Dead-Time Control Register 0_1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |DTCNT     |Dead-time Counter (Write Protect)
N     * |        |          |The dead-time can be calculated from the following formula:
N     * |        |          |Dead-time = (DTCNT[11:0]+1) * PWM_CLK period. If DTCKSEL bit is 0.
N     * |        |          |Dead-time = (DTCNT+1) * (CLKPSC (PWM_CLKPSCn [11:0])+1)*PWMx_CLK period, If DTCKSEL bit is 1.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[16]    |DTEN      |Enable Dead-time Insertion for PWM Pair (PWM_CH0, PWM_CH1) (PWM_CH2, PWM_CH3) (PWM_CH4, PWM_CH5) (Write Protect)
N     * |        |          |Dead-time insertion is only active when this pair of complementary PWM is enabled
N     * |        |          |If dead- time insertion is inactive, the outputs of pin pair are complementary without any delay.
N     * |        |          |0 = Dead-time insertion Disabled on the pin pair.
N     * |        |          |1 = Dead-time insertion Enabled on the pin pair.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[24]    |DTCKSEL   |Dead-time Clock Select (Write Protect)
N     * |        |          |0 = Dead-time clock source from PWM_CLK.
N     * |        |          |1 = Dead-time clock source from prescaler output.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::DTCTL2_3
N     * Offset: 0x74  PWM Dead-Time Control Register 2_3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |DTCNT     |Dead-time Counter (Write Protect)
N     * |        |          |The dead-time can be calculated from the following formula:
N     * |        |          |Dead-time = (DTCNT[11:0]+1) * PWM_CLK period. If DTCKSEL bit is 0.
N     * |        |          |Dead-time = (DTCNT+1) * (CLKPSC (PWM_CLKPSCn [11:0])+1)*PWMx_CLK period, If DTCKSEL bit is 1.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[16]    |DTEN      |Enable Dead-time Insertion for PWM Pair (PWM_CH0, PWM_CH1) (PWM_CH2, PWM_CH3) (PWM_CH4, PWM_CH5) (Write Protect)
N     * |        |          |Dead-time insertion is only active when this pair of complementary PWM is enabled
N     * |        |          |If dead- time insertion is inactive, the outputs of pin pair are complementary without any delay.
N     * |        |          |0 = Dead-time insertion Disabled on the pin pair.
N     * |        |          |1 = Dead-time insertion Enabled on the pin pair.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[24]    |DTCKSEL   |Dead-time Clock Select (Write Protect)
N     * |        |          |0 = Dead-time clock source from PWM_CLK.
N     * |        |          |1 = Dead-time clock source from prescaler output.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::DTCTL4_5
N     * Offset: 0x78  PWM Dead-Time Control Register 4_5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |DTCNT     |Dead-time Counter (Write Protect)
N     * |        |          |The dead-time can be calculated from the following formula:
N     * |        |          |Dead-time = (DTCNT[11:0]+1) * PWM_CLK period. If DTCKSEL bit is 0.
N     * |        |          |Dead-time = (DTCNT+1) * (CLKPSC (PWM_CLKPSCn [11:0])+1)*PWMx_CLK period, If DTCKSEL bit is 1.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[16]    |DTEN      |Enable Dead-time Insertion for PWM Pair (PWM_CH0, PWM_CH1) (PWM_CH2, PWM_CH3) (PWM_CH4, PWM_CH5) (Write Protect)
N     * |        |          |Dead-time insertion is only active when this pair of complementary PWM is enabled
N     * |        |          |If dead- time insertion is inactive, the outputs of pin pair are complementary without any delay.
N     * |        |          |0 = Dead-time insertion Disabled on the pin pair.
N     * |        |          |1 = Dead-time insertion Enabled on the pin pair.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[24]    |DTCKSEL   |Dead-time Clock Select (Write Protect)
N     * |        |          |0 = Dead-time clock source from PWM_CLK.
N     * |        |          |1 = Dead-time clock source from prescaler output.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::CNT
N     * Offset: 0x90~0xA4  PWM Counter Register 0/2/4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CNT       |PWM Data Register (Read Only)
N     * |        |          |User can monitor CNT to know the current value in 16-bit period counter.
N     * |[16]    |DIRF      |PWM Direction Indicator Flag (Read Only)
N     * |        |          |0 = Counter is Down count.
N     * |        |          |1 = Counter is UP count.
N     * @var PWM_T::WGCTL0
N     * Offset: 0xB0  PWM Generation Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |ZPCTL0    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to zero.
N     * |[3:2]   |ZPCTL1    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to zero.
N     * |[5:4]   |ZPCTL2    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to zero.
N     * |[7:6]   |ZPCTL3    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to zero.
N     * |[9:8]   |ZPCTL4    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to zero.
N     * |[11:10] |ZPCTL5    |PWM Zero Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM zero point output Low.
N     * |        |          |10 = PWM zero point output High.
N     * |        |          |11 = PWM zero point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to zero.
N     * |[17:16] |PRDPCTL0  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note: This bit is center point control when PWM counter operating in up-down counter type.
N     * |[19:18] |PRDPCTL1  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note: This bit is center point control when PWM counter operating in up-down counter type.
N     * |[21:20] |PRDPCTL2  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note: This bit is center point control when PWM counter operating in up-down counter type.
N     * |[23:22] |PRDPCTL3  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note: This bit is center point control when PWM counter operating in up-down counter type.
N     * |[25:24] |PRDPCTL4  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note: This bit is center point control when PWM counter operating in up-down counter type.
N     * |[27:26] |PRDPCTL5  |PWM Period (Center) Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM period (center) point output Low.
N     * |        |          |10 = PWM period (center) point output High.
N     * |        |          |11 = PWM period (center) point output Toggle.
N     * |        |          |PWM can control output level when PWM counter count to (PERIODn+1).
N     * |        |          |Note: This bit is center point control when PWM counter operating in up-down counter type.
N     * @var PWM_T::WGCTL1
N     * Offset: 0xB4  PWM Generation Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |CMPUCTL0  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[3:2]   |CMPUCTL1  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[5:4]   |CMPUCTL2  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[7:6]   |CMPUCTL3  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[9:8]   |CMPUCTL4  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[11:10] |CMPUCTL5  |PWM Compare Up Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare up point output Low.
N     * |        |          |10 = PWM compare up point output High.
N     * |        |          |11 = PWM compare up point output Toggle.
N     * |        |          |PWM can control output level when PWM counter up count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPUCTL1, 3, 5 use as another CMPUCTL for channel 0, 2, 4.
N     * |[17:16] |CMPDCTL0  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * |[19:18] |CMPDCTL1  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * |[21:20] |CMPDCTL2  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * |[23:22] |CMPDCTL3  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * |[25:24] |CMPDCTL4  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * |[27:26] |CMPDCTL5  |PWM Compare Down Point Control
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |00 = Do nothing.
N     * |        |          |01 = PWM compare down point output Low.
N     * |        |          |10 = PWM compare down point output High.
N     * |        |          |11 = PWM compare down point output Toggle.
N     * |        |          |PWM can control output level when PWM counter down count to CMPDAT.
N     * |        |          |Note: In complementary mode, CMPDCTL1, 3, 5 use as another CMPDCTL for channel 0, 2, 4.
N     * @var PWM_T::MSKEN
N     * Offset: 0xB8  PWM Mask Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |MSKENn    |PWM Mask Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |The PWM output signal will be masked when this bit is enabled
N     * |        |          |The corresponding PWM channel n will output MSKDATn (PWM_MSK[5:0]) data.
N     * |        |          |0 = PWM output signal is non-masked.
N     * |        |          |1 = PWM output signal is masked and output MSKDATn data.
N     * @var PWM_T::MSK
N     * Offset: 0xBC  PWM Mask Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |MSKDATn   |PWM Mask Data Bit
N     * |        |          |This data bit control the state of PWMn output pin, if corresponding mask function is enabled
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Output logic low to PWMn.
N     * |        |          |1 = Output logic high to PWMn.
N     * @var PWM_T::BNF
N     * Offset: 0xC0  PWM Brake Noise Filter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BRK0FEN   |PWM Brake 0 Noise Filter Enable Bit
N     * |        |          |0 = Noise filter of PWM Brake 0 Disabled.
N     * |        |          |1 = Noise filter of PWM Brake 0 Enabled.
N     * |[3:1]   |BRK0FCS   |Brake 0 Edge Detector Filter Clock Selection
N     * |        |          |000 = Filter clock is HCLK.
N     * |        |          |001 = Filter clock is HCLK/2.
N     * |        |          |010 = Filter clock is HCLK/4.
N     * |        |          |011 = Filter clock is HCLK/8.
N     * |        |          |100 = Filter clock is HCLK/16.
N     * |        |          |101 = Filter clock is HCLK/32.
N     * |        |          |110 = Filter clock is HCLK/64.
N     * |        |          |111 = Filter clock is HCLK/128.
N     * |[6:4]   |BRK0FCNT  |Brake 0 Edge Detector Filter Count
N     * |        |          |The register bits control the Brake0 filter counter to count from 0 to BRK1FCNT.
N     * |[7]     |BRK0PINV  |Brake 0 Pin Inverse
N     * |        |          |0 = The state of pin PWMx_BRAKE0 is passed to the negative edge detector.
N     * |        |          |1 = The inversed state of pin PWMx_BRAKE10 is passed to the negative edge detector.
N     * |[8]     |BRK1FEN   |PWM Brake 1 Noise Filter Enable Bit
N     * |        |          |0 = Noise filter of PWM Brake 1 Disabled.
N     * |        |          |1 = Noise filter of PWM Brake 1 Enabled.
N     * |[11:9]  |BRK1FCS   |Brake 1 Edge Detector Filter Clock Selection
N     * |        |          |000 = Filter clock = HCLK.
N     * |        |          |001 = Filter clock = HCLK/2.
N     * |        |          |010 = Filter clock = HCLK/4.
N     * |        |          |011 = Filter clock = HCLK/8.
N     * |        |          |100 = Filter clock = HCLK/16.
N     * |        |          |101 = Filter clock = HCLK/32.
N     * |        |          |110 = Filter clock = HCLK/64.
N     * |        |          |111 = Filter clock = HCLK/128.
N     * |[14:12] |BRK1FCNT  |Brake 1 Edge Detector Filter Count
N     * |        |          |The register bits control the Brake1 filter counter to count from 0 to BRK1FCNT.
N     * |[15]    |BRK1PINV  |Brake 1 Pin Inverse
N     * |        |          |0 = The state of pin PWMx_BRAKE1 is passed to the negative edge detector.
N     * |        |          |1 = The inversed state of pin PWMx_BRAKE1 is passed to the negative edge detector.
N     * |[16]    |BK0SRC    |Brake 0 Pin Source Select
N     * |        |          |For PWM0 setting:
N     * |        |          |0 = Brake 0 pin source come from PWM0_BRAKE0.
N     * |        |          |1 = Brake 0 pin source come from PWM1_BRAKE0.
N     * |        |          |For PWM1 setting:
N     * |        |          |0 = Brake 0 pin source come from PWM1_BRAKE0.
N     * |        |          |1 = Brake 0 pin source come from PWM0_BRAKE0.
N     * |[24]    |BK1SRC    |Brake 1 Pin Source Select
N     * |        |          |For PWM0 setting:
N     * |        |          |0 = Brake 1 pin source come from PWM0_BRAKE1.
N     * |        |          |1 = Brake 1 pin source come from PWM1_BRAKE1.
N     * |        |          |For PWM1 setting:
N     * |        |          |0 = Brake 1 pin source come from PWM1_BRAKE1.
N     * |        |          |1 = Brake 1 pin source come from PWM0_BRAKE1.
N     * @var PWM_T::FAILBRK
N     * Offset: 0xC4  PWM System Fail Brake Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CSSBRKEN  |Clock Security System Detection Trigger PWM Brake Function 0 Enable Bit
N     * |        |          |0 = Brake Function triggered by CSS detection Disabled.
N     * |        |          |1 = Brake Function triggered by CSS detection Enabled.
N     * |[1]     |BODBRKEN  |Brown-out Detection Trigger PWM Brake Function 0 Enable Bit
N     * |        |          |0 = Brake Function triggered by BOD Disabled.
N     * |        |          |1 = Brake Function triggered by BOD Enabled.
N     * |[3]     |CORBRKEN  |Core Lockup Detection Trigger PWM Brake Function 0 Enable Bit
N     * |        |          |0 = Brake Function triggered by Core lockup detection Disabled.
N     * |        |          |1 = Brake Function triggered by Core lockup detection Enabled.
N     * @var PWM_T::BRKCTL0_1
N     * Offset: 0xC8  PWM Brake Edge Detect Control Register 0_1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4]     |BRKP0EEN  |Enable PWMx_BRAKE0 Pin As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = BKP0 pin as edge-detect brake source Disabled.
N     * |        |          |1 = BKP0 pin as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[5]     |BRKP1EEN  |Enable PWMx_BRAKE1 Pin As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = BKP1 pin as edge-detect brake source Disabled.
N     * |        |          |1 = BKP1 pin as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[7]     |SYSEEN    |Enable System Fail As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = System Fail condition as edge-detect brake source Disabled.
N     * |        |          |1 = System Fail condition as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[12]    |BRKP0LEN  |Enable BKP0 Pin As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = PWMx_BRAKE0 pin as level-detect brake source Disabled.
N     * |        |          |1 = PWMx_BRAKE0 pin as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[13]    |BRKP1LEN  |Enable BKP1 Pin As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = PWMx_BRAKE1 pin as level-detect brake source Disabled.
N     * |        |          |1 = PWMx_BRAKE1 pin as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[15]    |SYSLEN    |Enable System Fail As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = System Fail condition as level-detect brake source Disabled.
N     * |        |          |1 = System Fail condition as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[17:16] |BRKAEVEN  |PWM Brake Action Select for Even Channel (Write Protect)
N     * |        |          |00 = PWM even channel level-detect brake function not affect channel output.
N     * |        |          |01 = PWM even channel output tri-state when level-detect brake happened.
N     * |        |          |10 = PWM even channel output low level when level-detect brake happened.
N     * |        |          |11 = PWM even channel output high level when level-detect brake happened.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[19:18] |BRKAODD   |PWM Brake Action Select for Odd Channel (Write Protect)
N     * |        |          |00 = PWM odd channel level-detect brake function not affect channel output.
N     * |        |          |01 = PWM odd channel output tri-state when level-detect brake happened.
N     * |        |          |10 = PWM odd channel output low level when level-detect brake happened.
N     * |        |          |11 = PWM odd channel output high level when level-detect brake happened.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::BRKCTL2_3
N     * Offset: 0xCC  PWM Brake Edge Detect Control Register 2_3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4]     |BRKP0EEN  |Enable PWMx_BRAKE0 Pin As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = BKP0 pin as edge-detect brake source Disabled.
N     * |        |          |1 = BKP0 pin as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[5]     |BRKP1EEN  |Enable PWMx_BRAKE1 Pin As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = BKP1 pin as edge-detect brake source Disabled.
N     * |        |          |1 = BKP1 pin as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[7]     |SYSEEN    |Enable System Fail As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = System Fail condition as edge-detect brake source Disabled.
N     * |        |          |1 = System Fail condition as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[12]    |BRKP0LEN  |Enable BKP0 Pin As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = PWMx_BRAKE0 pin as level-detect brake source Disabled.
N     * |        |          |1 = PWMx_BRAKE0 pin as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[13]    |BRKP1LEN  |Enable BKP1 Pin As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = PWMx_BRAKE1 pin as level-detect brake source Disabled.
N     * |        |          |1 = PWMx_BRAKE1 pin as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[15]    |SYSLEN    |Enable System Fail As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = System Fail condition as level-detect brake source Disabled.
N     * |        |          |1 = System Fail condition as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[17:16] |BRKAEVEN  |PWM Brake Action Select for Even Channel (Write Protect)
N     * |        |          |00 = PWM even channel level-detect brake function not affect channel output.
N     * |        |          |01 = PWM even channel output tri-state when level-detect brake happened.
N     * |        |          |10 = PWM even channel output low level when level-detect brake happened.
N     * |        |          |11 = PWM even channel output high level when level-detect brake happened.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[19:18] |BRKAODD   |PWM Brake Action Select for Odd Channel (Write Protect)
N     * |        |          |00 = PWM odd channel level-detect brake function not affect channel output.
N     * |        |          |01 = PWM odd channel output tri-state when level-detect brake happened.
N     * |        |          |10 = PWM odd channel output low level when level-detect brake happened.
N     * |        |          |11 = PWM odd channel output high level when level-detect brake happened.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::BRKCTL4_5
N     * Offset: 0xD0  PWM Brake Edge Detect Control Register 4_5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4]     |BRKP0EEN  |Enable PWMx_BRAKE0 Pin As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = BKP0 pin as edge-detect brake source Disabled.
N     * |        |          |1 = BKP0 pin as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[5]     |BRKP1EEN  |Enable PWMx_BRAKE1 Pin As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = BKP1 pin as edge-detect brake source Disabled.
N     * |        |          |1 = BKP1 pin as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[7]     |SYSEEN    |Enable System Fail As Edge-detect Brake Source (Write Protect)
N     * |        |          |0 = System Fail condition as edge-detect brake source Disabled.
N     * |        |          |1 = System Fail condition as edge-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[12]    |BRKP0LEN  |Enable BKP0 Pin As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = PWMx_BRAKE0 pin as level-detect brake source Disabled.
N     * |        |          |1 = PWMx_BRAKE0 pin as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[13]    |BRKP1LEN  |Enable BKP1 Pin As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = PWMx_BRAKE1 pin as level-detect brake source Disabled.
N     * |        |          |1 = PWMx_BRAKE1 pin as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[15]    |SYSLEN    |Enable System Fail As Level-detect Brake Source (Write Protect)
N     * |        |          |0 = System Fail condition as level-detect brake source Disabled.
N     * |        |          |1 = System Fail condition as level-detect brake source Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[17:16] |BRKAEVEN  |PWM Brake Action Select for Even Channel (Write Protect)
N     * |        |          |00 = PWM even channel level-detect brake function not affect channel output.
N     * |        |          |01 = PWM even channel output tri-state when level-detect brake happened.
N     * |        |          |10 = PWM even channel output low level when level-detect brake happened.
N     * |        |          |11 = PWM even channel output high level when level-detect brake happened.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[19:18] |BRKAODD   |PWM Brake Action Select for Odd Channel (Write Protect)
N     * |        |          |00 = PWM odd channel level-detect brake function not affect channel output.
N     * |        |          |01 = PWM odd channel output tri-state when level-detect brake happened.
N     * |        |          |10 = PWM odd channel output low level when level-detect brake happened.
N     * |        |          |11 = PWM odd channel output high level when level-detect brake happened.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::POLCTL
N     * Offset: 0xD4  PWM Pin Polar Inverse Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |PINVn     |PWM PIN Polar Inverse Control
N     * |        |          |The register controls polarity state of PWM output
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = PWM output polar inverse Disabled.
N     * |        |          |1 = PWM output polar inverse Enabled.
N     * @var PWM_T::POEN
N     * Offset: 0xD8  PWM Output Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |POENn     |PWM Pin Output Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = PWM pin at tri-state.
N     * |        |          |1 = PWM pin in output mode.
N     * @var PWM_T::SWBRK
N     * Offset: 0xDC  PWM Software Brake Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |BRKETRGn  |PWM Edge Brake Software Trigger (Write Only) (Write Protect)
N     * |        |          |Each bit n controls the corresponding PWM pair n.
N     * |        |          |Write 1 to this bit will trigger Edge brake, and set BRKEIFn to 1 in PWM_INTSTS1 register.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[10:8]  |BRKLTRGn  |PWM Level Brake Software Trigger (Write Only) (Write Protect)
N     * |        |          |Each bit n controls the corresponding PWM pair n.
N     * |        |          |Write 1 to this bit will trigger level brake, and set BRKLIFn to 1 in PWM_INTSTS1 register.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::INTEN0
N     * Offset: 0xE0  PWM Interrupt Enable Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ZIEN0     |PWM Zero Point Interrupt Enable 0
N     * |        |          |0 = Zero point interrupt Disabled.
N     * |        |          |1 = Zero point interrupt Enabled.
N     * |        |          |Note: Odd channels will read always 0 at complementary mode.
N     * |[2]     |ZIEN2     |PWM Zero Point Interrupt Enable 2
N     * |        |          |0 = Zero point interrupt Disabled.
N     * |        |          |1 = Zero point interrupt Enabled.
N     * |        |          |Note: Odd channels will read always 0 at complementary mode.
N     * |[4]     |ZIEN4     |PWM Zero Point Interrupt Enable 4
N     * |        |          |0 = Zero point interrupt Disabled.
N     * |        |          |1 = Zero point interrupt Enabled.
N     * |        |          |Note: Odd channels will read always 0 at complementary mode.
N     * |[8]     |PIEN0     |PWM Period Point Interrupt Enable 0
N     * |        |          |0 = Period point interrupt Disabled.
N     * |        |          |1 = Period point interrupt Enabled.
N     * |        |          |Note: When counter type is up-down, period point means center point.
N     * |[10]    |PIEN2     |PWM Period Point Interrupt Enable 2
N     * |        |          |0 = Period point interrupt Disabled.
N     * |        |          |1 = Period point interrupt Enabled.
N     * |        |          |Note: When counter type is up-down, period point means center point.
N     * |[12]    |PIEN4     |PWM Period Point Interrupt Enable 4
N     * |        |          |0 = Period point interrupt Disabled.
N     * |        |          |1 = Period point interrupt Enabled.
N     * |        |          |Note: When counter type is up-down, period point means center point.
N     * |[21:16] |CMPUIENn  |PWM Compare Up Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Compare up count interrupt Disabled.
N     * |        |          |1 = Compare up count interrupt Enabled.
N     * |        |          |Note: In complementary mode, CMPUIEN1, 3, 5 use as another CMPUIEN for channel 0, 2, 4.
N     * |[29:24] |CMPDIENn  |PWM Compare Down Count Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Compare down count interrupt Disabled.
N     * |        |          |1 = Compare down count interrupt Enabled.
N     * |        |          |Note: In complementary mode, CMPDIEN1, 3, 5 use as another CMPDIEN for channel 0, 2, 4.
N     * @var PWM_T::INTEN1
N     * Offset: 0xE4  PWM Interrupt Enable Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BRKEIEN0_1|PWM Edge-detect Brake Interrupt Enable for Channel0/1 (Write Protect)
N     * |        |          |0 = Edge-detect Brake interrupt for channel0/1 Disabled.
N     * |        |          |1 = Edge-detect Brake interrupt for channel0/1 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[1]     |BRKEIEN2_3|PWM Edge-detect Brake Interrupt Enable for Channel2/3 (Write Protect)
N     * |        |          |0 = Edge-detect Brake interrupt for channel2/3 Disabled.
N     * |        |          |1 = Edge-detect Brake interrupt for channel2/3 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[2]     |BRKEIEN4_5|PWM Edge-detect Brake Interrupt Enable for Channel4/5 (Write Protect)
N     * |        |          |0 = Edge-detect Brake interrupt for channel4/5 Disabled.
N     * |        |          |1 = Edge-detect Brake interrupt for channel4/5 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[8]     |BRKLIEN0_1|PWM Level-detect Brake Interrupt Enable for Channel0/1 (Write Protect)
N     * |        |          |0 = Level-detect Brake interrupt for channel0/1 Disabled.
N     * |        |          |1 = Level-detect Brake interrupt for channel0/1 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[9]     |BRKLIEN2_3|PWM Level-detect Brake Interrupt Enable for Channel2/3 (Write Protect)
N     * |        |          |0 = Level-detect Brake interrupt for channel2/3 Disabled.
N     * |        |          |1 = Level-detect Brake interrupt for channel2/3 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[10]    |BRKLIEN4_5|PWM Level-detect Brake Interrupt Enable for Channel4/5 (Write Protect)
N     * |        |          |0 = Level-detect Brake interrupt for channel4/5 Disabled.
N     * |        |          |1 = Level-detect Brake interrupt for channel4/5 Enabled.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * @var PWM_T::INTSTS0
N     * Offset: 0xE8  PWM Interrupt Flag Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ZIF0      |PWM Zero Point Interrupt Flag 0
N     * |        |          |This bit is set by hardware when PWM_CH0 counter reaches zero, software can write 1 to clear this bit to zero.
N     * |[2]     |ZIF2      |PWM Zero Point Interrupt Flag 2
N     * |        |          |This bit is set by hardware when PWM_CH2 counter reaches zero, software can write 1 to clear this bit to zero.
N     * |[4]     |ZIF4      |PWM Zero Point Interrupt Flag 4
N     * |        |          |This bit is set by hardware when PWM_CH4 counter reaches zero, software can write 1 to clear this bit to zero.
N     * |[8]     |PIF0      |PWM Period Point Interrupt Flag 0
N     * |        |          |This bit is set by hardware when PWM_CH0 counter reaches PWM_PERIOD0, software can write 1 to clear this bit to zero.
N     * |[10]    |PIF2      |PWM Period Point Interrupt Flag 2
N     * |        |          |This bit is set by hardware when PWM_CH2 counter reaches PWM_PERIOD2, software can write 1 to clear this bit to zero.
N     * |[12]    |PIF4      |PWM Period Point Interrupt Flag 4
N     * |        |          |This bit is set by hardware when PWM_CH4 counter reaches PWM_PERIOD4, software can write 1 to clear this bit to zero.
N     * |[21:16] |CMPUIFn   |PWM Compare Up Count Interrupt Flag
N     * |        |          |Flag is set by hardware when PWM counter up count and reaches PWM_CMPDATn, software can clear this bit by writing 1 to it
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |Note1: If CMPDAT equal to PERIOD, this flag is not working in up counter type selection.
N     * |        |          |Note2: In complementary mode, CMPUIF1, 3, 5 use as another CMPUIF for channel 0, 2, 4.
N     * |[29:24] |CMPDIFn   |PWM Compare Down Count Interrupt Flag
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |Flag is set by hardware when PWM counter down count and reaches PWM_CMPDATn, software can clear this bit by writing 1 to it.
N     * |        |          |Note1: If CMPDAT equal to PERIOD, this flag is not working in down counter type selection.
N     * |        |          |Note2: In complementary mode, CMPDIF1, 3, 5 use as another CMPDIF for channel 0, 2, 4.
N     * @var PWM_T::INTSTS1
N     * Offset: 0xEC  PWM Interrupt Flag Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BRKEIF0   |PWM Channel0 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel0 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel0 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[1]     |BRKEIF1   |PWM Channel1 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel1 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel1 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[2]     |BRKEIF2   |PWM Channel2 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel2 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel2 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[3]     |BRKEIF3   |PWM Channel3 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel3 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel3 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[4]     |BRKEIF4   |PWM Channel4 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel4 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel4 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[5]     |BRKEIF5   |PWM Channel5 Edge-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel5 edge-detect brake event do not happened.
N     * |        |          |1 = When PWM channel5 edge-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[8]     |BRKLIF0   |PWM Channel0 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel0 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel0 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[9]     |BRKLIF1   |PWM Channel1 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel1 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel1 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[10]    |BRKLIF2   |PWM Channel2 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel2 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel2 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[11]    |BRKLIF3   |PWM Channel3 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel3 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel3 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[12]    |BRKLIF4   |PWM Channel4 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel4 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel4 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[13]    |BRKLIF5   |PWM Channel5 Level-detect Brake Interrupt Flag (Write Protect)
N     * |        |          |0 = PWM channel5 level-detect brake event do not happened.
N     * |        |          |1 = When PWM channel5 level-detect brake event happened, this bit is set to 1, writing 1 to clear.
N     * |        |          |Note: This register is write protected. Refer toREGWRPROT register.
N     * |[16]    |BRKESTS0  |PWM Channel0 Edge-detect Brake Status
N     * |        |          |0 = PWM channel0 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel0 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel0 at brake state, writing 1 to clear.
N     * |[17]    |BRKESTS1  |PWM Channel1 Edge-detect Brake Status
N     * |        |          |0 = PWM channel1 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel1 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel1 at brake state, writing 1 to clear.
N     * |[18]    |BRKESTS2  |PWM Channel2 Edge-detect Brake Status
N     * |        |          |0 = PWM channel2 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel2 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel2 at brake state, writing 1 to clear.
N     * |[19]    |BRKESTS3  |PWM Channel3 Edge-detect Brake Status
N     * |        |          |0 = PWM channel3 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel3 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel3 at brake state, writing 1 to clear.
N     * |[20]    |BRKESTS4  |PWM Channel4 Edge-detect Brake Status
N     * |        |          |0 = PWM channel4 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel4 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel4 at brake state, writing 1 to clear.
N     * |[21]    |BRKESTS5  |PWM Channel5 Edge-detect Brake Status
N     * |        |          |0 = PWM channel5 edge-detect brake state is released.
N     * |        |          |1 = When PWM channel5 edge-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel5 at brake state, writing 1 to clear.
N     * |[24]    |BRKLSTS0  |PWM Channel0 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel0 level-detect brake state is released.
N     * |        |          |1 = When PWM channel0 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel0 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * |[25]    |BRKLSTS1  |PWM Channel1 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel1 level-detect brake state is released.
N     * |        |          |1 = When PWM channel1 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel1 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * |[26]    |BRKLSTS2  |PWM Channel2 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel2 level-detect brake state is released.
N     * |        |          |1 = When PWM channel2 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel2 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * |[27]    |BRKLSTS3  |PWM Channel3 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel3 level-detect brake state is released.
N     * |        |          |1 = When PWM channel3 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel3 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * |[28]    |BRKLSTS4  |PWM Channel4 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel4 level-detect brake state is released.
N     * |        |          |1 = When PWM channel4 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel4 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * |[29]    |BRKLSTS5  |PWM Channel5 Level-detect Brake Status (Read Only)
N     * |        |          |0 = PWM channel5 level-detect brake state is released.
N     * |        |          |1 = When PWM channel5 level-detect brake detects a falling edge of any enabled brake source; this flag will be set to indicate the PWM channel5 at brake state.
N     * |        |          |Note: This bit is read only and auto cleared by hardware
N     * |        |          |When enabled brake source return to high level, PWM will release brake state until current PWM period finished
N     * |        |          |The PWM waveform will start output from next full PWM period.
N     * @var PWM_T::ADCTS0
N     * Offset: 0xF8  PWM Trigger ADC Source Select Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |TRGSEL0   |PWM_CH0 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH0 zero point.
N     * |        |          |0001 = PWM_CH0 period point.
N     * |        |          |0010 = PWM_CH0 zero or period point.
N     * |        |          |0011 = PWM_CH0 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH0 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH1 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH1 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[7]     |TRGEN0    |PWM_CH0 Trigger ADC Enable Bit
N     * |[11:8]  |TRGSEL1   |PWM_CH1 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH0 zero point.
N     * |        |          |0001 = PWM_CH0 period point.
N     * |        |          |0010 = PWM_CH0 zero or period point.
N     * |        |          |0011 = PWM_CH0 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH0 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH1 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH1 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[15]    |TRGEN1    |PWM_CH1 Trigger ADC Enable Bit
N     * |[19:16] |TRGSEL2   |PWM_CH2 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH2 zero point.
N     * |        |          |0001 = PWM_CH2 period point.
N     * |        |          |0010 = PWM_CH2 zero or period point.
N     * |        |          |0011 = PWM_CH2 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH2 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH3 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH3 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[23]    |TRGEN2    |PWM_CH2 Trigger ADC Enable Bit
N     * |[27:24] |TRGSEL3   |PWM_CH3 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH2 zero point.
N     * |        |          |0001 = PWM_CH2 period point.
N     * |        |          |0010 = PWM_CH2 zero or period point.
N     * |        |          |0011 = PWM_CH2 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH2 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH3 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH3 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[31]    |TRGEN3    |PWM_CH3 Trigger ADC Enable Bit
N     * @var PWM_T::ADCTS1
N     * Offset: 0xFC  PWM Trigger ADC Source Select Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |TRGSEL4   |PWM_CH4 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH4 zero point.
N     * |        |          |0001 = PWM_CH4 period point.
N     * |        |          |0010 = PWM_CH4 zero or period point.
N     * |        |          |0011 = PWM_CH4 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH4 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH5 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH5 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[7]     |TRGEN4    |PWM_CH4 Trigger ADC Enable Bit
N     * |[11:8]  |TRGSEL5   |PWM_CH5 Trigger ADC Source Select
N     * |        |          |0000 = PWM_CH4 zero point.
N     * |        |          |0001 = PWM_CH4 period point.
N     * |        |          |0010 = PWM_CH4 zero or period point.
N     * |        |          |0011 = PWM_CH4 up-count CMPDAT point.
N     * |        |          |0100 = PWM_CH4 down-count CMPDAT point.
N     * |        |          |0101 = Reserved.
N     * |        |          |0110 = Reserved.
N     * |        |          |0111 = Reserved.
N     * |        |          |1000 = PWM_CH5 up-count CMPDAT point.
N     * |        |          |1001 = PWM_CH5 down-count CMPDAT point.
N     * |        |          |Others = reserved.
N     * |[15]    |TRGEN5    |PWM_CH5 Trigger ADC Enable Bit
N     * @var PWM_T::SSCTL
N     * Offset: 0x110  PWM Synchronous Start Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SSEN0     |PWM Synchronous Start Function Enable 0
N     * |        |          |When synchronous start function is enabled, the PWM_CH0 counter enable bit (CNTEN0) can be enabled by writing PWM synchronous start trigger bit (CNTSEN).
N     * |        |          |0 = PWM synchronous start function Disabled.
N     * |        |          |1 = PWM synchronous start function Enabled.
N     * |[2]     |SSEN2     |PWM Synchronous Start Function Enable 2
N     * |        |          |When synchronous start function is enabled, the PWM_CH2 counter enable bit (CNTEN2) can be enabled by writing PWM synchronous start trigger bit (CNTSEN).
N     * |        |          |0 = PWM synchronous start function Disabled.
N     * |        |          |1 = PWM synchronous start function Enabled.
N     * |[4]     |SSEN4     |PWM Synchronous Start Function Enable 4
N     * |        |          |When synchronous start function is enabled, the PWM_CH4 counter enable bit (CNTEN4) can be enabled by writing PWM synchronous start trigger bit (CNTSEN).
N     * |        |          |0 = PWM synchronous start function Disabled.
N     * |        |          |1 = PWM synchronous start function Enabled.
N     * |[9:8]   |SSRC      |PWM Synchronous Start Source Select
N     * |        |          |00 = Synchronous start source come from PWM0.
N     * |        |          |01 = Synchronous start source come from PWM1.
N     * |        |          |10 = Synchronous start source come from BPWM0.
N     * |        |          |11 = Synchronous start source come from BPWM1.
N     * @var PWM_T::SSTRG
N     * Offset: 0x114  PWM Synchronous Start Trigger Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTSEN    |PWM Counter Synchronous Start Enable (Write Only)
N     * |        |          |PMW counter synchronous enable function is used to make selected PWM channels (include PWM0_CHx and PWM1_CHx) start counting at the same time.
N     * |        |          |Writing this bit to 1 will also set the counter enable bit (CNTENn, n denotes channel 0 to 5) if correlated PWM channel counter synchronous start function is enabled.
N     * @var PWM_T::STATUS
N     * Offset: 0x120  PWM Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTMAX0   |Time-base Counter 0 Equal to 0xFFFF Latched Status
N     * |        |          |0 = indicates the time-base counter never reached its maximum value 0xFFFF.
N     * |        |          |1 = indicates the time-base counter reached its maximum value, software can write 1 to clear this bit.
N     * |[2]     |CNTMAX2   |Time-base Counter 2 Equal to 0xFFFF Latched Status
N     * |        |          |0 = indicates the time-base counter never reached its maximum value 0xFFFF.
N     * |        |          |1 = indicates the time-base counter reached its maximum value, software can write 1 to clear this bit.
N     * |[4]     |CNTMAX4   |Time-base Counter 4 Equal to 0xFFFF Latched Status
N     * |        |          |0 = indicates the time-base counter never reached its maximum value 0xFFFF.
N     * |        |          |1 = indicates the time-base counter reached its maximum value, software can write 1 to clear this bit.
N     * |[21:16] |ADCTRGn   |ADC Start of Conversion Status
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Indicates no ADC start of conversion trigger event has occurred.
N     * |        |          |1 = Indicates an ADC start of conversion trigger event has occurred, software can write 1 to clear this bit.
N     * @var PWM_T::CAPINEN
N     * Offset: 0x200  PWM Capture Input Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CAPINENn  |Capture Input Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = PWM Channel capture input path Disabled
N     * |        |          |The input of PWM channel capture function is always regarded as 0.
N     * |        |          |1 = PWM Channel capture input path Enabled
N     * |        |          |The input of PWM channel capture function comes from correlative multifunction pin.
N     * @var PWM_T::CAPCTL
N     * Offset: 0x204  PWM Capture Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CAPENn    |Capture Function Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Capture function Disabled. RCAPDAT/FCAPDAT register will not be updated.
N     * |        |          |1 = Capture function Enabled
N     * |        |          |Capture latched the PWM counter value when detected rising or falling edge of input signal and saved to RCAPDAT (Rising latch) and FCAPDAT (Falling latch).
N     * |[13:8]  |CAPINVn   |Capture Inverter Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Capture source inverter Disabled.
N     * |        |          |1 = Capture source inverter Enabled. Reverse the input signal from GPIO.
N     * |[21:16] |RCRLDENn  |Rising Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Rising capture reload counter Disabled.
N     * |        |          |1 = Rising capture reload counter Enabled.
N     * |[29:24] |FCRLDENn  |Falling Capture Reload Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Falling capture reload counter Disabled.
N     * |        |          |1 = Falling capture reload counter Enabled.
N     * @var PWM_T::CAPSTS
N     * Offset: 0x208  PWM Capture Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CRLIFOVn  |Capture Rising Latch Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if rising latch happened when the corresponding CRLIF is 1
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CRLIF.
N     * |[13:8]  |CFLIFOVn  |Capture Falling Latch Interrupt Flag Overrun Status (Read Only)
N     * |        |          |This flag indicates if falling latch happened when the corresponding CFLIF is 1
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |Note: This bit will be cleared automatically when user clear corresponding CFLIF.
N     * @var PWM_T::RCAPDAT0
N     * Offset: 0x20C  PWM Rising Capture Data Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT0
N     * Offset: 0x210  PWM Falling Capture Data Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::RCAPDAT1
N     * Offset: 0x214  PWM Rising Capture Data Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT1
N     * Offset: 0x218  PWM Falling Capture Data Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::RCAPDAT2
N     * Offset: 0x21C  PWM Rising Capture Data Register 2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT2
N     * Offset: 0x220  PWM Falling Capture Data Register 2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::RCAPDAT3
N     * Offset: 0x224  PWM Rising Capture Data Register 3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT3
N     * Offset: 0x228  PWM Falling Capture Data Register 3
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::RCAPDAT4
N     * Offset: 0x22C  PWM Rising Capture Data Register 4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT4
N     * Offset: 0x230  PWM Falling Capture Data Register 4
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::RCAPDAT5
N     * Offset: 0x234  PWM Rising Capture Data Register 5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RCAPDAT   |PWM Rising Capture Data Register (Read Only)
N     * |        |          |When rising capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::FCAPDAT5
N     * Offset: 0x238  PWM Falling Capture Data Register 5
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |FCAPDAT   |PWM Falling Capture Data Register (Read Only)
N     * |        |          |When falling capture condition happened, the PWM counter value will be saved in this register.
N     * @var PWM_T::PDMACTL
N     * Offset: 0x23C  PWM PDMA Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CHEN0_1   |Channel 0/1 PDMA Enable Bit
N     * |        |          |0 = Channel 0/1 PDMA function Disabled.
N     * |        |          |1 = Channel 0/1 PDMA function Enabled for the channel 0/1 captured data and transfer to memory.
N     * |[2:1]   |CAPMOD0_1 |Select PWM_RCAPDAT0/1 or PWM_FCAPDAT0/1 to Do PDMA Transfer
N     * |        |          |00 = Reserved.
N     * |        |          |01 = PWM_RCAPDAT0/1.
N     * |        |          |10 = PWM_FCAPDAT0/1.
N     * |        |          |11 = Both PWM_RCAPDAT0/1 and PWM_FCAPDAT0/1.
N     * |[3]     |CAPORD0_1 |Capture Channel 0/1 Rising/Falling Order
N     * |        |          |Set this bit to determine whether the PWM_RCAPDAT0/1 or PWM_FCAPDAT0/1 is the first captured data transferred to memory through PDMA when CAPMOD0_1 =11.
N     * |        |          |0 = PWM_FCAPDAT0/1 is the first captured data to memory.
N     * |        |          |1 = PWM_RCAPDAT0/1 is the first captured data to memory.
N     * |[4]     |CHSEL0_1  |Select Channel 0/1 to Do PDMA Transfer
N     * |        |          |0 = Channel0.
N     * |        |          |1 = Channel1.
N     * |[8]     |CHEN2_3   |Channel 2/3 PDMA Enable Bit
N     * |        |          |0 = Channel 2/3 PDMA function Disabled.
N     * |        |          |1 = Channel 2/3 PDMA function Enabled for the channel 2/3 captured data and transfer to memory.
N     * |[10:9]  |CAPMOD2_3 |Select PWM_RCAPDAT2/3 or PWM_FCAODAT2/3 to Do PDMA Transfer
N     * |        |          |00 = Reserved.
N     * |        |          |01 = PWM_RCAPDAT2/3.
N     * |        |          |10 = PWM_FCAPDAT2/3.
N     * |        |          |11 = Both PWM_RCAPDAT2/3 and PWM_FCAPDAT2/3.
N     * |[11]    |CAPORD2_3 |Capture Channel 2/3 Rising/Falling Order
N     * |        |          |Set this bit to determine whether the PWM_RCAPDAT2/3 or PWM_FCAPDAT2/3 is the first captured data transferred to memory through PDMA when CAPMOD2_3 =11.
N     * |        |          |0 = PWM_FCAPDAT2/3 is the first captured data to memory.
N     * |        |          |1 = PWM_RCAPDAT2/3 is the first captured data to memory.
N     * |[12]    |CHSEL2_3  |Select Channel 2/3 to Do PDMA Transfer
N     * |        |          |0 = Channel2.
N     * |        |          |1 = Channel3.
N     * |[16]    |CHEN4_5   |Channel 4/5 PDMA Enable Bit
N     * |        |          |0 = Channel 4/5 PDMA function Disabled.
N     * |        |          |1 = Channel 4/5 PDMA function Enabled for the channel 4/5 captured data and transfer to memory.
N     * |[18:17] |CAPMOD4_5 |Select PWM_RCAPDAT4/5 or PWM_FCAPDAT4/5 to Do PDMA Transfer
N     * |        |          |00 = Reserved.
N     * |        |          |01 = PWM_RCAPDAT4/5.
N     * |        |          |10 = PWM_FCAPDAT4/5.
N     * |        |          |11 = Both PWM_RCAPDAT4/5 and PWM_FCAPDAT4/5.
N     * |[19]    |CAPORD4_5 |Capture Channel 4/5 Rising/Falling Order
N     * |        |          |Set this bit to determine whether the PWM_RCAPDAT4/5 or PWM_FCAPDAT4/5 is the first captured data transferred to memory through PDMA when CAPMOD4_5 =11.
N     * |        |          |0 = PWM_FCAPDAT4/5 is the first captured data to memory.
N     * |        |          |1 = PWM_RCAPDAT4/5 is the first captured data to memory.
N     * |[20]    |CHSEL4_5  |Select Channel 4/5 to Do PDMA Transfer
N     * |        |          |0 = Channel4.
N     * |        |          |1 = Channel5.
N     * @var PWM_T::PDMACAP0_1
N     * Offset: 0x240  PWM Capture Channel 01 PDMA Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CAPBUF    |PWM Capture PDMA Register (Read Only)
N     * |        |          |This register is use as a buffer to transfer PWM capture rising or falling data to memory by PDMA.
N     * @var PWM_T::PDMACAP2_3
N     * Offset: 0x244  PWM Capture Channel 23 PDMA Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CAPBUF    |PWM Capture PDMA Register (Read Only)
N     * |        |          |This register is use as a buffer to transfer PWM capture rising or falling data to memory by PDMA.
N     * @var PWM_T::PDMACAP4_5
N     * Offset: 0x248  PWM Capture Channel 45 PDMA Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CAPBUF    |PWM Capture PDMA Register (Read Only)
N     * |        |          |This register is use as a buffer to transfer PWM capture rising or falling data to memory by PDMA.
N     * @var PWM_T::CAPIEN
N     * Offset: 0x250  PWM Capture Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CAPRIENn  |PWM Capture Rising Latch Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Capture rising edge latch interrupt Disabled.
N     * |        |          |1 = Capture rising edge latch interrupt Enabled.
N     * |[13:8]  |CAPFIENn  |PWM Capture Falling Latch Interrupt Enable Bits
N     * |        |          |Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = Capture falling edge latch interrupt Disabled.
N     * |        |          |1 = Capture falling edge latch interrupt Enabled.
N     * @var PWM_T::CAPIF
N     * Offset: 0x254  PWM Capture Interrupt Flag Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CRLIFn    |PWM Capture Rising Latch Interrupt Flag
N     * |        |          |This bit is writing 1 to clear. Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = No capture rising latch condition happened.
N     * |        |          |1 = Capture rising latch condition happened, this flag will be set to high.
N     * |[13:8]  |CFLIFn    |PWM Capture Falling Latch Interrupt Flag
N     * |        |          |This bit is writing 1 to clear. Each bit n controls the corresponding PWM channel n.
N     * |        |          |0 = No capture falling latch condition happened.
N     * |        |          |1 = Capture falling latch condition happened, this flag will be set to high.
N     * @var PWM_T::PBUF
N     * Offset: 0x304~0x318  PWM PERIOD0/2/4 Buffer
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |PBUF      |PWM Period Register Buffer (Read Only)
N     * |        |          |Used as PERIOD active register.
N     * @var PWM_T::CMPBUF
N     * Offset: 0x31C~~0x330  PWM CMPDAT0~5 Buffer
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |CMPBUF    |PWM Comparator Register Buffer (Read Only)
N     * |        |          |Used as CMP active register.
N     */
N    __IO uint32_t CTL0;                  /*!< [0x0000] PWM Control Register 0                                           */
X    volatile uint32_t CTL0;                   
N    __IO uint32_t CTL1;                  /*!< [0x0004] PWM Control Register 1                                           */
X    volatile uint32_t CTL1;                   
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __IO uint32_t CLKSRC;                /*!< [0x0010] PWM Clock Source Register                                        */
X    volatile uint32_t CLKSRC;                 
N    __IO uint32_t CLKPSC0_1;             /*!< [0x0014] PWM Clock Pre-scale Register 0_1                                 */
X    volatile uint32_t CLKPSC0_1;              
N    __IO uint32_t CLKPSC2_3;             /*!< [0x0018] PWM Clock Pre-scale Register 2_3                                 */
X    volatile uint32_t CLKPSC2_3;              
N    __IO uint32_t CLKPSC4_5;             /*!< [0x001c] PWM Clock Pre-scale Register 4_5                                 */
X    volatile uint32_t CLKPSC4_5;              
N    __IO uint32_t CNTEN;                 /*!< [0x0020] PWM Counter Enable Register                                      */
X    volatile uint32_t CNTEN;                  
N    __IO uint32_t CNTCLR;                /*!< [0x0024] PWM Clear Counter Register                                       */
X    volatile uint32_t CNTCLR;                 
N    __I  uint32_t RESERVE1[2];
X    volatile const  uint32_t RESERVE1[2];
N    __IO uint32_t PERIOD[6];             /*!< [0x0030~0x0044] PWM Period Register 0/2/4                                 */
X    volatile uint32_t PERIOD[6];              
N    __I  uint32_t RESERVE2[2];
X    volatile const  uint32_t RESERVE2[2];
N    __IO uint32_t CMPDAT[6];             /*!< [0x0050~0x0064] PWM Comparator Register 0~5                               */
X    volatile uint32_t CMPDAT[6];              
N    __I  uint32_t RESERVE3[2];
X    volatile const  uint32_t RESERVE3[2];
N    __IO uint32_t DTCTL0_1;              /*!< [0x0070] PWM Dead-Time Control Register 0_1                               */
X    volatile uint32_t DTCTL0_1;               
N    __IO uint32_t DTCTL2_3;              /*!< [0x0074] PWM Dead-Time Control Register 2_3                               */
X    volatile uint32_t DTCTL2_3;               
N    __IO uint32_t DTCTL4_5;              /*!< [0x0078] PWM Dead-Time Control Register 4_5                               */
X    volatile uint32_t DTCTL4_5;               
N    __I  uint32_t RESERVE4[5];
X    volatile const  uint32_t RESERVE4[5];
N    __I  uint32_t CNT[6];                /*!< [0x0090~0x00a4] PWM Counter Register 0/2/4                                */
X    volatile const  uint32_t CNT[6];                 
N    __I  uint32_t RESERVE5[2];
X    volatile const  uint32_t RESERVE5[2];
N    __IO uint32_t WGCTL0;                /*!< [0x00b0] PWM Generation Register 0                                        */
X    volatile uint32_t WGCTL0;                 
N    __IO uint32_t WGCTL1;                /*!< [0x00b4] PWM Generation Register 1                                        */
X    volatile uint32_t WGCTL1;                 
N    __IO uint32_t MSKEN;                 /*!< [0x00b8] PWM Mask Enable Register                                         */
X    volatile uint32_t MSKEN;                  
N    __IO uint32_t MSK;                   /*!< [0x00bc] PWM Mask Data Register                                           */
X    volatile uint32_t MSK;                    
N    __IO uint32_t BNF;                   /*!< [0x00c0] PWM Brake Noise Filter Register                                  */
X    volatile uint32_t BNF;                    
N    __IO uint32_t FAILBRK;               /*!< [0x00c4] PWM System Fail Brake Control Register                           */
X    volatile uint32_t FAILBRK;                
N    __IO uint32_t BRKCTL0_1;             /*!< [0x00c8] PWM Brake Edge Detect Control Register 0_1                       */
X    volatile uint32_t BRKCTL0_1;              
N    __IO uint32_t BRKCTL2_3;             /*!< [0x00cc] PWM Brake Edge Detect Control Register 2_3                       */
X    volatile uint32_t BRKCTL2_3;              
N    __IO uint32_t BRKCTL4_5;             /*!< [0x00d0] PWM Brake Edge Detect Control Register 4_5                       */
X    volatile uint32_t BRKCTL4_5;              
N    __IO uint32_t POLCTL;                /*!< [0x00d4] PWM Pin Polar Inverse Register                                   */
X    volatile uint32_t POLCTL;                 
N    __IO uint32_t POEN;                  /*!< [0x00d8] PWM Output Enable Register                                       */
X    volatile uint32_t POEN;                   
N    __O  uint32_t SWBRK;                 /*!< [0x00dc] PWM Software Brake Control Register                              */
X    volatile  uint32_t SWBRK;                  
N    __IO uint32_t INTEN0;                /*!< [0x00e0] PWM Interrupt Enable Register 0                                  */
X    volatile uint32_t INTEN0;                 
N    __IO uint32_t INTEN1;                /*!< [0x00e4] PWM Interrupt Enable Register 1                                  */
X    volatile uint32_t INTEN1;                 
N    __IO uint32_t INTSTS0;               /*!< [0x00e8] PWM Interrupt Flag Register 0                                    */
X    volatile uint32_t INTSTS0;                
N    __IO uint32_t INTSTS1;               /*!< [0x00ec] PWM Interrupt Flag Register 1                                    */
X    volatile uint32_t INTSTS1;                
N    __I  uint32_t RESERVE6[2];
X    volatile const  uint32_t RESERVE6[2];
N    __IO uint32_t ADCTS0;                /*!< [0x00f8] PWM Trigger ADC Source Select Register 0                         */
X    volatile uint32_t ADCTS0;                 
N    __IO uint32_t ADCTS1;                /*!< [0x00fc] PWM Trigger ADC Source Select Register 1                         */
X    volatile uint32_t ADCTS1;                 
N    __I  uint32_t RESERVE7[4];
X    volatile const  uint32_t RESERVE7[4];
N    __IO uint32_t SSCTL;                 /*!< [0x0110] PWM Synchronous Start Control Register                           */
X    volatile uint32_t SSCTL;                  
N    __O  uint32_t SSTRG;                 /*!< [0x0114] PWM Synchronous Start Trigger Register                           */
X    volatile  uint32_t SSTRG;                  
N    __I  uint32_t RESERVE8[2];
X    volatile const  uint32_t RESERVE8[2];
N    __IO uint32_t STATUS;                /*!< [0x0120] PWM Status Register                                              */
X    volatile uint32_t STATUS;                 
N    __I  uint32_t RESERVE9[55];
X    volatile const  uint32_t RESERVE9[55];
N    __IO uint32_t CAPINEN;               /*!< [0x0200] PWM Capture Input Enable Register                                */
X    volatile uint32_t CAPINEN;                
N    __IO uint32_t CAPCTL;                /*!< [0x0204] PWM Capture Control Register                                     */
X    volatile uint32_t CAPCTL;                 
N    __I  uint32_t CAPSTS;                /*!< [0x0208] PWM Capture Status Register                                      */
X    volatile const  uint32_t CAPSTS;                 
N    __I  uint32_t RCAPDAT0;              /*!< [0x020c] PWM Rising Capture Data Register 0                               */
X    volatile const  uint32_t RCAPDAT0;               
N    __I  uint32_t FCAPDAT0;              /*!< [0x0210] PWM Falling Capture Data Register 0                              */
X    volatile const  uint32_t FCAPDAT0;               
N    __I  uint32_t RCAPDAT1;              /*!< [0x0214] PWM Rising Capture Data Register 1                               */
X    volatile const  uint32_t RCAPDAT1;               
N    __I  uint32_t FCAPDAT1;              /*!< [0x0218] PWM Falling Capture Data Register 1                              */
X    volatile const  uint32_t FCAPDAT1;               
N    __I  uint32_t RCAPDAT2;              /*!< [0x021c] PWM Rising Capture Data Register 2                               */
X    volatile const  uint32_t RCAPDAT2;               
N    __I  uint32_t FCAPDAT2;              /*!< [0x0220] PWM Falling Capture Data Register 2                              */
X    volatile const  uint32_t FCAPDAT2;               
N    __I  uint32_t RCAPDAT3;              /*!< [0x0224] PWM Rising Capture Data Register 3                               */
X    volatile const  uint32_t RCAPDAT3;               
N    __I  uint32_t FCAPDAT3;              /*!< [0x0228] PWM Falling Capture Data Register 3                              */
X    volatile const  uint32_t FCAPDAT3;               
N    __I  uint32_t RCAPDAT4;              /*!< [0x022c] PWM Rising Capture Data Register 4                               */
X    volatile const  uint32_t RCAPDAT4;               
N    __I  uint32_t FCAPDAT4;              /*!< [0x0230] PWM Falling Capture Data Register 4                              */
X    volatile const  uint32_t FCAPDAT4;               
N    __I  uint32_t RCAPDAT5;              /*!< [0x0234] PWM Rising Capture Data Register 5                               */
X    volatile const  uint32_t RCAPDAT5;               
N    __I  uint32_t FCAPDAT5;              /*!< [0x0238] PWM Falling Capture Data Register 5                              */
X    volatile const  uint32_t FCAPDAT5;               
N    __IO uint32_t PDMACTL;               /*!< [0x023c] PWM PDMA Control Register                                        */
X    volatile uint32_t PDMACTL;                
N    __I  uint32_t PDMACAP0_1;            /*!< [0x0240] PWM Capture Channel 01 PDMA Register                             */
X    volatile const  uint32_t PDMACAP0_1;             
N    __I  uint32_t PDMACAP2_3;            /*!< [0x0244] PWM Capture Channel 23 PDMA Register                             */
X    volatile const  uint32_t PDMACAP2_3;             
N    __I  uint32_t PDMACAP4_5;            /*!< [0x0248] PWM Capture Channel 45 PDMA Register                             */
X    volatile const  uint32_t PDMACAP4_5;             
N    __I  uint32_t RESERVE10[1];
X    volatile const  uint32_t RESERVE10[1];
N    __IO uint32_t CAPIEN;                /*!< [0x0250] PWM Capture Interrupt Enable Register                            */
X    volatile uint32_t CAPIEN;                 
N    __IO uint32_t CAPIF;                 /*!< [0x0254] PWM Capture Interrupt Flag Register                              */
X    volatile uint32_t CAPIF;                  
N    __I  uint32_t RESERVE11[43];
X    volatile const  uint32_t RESERVE11[43];
N    __I  uint32_t PBUF[6];               /*!< [0x0304~0x0318] PWM PERIOD0/2/4 Buffer                                    */
X    volatile const  uint32_t PBUF[6];                
N    __I  uint32_t CMPBUF[6];             /*!< [0x031c~0x0330] PWM CMPDAT0~5 Buffer                                      */
X    volatile const  uint32_t CMPBUF[6];              
N} PWM_T;
N
N/**
N    @addtogroup PWM_CONST PWM Bit Field Definition
N    Constant Definitions for PWM Controller
N@{ */
N
N#define PWM_CTL0_CTRLD0_Pos              (0)                                               /*!< PWM_T::CTL0: CTRLD0 Position           */
N#define PWM_CTL0_CTRLD0_Msk              (0x1ul << PWM_CTL0_CTRLD0_Pos)                    /*!< PWM_T::CTL0: CTRLD0 Mask               */
N
N#define PWM_CTL0_CTRLD1_Pos              (1)                                               /*!< PWM_T::CTL0: CTRLD1 Position           */
N#define PWM_CTL0_CTRLD1_Msk              (0x1ul << PWM_CTL0_CTRLD1_Pos)                    /*!< PWM_T::CTL0: CTRLD1 Mask               */
N
N#define PWM_CTL0_CTRLD2_Pos              (2)                                               /*!< PWM_T::CTL0: CTRLD2 Position           */
N#define PWM_CTL0_CTRLD2_Msk              (0x1ul << PWM_CTL0_CTRLD2_Pos)                    /*!< PWM_T::CTL0: CTRLD2 Mask               */
N
N#define PWM_CTL0_CTRLD3_Pos              (3)                                               /*!< PWM_T::CTL0: CTRLD3 Position           */
N#define PWM_CTL0_CTRLD3_Msk              (0x1ul << PWM_CTL0_CTRLD3_Pos)                    /*!< PWM_T::CTL0: CTRLD3 Mask               */
N
N#define PWM_CTL0_CTRLD4_Pos              (4)                                               /*!< PWM_T::CTL0: CTRLD4 Position           */
N#define PWM_CTL0_CTRLD4_Msk              (0x1ul << PWM_CTL0_CTRLD4_Pos)                    /*!< PWM_T::CTL0: CTRLD4 Mask               */
N
N#define PWM_CTL0_CTRLD5_Pos              (5)                                               /*!< PWM_T::CTL0: CTRLD5 Position           */
N#define PWM_CTL0_CTRLD5_Msk              (0x1ul << PWM_CTL0_CTRLD5_Pos)                    /*!< PWM_T::CTL0: CTRLD5 Mask               */
N
N#define PWM_CTL0_IMMLDEN0_Pos            (16)                                              /*!< PWM_T::CTL0: IMMLDEN0 Position         */
N#define PWM_CTL0_IMMLDEN0_Msk            (0x1ul << PWM_CTL0_IMMLDEN0_Pos)                  /*!< PWM_T::CTL0: IMMLDEN0 Mask             */
N
N#define PWM_CTL0_IMMLDEN1_Pos            (17)                                              /*!< PWM_T::CTL0: IMMLDEN1 Position         */
N#define PWM_CTL0_IMMLDEN1_Msk            (0x1ul << PWM_CTL0_IMMLDEN1_Pos)                  /*!< PWM_T::CTL0: IMMLDEN1 Mask             */
N
N#define PWM_CTL0_IMMLDEN2_Pos            (18)                                              /*!< PWM_T::CTL0: IMMLDEN2 Position         */
N#define PWM_CTL0_IMMLDEN2_Msk            (0x1ul << PWM_CTL0_IMMLDEN2_Pos)                  /*!< PWM_T::CTL0: IMMLDEN2 Mask             */
N
N#define PWM_CTL0_IMMLDEN3_Pos            (19)                                              /*!< PWM_T::CTL0: IMMLDEN3 Position         */
N#define PWM_CTL0_IMMLDEN3_Msk            (0x1ul << PWM_CTL0_IMMLDEN3_Pos)                  /*!< PWM_T::CTL0: IMMLDEN3 Mask             */
N
N#define PWM_CTL0_IMMLDEN4_Pos            (20)                                              /*!< PWM_T::CTL0: IMMLDEN4 Position         */
N#define PWM_CTL0_IMMLDEN4_Msk            (0x1ul << PWM_CTL0_IMMLDEN4_Pos)                  /*!< PWM_T::CTL0: IMMLDEN4 Mask             */
N
N#define PWM_CTL0_IMMLDEN5_Pos            (21)                                              /*!< PWM_T::CTL0: IMMLDEN5 Position         */
N#define PWM_CTL0_IMMLDEN5_Msk            (0x1ul << PWM_CTL0_IMMLDEN5_Pos)                  /*!< PWM_T::CTL0: IMMLDEN5 Mask             */
N
N#define PWM_CTL0_DBGHALT_Pos             (30)                                              /*!< PWM_T::CTL0: DBGHALT Position          */
N#define PWM_CTL0_DBGHALT_Msk             (0x1ul << PWM_CTL0_DBGHALT_Pos)                   /*!< PWM_T::CTL0: DBGHALT Mask              */
N
N#define PWM_CTL0_DBGTRIOFF_Pos           (31)                                              /*!< PWM_T::CTL0: DBGTRIOFF Position        */
N#define PWM_CTL0_DBGTRIOFF_Msk           (0x1ul << PWM_CTL0_DBGTRIOFF_Pos)                 /*!< PWM_T::CTL0: DBGTRIOFF Mask            */
N
N#define PWM_CTL1_CNTTYPE0_Pos            (0)                                               /*!< PWM_T::CTL1: CNTTYPE0 Position         */
N#define PWM_CTL1_CNTTYPE0_Msk            (0x3ul << PWM_CTL1_CNTTYPE0_Pos)                  /*!< PWM_T::CTL1: CNTTYPE0 Mask             */
N
N#define PWM_CTL1_CNTTYPE2_Pos            (4)                                               /*!< PWM_T::CTL1: CNTTYPE2 Position         */
N#define PWM_CTL1_CNTTYPE2_Msk            (0x3ul << PWM_CTL1_CNTTYPE2_Pos)                  /*!< PWM_T::CTL1: CNTTYPE2 Mask             */
N
N#define PWM_CTL1_CNTTYPE4_Pos            (8)                                               /*!< PWM_T::CTL1: CNTTYPE4 Position         */
N#define PWM_CTL1_CNTTYPE4_Msk            (0x3ul << PWM_CTL1_CNTTYPE4_Pos)                  /*!< PWM_T::CTL1: CNTTYPE4 Mask             */
N
N#define PWM_CTL1_PWMMODE0_Pos            (24)                                              /*!< PWM_T::CTL1: PWMMODE0 Position         */
N#define PWM_CTL1_PWMMODE0_Msk            (0x1ul << PWM_CTL1_PWMMODE0_Pos)                  /*!< PWM_T::CTL1: PWMMODE0 Mask             */
N
N#define PWM_CTL1_PWMMODE2_Pos            (25)                                              /*!< PWM_T::CTL1: PWMMODE2 Position         */
N#define PWM_CTL1_PWMMODE2_Msk            (0x1ul << PWM_CTL1_PWMMODE2_Pos)                  /*!< PWM_T::CTL1: PWMMODE2 Mask             */
N
N#define PWM_CTL1_PWMMODE4_Pos            (26)                                              /*!< PWM_T::CTL1: PWMMODE4 Position         */
N#define PWM_CTL1_PWMMODE4_Msk            (0x1ul << PWM_CTL1_PWMMODE4_Pos)                  /*!< PWM_T::CTL1: PWMMODE4 Mask             */
N
N#define PWM_CLKSRC_ECLKSRC0_Pos          (0)                                               /*!< PWM_T::CLKSRC: ECLKSRC0 Position       */
N#define PWM_CLKSRC_ECLKSRC0_Msk          (0x7ul << PWM_CLKSRC_ECLKSRC0_Pos)                /*!< PWM_T::CLKSRC: ECLKSRC0 Mask           */
N
N#define PWM_CLKSRC_ECLKSRC2_Pos          (8)                                               /*!< PWM_T::CLKSRC: ECLKSRC2 Position       */
N#define PWM_CLKSRC_ECLKSRC2_Msk          (0x7ul << PWM_CLKSRC_ECLKSRC2_Pos)                /*!< PWM_T::CLKSRC: ECLKSRC2 Mask           */
N
N#define PWM_CLKSRC_ECLKSRC4_Pos          (16)                                              /*!< PWM_T::CLKSRC: ECLKSRC4 Position       */
N#define PWM_CLKSRC_ECLKSRC4_Msk          (0x7ul << PWM_CLKSRC_ECLKSRC4_Pos)                /*!< PWM_T::CLKSRC: ECLKSRC4 Mask           */
N
N#define PWM_CLKPSC0_1_CLKPSC_Pos         (0)                                               /*!< PWM_T::CLKPSC0_1: CLKPSC Position      */
N#define PWM_CLKPSC0_1_CLKPSC_Msk         (0xffful << PWM_CLKPSC0_1_CLKPSC_Pos)             /*!< PWM_T::CLKPSC0_1: CLKPSC Mask          */
N
N#define PWM_CLKPSC2_3_CLKPSC_Pos         (0)                                               /*!< PWM_T::CLKPSC2_3: CLKPSC Position      */
N#define PWM_CLKPSC2_3_CLKPSC_Msk         (0xffful << PWM_CLKPSC2_3_CLKPSC_Pos)             /*!< PWM_T::CLKPSC2_3: CLKPSC Mask          */
N
N#define PWM_CLKPSC4_5_CLKPSC_Pos         (0)                                               /*!< PWM_T::CLKPSC4_5: CLKPSC Position      */
N#define PWM_CLKPSC4_5_CLKPSC_Msk         (0xffful << PWM_CLKPSC4_5_CLKPSC_Pos)             /*!< PWM_T::CLKPSC4_5: CLKPSC Mask          */
N
N#define PWM_CNTEN_CNTEN0_Pos             (0)                                               /*!< PWM_T::CNTEN: CNTEN0 Position          */
N#define PWM_CNTEN_CNTEN0_Msk             (0x1ul << PWM_CNTEN_CNTEN0_Pos)                   /*!< PWM_T::CNTEN: CNTEN0 Mask              */
N
N#define PWM_CNTEN_CNTEN2_Pos             (2)                                               /*!< PWM_T::CNTEN: CNTEN2 Position          */
N#define PWM_CNTEN_CNTEN2_Msk             (0x1ul << PWM_CNTEN_CNTEN2_Pos)                   /*!< PWM_T::CNTEN: CNTEN2 Mask              */
N
N#define PWM_CNTEN_CNTEN4_Pos             (4)                                               /*!< PWM_T::CNTEN: CNTEN4 Position          */
N#define PWM_CNTEN_CNTEN4_Msk             (0x1ul << PWM_CNTEN_CNTEN4_Pos)                   /*!< PWM_T::CNTEN: CNTEN4 Mask              */
N
N#define PWM_CNTCLR_CNTCLR0_Pos           (0)                                               /*!< PWM_T::CNTCLR: CNTCLR0 Position        */
N#define PWM_CNTCLR_CNTCLR0_Msk           (0x1ul << PWM_CNTCLR_CNTCLR0_Pos)                 /*!< PWM_T::CNTCLR: CNTCLR0 Mask            */
N
N#define PWM_CNTCLR_CNTCLR2_Pos           (2)                                               /*!< PWM_T::CNTCLR: CNTCLR2 Position        */
N#define PWM_CNTCLR_CNTCLR2_Msk           (0x1ul << PWM_CNTCLR_CNTCLR2_Pos)                 /*!< PWM_T::CNTCLR: CNTCLR2 Mask            */
N
N#define PWM_CNTCLR_CNTCLR4_Pos           (4)                                               /*!< PWM_T::CNTCLR: CNTCLR4 Position        */
N#define PWM_CNTCLR_CNTCLR4_Msk           (0x1ul << PWM_CNTCLR_CNTCLR4_Pos)                 /*!< PWM_T::CNTCLR: CNTCLR4 Mask            */
N
N#define PWM_PERIOD_PERIOD_Pos            (0)                                               /*!< PWM_T::PERIOD: PERIOD Position         */
N#define PWM_PERIOD_PERIOD_Msk            (0xfffful << PWM_PERIOD_PERIOD_Pos)               /*!< PWM_T::PERIOD: PERIOD Mask             */
N
N#define PWM_CMPDAT_CMP_Pos               (0)                                               /*!< PWM_T::CMPDAT: CMP Position            */
N#define PWM_CMPDAT_CMP_Msk               (0xfffful << PWM_CMPDAT_CMP_Pos)                  /*!< PWM_T::CMPDAT: CMP Mask                */
N
N#define PWM_DTCTL0_1_DTCNT_Pos           (0)                                               /*!< PWM_T::DTCTL0_1: DTCNT Position        */
N#define PWM_DTCTL0_1_DTCNT_Msk           (0xffful << PWM_DTCTL0_1_DTCNT_Pos)               /*!< PWM_T::DTCTL0_1: DTCNT Mask            */
N
N#define PWM_DTCTL0_1_DTEN_Pos            (16)                                              /*!< PWM_T::DTCTL0_1: DTEN Position         */
N#define PWM_DTCTL0_1_DTEN_Msk            (0x1ul << PWM_DTCTL0_1_DTEN_Pos)                  /*!< PWM_T::DTCTL0_1: DTEN Mask             */
N
N#define PWM_DTCTL0_1_DTCKSEL_Pos         (24)                                              /*!< PWM_T::DTCTL0_1: DTCKSEL Position      */
N#define PWM_DTCTL0_1_DTCKSEL_Msk         (0x1ul << PWM_DTCTL0_1_DTCKSEL_Pos)               /*!< PWM_T::DTCTL0_1: DTCKSEL Mask          */
N
N#define PWM_DTCTL2_3_DTCNT_Pos           (0)                                               /*!< PWM_T::DTCTL2_3: DTCNT Position        */
N#define PWM_DTCTL2_3_DTCNT_Msk           (0xffful << PWM_DTCTL2_3_DTCNT_Pos)               /*!< PWM_T::DTCTL2_3: DTCNT Mask            */
N
N#define PWM_DTCTL2_3_DTEN_Pos            (16)                                              /*!< PWM_T::DTCTL2_3: DTEN Position         */
N#define PWM_DTCTL2_3_DTEN_Msk            (0x1ul << PWM_DTCTL2_3_DTEN_Pos)                  /*!< PWM_T::DTCTL2_3: DTEN Mask             */
N
N#define PWM_DTCTL2_3_DTCKSEL_Pos         (24)                                              /*!< PWM_T::DTCTL2_3: DTCKSEL Position      */
N#define PWM_DTCTL2_3_DTCKSEL_Msk         (0x1ul << PWM_DTCTL2_3_DTCKSEL_Pos)               /*!< PWM_T::DTCTL2_3: DTCKSEL Mask          */
N
N#define PWM_DTCTL4_5_DTCNT_Pos           (0)                                               /*!< PWM_T::DTCTL4_5: DTCNT Position        */
N#define PWM_DTCTL4_5_DTCNT_Msk           (0xffful << PWM_DTCTL4_5_DTCNT_Pos)               /*!< PWM_T::DTCTL4_5: DTCNT Mask            */
N
N#define PWM_DTCTL4_5_DTEN_Pos            (16)                                              /*!< PWM_T::DTCTL4_5: DTEN Position         */
N#define PWM_DTCTL4_5_DTEN_Msk            (0x1ul << PWM_DTCTL4_5_DTEN_Pos)                  /*!< PWM_T::DTCTL4_5: DTEN Mask             */
N
N#define PWM_DTCTL4_5_DTCKSEL_Pos         (24)                                              /*!< PWM_T::DTCTL4_5: DTCKSEL Position      */
N#define PWM_DTCTL4_5_DTCKSEL_Msk         (0x1ul << PWM_DTCTL4_5_DTCKSEL_Pos)               /*!< PWM_T::DTCTL4_5: DTCKSEL Mask          */
N
N#define PWM_CNT_CNT_Pos                  (0)                                               /*!< PWM_T::CNT: CNT Position               */
N#define PWM_CNT_CNT_Msk                  (0xfffful << PWM_CNT_CNT_Pos)                     /*!< PWM_T::CNT: CNT Mask                   */
N
N#define PWM_CNT_DIRF_Pos                 (16)                                              /*!< PWM_T::CNT: DIRF Position              */
N#define PWM_CNT_DIRF_Msk                 (0x1ul << PWM_CNT_DIRF_Pos)                       /*!< PWM_T::CNT: DIRF Mask                  */
N
N#define PWM_WGCTL0_ZPCTL0_Pos            (0)                                               /*!< PWM_T::WGCTL0: ZPCTL0 Position         */
N#define PWM_WGCTL0_ZPCTL0_Msk            (0x3ul << PWM_WGCTL0_ZPCTL0_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL0 Mask             */
N
N#define PWM_WGCTL0_ZPCTL1_Pos            (2)                                               /*!< PWM_T::WGCTL0: ZPCTL1 Position         */
N#define PWM_WGCTL0_ZPCTL1_Msk            (0x3ul << PWM_WGCTL0_ZPCTL1_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL1 Mask             */
N
N#define PWM_WGCTL0_ZPCTL2_Pos            (4)                                               /*!< PWM_T::WGCTL0: ZPCTL2 Position         */
N#define PWM_WGCTL0_ZPCTL2_Msk            (0x3ul << PWM_WGCTL0_ZPCTL2_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL2 Mask             */
N
N#define PWM_WGCTL0_ZPCTL3_Pos            (6)                                               /*!< PWM_T::WGCTL0: ZPCTL3 Position         */
N#define PWM_WGCTL0_ZPCTL3_Msk            (0x3ul << PWM_WGCTL0_ZPCTL3_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL3 Mask             */
N
N#define PWM_WGCTL0_ZPCTL4_Pos            (8)                                               /*!< PWM_T::WGCTL0: ZPCTL4 Position         */
N#define PWM_WGCTL0_ZPCTL4_Msk            (0x3ul << PWM_WGCTL0_ZPCTL4_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL4 Mask             */
N
N#define PWM_WGCTL0_ZPCTL5_Pos            (10)                                              /*!< PWM_T::WGCTL0: ZPCTL5 Position         */
N#define PWM_WGCTL0_ZPCTL5_Msk            (0x3ul << PWM_WGCTL0_ZPCTL5_Pos)                  /*!< PWM_T::WGCTL0: ZPCTL5 Mask             */
N
N#define PWM_WGCTL0_PRDPCTL0_Pos          (16)                                              /*!< PWM_T::WGCTL0: PRDPCTL0 Position       */
N#define PWM_WGCTL0_PRDPCTL0_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL0_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL0 Mask           */
N
N#define PWM_WGCTL0_PRDPCTL1_Pos          (18)                                              /*!< PWM_T::WGCTL0: PRDPCTL1 Position       */
N#define PWM_WGCTL0_PRDPCTL1_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL1_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL1 Mask           */
N
N#define PWM_WGCTL0_PRDPCTL2_Pos          (20)                                              /*!< PWM_T::WGCTL0: PRDPCTL2 Position       */
N#define PWM_WGCTL0_PRDPCTL2_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL2_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL2 Mask           */
N
N#define PWM_WGCTL0_PRDPCTL3_Pos          (22)                                              /*!< PWM_T::WGCTL0: PRDPCTL3 Position       */
N#define PWM_WGCTL0_PRDPCTL3_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL3_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL3 Mask           */
N
N#define PWM_WGCTL0_PRDPCTL4_Pos          (24)                                              /*!< PWM_T::WGCTL0: PRDPCTL4 Position       */
N#define PWM_WGCTL0_PRDPCTL4_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL4_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL4 Mask           */
N
N#define PWM_WGCTL0_PRDPCTL5_Pos          (26)                                              /*!< PWM_T::WGCTL0: PRDPCTL5 Position       */
N#define PWM_WGCTL0_PRDPCTL5_Msk          (0x3ul << PWM_WGCTL0_PRDPCTL5_Pos)                /*!< PWM_T::WGCTL0: PRDPCTL5 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL0_Pos          (0)                                               /*!< PWM_T::WGCTL1: CMPUCTL0 Position       */
N#define PWM_WGCTL1_CMPUCTL0_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL0_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL0 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL1_Pos          (2)                                               /*!< PWM_T::WGCTL1: CMPUCTL1 Position       */
N#define PWM_WGCTL1_CMPUCTL1_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL1_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL1 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL2_Pos          (4)                                               /*!< PWM_T::WGCTL1: CMPUCTL2 Position       */
N#define PWM_WGCTL1_CMPUCTL2_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL2_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL2 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL3_Pos          (6)                                               /*!< PWM_T::WGCTL1: CMPUCTL3 Position       */
N#define PWM_WGCTL1_CMPUCTL3_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL3_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL3 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL4_Pos          (8)                                               /*!< PWM_T::WGCTL1: CMPUCTL4 Position       */
N#define PWM_WGCTL1_CMPUCTL4_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL4_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL4 Mask           */
N
N#define PWM_WGCTL1_CMPUCTL5_Pos          (10)                                              /*!< PWM_T::WGCTL1: CMPUCTL5 Position       */
N#define PWM_WGCTL1_CMPUCTL5_Msk          (0x3ul << PWM_WGCTL1_CMPUCTL5_Pos)                /*!< PWM_T::WGCTL1: CMPUCTL5 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL0_Pos          (16)                                              /*!< PWM_T::WGCTL1: CMPDCTL0 Position       */
N#define PWM_WGCTL1_CMPDCTL0_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL0_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL0 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL1_Pos          (18)                                              /*!< PWM_T::WGCTL1: CMPDCTL1 Position       */
N#define PWM_WGCTL1_CMPDCTL1_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL1_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL1 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL2_Pos          (20)                                              /*!< PWM_T::WGCTL1: CMPDCTL2 Position       */
N#define PWM_WGCTL1_CMPDCTL2_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL2_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL2 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL3_Pos          (22)                                              /*!< PWM_T::WGCTL1: CMPDCTL3 Position       */
N#define PWM_WGCTL1_CMPDCTL3_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL3_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL3 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL4_Pos          (24)                                              /*!< PWM_T::WGCTL1: CMPDCTL4 Position       */
N#define PWM_WGCTL1_CMPDCTL4_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL4_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL4 Mask           */
N
N#define PWM_WGCTL1_CMPDCTL5_Pos          (26)                                              /*!< PWM_T::WGCTL1: CMPDCTL5 Position       */
N#define PWM_WGCTL1_CMPDCTL5_Msk          (0x3ul << PWM_WGCTL1_CMPDCTL5_Pos)                /*!< PWM_T::WGCTL1: CMPDCTL5 Mask           */
N
N#define PWM_MSKEN_MSKEN0_Pos             (0)                                               /*!< PWM_T::MSKEN: MSKEN0 Position          */
N#define PWM_MSKEN_MSKEN0_Msk             (0x1ul << PWM_MSKEN_MSKEN0_Pos)                   /*!< PWM_T::MSKEN: MSKEN0 Mask              */
N
N#define PWM_MSKEN_MSKEN1_Pos             (1)                                               /*!< PWM_T::MSKEN: MSKEN1 Position          */
N#define PWM_MSKEN_MSKEN1_Msk             (0x1ul << PWM_MSKEN_MSKEN1_Pos)                   /*!< PWM_T::MSKEN: MSKEN1 Mask              */
N
N#define PWM_MSKEN_MSKEN2_Pos             (2)                                               /*!< PWM_T::MSKEN: MSKEN2 Position          */
N#define PWM_MSKEN_MSKEN2_Msk             (0x1ul << PWM_MSKEN_MSKEN2_Pos)                   /*!< PWM_T::MSKEN: MSKEN2 Mask              */
N
N#define PWM_MSKEN_MSKEN3_Pos             (3)                                               /*!< PWM_T::MSKEN: MSKEN3 Position          */
N#define PWM_MSKEN_MSKEN3_Msk             (0x1ul << PWM_MSKEN_MSKEN3_Pos)                   /*!< PWM_T::MSKEN: MSKEN3 Mask              */
N
N#define PWM_MSKEN_MSKEN4_Pos             (4)                                               /*!< PWM_T::MSKEN: MSKEN4 Position          */
N#define PWM_MSKEN_MSKEN4_Msk             (0x1ul << PWM_MSKEN_MSKEN4_Pos)                   /*!< PWM_T::MSKEN: MSKEN4 Mask              */
N
N#define PWM_MSKEN_MSKEN5_Pos             (5)                                               /*!< PWM_T::MSKEN: MSKEN5 Position          */
N#define PWM_MSKEN_MSKEN5_Msk             (0x1ul << PWM_MSKEN_MSKEN5_Pos)                   /*!< PWM_T::MSKEN: MSKEN5 Mask              */
N
N#define PWM_MSK_MSKDAT0_Pos              (0)                                               /*!< PWM_T::MSK: MSKDAT0 Position           */
N#define PWM_MSK_MSKDAT0_Msk              (0x1ul << PWM_MSK_MSKDAT0_Pos)                    /*!< PWM_T::MSK: MSKDAT0 Mask               */
N
N#define PWM_MSK_MSKDAT1_Pos              (1)                                               /*!< PWM_T::MSK: MSKDAT1 Position           */
N#define PWM_MSK_MSKDAT1_Msk              (0x1ul << PWM_MSK_MSKDAT1_Pos)                    /*!< PWM_T::MSK: MSKDAT1 Mask               */
N
N#define PWM_MSK_MSKDAT2_Pos              (2)                                               /*!< PWM_T::MSK: MSKDAT2 Position           */
N#define PWM_MSK_MSKDAT2_Msk              (0x1ul << PWM_MSK_MSKDAT2_Pos)                    /*!< PWM_T::MSK: MSKDAT2 Mask               */
N
N#define PWM_MSK_MSKDAT3_Pos              (3)                                               /*!< PWM_T::MSK: MSKDAT3 Position           */
N#define PWM_MSK_MSKDAT3_Msk              (0x1ul << PWM_MSK_MSKDAT3_Pos)                    /*!< PWM_T::MSK: MSKDAT3 Mask               */
N
N#define PWM_MSK_MSKDAT4_Pos              (4)                                               /*!< PWM_T::MSK: MSKDAT4 Position           */
N#define PWM_MSK_MSKDAT4_Msk              (0x1ul << PWM_MSK_MSKDAT4_Pos)                    /*!< PWM_T::MSK: MSKDAT4 Mask               */
N
N#define PWM_MSK_MSKDAT5_Pos              (5)                                               /*!< PWM_T::MSK: MSKDAT5 Position           */
N#define PWM_MSK_MSKDAT5_Msk              (0x1ul << PWM_MSK_MSKDAT5_Pos)                    /*!< PWM_T::MSK: MSKDAT5 Mask               */
N
N#define PWM_BNF_BRK0FEN_Pos              (0)                                               /*!< PWM_T::BNF: BRK0FEN Position           */
N#define PWM_BNF_BRK0FEN_Msk              (0x1ul << PWM_BNF_BRK0FEN_Pos)                    /*!< PWM_T::BNF: BRK0FEN Mask               */
N
N#define PWM_BNF_BRK0FCS_Pos              (1)                                               /*!< PWM_T::BNF: BRK0FCS Position           */
N#define PWM_BNF_BRK0FCS_Msk              (0x7ul << PWM_BNF_BRK0FCS_Pos)                    /*!< PWM_T::BNF: BRK0FCS Mask               */
N
N#define PWM_BNF_BRK0FCNT_Pos             (4)                                               /*!< PWM_T::BNF: BRK0FCNT Position          */
N#define PWM_BNF_BRK0FCNT_Msk             (0x7ul << PWM_BNF_BRK0FCNT_Pos)                   /*!< PWM_T::BNF: BRK0FCNT Mask              */
N
N#define PWM_BNF_BRK0PINV_Pos             (7)                                               /*!< PWM_T::BNF: BRK0PINV Position          */
N#define PWM_BNF_BRK0PINV_Msk             (0x1ul << PWM_BNF_BRK0PINV_Pos)                   /*!< PWM_T::BNF: BRK0PINV Mask              */
N
N#define PWM_BNF_BRK1FEN_Pos              (8)                                               /*!< PWM_T::BNF: BRK1FEN Position           */
N#define PWM_BNF_BRK1FEN_Msk              (0x1ul << PWM_BNF_BRK1FEN_Pos)                    /*!< PWM_T::BNF: BRK1FEN Mask               */
N
N#define PWM_BNF_BRK1FCS_Pos              (9)                                               /*!< PWM_T::BNF: BRK1FCS Position           */
N#define PWM_BNF_BRK1FCS_Msk              (0x7ul << PWM_BNF_BRK1FCS_Pos)                    /*!< PWM_T::BNF: BRK1FCS Mask               */
N
N#define PWM_BNF_BRK1FCNT_Pos             (12)                                              /*!< PWM_T::BNF: BRK1FCNT Position          */
N#define PWM_BNF_BRK1FCNT_Msk             (0x7ul << PWM_BNF_BRK1FCNT_Pos)                   /*!< PWM_T::BNF: BRK1FCNT Mask              */
N
N#define PWM_BNF_BRK1PINV_Pos             (15)                                              /*!< PWM_T::BNF: BRK1PINV Position          */
N#define PWM_BNF_BRK1PINV_Msk             (0x1ul << PWM_BNF_BRK1PINV_Pos)                   /*!< PWM_T::BNF: BRK1PINV Mask              */
N
N#define PWM_BNF_BK0SRC_Pos               (16)                                              /*!< PWM_T::BNF: BK0SRC Position            */
N#define PWM_BNF_BK0SRC_Msk               (0x1ul << PWM_BNF_BK0SRC_Pos)                     /*!< PWM_T::BNF: BK0SRC Mask                */
N
N#define PWM_BNF_BK1SRC_Pos               (24)                                              /*!< PWM_T::BNF: BK1SRC Position            */
N#define PWM_BNF_BK1SRC_Msk               (0x1ul << PWM_BNF_BK1SRC_Pos)                     /*!< PWM_T::BNF: BK1SRC Mask                */
N
N#define PWM_FAILBRK_CSSBRKEN_Pos         (0)                                               /*!< PWM_T::FAILBRK: CSSBRKEN Position      */
N#define PWM_FAILBRK_CSSBRKEN_Msk         (0x1ul << PWM_FAILBRK_CSSBRKEN_Pos)               /*!< PWM_T::FAILBRK: CSSBRKEN Mask          */
N
N#define PWM_FAILBRK_BODBRKEN_Pos         (1)                                               /*!< PWM_T::FAILBRK: BODBRKEN Position      */
N#define PWM_FAILBRK_BODBRKEN_Msk         (0x1ul << PWM_FAILBRK_BODBRKEN_Pos)               /*!< PWM_T::FAILBRK: BODBRKEN Mask          */
N
N#define PWM_FAILBRK_CORBRKEN_Pos         (3)                                               /*!< PWM_T::FAILBRK: CORBRKEN Position      */
N#define PWM_FAILBRK_CORBRKEN_Msk         (0x1ul << PWM_FAILBRK_CORBRKEN_Pos)               /*!< PWM_T::FAILBRK: CORBRKEN Mask          */
N
N#define PWM_BRKCTL0_1_BRKP0EEN_Pos       (4)                                               /*!< PWM_T::BRKCTL0_1: BRKP0EEN Position    */
N#define PWM_BRKCTL0_1_BRKP0EEN_Msk       (0x1ul << PWM_BRKCTL0_1_BRKP0EEN_Pos)             /*!< PWM_T::BRKCTL0_1: BRKP0EEN Mask        */
N
N#define PWM_BRKCTL0_1_BRKP1EEN_Pos       (5)                                               /*!< PWM_T::BRKCTL0_1: BRKP1EEN Position    */
N#define PWM_BRKCTL0_1_BRKP1EEN_Msk       (0x1ul << PWM_BRKCTL0_1_BRKP1EEN_Pos)             /*!< PWM_T::BRKCTL0_1: BRKP1EEN Mask        */
N
N#define PWM_BRKCTL0_1_SYSEEN_Pos         (7)                                               /*!< PWM_T::BRKCTL0_1: SYSEEN Position      */
N#define PWM_BRKCTL0_1_SYSEEN_Msk         (0x1ul << PWM_BRKCTL0_1_SYSEEN_Pos)               /*!< PWM_T::BRKCTL0_1: SYSEEN Mask          */
N
N#define PWM_BRKCTL0_1_BRKP0LEN_Pos       (12)                                              /*!< PWM_T::BRKCTL0_1: BRKP0LEN Position    */
N#define PWM_BRKCTL0_1_BRKP0LEN_Msk       (0x1ul << PWM_BRKCTL0_1_BRKP0LEN_Pos)             /*!< PWM_T::BRKCTL0_1: BRKP0LEN Mask        */
N
N#define PWM_BRKCTL0_1_BRKP1LEN_Pos       (13)                                              /*!< PWM_T::BRKCTL0_1: BRKP1LEN Position    */
N#define PWM_BRKCTL0_1_BRKP1LEN_Msk       (0x1ul << PWM_BRKCTL0_1_BRKP1LEN_Pos)             /*!< PWM_T::BRKCTL0_1: BRKP1LEN Mask        */
N
N#define PWM_BRKCTL0_1_SYSLEN_Pos         (15)                                              /*!< PWM_T::BRKCTL0_1: SYSLEN Position      */
N#define PWM_BRKCTL0_1_SYSLEN_Msk         (0x1ul << PWM_BRKCTL0_1_SYSLEN_Pos)               /*!< PWM_T::BRKCTL0_1: SYSLEN Mask          */
N
N#define PWM_BRKCTL0_1_BRKAEVEN_Pos       (16)                                              /*!< PWM_T::BRKCTL0_1: BRKAEVEN Position    */
N#define PWM_BRKCTL0_1_BRKAEVEN_Msk       (0x3ul << PWM_BRKCTL0_1_BRKAEVEN_Pos)             /*!< PWM_T::BRKCTL0_1: BRKAEVEN Mask        */
N
N#define PWM_BRKCTL0_1_BRKAODD_Pos        (18)                                              /*!< PWM_T::BRKCTL0_1: BRKAODD Position     */
N#define PWM_BRKCTL0_1_BRKAODD_Msk        (0x3ul << PWM_BRKCTL0_1_BRKAODD_Pos)              /*!< PWM_T::BRKCTL0_1: BRKAODD Mask         */
N
N#define PWM_BRKCTL2_3_BRKP0EEN_Pos       (4)                                               /*!< PWM_T::BRKCTL2_3: BRKP0EEN Position    */
N#define PWM_BRKCTL2_3_BRKP0EEN_Msk       (0x1ul << PWM_BRKCTL2_3_BRKP0EEN_Pos)             /*!< PWM_T::BRKCTL2_3: BRKP0EEN Mask        */
N
N#define PWM_BRKCTL2_3_BRKP1EEN_Pos       (5)                                               /*!< PWM_T::BRKCTL2_3: BRKP1EEN Position    */
N#define PWM_BRKCTL2_3_BRKP1EEN_Msk       (0x1ul << PWM_BRKCTL2_3_BRKP1EEN_Pos)             /*!< PWM_T::BRKCTL2_3: BRKP1EEN Mask        */
N
N#define PWM_BRKCTL2_3_SYSEEN_Pos         (7)                                               /*!< PWM_T::BRKCTL2_3: SYSEEN Position      */
N#define PWM_BRKCTL2_3_SYSEEN_Msk         (0x1ul << PWM_BRKCTL2_3_SYSEEN_Pos)               /*!< PWM_T::BRKCTL2_3: SYSEEN Mask          */
N
N#define PWM_BRKCTL2_3_BRKP0LEN_Pos       (12)                                              /*!< PWM_T::BRKCTL2_3: BRKP0LEN Position    */
N#define PWM_BRKCTL2_3_BRKP0LEN_Msk       (0x1ul << PWM_BRKCTL2_3_BRKP0LEN_Pos)             /*!< PWM_T::BRKCTL2_3: BRKP0LEN Mask        */
N
N#define PWM_BRKCTL2_3_BRKP1LEN_Pos       (13)                                              /*!< PWM_T::BRKCTL2_3: BRKP1LEN Position    */
N#define PWM_BRKCTL2_3_BRKP1LEN_Msk       (0x1ul << PWM_BRKCTL2_3_BRKP1LEN_Pos)             /*!< PWM_T::BRKCTL2_3: BRKP1LEN Mask        */
N
N#define PWM_BRKCTL2_3_SYSLEN_Pos         (15)                                              /*!< PWM_T::BRKCTL2_3: SYSLEN Position      */
N#define PWM_BRKCTL2_3_SYSLEN_Msk         (0x1ul << PWM_BRKCTL2_3_SYSLEN_Pos)               /*!< PWM_T::BRKCTL2_3: SYSLEN Mask          */
N
N#define PWM_BRKCTL2_3_BRKAEVEN_Pos       (16)                                              /*!< PWM_T::BRKCTL2_3: BRKAEVEN Position    */
N#define PWM_BRKCTL2_3_BRKAEVEN_Msk       (0x3ul << PWM_BRKCTL2_3_BRKAEVEN_Pos)             /*!< PWM_T::BRKCTL2_3: BRKAEVEN Mask        */
N
N#define PWM_BRKCTL2_3_BRKAODD_Pos        (18)                                              /*!< PWM_T::BRKCTL2_3: BRKAODD Position     */
N#define PWM_BRKCTL2_3_BRKAODD_Msk        (0x3ul << PWM_BRKCTL2_3_BRKAODD_Pos)              /*!< PWM_T::BRKCTL2_3: BRKAODD Mask         */
N
N#define PWM_BRKCTL4_5_BRKP0EEN_Pos       (4)                                               /*!< PWM_T::BRKCTL4_5: BRKP0EEN Position    */
N#define PWM_BRKCTL4_5_BRKP0EEN_Msk       (0x1ul << PWM_BRKCTL4_5_BRKP0EEN_Pos)             /*!< PWM_T::BRKCTL4_5: BRKP0EEN Mask        */
N
N#define PWM_BRKCTL4_5_BRKP1EEN_Pos       (5)                                               /*!< PWM_T::BRKCTL4_5: BRKP1EEN Position    */
N#define PWM_BRKCTL4_5_BRKP1EEN_Msk       (0x1ul << PWM_BRKCTL4_5_BRKP1EEN_Pos)             /*!< PWM_T::BRKCTL4_5: BRKP1EEN Mask        */
N
N#define PWM_BRKCTL4_5_SYSEEN_Pos         (7)                                               /*!< PWM_T::BRKCTL4_5: SYSEEN Position      */
N#define PWM_BRKCTL4_5_SYSEEN_Msk         (0x1ul << PWM_BRKCTL4_5_SYSEEN_Pos)               /*!< PWM_T::BRKCTL4_5: SYSEEN Mask          */
N
N#define PWM_BRKCTL4_5_BRKP0LEN_Pos       (12)                                              /*!< PWM_T::BRKCTL4_5: BRKP0LEN Position    */
N#define PWM_BRKCTL4_5_BRKP0LEN_Msk       (0x1ul << PWM_BRKCTL4_5_BRKP0LEN_Pos)             /*!< PWM_T::BRKCTL4_5: BRKP0LEN Mask        */
N
N#define PWM_BRKCTL4_5_BRKP1LEN_Pos       (13)                                              /*!< PWM_T::BRKCTL4_5: BRKP1LEN Position    */
N#define PWM_BRKCTL4_5_BRKP1LEN_Msk       (0x1ul << PWM_BRKCTL4_5_BRKP1LEN_Pos)             /*!< PWM_T::BRKCTL4_5: BRKP1LEN Mask        */
N
N#define PWM_BRKCTL4_5_SYSLEN_Pos         (15)                                              /*!< PWM_T::BRKCTL4_5: SYSLEN Position      */
N#define PWM_BRKCTL4_5_SYSLEN_Msk         (0x1ul << PWM_BRKCTL4_5_SYSLEN_Pos)               /*!< PWM_T::BRKCTL4_5: SYSLEN Mask          */
N
N#define PWM_BRKCTL4_5_BRKAEVEN_Pos       (16)                                              /*!< PWM_T::BRKCTL4_5: BRKAEVEN Position    */
N#define PWM_BRKCTL4_5_BRKAEVEN_Msk       (0x3ul << PWM_BRKCTL4_5_BRKAEVEN_Pos)             /*!< PWM_T::BRKCTL4_5: BRKAEVEN Mask        */
N
N#define PWM_BRKCTL4_5_BRKAODD_Pos        (18)                                              /*!< PWM_T::BRKCTL4_5: BRKAODD Position     */
N#define PWM_BRKCTL4_5_BRKAODD_Msk        (0x3ul << PWM_BRKCTL4_5_BRKAODD_Pos)              /*!< PWM_T::BRKCTL4_5: BRKAODD Mask         */
N
N#define PWM_POLCTL_PINV0_Pos             (0)                                               /*!< PWM_T::POLCTL: PINV0 Position          */
N#define PWM_POLCTL_PINV0_Msk             (0x1ul << PWM_POLCTL_PINV0_Pos)                   /*!< PWM_T::POLCTL: PINV0 Mask              */
N
N#define PWM_POLCTL_PINV1_Pos             (1)                                               /*!< PWM_T::POLCTL: PINV1 Position          */
N#define PWM_POLCTL_PINV1_Msk             (0x1ul << PWM_POLCTL_PINV1_Pos)                   /*!< PWM_T::POLCTL: PINV1 Mask              */
N
N#define PWM_POLCTL_PINV2_Pos             (2)                                               /*!< PWM_T::POLCTL: PINV2 Position          */
N#define PWM_POLCTL_PINV2_Msk             (0x1ul << PWM_POLCTL_PINV2_Pos)                   /*!< PWM_T::POLCTL: PINV2 Mask              */
N
N#define PWM_POLCTL_PINV3_Pos             (3)                                               /*!< PWM_T::POLCTL: PINV3 Position          */
N#define PWM_POLCTL_PINV3_Msk             (0x1ul << PWM_POLCTL_PINV3_Pos)                   /*!< PWM_T::POLCTL: PINV3 Mask              */
N
N#define PWM_POLCTL_PINV4_Pos             (4)                                               /*!< PWM_T::POLCTL: PINV4 Position          */
N#define PWM_POLCTL_PINV4_Msk             (0x1ul << PWM_POLCTL_PINV4_Pos)                   /*!< PWM_T::POLCTL: PINV4 Mask              */
N
N#define PWM_POLCTL_PINV5_Pos             (5)                                               /*!< PWM_T::POLCTL: PINV5 Position          */
N#define PWM_POLCTL_PINV5_Msk             (0x1ul << PWM_POLCTL_PINV5_Pos)                   /*!< PWM_T::POLCTL: PINV5 Mask              */
N
N#define PWM_POEN_POEN0_Pos               (0)                                               /*!< PWM_T::POEN: POEN0 Position            */
N#define PWM_POEN_POEN0_Msk               (0x1ul << PWM_POEN_POEN0_Pos)                     /*!< PWM_T::POEN: POEN0 Mask                */
N
N#define PWM_POEN_POEN1_Pos               (1)                                               /*!< PWM_T::POEN: POEN1 Position            */
N#define PWM_POEN_POEN1_Msk               (0x1ul << PWM_POEN_POEN1_Pos)                     /*!< PWM_T::POEN: POEN1 Mask                */
N
N#define PWM_POEN_POEN2_Pos               (2)                                               /*!< PWM_T::POEN: POEN2 Position            */
N#define PWM_POEN_POEN2_Msk               (0x1ul << PWM_POEN_POEN2_Pos)                     /*!< PWM_T::POEN: POEN2 Mask                */
N
N#define PWM_POEN_POEN3_Pos               (3)                                               /*!< PWM_T::POEN: POEN3 Position            */
N#define PWM_POEN_POEN3_Msk               (0x1ul << PWM_POEN_POEN3_Pos)                     /*!< PWM_T::POEN: POEN3 Mask                */
N
N#define PWM_POEN_POEN4_Pos               (4)                                               /*!< PWM_T::POEN: POEN4 Position            */
N#define PWM_POEN_POEN4_Msk               (0x1ul << PWM_POEN_POEN4_Pos)                     /*!< PWM_T::POEN: POEN4 Mask                */
N
N#define PWM_POEN_POEN5_Pos               (5)                                               /*!< PWM_T::POEN: POEN5 Position            */
N#define PWM_POEN_POEN5_Msk               (0x1ul << PWM_POEN_POEN5_Pos)                     /*!< PWM_T::POEN: POEN5 Mask                */
N
N#define PWM_SWBRK_BRKETRG0_Pos           (0)                                               /*!< PWM_T::SWBRK: BRKETRG0 Position        */
N#define PWM_SWBRK_BRKETRG0_Msk           (0x1ul << PWM_SWBRK_BRKETRG0_Pos)                 /*!< PWM_T::SWBRK: BRKETRG0 Mask            */
N
N#define PWM_SWBRK_BRKETRG2_Pos           (1)                                               /*!< PWM_T::SWBRK: BRKETRG2 Position        */
N#define PWM_SWBRK_BRKETRG2_Msk           (0x1ul << PWM_SWBRK_BRKETRG2_Pos)                 /*!< PWM_T::SWBRK: BRKETRG2 Mask            */
N
N#define PWM_SWBRK_BRKETRG4_Pos           (2)                                               /*!< PWM_T::SWBRK: BRKETRG4 Position        */
N#define PWM_SWBRK_BRKETRG4_Msk           (0x1ul << PWM_SWBRK_BRKETRG4_Pos)                 /*!< PWM_T::SWBRK: BRKETRG4 Mask            */
N
N#define PWM_SWBRK_BRKLTRG0_Pos           (8)                                               /*!< PWM_T::SWBRK: BRKLTRG0 Position        */
N#define PWM_SWBRK_BRKLTRG0_Msk           (0x1ul << PWM_SWBRK_BRKLTRG0_Pos)                 /*!< PWM_T::SWBRK: BRKLTRG0 Mask            */
N
N#define PWM_SWBRK_BRKLTRG2_Pos           (9)                                               /*!< PWM_T::SWBRK: BRKLTRG2 Position        */
N#define PWM_SWBRK_BRKLTRG2_Msk           (0x1ul << PWM_SWBRK_BRKLTRG2_Pos)                 /*!< PWM_T::SWBRK: BRKLTRG2 Mask            */
N
N#define PWM_SWBRK_BRKLTRG4_Pos           (10)                                              /*!< PWM_T::SWBRK: BRKLTRG4 Position        */
N#define PWM_SWBRK_BRKLTRG4_Msk           (0x1ul << PWM_SWBRK_BRKLTRG4_Pos)                 /*!< PWM_T::SWBRK: BRKLTRG4 Mask            */
N
N#define PWM_INTEN0_ZIEN0_Pos             (0)                                               /*!< PWM_T::INTEN0: ZIEN0 Position          */
N#define PWM_INTEN0_ZIEN0_Msk             (0x1ul << PWM_INTEN0_ZIEN0_Pos)                   /*!< PWM_T::INTEN0: ZIEN0 Mask              */
N
N#define PWM_INTEN0_ZIEN2_Pos             (2)                                               /*!< PWM_T::INTEN0: ZIEN2 Position          */
N#define PWM_INTEN0_ZIEN2_Msk             (0x1ul << PWM_INTEN0_ZIEN2_Pos)                   /*!< PWM_T::INTEN0: ZIEN2 Mask              */
N
N#define PWM_INTEN0_ZIEN4_Pos             (4)                                               /*!< PWM_T::INTEN0: ZIEN4 Position          */
N#define PWM_INTEN0_ZIEN4_Msk             (0x1ul << PWM_INTEN0_ZIEN4_Pos)                   /*!< PWM_T::INTEN0: ZIEN4 Mask              */
N
N#define PWM_INTEN0_PIEN0_Pos             (8)                                               /*!< PWM_T::INTEN0: PIEN0 Position          */
N#define PWM_INTEN0_PIEN0_Msk             (0x1ul << PWM_INTEN0_PIEN0_Pos)                   /*!< PWM_T::INTEN0: PIEN0 Mask              */
N
N#define PWM_INTEN0_PIEN2_Pos             (10)                                              /*!< PWM_T::INTEN0: PIEN2 Position          */
N#define PWM_INTEN0_PIEN2_Msk             (0x1ul << PWM_INTEN0_PIEN2_Pos)                   /*!< PWM_T::INTEN0: PIEN2 Mask              */
N
N#define PWM_INTEN0_PIEN4_Pos             (12)                                              /*!< PWM_T::INTEN0: PIEN4 Position          */
N#define PWM_INTEN0_PIEN4_Msk             (0x1ul << PWM_INTEN0_PIEN4_Pos)                   /*!< PWM_T::INTEN0: PIEN4 Mask              */
N
N#define PWM_INTEN0_CMPUIEN0_Pos          (16)                                              /*!< PWM_T::INTEN0: CMPUIEN0 Position       */
N#define PWM_INTEN0_CMPUIEN0_Msk          (0x1ul << PWM_INTEN0_CMPUIEN0_Pos)                /*!< PWM_T::INTEN0: CMPUIEN0 Mask           */
N
N#define PWM_INTEN0_CMPUIEN1_Pos          (17)                                              /*!< PWM_T::INTEN0: CMPUIEN1 Position       */
N#define PWM_INTEN0_CMPUIEN1_Msk          (0x1ul << PWM_INTEN0_CMPUIEN1_Pos)                /*!< PWM_T::INTEN0: CMPUIEN1 Mask           */
N
N#define PWM_INTEN0_CMPUIEN2_Pos          (18)                                              /*!< PWM_T::INTEN0: CMPUIEN2 Position       */
N#define PWM_INTEN0_CMPUIEN2_Msk          (0x1ul << PWM_INTEN0_CMPUIEN2_Pos)                /*!< PWM_T::INTEN0: CMPUIEN2 Mask           */
N
N#define PWM_INTEN0_CMPUIEN3_Pos          (19)                                              /*!< PWM_T::INTEN0: CMPUIEN3 Position       */
N#define PWM_INTEN0_CMPUIEN3_Msk          (0x1ul << PWM_INTEN0_CMPUIEN3_Pos)                /*!< PWM_T::INTEN0: CMPUIEN3 Mask           */
N
N#define PWM_INTEN0_CMPUIEN4_Pos          (20)                                              /*!< PWM_T::INTEN0: CMPUIEN4 Position       */
N#define PWM_INTEN0_CMPUIEN4_Msk          (0x1ul << PWM_INTEN0_CMPUIEN4_Pos)                /*!< PWM_T::INTEN0: CMPUIEN4 Mask           */
N
N#define PWM_INTEN0_CMPUIEN5_Pos          (21)                                              /*!< PWM_T::INTEN0: CMPUIEN5 Position       */
N#define PWM_INTEN0_CMPUIEN5_Msk          (0x1ul << PWM_INTEN0_CMPUIEN5_Pos)                /*!< PWM_T::INTEN0: CMPUIEN5 Mask           */
N
N#define PWM_INTEN0_CMPDIEN0_Pos          (24)                                              /*!< PWM_T::INTEN0: CMPDIEN0 Position       */
N#define PWM_INTEN0_CMPDIEN0_Msk          (0x1ul << PWM_INTEN0_CMPDIEN0_Pos)                /*!< PWM_T::INTEN0: CMPDIEN0 Mask           */
N
N#define PWM_INTEN0_CMPDIEN1_Pos          (25)                                              /*!< PWM_T::INTEN0: CMPDIEN1 Position       */
N#define PWM_INTEN0_CMPDIEN1_Msk          (0x1ul << PWM_INTEN0_CMPDIEN1_Pos)                /*!< PWM_T::INTEN0: CMPDIEN1 Mask           */
N
N#define PWM_INTEN0_CMPDIEN2_Pos          (26)                                              /*!< PWM_T::INTEN0: CMPDIEN2 Position       */
N#define PWM_INTEN0_CMPDIEN2_Msk          (0x1ul << PWM_INTEN0_CMPDIEN2_Pos)                /*!< PWM_T::INTEN0: CMPDIEN2 Mask           */
N
N#define PWM_INTEN0_CMPDIEN3_Pos          (27)                                              /*!< PWM_T::INTEN0: CMPDIEN3 Position       */
N#define PWM_INTEN0_CMPDIEN3_Msk          (0x1ul << PWM_INTEN0_CMPDIEN3_Pos)                /*!< PWM_T::INTEN0: CMPDIEN3 Mask           */
N
N#define PWM_INTEN0_CMPDIEN4_Pos          (28)                                              /*!< PWM_T::INTEN0: CMPDIEN4 Position       */
N#define PWM_INTEN0_CMPDIEN4_Msk          (0x1ul << PWM_INTEN0_CMPDIEN4_Pos)                /*!< PWM_T::INTEN0: CMPDIEN4 Mask           */
N
N#define PWM_INTEN0_CMPDIEN5_Pos          (29)                                              /*!< PWM_T::INTEN0: CMPDIEN5 Position       */
N#define PWM_INTEN0_CMPDIEN5_Msk          (0x1ul << PWM_INTEN0_CMPDIEN5_Pos)                /*!< PWM_T::INTEN0: CMPDIEN5 Mask           */
N
N#define PWM_INTEN1_BRKEIEN0_1_Pos        (0)                                               /*!< PWM_T::INTEN1: BRKEIEN0_1 Position     */
N#define PWM_INTEN1_BRKEIEN0_1_Msk        (0x1ul << PWM_INTEN1_BRKEIEN0_1_Pos)              /*!< PWM_T::INTEN1: BRKEIEN0_1 Mask         */
N
N#define PWM_INTEN1_BRKEIEN2_3_Pos        (1)                                               /*!< PWM_T::INTEN1: BRKEIEN2_3 Position     */
N#define PWM_INTEN1_BRKEIEN2_3_Msk        (0x1ul << PWM_INTEN1_BRKEIEN2_3_Pos)              /*!< PWM_T::INTEN1: BRKEIEN2_3 Mask         */
N
N#define PWM_INTEN1_BRKEIEN4_5_Pos        (2)                                               /*!< PWM_T::INTEN1: BRKEIEN4_5 Position     */
N#define PWM_INTEN1_BRKEIEN4_5_Msk        (0x1ul << PWM_INTEN1_BRKEIEN4_5_Pos)              /*!< PWM_T::INTEN1: BRKEIEN4_5 Mask         */
N
N#define PWM_INTEN1_BRKLIEN0_1_Pos        (8)                                               /*!< PWM_T::INTEN1: BRKLIEN0_1 Position     */
N#define PWM_INTEN1_BRKLIEN0_1_Msk        (0x1ul << PWM_INTEN1_BRKLIEN0_1_Pos)              /*!< PWM_T::INTEN1: BRKLIEN0_1 Mask         */
N
N#define PWM_INTEN1_BRKLIEN2_3_Pos        (9)                                               /*!< PWM_T::INTEN1: BRKLIEN2_3 Position     */
N#define PWM_INTEN1_BRKLIEN2_3_Msk        (0x1ul << PWM_INTEN1_BRKLIEN2_3_Pos)              /*!< PWM_T::INTEN1: BRKLIEN2_3 Mask         */
N
N#define PWM_INTEN1_BRKLIEN4_5_Pos        (10)                                              /*!< PWM_T::INTEN1: BRKLIEN4_5 Position     */
N#define PWM_INTEN1_BRKLIEN4_5_Msk        (0x1ul << PWM_INTEN1_BRKLIEN4_5_Pos)              /*!< PWM_T::INTEN1: BRKLIEN4_5 Mask         */
N
N#define PWM_INTSTS0_ZIF0_Pos             (0)                                               /*!< PWM_T::INTSTS0: ZIF0 Position          */
N#define PWM_INTSTS0_ZIF0_Msk             (0x1ul << PWM_INTSTS0_ZIF0_Pos)                   /*!< PWM_T::INTSTS0: ZIF0 Mask              */
N
N#define PWM_INTSTS0_ZIF2_Pos             (2)                                               /*!< PWM_T::INTSTS0: ZIF2 Position          */
N#define PWM_INTSTS0_ZIF2_Msk             (0x1ul << PWM_INTSTS0_ZIF2_Pos)                   /*!< PWM_T::INTSTS0: ZIF2 Mask              */
N
N#define PWM_INTSTS0_ZIF4_Pos             (4)                                               /*!< PWM_T::INTSTS0: ZIF4 Position          */
N#define PWM_INTSTS0_ZIF4_Msk             (0x1ul << PWM_INTSTS0_ZIF4_Pos)                   /*!< PWM_T::INTSTS0: ZIF4 Mask              */
N
N#define PWM_INTSTS0_PIF0_Pos             (8)                                               /*!< PWM_T::INTSTS0: PIF0 Position          */
N#define PWM_INTSTS0_PIF0_Msk             (0x1ul << PWM_INTSTS0_PIF0_Pos)                   /*!< PWM_T::INTSTS0: PIF0 Mask              */
N
N#define PWM_INTSTS0_PIF2_Pos             (10)                                              /*!< PWM_T::INTSTS0: PIF2 Position          */
N#define PWM_INTSTS0_PIF2_Msk             (0x1ul << PWM_INTSTS0_PIF2_Pos)                   /*!< PWM_T::INTSTS0: PIF2 Mask              */
N
N#define PWM_INTSTS0_PIF4_Pos             (12)                                              /*!< PWM_T::INTSTS0: PIF4 Position          */
N#define PWM_INTSTS0_PIF4_Msk             (0x1ul << PWM_INTSTS0_PIF4_Pos)                   /*!< PWM_T::INTSTS0: PIF4 Mask              */
N
N#define PWM_INTSTS0_CMPUIF0_Pos          (16)                                              /*!< PWM_T::INTSTS0: CMPUIF0 Position       */
N#define PWM_INTSTS0_CMPUIF0_Msk          (0x1ul << PWM_INTSTS0_CMPUIF0_Pos)                /*!< PWM_T::INTSTS0: CMPUIF0 Mask           */
N
N#define PWM_INTSTS0_CMPUIF1_Pos          (17)                                              /*!< PWM_T::INTSTS0: CMPUIF1 Position       */
N#define PWM_INTSTS0_CMPUIF1_Msk          (0x1ul << PWM_INTSTS0_CMPUIF1_Pos)                /*!< PWM_T::INTSTS0: CMPUIF1 Mask           */
N
N#define PWM_INTSTS0_CMPUIF2_Pos          (18)                                              /*!< PWM_T::INTSTS0: CMPUIF2 Position       */
N#define PWM_INTSTS0_CMPUIF2_Msk          (0x1ul << PWM_INTSTS0_CMPUIF2_Pos)                /*!< PWM_T::INTSTS0: CMPUIF2 Mask           */
N
N#define PWM_INTSTS0_CMPUIF3_Pos          (19)                                              /*!< PWM_T::INTSTS0: CMPUIF3 Position       */
N#define PWM_INTSTS0_CMPUIF3_Msk          (0x1ul << PWM_INTSTS0_CMPUIF3_Pos)                /*!< PWM_T::INTSTS0: CMPUIF3 Mask           */
N
N#define PWM_INTSTS0_CMPUIF4_Pos          (20)                                              /*!< PWM_T::INTSTS0: CMPUIF4 Position       */
N#define PWM_INTSTS0_CMPUIF4_Msk          (0x1ul << PWM_INTSTS0_CMPUIF4_Pos)                /*!< PWM_T::INTSTS0: CMPUIF4 Mask           */
N
N#define PWM_INTSTS0_CMPUIF5_Pos          (21)                                              /*!< PWM_T::INTSTS0: CMPUIF5 Position       */
N#define PWM_INTSTS0_CMPUIF5_Msk          (0x1ul << PWM_INTSTS0_CMPUIF5_Pos)                /*!< PWM_T::INTSTS0: CMPUIF5 Mask           */
N
N#define PWM_INTSTS0_CMPDIF0_Pos          (24)                                              /*!< PWM_T::INTSTS0: CMPDIF0 Position       */
N#define PWM_INTSTS0_CMPDIF0_Msk          (0x1ul << PWM_INTSTS0_CMPDIF0_Pos)                /*!< PWM_T::INTSTS0: CMPDIF0 Mask           */
N
N#define PWM_INTSTS0_CMPDIF1_Pos          (25)                                              /*!< PWM_T::INTSTS0: CMPDIF1 Position       */
N#define PWM_INTSTS0_CMPDIF1_Msk          (0x1ul << PWM_INTSTS0_CMPDIF1_Pos)                /*!< PWM_T::INTSTS0: CMPDIF1 Mask           */
N
N#define PWM_INTSTS0_CMPDIF2_Pos          (26)                                              /*!< PWM_T::INTSTS0: CMPDIF2 Position       */
N#define PWM_INTSTS0_CMPDIF2_Msk          (0x1ul << PWM_INTSTS0_CMPDIF2_Pos)                /*!< PWM_T::INTSTS0: CMPDIF2 Mask           */
N
N#define PWM_INTSTS0_CMPDIF3_Pos          (27)                                              /*!< PWM_T::INTSTS0: CMPDIF3 Position       */
N#define PWM_INTSTS0_CMPDIF3_Msk          (0x1ul << PWM_INTSTS0_CMPDIF3_Pos)                /*!< PWM_T::INTSTS0: CMPDIF3 Mask           */
N
N#define PWM_INTSTS0_CMPDIF4_Pos          (28)                                              /*!< PWM_T::INTSTS0: CMPDIF4 Position       */
N#define PWM_INTSTS0_CMPDIF4_Msk          (0x1ul << PWM_INTSTS0_CMPDIF4_Pos)                /*!< PWM_T::INTSTS0: CMPDIF4 Mask           */
N
N#define PWM_INTSTS0_CMPDIF5_Pos          (29)                                              /*!< PWM_T::INTSTS0: CMPDIF5 Position       */
N#define PWM_INTSTS0_CMPDIF5_Msk          (0x1ul << PWM_INTSTS0_CMPDIF5_Pos)                /*!< PWM_T::INTSTS0: CMPDIF5 Mask           */
N
N#define PWM_INTSTS1_BRKEIF0_Pos          (0)                                               /*!< PWM_T::INTSTS1: BRKEIF0 Position       */
N#define PWM_INTSTS1_BRKEIF0_Msk          (0x1ul << PWM_INTSTS1_BRKEIF0_Pos)                /*!< PWM_T::INTSTS1: BRKEIF0 Mask           */
N
N#define PWM_INTSTS1_BRKEIF1_Pos          (1)                                               /*!< PWM_T::INTSTS1: BRKEIF1 Position       */
N#define PWM_INTSTS1_BRKEIF1_Msk          (0x1ul << PWM_INTSTS1_BRKEIF1_Pos)                /*!< PWM_T::INTSTS1: BRKEIF1 Mask           */
N
N#define PWM_INTSTS1_BRKEIF2_Pos          (2)                                               /*!< PWM_T::INTSTS1: BRKEIF2 Position       */
N#define PWM_INTSTS1_BRKEIF2_Msk          (0x1ul << PWM_INTSTS1_BRKEIF2_Pos)                /*!< PWM_T::INTSTS1: BRKEIF2 Mask           */
N
N#define PWM_INTSTS1_BRKEIF3_Pos          (3)                                               /*!< PWM_T::INTSTS1: BRKEIF3 Position       */
N#define PWM_INTSTS1_BRKEIF3_Msk          (0x1ul << PWM_INTSTS1_BRKEIF3_Pos)                /*!< PWM_T::INTSTS1: BRKEIF3 Mask           */
N
N#define PWM_INTSTS1_BRKEIF4_Pos          (4)                                               /*!< PWM_T::INTSTS1: BRKEIF4 Position       */
N#define PWM_INTSTS1_BRKEIF4_Msk          (0x1ul << PWM_INTSTS1_BRKEIF4_Pos)                /*!< PWM_T::INTSTS1: BRKEIF4 Mask           */
N
N#define PWM_INTSTS1_BRKEIF5_Pos          (5)                                               /*!< PWM_T::INTSTS1: BRKEIF5 Position       */
N#define PWM_INTSTS1_BRKEIF5_Msk          (0x1ul << PWM_INTSTS1_BRKEIF5_Pos)                /*!< PWM_T::INTSTS1: BRKEIF5 Mask           */
N
N#define PWM_INTSTS1_BRKLIF0_Pos          (8)                                               /*!< PWM_T::INTSTS1: BRKLIF0 Position       */
N#define PWM_INTSTS1_BRKLIF0_Msk          (0x1ul << PWM_INTSTS1_BRKLIF0_Pos)                /*!< PWM_T::INTSTS1: BRKLIF0 Mask           */
N
N#define PWM_INTSTS1_BRKLIF1_Pos          (9)                                               /*!< PWM_T::INTSTS1: BRKLIF1 Position       */
N#define PWM_INTSTS1_BRKLIF1_Msk          (0x1ul << PWM_INTSTS1_BRKLIF1_Pos)                /*!< PWM_T::INTSTS1: BRKLIF1 Mask           */
N
N#define PWM_INTSTS1_BRKLIF2_Pos          (10)                                              /*!< PWM_T::INTSTS1: BRKLIF2 Position       */
N#define PWM_INTSTS1_BRKLIF2_Msk          (0x1ul << PWM_INTSTS1_BRKLIF2_Pos)                /*!< PWM_T::INTSTS1: BRKLIF2 Mask           */
N
N#define PWM_INTSTS1_BRKLIF3_Pos          (11)                                              /*!< PWM_T::INTSTS1: BRKLIF3 Position       */
N#define PWM_INTSTS1_BRKLIF3_Msk          (0x1ul << PWM_INTSTS1_BRKLIF3_Pos)                /*!< PWM_T::INTSTS1: BRKLIF3 Mask           */
N
N#define PWM_INTSTS1_BRKLIF4_Pos          (12)                                              /*!< PWM_T::INTSTS1: BRKLIF4 Position       */
N#define PWM_INTSTS1_BRKLIF4_Msk          (0x1ul << PWM_INTSTS1_BRKLIF4_Pos)                /*!< PWM_T::INTSTS1: BRKLIF4 Mask           */
N
N#define PWM_INTSTS1_BRKLIF5_Pos          (13)                                              /*!< PWM_T::INTSTS1: BRKLIF5 Position       */
N#define PWM_INTSTS1_BRKLIF5_Msk          (0x1ul << PWM_INTSTS1_BRKLIF5_Pos)                /*!< PWM_T::INTSTS1: BRKLIF5 Mask           */
N
N#define PWM_INTSTS1_BRKESTS0_Pos         (16)                                              /*!< PWM_T::INTSTS1: BRKESTS0 Position      */
N#define PWM_INTSTS1_BRKESTS0_Msk         (0x1ul << PWM_INTSTS1_BRKESTS0_Pos)               /*!< PWM_T::INTSTS1: BRKESTS0 Mask          */
N
N#define PWM_INTSTS1_BRKESTS1_Pos         (17)                                              /*!< PWM_T::INTSTS1: BRKESTS1 Position      */
N#define PWM_INTSTS1_BRKESTS1_Msk         (0x1ul << PWM_INTSTS1_BRKESTS1_Pos)               /*!< PWM_T::INTSTS1: BRKESTS1 Mask          */
N
N#define PWM_INTSTS1_BRKESTS2_Pos         (18)                                              /*!< PWM_T::INTSTS1: BRKESTS2 Position      */
N#define PWM_INTSTS1_BRKESTS2_Msk         (0x1ul << PWM_INTSTS1_BRKESTS2_Pos)               /*!< PWM_T::INTSTS1: BRKESTS2 Mask          */
N
N#define PWM_INTSTS1_BRKESTS3_Pos         (19)                                              /*!< PWM_T::INTSTS1: BRKESTS3 Position      */
N#define PWM_INTSTS1_BRKESTS3_Msk         (0x1ul << PWM_INTSTS1_BRKESTS3_Pos)               /*!< PWM_T::INTSTS1: BRKESTS3 Mask          */
N
N#define PWM_INTSTS1_BRKESTS4_Pos         (20)                                              /*!< PWM_T::INTSTS1: BRKESTS4 Position      */
N#define PWM_INTSTS1_BRKESTS4_Msk         (0x1ul << PWM_INTSTS1_BRKESTS4_Pos)               /*!< PWM_T::INTSTS1: BRKESTS4 Mask          */
N
N#define PWM_INTSTS1_BRKESTS5_Pos         (21)                                              /*!< PWM_T::INTSTS1: BRKESTS5 Position      */
N#define PWM_INTSTS1_BRKESTS5_Msk         (0x1ul << PWM_INTSTS1_BRKESTS5_Pos)               /*!< PWM_T::INTSTS1: BRKESTS5 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS0_Pos         (24)                                              /*!< PWM_T::INTSTS1: BRKLSTS0 Position      */
N#define PWM_INTSTS1_BRKLSTS0_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS0_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS0 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS1_Pos         (25)                                              /*!< PWM_T::INTSTS1: BRKLSTS1 Position      */
N#define PWM_INTSTS1_BRKLSTS1_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS1_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS1 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS2_Pos         (26)                                              /*!< PWM_T::INTSTS1: BRKLSTS2 Position      */
N#define PWM_INTSTS1_BRKLSTS2_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS2_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS2 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS3_Pos         (27)                                              /*!< PWM_T::INTSTS1: BRKLSTS3 Position      */
N#define PWM_INTSTS1_BRKLSTS3_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS3_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS3 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS4_Pos         (28)                                              /*!< PWM_T::INTSTS1: BRKLSTS4 Position      */
N#define PWM_INTSTS1_BRKLSTS4_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS4_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS4 Mask          */
N
N#define PWM_INTSTS1_BRKLSTS5_Pos         (29)                                              /*!< PWM_T::INTSTS1: BRKLSTS5 Position      */
N#define PWM_INTSTS1_BRKLSTS5_Msk         (0x1ul << PWM_INTSTS1_BRKLSTS5_Pos)               /*!< PWM_T::INTSTS1: BRKLSTS5 Mask          */
N
N#define PWM_ADCTS0_TRGSEL0_Pos           (0)                                               /*!< PWM_T::ADCTS0: TRGSEL0 Position        */
N#define PWM_ADCTS0_TRGSEL0_Msk           (0xful << PWM_ADCTS0_TRGSEL0_Pos)                 /*!< PWM_T::ADCTS0: TRGSEL0 Mask            */
N
N#define PWM_ADCTS0_TRGEN0_Pos            (7)                                               /*!< PWM_T::ADCTS0: TRGEN0 Position         */
N#define PWM_ADCTS0_TRGEN0_Msk            (0x1ul << PWM_ADCTS0_TRGEN0_Pos)                  /*!< PWM_T::ADCTS0: TRGEN0 Mask             */
N
N#define PWM_ADCTS0_TRGSEL1_Pos           (8)                                               /*!< PWM_T::ADCTS0: TRGSEL1 Position        */
N#define PWM_ADCTS0_TRGSEL1_Msk           (0xful << PWM_ADCTS0_TRGSEL1_Pos)                 /*!< PWM_T::ADCTS0: TRGSEL1 Mask            */
N
N#define PWM_ADCTS0_TRGEN1_Pos            (15)                                              /*!< PWM_T::ADCTS0: TRGEN1 Position         */
N#define PWM_ADCTS0_TRGEN1_Msk            (0x1ul << PWM_ADCTS0_TRGEN1_Pos)                  /*!< PWM_T::ADCTS0: TRGEN1 Mask             */
N
N#define PWM_ADCTS0_TRGSEL2_Pos           (16)                                              /*!< PWM_T::ADCTS0: TRGSEL2 Position        */
N#define PWM_ADCTS0_TRGSEL2_Msk           (0xful << PWM_ADCTS0_TRGSEL2_Pos)                 /*!< PWM_T::ADCTS0: TRGSEL2 Mask            */
N
N#define PWM_ADCTS0_TRGEN2_Pos            (23)                                              /*!< PWM_T::ADCTS0: TRGEN2 Position         */
N#define PWM_ADCTS0_TRGEN2_Msk            (0x1ul << PWM_ADCTS0_TRGEN2_Pos)                  /*!< PWM_T::ADCTS0: TRGEN2 Mask             */
N
N#define PWM_ADCTS0_TRGSEL3_Pos           (24)                                              /*!< PWM_T::ADCTS0: TRGSEL3 Position        */
N#define PWM_ADCTS0_TRGSEL3_Msk           (0xful << PWM_ADCTS0_TRGSEL3_Pos)                 /*!< PWM_T::ADCTS0: TRGSEL3 Mask            */
N
N#define PWM_ADCTS0_TRGEN3_Pos            (31)                                              /*!< PWM_T::ADCTS0: TRGEN3 Position         */
N#define PWM_ADCTS0_TRGEN3_Msk            (0x1ul << PWM_ADCTS0_TRGEN3_Pos)                  /*!< PWM_T::ADCTS0: TRGEN3 Mask             */
N
N#define PWM_ADCTS1_TRGSEL4_Pos           (0)                                               /*!< PWM_T::ADCTS1: TRGSEL4 Position        */
N#define PWM_ADCTS1_TRGSEL4_Msk           (0xful << PWM_ADCTS1_TRGSEL4_Pos)                 /*!< PWM_T::ADCTS1: TRGSEL4 Mask            */
N
N#define PWM_ADCTS1_TRGEN4_Pos            (7)                                               /*!< PWM_T::ADCTS1: TRGEN4 Position         */
N#define PWM_ADCTS1_TRGEN4_Msk            (0x1ul << PWM_ADCTS1_TRGEN4_Pos)                  /*!< PWM_T::ADCTS1: TRGEN4 Mask             */
N
N#define PWM_ADCTS1_TRGSEL5_Pos           (8)                                               /*!< PWM_T::ADCTS1: TRGSEL5 Position        */
N#define PWM_ADCTS1_TRGSEL5_Msk           (0xful << PWM_ADCTS1_TRGSEL5_Pos)                 /*!< PWM_T::ADCTS1: TRGSEL5 Mask            */
N
N#define PWM_ADCTS1_TRGEN5_Pos            (15)                                              /*!< PWM_T::ADCTS1: TRGEN5 Position         */
N#define PWM_ADCTS1_TRGEN5_Msk            (0x1ul << PWM_ADCTS1_TRGEN5_Pos)                  /*!< PWM_T::ADCTS1: TRGEN5 Mask             */
N
N#define PWM_SSCTL_SSEN0_Pos              (0)                                               /*!< PWM_T::SSCTL: SSEN0 Position           */
N#define PWM_SSCTL_SSEN0_Msk              (0x1ul << PWM_SSCTL_SSEN0_Pos)                    /*!< PWM_T::SSCTL: SSEN0 Mask               */
N
N#define PWM_SSCTL_SSEN2_Pos              (2)                                               /*!< PWM_T::SSCTL: SSEN2 Position           */
N#define PWM_SSCTL_SSEN2_Msk              (0x1ul << PWM_SSCTL_SSEN2_Pos)                    /*!< PWM_T::SSCTL: SSEN2 Mask               */
N
N#define PWM_SSCTL_SSEN4_Pos              (4)                                               /*!< PWM_T::SSCTL: SSEN4 Position           */
N#define PWM_SSCTL_SSEN4_Msk              (0x1ul << PWM_SSCTL_SSEN4_Pos)                    /*!< PWM_T::SSCTL: SSEN4 Mask               */
N
N#define PWM_SSCTL_SSRC_Pos               (8)                                               /*!< PWM_T::SSCTL: SSRC Position            */
N#define PWM_SSCTL_SSRC_Msk               (0x3ul << PWM_SSCTL_SSRC_Pos)                     /*!< PWM_T::SSCTL: SSRC Mask                */
N
N#define PWM_SSTRG_CNTSEN_Pos             (0)                                               /*!< PWM_T::SSTRG: CNTSEN Position          */
N#define PWM_SSTRG_CNTSEN_Msk             (0x1ul << PWM_SSTRG_CNTSEN_Pos)                   /*!< PWM_T::SSTRG: CNTSEN Mask              */
N
N#define PWM_STATUS_CNTMAX0_Pos           (0)                                               /*!< PWM_T::STATUS: CNTMAX0 Position        */
N#define PWM_STATUS_CNTMAX0_Msk           (0x1ul << PWM_STATUS_CNTMAX0_Pos)                 /*!< PWM_T::STATUS: CNTMAX0 Mask            */
N
N#define PWM_STATUS_CNTMAX2_Pos           (2)                                               /*!< PWM_T::STATUS: CNTMAX2 Position        */
N#define PWM_STATUS_CNTMAX2_Msk           (0x1ul << PWM_STATUS_CNTMAX2_Pos)                 /*!< PWM_T::STATUS: CNTMAX2 Mask            */
N
N#define PWM_STATUS_CNTMAX4_Pos           (4)                                               /*!< PWM_T::STATUS: CNTMAX4 Position        */
N#define PWM_STATUS_CNTMAX4_Msk           (0x1ul << PWM_STATUS_CNTMAX4_Pos)                 /*!< PWM_T::STATUS: CNTMAX4 Mask            */
N
N#define PWM_STATUS_ADCTRG0_Pos           (16)                                              /*!< PWM_T::STATUS: ADCTRGF0 Position       */
N#define PWM_STATUS_ADCTRG0_Msk           (0x1ul << PWM_STATUS_ADCTRG0_Pos)                 /*!< PWM_T::STATUS: ADCTRGF0 Mask           */
N
N#define PWM_STATUS_ADCTRG1_Pos           (17)                                              /*!< PWM_T::STATUS: ADCTRGF1 Position       */
N#define PWM_STATUS_ADCTRG1_Msk           (0x1ul << PWM_STATUS_ADCTRG1_Pos)                 /*!< PWM_T::STATUS: ADCTRGF1 Mask           */
N
N#define PWM_STATUS_ADCTRG2_Pos           (18)                                              /*!< PWM_T::STATUS: ADCTRGF2 Position       */
N#define PWM_STATUS_ADCTRG2_Msk           (0x1ul << PWM_STATUS_ADCTRG2_Pos)                 /*!< PWM_T::STATUS: ADCTRGF2 Mask           */
N
N#define PWM_STATUS_ADCTRG3_Pos           (19)                                              /*!< PWM_T::STATUS: ADCTRGF3 Position       */
N#define PWM_STATUS_ADCTRG3_Msk           (0x1ul << PWM_STATUS_ADCTRG3_Pos)                 /*!< PWM_T::STATUS: ADCTRGF3 Mask           */
N
N#define PWM_STATUS_ADCTRG4_Pos           (20)                                              /*!< PWM_T::STATUS: ADCTRGF4 Position       */
N#define PWM_STATUS_ADCTRG4_Msk           (0x1ul << PWM_STATUS_ADCTRG4_Pos)                 /*!< PWM_T::STATUS: ADCTRGF4 Mask           */
N
N#define PWM_STATUS_ADCTRG5_Pos           (21)                                              /*!< PWM_T::STATUS: ADCTRGF5 Position       */
N#define PWM_STATUS_ADCTRG5_Msk           (0x1ul << PWM_STATUS_ADCTRG5_Pos)                 /*!< PWM_T::STATUS: ADCTRGF5 Mask           */
N
N#define PWM_CAPINEN_CAPINEN0_Pos         (0)                                               /*!< PWM_T::CAPINEN: CAPINEN0 Position      */
N#define PWM_CAPINEN_CAPINEN0_Msk         (0x1ul << PWM_CAPINEN_CAPINEN0_Pos)               /*!< PWM_T::CAPINEN: CAPINEN0 Mask          */
N
N#define PWM_CAPINEN_CAPINEN1_Pos         (1)                                               /*!< PWM_T::CAPINEN: CAPINEN1 Position      */
N#define PWM_CAPINEN_CAPINEN1_Msk         (0x1ul << PWM_CAPINEN_CAPINEN1_Pos)               /*!< PWM_T::CAPINEN: CAPINEN1 Mask          */
N
N#define PWM_CAPINEN_CAPINEN2_Pos         (2)                                               /*!< PWM_T::CAPINEN: CAPINEN2 Position      */
N#define PWM_CAPINEN_CAPINEN2_Msk         (0x1ul << PWM_CAPINEN_CAPINEN2_Pos)               /*!< PWM_T::CAPINEN: CAPINEN2 Mask          */
N
N#define PWM_CAPINEN_CAPINEN3_Pos         (3)                                               /*!< PWM_T::CAPINEN: CAPINEN3 Position      */
N#define PWM_CAPINEN_CAPINEN3_Msk         (0x1ul << PWM_CAPINEN_CAPINEN3_Pos)               /*!< PWM_T::CAPINEN: CAPINEN3 Mask          */
N
N#define PWM_CAPINEN_CAPINEN4_Pos         (4)                                               /*!< PWM_T::CAPINEN: CAPINEN4 Position      */
N#define PWM_CAPINEN_CAPINEN4_Msk         (0x1ul << PWM_CAPINEN_CAPINEN4_Pos)               /*!< PWM_T::CAPINEN: CAPINEN4 Mask          */
N
N#define PWM_CAPINEN_CAPINEN5_Pos         (5)                                               /*!< PWM_T::CAPINEN: CAPINEN5 Position      */
N#define PWM_CAPINEN_CAPINEN5_Msk         (0x1ul << PWM_CAPINEN_CAPINEN5_Pos)               /*!< PWM_T::CAPINEN: CAPINEN5 Mask          */
N
N#define PWM_CAPCTL_CAPEN0_Pos            (0)                                               /*!< PWM_T::CAPCTL: CAPEN0 Position         */
N#define PWM_CAPCTL_CAPEN0_Msk            (0x1ul << PWM_CAPCTL_CAPEN0_Pos)                  /*!< PWM_T::CAPCTL: CAPEN0 Mask             */
N
N#define PWM_CAPCTL_CAPEN1_Pos            (1)                                               /*!< PWM_T::CAPCTL: CAPEN1 Position         */
N#define PWM_CAPCTL_CAPEN1_Msk            (0x1ul << PWM_CAPCTL_CAPEN1_Pos)                  /*!< PWM_T::CAPCTL: CAPEN1 Mask             */
N
N#define PWM_CAPCTL_CAPEN2_Pos            (2)                                               /*!< PWM_T::CAPCTL: CAPEN2 Position         */
N#define PWM_CAPCTL_CAPEN2_Msk            (0x1ul << PWM_CAPCTL_CAPEN2_Pos)                  /*!< PWM_T::CAPCTL: CAPEN2 Mask             */
N
N#define PWM_CAPCTL_CAPEN3_Pos            (3)                                               /*!< PWM_T::CAPCTL: CAPEN3 Position         */
N#define PWM_CAPCTL_CAPEN3_Msk            (0x1ul << PWM_CAPCTL_CAPEN3_Pos)                  /*!< PWM_T::CAPCTL: CAPEN3 Mask             */
N
N#define PWM_CAPCTL_CAPEN4_Pos            (4)                                               /*!< PWM_T::CAPCTL: CAPEN4 Position         */
N#define PWM_CAPCTL_CAPEN4_Msk            (0x1ul << PWM_CAPCTL_CAPEN4_Pos)                  /*!< PWM_T::CAPCTL: CAPEN4 Mask             */
N
N#define PWM_CAPCTL_CAPEN5_Pos            (5)                                               /*!< PWM_T::CAPCTL: CAPEN5 Position         */
N#define PWM_CAPCTL_CAPEN5_Msk            (0x1ul << PWM_CAPCTL_CAPEN5_Pos)                  /*!< PWM_T::CAPCTL: CAPEN5 Mask             */
N
N#define PWM_CAPCTL_CAPINV0_Pos           (8)                                               /*!< PWM_T::CAPCTL: CAPINV0 Position        */
N#define PWM_CAPCTL_CAPINV0_Msk           (0x1ul << PWM_CAPCTL_CAPINV0_Pos)                 /*!< PWM_T::CAPCTL: CAPINV0 Mask            */
N
N#define PWM_CAPCTL_CAPINV1_Pos           (9)                                               /*!< PWM_T::CAPCTL: CAPINV1 Position        */
N#define PWM_CAPCTL_CAPINV1_Msk           (0x1ul << PWM_CAPCTL_CAPINV1_Pos)                 /*!< PWM_T::CAPCTL: CAPINV1 Mask            */
N
N#define PWM_CAPCTL_CAPINV2_Pos           (10)                                              /*!< PWM_T::CAPCTL: CAPINV2 Position        */
N#define PWM_CAPCTL_CAPINV2_Msk           (0x1ul << PWM_CAPCTL_CAPINV2_Pos)                 /*!< PWM_T::CAPCTL: CAPINV2 Mask            */
N
N#define PWM_CAPCTL_CAPINV3_Pos           (11)                                              /*!< PWM_T::CAPCTL: CAPINV3 Position        */
N#define PWM_CAPCTL_CAPINV3_Msk           (0x1ul << PWM_CAPCTL_CAPINV3_Pos)                 /*!< PWM_T::CAPCTL: CAPINV3 Mask            */
N
N#define PWM_CAPCTL_CAPINV4_Pos           (12)                                              /*!< PWM_T::CAPCTL: CAPINV4 Position        */
N#define PWM_CAPCTL_CAPINV4_Msk           (0x1ul << PWM_CAPCTL_CAPINV4_Pos)                 /*!< PWM_T::CAPCTL: CAPINV4 Mask            */
N
N#define PWM_CAPCTL_CAPINV5_Pos           (13)                                              /*!< PWM_T::CAPCTL: CAPINV5 Position        */
N#define PWM_CAPCTL_CAPINV5_Msk           (0x1ul << PWM_CAPCTL_CAPINV5_Pos)                 /*!< PWM_T::CAPCTL: CAPINV5 Mask            */
N
N#define PWM_CAPCTL_RCRLDEN0_Pos          (16)                                              /*!< PWM_T::CAPCTL: RCRLDEN0 Position       */
N#define PWM_CAPCTL_RCRLDEN0_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN0_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN0 Mask           */
N
N#define PWM_CAPCTL_RCRLDEN1_Pos          (17)                                              /*!< PWM_T::CAPCTL: RCRLDEN1 Position       */
N#define PWM_CAPCTL_RCRLDEN1_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN1_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN1 Mask           */
N
N#define PWM_CAPCTL_RCRLDEN2_Pos          (18)                                              /*!< PWM_T::CAPCTL: RCRLDEN2 Position       */
N#define PWM_CAPCTL_RCRLDEN2_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN2_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN2 Mask           */
N
N#define PWM_CAPCTL_RCRLDEN3_Pos          (19)                                              /*!< PWM_T::CAPCTL: RCRLDEN3 Position       */
N#define PWM_CAPCTL_RCRLDEN3_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN3_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN3 Mask           */
N
N#define PWM_CAPCTL_RCRLDEN4_Pos          (20)                                              /*!< PWM_T::CAPCTL: RCRLDEN4 Position       */
N#define PWM_CAPCTL_RCRLDEN4_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN4_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN4 Mask           */
N
N#define PWM_CAPCTL_RCRLDEN5_Pos          (21)                                              /*!< PWM_T::CAPCTL: RCRLDEN5 Position       */
N#define PWM_CAPCTL_RCRLDEN5_Msk          (0x1ul << PWM_CAPCTL_RCRLDEN5_Pos)                /*!< PWM_T::CAPCTL: RCRLDEN5 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN0_Pos          (24)                                              /*!< PWM_T::CAPCTL: FCRLDEN0 Position       */
N#define PWM_CAPCTL_FCRLDEN0_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN0_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN0 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN1_Pos          (25)                                              /*!< PWM_T::CAPCTL: FCRLDEN1 Position       */
N#define PWM_CAPCTL_FCRLDEN1_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN1_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN1 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN2_Pos          (26)                                              /*!< PWM_T::CAPCTL: FCRLDEN2 Position       */
N#define PWM_CAPCTL_FCRLDEN2_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN2_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN2 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN3_Pos          (27)                                              /*!< PWM_T::CAPCTL: FCRLDEN3 Position       */
N#define PWM_CAPCTL_FCRLDEN3_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN3_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN3 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN4_Pos          (28)                                              /*!< PWM_T::CAPCTL: FCRLDEN4 Position       */
N#define PWM_CAPCTL_FCRLDEN4_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN4_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN4 Mask           */
N
N#define PWM_CAPCTL_FCRLDEN5_Pos          (29)                                              /*!< PWM_T::CAPCTL: FCRLDEN5 Position       */
N#define PWM_CAPCTL_FCRLDEN5_Msk          (0x1ul << PWM_CAPCTL_FCRLDEN5_Pos)                /*!< PWM_T::CAPCTL: FCRLDEN5 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV0_Pos          (0)                                               /*!< PWM_T::CAPSTS: CRLIFOV0 Position       */
N#define PWM_CAPSTS_CRLIFOV0_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV0_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV0 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV1_Pos          (1)                                               /*!< PWM_T::CAPSTS: CRLIFOV1 Position       */
N#define PWM_CAPSTS_CRLIFOV1_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV1_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV1 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV2_Pos          (2)                                               /*!< PWM_T::CAPSTS: CRLIFOV2 Position       */
N#define PWM_CAPSTS_CRLIFOV2_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV2_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV2 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV3_Pos          (3)                                               /*!< PWM_T::CAPSTS: CRLIFOV3 Position       */
N#define PWM_CAPSTS_CRLIFOV3_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV3_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV3 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV4_Pos          (4)                                               /*!< PWM_T::CAPSTS: CRLIFOV4 Position       */
N#define PWM_CAPSTS_CRLIFOV4_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV4_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV4 Mask           */
N
N#define PWM_CAPSTS_CRLIFOV5_Pos          (5)                                               /*!< PWM_T::CAPSTS: CRLIFOV5 Position       */
N#define PWM_CAPSTS_CRLIFOV5_Msk          (0x1ul << PWM_CAPSTS_CRLIFOV5_Pos)                /*!< PWM_T::CAPSTS: CRLIFOV5 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV0_Pos          (8)                                               /*!< PWM_T::CAPSTS: CFLIFOV0 Position       */
N#define PWM_CAPSTS_CFLIFOV0_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV0_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV0 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV1_Pos          (9)                                               /*!< PWM_T::CAPSTS: CFLIFOV1 Position       */
N#define PWM_CAPSTS_CFLIFOV1_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV1_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV1 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV2_Pos          (10)                                              /*!< PWM_T::CAPSTS: CFLIFOV2 Position       */
N#define PWM_CAPSTS_CFLIFOV2_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV2_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV2 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV3_Pos          (11)                                              /*!< PWM_T::CAPSTS: CFLIFOV3 Position       */
N#define PWM_CAPSTS_CFLIFOV3_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV3_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV3 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV4_Pos          (12)                                              /*!< PWM_T::CAPSTS: CFLIFOV4 Position       */
N#define PWM_CAPSTS_CFLIFOV4_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV4_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV4 Mask           */
N
N#define PWM_CAPSTS_CFLIFOV5_Pos          (13)                                              /*!< PWM_T::CAPSTS: CFLIFOV5 Position       */
N#define PWM_CAPSTS_CFLIFOV5_Msk          (0x1ul << PWM_CAPSTS_CFLIFOV5_Pos)                /*!< PWM_T::CAPSTS: CFLIFOV5 Mask           */
N
N#define PWM_RCAPDAT0_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT0: RCAPDAT Position      */
N#define PWM_RCAPDAT0_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT0_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT0: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT0_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT0: FCAPDAT Position      */
N#define PWM_FCAPDAT0_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT0_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT0: FCAPDAT Mask          */
N
N#define PWM_RCAPDAT1_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT1: RCAPDAT Position      */
N#define PWM_RCAPDAT1_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT1_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT1: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT1_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT1: FCAPDAT Position      */
N#define PWM_FCAPDAT1_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT1_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT1: FCAPDAT Mask          */
N
N#define PWM_RCAPDAT2_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT2: RCAPDAT Position      */
N#define PWM_RCAPDAT2_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT2_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT2: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT2_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT2: FCAPDAT Position      */
N#define PWM_FCAPDAT2_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT2_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT2: FCAPDAT Mask          */
N
N#define PWM_RCAPDAT3_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT3: RCAPDAT Position      */
N#define PWM_RCAPDAT3_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT3_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT3: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT3_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT3: FCAPDAT Position      */
N#define PWM_FCAPDAT3_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT3_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT3: FCAPDAT Mask          */
N
N#define PWM_RCAPDAT4_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT4: RCAPDAT Position      */
N#define PWM_RCAPDAT4_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT4_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT4: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT4_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT4: FCAPDAT Position      */
N#define PWM_FCAPDAT4_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT4_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT4: FCAPDAT Mask          */
N
N#define PWM_RCAPDAT5_RCAPDAT_Pos         (0)                                               /*!< PWM_T::RCAPDAT5: RCAPDAT Position      */
N#define PWM_RCAPDAT5_RCAPDAT_Msk         (0xfffful << PWM_RCAPDAT5_RCAPDAT_Pos)            /*!< PWM_T::RCAPDAT5: RCAPDAT Mask          */
N
N#define PWM_FCAPDAT5_FCAPDAT_Pos         (0)                                               /*!< PWM_T::FCAPDAT5: FCAPDAT Position      */
N#define PWM_FCAPDAT5_FCAPDAT_Msk         (0xfffful << PWM_FCAPDAT5_FCAPDAT_Pos)            /*!< PWM_T::FCAPDAT5: FCAPDAT Mask          */
N
N#define PWM_PDMACTL_CHEN0_1_Pos          (0)                                               /*!< PWM_T::PDMACTL: CHEN0_1 Position       */
N#define PWM_PDMACTL_CHEN0_1_Msk          (0x1ul << PWM_PDMACTL_CHEN0_1_Pos)                /*!< PWM_T::PDMACTL: CHEN0_1 Mask           */
N
N#define PWM_PDMACTL_CAPMOD0_1_Pos        (1)                                               /*!< PWM_T::PDMACTL: CAPMOD0_1 Position     */
N#define PWM_PDMACTL_CAPMOD0_1_Msk        (0x3ul << PWM_PDMACTL_CAPMOD0_1_Pos)              /*!< PWM_T::PDMACTL: CAPMOD0_1 Mask         */
N
N#define PWM_PDMACTL_CAPORD0_1_Pos        (3)                                               /*!< PWM_T::PDMACTL: CAPORD0_1 Position     */
N#define PWM_PDMACTL_CAPORD0_1_Msk        (0x1ul << PWM_PDMACTL_CAPORD0_1_Pos)              /*!< PWM_T::PDMACTL: CAPORD0_1 Mask         */
N
N#define PWM_PDMACTL_CHSEL0_1_Pos         (4)                                               /*!< PWM_T::PDMACTL: CHSEL0_1 Position      */
N#define PWM_PDMACTL_CHSEL0_1_Msk         (0x1ul << PWM_PDMACTL_CHSEL0_1_Pos)               /*!< PWM_T::PDMACTL: CHSEL0_1 Mask          */
N
N#define PWM_PDMACTL_CHEN2_3_Pos          (8)                                               /*!< PWM_T::PDMACTL: CHEN2_3 Position       */
N#define PWM_PDMACTL_CHEN2_3_Msk          (0x1ul << PWM_PDMACTL_CHEN2_3_Pos)                /*!< PWM_T::PDMACTL: CHEN2_3 Mask           */
N
N#define PWM_PDMACTL_CAPMOD2_3_Pos        (9)                                               /*!< PWM_T::PDMACTL: CAPMOD2_3 Position     */
N#define PWM_PDMACTL_CAPMOD2_3_Msk        (0x3ul << PWM_PDMACTL_CAPMOD2_3_Pos)              /*!< PWM_T::PDMACTL: CAPMOD2_3 Mask         */
N
N#define PWM_PDMACTL_CAPORD2_3_Pos        (11)                                              /*!< PWM_T::PDMACTL: CAPORD2_3 Position     */
N#define PWM_PDMACTL_CAPORD2_3_Msk        (0x1ul << PWM_PDMACTL_CAPORD2_3_Pos)              /*!< PWM_T::PDMACTL: CAPORD2_3 Mask         */
N
N#define PWM_PDMACTL_CHSEL2_3_Pos         (12)                                              /*!< PWM_T::PDMACTL: CHSEL2_3 Position      */
N#define PWM_PDMACTL_CHSEL2_3_Msk         (0x1ul << PWM_PDMACTL_CHSEL2_3_Pos)               /*!< PWM_T::PDMACTL: CHSEL2_3 Mask          */
N
N#define PWM_PDMACTL_CHEN4_5_Pos          (16)                                              /*!< PWM_T::PDMACTL: CHEN4_5 Position       */
N#define PWM_PDMACTL_CHEN4_5_Msk          (0x1ul << PWM_PDMACTL_CHEN4_5_Pos)                /*!< PWM_T::PDMACTL: CHEN4_5 Mask           */
N
N#define PWM_PDMACTL_CAPMOD4_5_Pos        (17)                                              /*!< PWM_T::PDMACTL: CAPMOD4_5 Position     */
N#define PWM_PDMACTL_CAPMOD4_5_Msk        (0x3ul << PWM_PDMACTL_CAPMOD4_5_Pos)              /*!< PWM_T::PDMACTL: CAPMOD4_5 Mask         */
N
N#define PWM_PDMACTL_CAPORD4_5_Pos        (19)                                              /*!< PWM_T::PDMACTL: CAPORD4_5 Position     */
N#define PWM_PDMACTL_CAPORD4_5_Msk        (0x1ul << PWM_PDMACTL_CAPORD4_5_Pos)              /*!< PWM_T::PDMACTL: CAPORD4_5 Mask         */
N
N#define PWM_PDMACTL_CHSEL4_5_Pos         (20)                                              /*!< PWM_T::PDMACTL: CHSEL4_5 Position      */
N#define PWM_PDMACTL_CHSEL4_5_Msk         (0x1ul << PWM_PDMACTL_CHSEL4_5_Pos)               /*!< PWM_T::PDMACTL: CHSEL4_5 Mask          */
N
N#define PWM_PDMACAP0_1_CAPBUF_Pos        (0)                                               /*!< PWM_T::PDMACAP0_1: CAPBUF Position     */
N#define PWM_PDMACAP0_1_CAPBUF_Msk        (0xfffful << PWM_PDMACAP0_1_CAPBUF_Pos)           /*!< PWM_T::PDMACAP0_1: CAPBUF Mask         */
N
N#define PWM_PDMACAP2_3_CAPBUF_Pos        (0)                                               /*!< PWM_T::PDMACAP2_3: CAPBUF Position     */
N#define PWM_PDMACAP2_3_CAPBUF_Msk        (0xfffful << PWM_PDMACAP2_3_CAPBUF_Pos)           /*!< PWM_T::PDMACAP2_3: CAPBUF Mask         */
N
N#define PWM_PDMACAP4_5_CAPBUF_Pos        (0)                                               /*!< PWM_T::PDMACAP4_5: CAPBUF Position     */
N#define PWM_PDMACAP4_5_CAPBUF_Msk        (0xfffful << PWM_PDMACAP4_5_CAPBUF_Pos)           /*!< PWM_T::PDMACAP4_5: CAPBUF Mask         */
N
N#define PWM_CAPIEN_CAPRIEN0_Pos          (0)                                               /*!< PWM_T::CAPIEN: CAPRIEN0 Position       */
N#define PWM_CAPIEN_CAPRIEN0_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN0_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN0 Mask           */
N
N#define PWM_CAPIEN_CAPRIEN1_Pos          (1)                                               /*!< PWM_T::CAPIEN: CAPRIEN1 Position       */
N#define PWM_CAPIEN_CAPRIEN1_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN1_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN1 Mask           */
N
N#define PWM_CAPIEN_CAPRIEN2_Pos          (2)                                               /*!< PWM_T::CAPIEN: CAPRIEN2 Position       */
N#define PWM_CAPIEN_CAPRIEN2_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN2_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN2 Mask           */
N
N#define PWM_CAPIEN_CAPRIEN3_Pos          (3)                                               /*!< PWM_T::CAPIEN: CAPRIEN3 Position       */
N#define PWM_CAPIEN_CAPRIEN3_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN3_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN3 Mask           */
N
N#define PWM_CAPIEN_CAPRIEN4_Pos          (4)                                               /*!< PWM_T::CAPIEN: CAPRIEN4 Position       */
N#define PWM_CAPIEN_CAPRIEN4_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN4_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN4 Mask           */
N
N#define PWM_CAPIEN_CAPRIEN5_Pos          (5)                                               /*!< PWM_T::CAPIEN: CAPRIEN5 Position       */
N#define PWM_CAPIEN_CAPRIEN5_Msk          (0x1ul << PWM_CAPIEN_CAPRIEN5_Pos)                /*!< PWM_T::CAPIEN: CAPRIEN5 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN0_Pos          (8)                                               /*!< PWM_T::CAPIEN: CAPFIEN0 Position       */
N#define PWM_CAPIEN_CAPFIEN0_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN0_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN0 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN1_Pos          (9)                                               /*!< PWM_T::CAPIEN: CAPFIEN1 Position       */
N#define PWM_CAPIEN_CAPFIEN1_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN1_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN1 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN2_Pos          (10)                                              /*!< PWM_T::CAPIEN: CAPFIEN2 Position       */
N#define PWM_CAPIEN_CAPFIEN2_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN2_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN2 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN3_Pos          (11)                                              /*!< PWM_T::CAPIEN: CAPFIEN3 Position       */
N#define PWM_CAPIEN_CAPFIEN3_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN3_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN3 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN4_Pos          (12)                                              /*!< PWM_T::CAPIEN: CAPFIEN4 Position       */
N#define PWM_CAPIEN_CAPFIEN4_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN4_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN4 Mask           */
N
N#define PWM_CAPIEN_CAPFIEN5_Pos          (13)                                              /*!< PWM_T::CAPIEN: CAPFIEN5 Position       */
N#define PWM_CAPIEN_CAPFIEN5_Msk          (0x1ul << PWM_CAPIEN_CAPFIEN5_Pos)                /*!< PWM_T::CAPIEN: CAPFIEN5 Mask           */
N
N#define PWM_CAPIF_CRLIF0_Pos             (0)                                               /*!< PWM_T::CAPIF: CRLIF0 Position          */
N#define PWM_CAPIF_CRLIF0_Msk             (0x1ul << PWM_CAPIF_CRLIF0_Pos)                   /*!< PWM_T::CAPIF: CRLIF0 Mask              */
N
N#define PWM_CAPIF_CRLIF1_Pos             (1)                                               /*!< PWM_T::CAPIF: CRLIF1 Position          */
N#define PWM_CAPIF_CRLIF1_Msk             (0x1ul << PWM_CAPIF_CRLIF1_Pos)                   /*!< PWM_T::CAPIF: CRLIF1 Mask              */
N
N#define PWM_CAPIF_CRLIF2_Pos             (2)                                               /*!< PWM_T::CAPIF: CRLIF2 Position          */
N#define PWM_CAPIF_CRLIF2_Msk             (0x1ul << PWM_CAPIF_CRLIF2_Pos)                   /*!< PWM_T::CAPIF: CRLIF2 Mask              */
N
N#define PWM_CAPIF_CRLIF3_Pos             (3)                                               /*!< PWM_T::CAPIF: CRLIF3 Position          */
N#define PWM_CAPIF_CRLIF3_Msk             (0x1ul << PWM_CAPIF_CRLIF3_Pos)                   /*!< PWM_T::CAPIF: CRLIF3 Mask              */
N
N#define PWM_CAPIF_CRLIF4_Pos             (4)                                               /*!< PWM_T::CAPIF: CRLIF4 Position          */
N#define PWM_CAPIF_CRLIF4_Msk             (0x1ul << PWM_CAPIF_CRLIF4_Pos)                   /*!< PWM_T::CAPIF: CRLIF4 Mask              */
N
N#define PWM_CAPIF_CRLIF5_Pos             (5)                                               /*!< PWM_T::CAPIF: CRLIF5 Position          */
N#define PWM_CAPIF_CRLIF5_Msk             (0x1ul << PWM_CAPIF_CRLIF5_Pos)                   /*!< PWM_T::CAPIF: CRLIF5 Mask              */
N
N#define PWM_CAPIF_CFLIF0_Pos             (8)                                               /*!< PWM_T::CAPIF: CFLIF0 Position          */
N#define PWM_CAPIF_CFLIF0_Msk             (0x1ul << PWM_CAPIF_CFLIF0_Pos)                   /*!< PWM_T::CAPIF: CFLIF0 Mask              */
N
N#define PWM_CAPIF_CFLIF1_Pos             (9)                                               /*!< PWM_T::CAPIF: CFLIF1 Position          */
N#define PWM_CAPIF_CFLIF1_Msk             (0x1ul << PWM_CAPIF_CFLIF1_Pos)                   /*!< PWM_T::CAPIF: CFLIF1 Mask              */
N
N#define PWM_CAPIF_CFLIF2_Pos             (10)                                              /*!< PWM_T::CAPIF: CFLIF2 Position          */
N#define PWM_CAPIF_CFLIF2_Msk             (0x1ul << PWM_CAPIF_CFLIF2_Pos)                   /*!< PWM_T::CAPIF: CFLIF2 Mask              */
N
N#define PWM_CAPIF_CFLIF3_Pos             (11)                                              /*!< PWM_T::CAPIF: CFLIF3 Position          */
N#define PWM_CAPIF_CFLIF3_Msk             (0x1ul << PWM_CAPIF_CFLIF3_Pos)                   /*!< PWM_T::CAPIF: CFLIF3 Mask              */
N
N#define PWM_CAPIF_CFLIF4_Pos             (12)                                              /*!< PWM_T::CAPIF: CFLIF4 Position          */
N#define PWM_CAPIF_CFLIF4_Msk             (0x1ul << PWM_CAPIF_CFLIF4_Pos)                   /*!< PWM_T::CAPIF: CFLIF4 Mask              */
N
N#define PWM_CAPIF_CFLIF5_Pos             (13)                                              /*!< PWM_T::CAPIF: CFLIF5 Position          */
N#define PWM_CAPIF_CFLIF5_Msk             (0x1ul << PWM_CAPIF_CFLIF5_Pos)                   /*!< PWM_T::CAPIF: CFLIF5 Mask              */
N
N#define PWM_PBUF_PBUF_Pos                (0)                                               /*!< PWM_T::PBUF: PBUF Position             */
N#define PWM_PBUF_PBUF_Msk                (0xfffful << PWM_PBUF_PBUF_Pos)                   /*!< PWM_T::PBUF: PBUF Mask                 */
N
N#define PWM_CMPBUF_CMPBUF_Pos            (0)                                               /*!< PWM_T::CMPBUF: CMPBUF Position         */
N#define PWM_CMPBUF_CMPBUF_Msk            (0xfffful << PWM_CMPBUF_CMPBUF_Pos)               /*!< PWM_T::CMPBUF: CMPBUF Mask             */
N
N/**@}*/ /* PWM_CONST */
N/**@}*/ /* end of PWM register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __PWM_REG_H__ */
L 161 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "spi_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\spi_reg.h" 1
N/**************************************************************************//**
N * @file     spi_reg.h
N * @version  V1.00
N * @brief    SPI register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __SPI_REG_H__
N#define __SPI_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup SPI Serial Peripheral Interface Controller (SPI)
N    Memory Mapped Structure for SPI Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var SPI_T::CTL
N     * Offset: 0x00  SPI Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SPIEN     |SPI Transfer Control Enable Bit
N     * |        |          |In Master mode, the transfer will start when there is data in the FIFO buffer after this is set to 1
N     * |        |          |In Slave mode, this device is ready to receive data when this bit is set to 1.
N     * |        |          |0 = Transfer control Disabled.
N     * |        |          |1 = Transfer control Enabled.
N     * |        |          |Note: Before changing the configurations of SPI_CTL, SPI_CLKDIV, SPI_SSCTL and SPI_FIFOCTL registers, user shall clear the SPIEN (SPI_CTL[0]) and confirm the SPIENSTS (SPI_STATUS[15]) is 0.
N     * |[1]     |RXNEG     |Receive on Negative Edge
N     * |        |          |0 = Received data input signal is latched on the rising edge of SPI bus clock.
N     * |        |          |1 = Received data input signal is latched on the falling edge of SPI bus clock.
N     * |        |          |Note: The setting of TXNEG and RXNEG are mutual exclusive
N     * |[2]     |TXNEG     |Transmit on Negative Edge
N     * |        |          |0 = Transmitted data output signal is changed on the rising edge of SPI bus clock.
N     * |        |          |1 = Transmitted data output signal is changed on the falling edge of SP bus clock.
N     * |        |          |Note: The setting of TXNEG and RXNEG are mutual exclusive
N     * |[3]     |CLKPOL    |Clock Polarity
N     * |        |          |0 = SPI bus clock is idle low.
N     * |        |          |1 = SPI bus clock is idle high.
N     * |[7:4]   |SUSPITV   |Suspend Interval (Master Only)
N     * |        |          |The four bits provide configurable suspend interval between two successive transmit/receive transaction in a transfer
N     * |        |          |The definition of the suspend interval is the interval between the last clock edge of the preceding transaction word and the first clock edge of the following transaction word
N     * |        |          |The default value is 0x3
N     * |        |          |The period of the suspend interval is obtained according to the following equation.
N     * |        |          |(SUSPITV[3:0] + 0.5) * period of SPICLK clock cycle
N     * |        |          |Example:
N     * |        |          |SUSPITV = 0x0 " 0.5 SPICLK clock cycle.
N     * |        |          |SUSPITV = 0x1 " 1.5 SPICLK clock cycle.
N     * |        |          |"..
N     * |        |          |SUSPITV = 0xE " 14.5 SPICLK clock cycle.
N     * |        |          |SUSPITV = 0xF " 15.5 SPICLK clock cycle.
N     * |[12:8]  |DWIDTH    |Data Width
N     * |        |          |This field specifies how many bits can be transmitted / received in one transaction
N     * |        |          |The minimum bit length is 8 bits and can up to 32 bits.
N     * |        |          |DWIDTH = 0x08 " 8 bits.
N     * |        |          |DWIDTH = 0x09 " 9 bits.
N     * |        |          |"..
N     * |        |          |DWIDTH = 0x1F " 31 bits.
N     * |        |          |DWIDTH = 0x00 " 32 bits.
N     * |[13]    |LSB       |Send LSB First
N     * |        |          |0 = The MSB, which bit of transmit/receive register depends on the setting of DWIDTH, is transmitted/received first.
N     * |        |          |1 = The LSB, bit 0 of the SPI TX register, is sent first to the SPI data output pin, and the first bit received from the SPI data input pin will be put in the LSB position of the RX register (bit 0 of SPI_RX).
N     * |[14]    |HALFDPX   |SPI Half-duplex Transfer Enable Bit
N     * |        |          |This bit is used to select full-duplex or half-duplex for SPI transfer
N     * |        |          |The bit field DATDIR (SPI_CTL[20]) can be used to set the data direction in half-duplex transfer.
N     * |        |          |0 = SPI operates in full-duplex transfer.
N     * |        |          |1 = SPI operates in half-duplex transfer.
N     * |[15]    |RXONLY    |Receive-only Mode Enable Bit (Master Only)
N     * |        |          |This bit field is only available in Master mode
N     * |        |          |In receive-only mode, SPI Master will generate SPI bus clock continuously for receiving data bit from SPI slave device and assert the BUSY status.
N     * |        |          |0 = Receive-only mode Disabled.
N     * |        |          |1 = Receive-only mode Enabled.
N     * |[17]    |UNITIEN   |Unit Transfer Interrupt Enable Bit
N     * |        |          |0 = SPI unit transfer interrupt Disabled.
N     * |        |          |1 = SPI unit transfer interrupt Enabled.
N     * |[18]    |SLAVE     |Slave Mode Control
N     * |        |          |0 = Master mode.
N     * |        |          |1 = Slave mode.
N     * |[19]    |REORDER   |Byte Reorder Function Enable Bit
N     * |        |          |0 = Byte Reorder function Disabled.
N     * |        |          |1 = Byte Reorder function Enabled
N     * |        |          |A byte suspend interval will be inserted among each byte
N     * |        |          |The period of the byte suspend interval depends on the setting of SUSPITV.
N     * |        |          |Note: Byte Reorder function is only available if DWIDTH is defined as 16, 24, and 32 bits.
N     * |[20]    |DATDIR    |Data Port Direction Control
N     * |        |          |This bit is used to select the data input/output direction in half-duplex transfer.
N     * |        |          |0 = SPI data is input direction.
N     * |        |          |1 = SPI data is output direction.
N     * @var SPI_T::CLKDIV
N     * Offset: 0x04  SPI Clock Divider Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |DIVIDER   |Clock Divider
N     * |        |          |The value in this field is the frequency divider for generating the peripheral clock, fspi_eclk, and the SPI bus clock of SPI Master
N     * |        |          |The frequency is obtained according to the following equation.
N     * |        |          |where
N     * |        |          |is the peripheral clock source, which is defined in the clock control register, CLK_CLKSEL2.
N     * |        |          |Note: Not supported in I2S mode.
N     * |        |          |Note: User should set DIVIDER carefully because the peripheral clock frequency must be slower than or equal to system frequency
N     * @var SPI_T::SSCTL
N     * Offset: 0x08  SPI Slave Select Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SS        |Slave Selection Control (Master Only)
N     * |        |          |If AUTOSS bit is cleared to 0,
N     * |        |          |0 = set the SPI_SS line to inactive state.
N     * |        |          |1 = set the SPI_SS line to active state.
N     * |        |          |If the AUTOSS bit is set to 1,
N     * |        |          |0 = Keep the SPI_SS line at inactive state.
N     * |        |          |1 = SPI_SS line will be automatically driven to active state for the duration of data transfer, and will be driven to inactive state for the rest of the time
N     * |        |          |The active state of SPI_SS is specified in SSACTPOL (SPI_SSCTL[2]).
N     * |[2]     |SSACTPOL  |Slave Selection Active Polarity
N     * |        |          |This bit defines the active polarity of slave selection signal (SPI_SS).
N     * |        |          |0 = The slave selection signal SPI_SS is active low.
N     * |        |          |1 = The slave selection signal SPI_SS is active high.
N     * |[3]     |AUTOSS    |Automatic Slave Selection Function Enable Bit (Master Only)
N     * |        |          |0 = Automatic slave selection function Disabled
N     * |        |          |Slave selection signal will be asserted/de-asserted according to SS (SPI_SSCTL[0]).
N     * |        |          |1 = Automatic slave selection function Enabled.
N     * |[8]     |SLVBEIEN  |Slave Mode Bit Count Error Interrupt Enable Bit
N     * |        |          |0 = Slave mode bit count error interrupt Disabled.
N     * |        |          |1 = Slave mode bit count error interrupt Enabled.
N     * |[9]     |SLVURIEN  |Slave Mode TX Under Run Interrupt Enable Bit
N     * |        |          |0 = Slave mode TX under run interrupt Disabled.
N     * |        |          |1 = Slave mode TX under run interrupt Enabled.
N     * |[12]    |SSACTIEN  |Slave Select Active Interrupt Enable Bit
N     * |        |          |0 = Slave select active interrupt Disabled.
N     * |        |          |1 = Slave select active interrupt Enabled.
N     * |[13]    |SSINAIEN  |Slave Select Inactive Interrupt Enable Bit
N     * |        |          |0 = Slave select inactive interrupt Disabled.
N     * |        |          |1 = Slave select inactive interrupt Enabled.
N     * @var SPI_T::PDMACTL
N     * Offset: 0x0C  SPI PDMA Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TXPDMAEN  |Transmit PDMA Enable Bit
N     * |        |          |0 = Transmit PDMA function Disabled.
N     * |        |          |1 = Transmit PDMA function Enabled.
N     * |        |          |Note: In SPI Master mode with full duplex transfer, if both TX and RX PDMA functions are enabled, RX PDMA function cannot be enabled prior to TX PDMA function
N     * |        |          |User can enable TX PDMA function firstly or enable both functions simultaneously.
N     * |[1]     |RXPDMAEN  |Receive PDMA Enable Bit
N     * |        |          |0 = Receiver PDMA function Disabled.
N     * |        |          |1 = Receiver PDMA function Enabled.
N     * |[2]     |PDMARST   |PDMA Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the PDMA control logic of the SPI controller. This bit will be automatically cleared to 0.
N     * @var SPI_T::FIFOCTL
N     * Offset: 0x10  SPI FIFO Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RXRST     |Receive Reset (Only for SPI)
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset receive FIFO pointer and receive circuit
N     * |        |          |The RXFULL bit will be cleared to 0 and the RXEMPTY bit will be set to 1
N     * |        |          |This bit will be cleared to 0 by hardware about 3 system clock cycles + 2 peripheral clock cycles after it is set to 1
N     * |        |          |User can read TXRXRST (SPI_STATUS[23]) to check if reset is accomplished or not.
N     * |[1]     |TXRST     |Transmit Reset (Only for SPI)
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset transmit FIFO pointer and transmit circuit
N     * |        |          |The TXFULL bit will be cleared to 0 and the TXEMPTY bit will be set to 1
N     * |        |          |This bit will be cleared to 0 by hardware about 3 system clock cycles + 2 peripheral clock cycles after it is set to 1
N     * |        |          |User can read TXRXRST (SPI_STATUS[23]) to check if reset is accomplished or not.
N     * |        |          |Note: If TX under-run event occurs in SPI Slave mode, this bit can be used to make SPI return to idle state.
N     * |[2]     |RXTHIEN   |Receive FIFO Threshold Interrupt Enable Bit
N     * |        |          |0 = RX FIFO threshold interrupt Disabled.
N     * |        |          |1 = RX FIFO threshold interrupt Enabled.
N     * |[3]     |TXTHIEN   |Transmit FIFO Threshold Interrupt Enable Bit
N     * |        |          |0 = TX FIFO threshold interrupt Disabled.
N     * |        |          |1 = TX FIFO threshold interrupt Enabled.
N     * |[4]     |RXTOIEN   |Slave Receive Time-out Interrupt Enable Bit
N     * |        |          |0 = Receive time-out interrupt Disabled.
N     * |        |          |1 = Receive time-out interrupt Enabled.
N     * |[5]     |RXOVIEN   |Receive FIFO Overrun Interrupt Enable Bit
N     * |        |          |0 = Receive FIFO overrun interrupt Disabled.
N     * |        |          |1 = Receive FIFO overrun interrupt Enabled.
N     * |[6]     |TXUFPOL   |TX Underflow Data Polarity
N     * |        |          |0 = The SPI data out is keep 0 if there is TX underflow event in Slave mode.
N     * |        |          |1 = The SPI data out is keep 1 if there is TX underflow event in Slave mode.
N     * |        |          |Note:
N     * |        |          |1
N     * |        |          |The TX underflow event occurs if there is not any data in TX FIFO when the slave selection signal is active.
N     * |        |          |2. This bit should be set as 0 in I2S mode.
N     * |        |          |3
N     * |        |          |When TX underflow event occurs, SPI_MISO pin state will be determined by this setting even though TX FIFO is not empty afterward
N     * |        |          |Data stored in TX FIFO will be sent through SPI_MISO pin in the next transfer frame.
N     * |[7]     |TXUFIEN   |TX Underflow Interrupt Enable Bit
N     * |        |          |When TX underflow event occurs in Slave mode, TXUFIF (SPI_STATUS[19]) will be set to 1
N     * |        |          |This bit is used to enable the TX underflow interrupt.
N     * |        |          |0 = Slave TX underflow interrupt Disabled.
N     * |        |          |1 = Slave TX underflow interrupt Enabled.
N     * |[8]     |RXFBCLR   |Receive FIFO Buffer Clear
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear receive FIFO pointer
N     * |        |          |The RXFULL bit will be cleared to 0 and the RXEMPTY bit will be set to 1
N     * |        |          |This bit will be cleared to 0 by hardware about 1 system clock after it is set to 1.
N     * |        |          |Note: The RX shift register will not be cleared.
N     * |[9]     |TXFBCLR   |Transmit FIFO Buffer Clear
N     * |        |          |0 = No effect.
N     * |        |          |1 = Clear transmit FIFO pointer
N     * |        |          |The TXFULL bit will be cleared to 0 and the TXEMPTY bit will be set to 1
N     * |        |          |This bit will be cleared to 0 by hardware about 1 system clock after it is set to 1.
N     * |        |          |Note: The TX shift register will not be cleared.
N     * |[25:24] |RXTH      |Receive FIFO Threshold
N     * |        |          |If the valid data count of the receive FIFO buffer is larger than the RXTH setting, the RXTHIF bit will be set to 1, else the RXTHIF bit will be cleared to 0
N     * |[29:28] |TXTH      |Transmit FIFO Threshold
N     * |        |          |If the valid data count of the transmit FIFO buffer is less than or equal to the TXTH setting, the TXTHIF bit will be set to 1, else the TXTHIF bit will be cleared to 0.
N     * @var SPI_T::STATUS
N     * Offset: 0x14  SPI Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BUSY      |Busy Status (Read Only)
N     * |        |          |0 = SPI controller is in idle state.
N     * |        |          |1 = SPI controller is in busy state.
N     * |        |          |The following listing are the bus busy conditions:
N     * |        |          |a. SPI_CTL[0] = 1 and TXEMPTY = 0.
N     * |        |          |b. For SPI Master mode, SPI_CTL[0] = 1 and TXEMPTY = 1 but the current transaction is not finished yet.
N     * |        |          |c. For SPI Master mode, SPI_CTL[0] = 1 and RXONLY = 1.
N     * |        |          |d
N     * |        |          |For SPI Slave mode, the SPI_CTL[0] = 1 and there is serial clock input into the SPI core logic when slave select is active.
N     * |        |          |e
N     * |        |          |For SPI Slave mode, the SPI_CTL[0] = 1 and the transmit buffer or transmit shift register is not empty even if the slave select is inactive.
N     * |[1]     |UNITIF    |Unit Transfer Interrupt Flag
N     * |        |          |0 = No transaction has been finished since this bit was cleared to 0.
N     * |        |          |1 = SPI controller has finished one unit transfer.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[2]     |SSACTIF   |Slave Select Active Interrupt Flag
N     * |        |          |0 = Slave select active interrupt was cleared or not occurred.
N     * |        |          |1 = Slave select active interrupt event occurred.
N     * |        |          |Note: Only available in Slave mode. This bit will be cleared by writing 1 to it.
N     * |[3]     |SSINAIF   |Slave Select Inactive Interrupt Flag
N     * |        |          |0 = Slave select inactive interrupt was cleared or not occurred.
N     * |        |          |1 = Slave select inactive interrupt event occurred.
N     * |        |          |Note: Only available in Slave mode. This bit will be cleared by writing 1 to it.
N     * |[4]     |SSLINE    |Slave Select Line Bus Status (Read Only)
N     * |        |          |0 = The slave select line status is 0.
N     * |        |          |1 = The slave select line status is 1.
N     * |        |          |Note: This bit is only available in Slave mode
N     * |        |          |If SSACTPOL (SPI_SSCTL[2]) is set 0, and the SSLINE is 1, the SPI slave select is in inactive status.
N     * |[6]     |SLVBEIF   |Slave Mode Bit Count Error Interrupt Flag
N     * |        |          |In Slave mode, when the slave select line goes to inactive state, if bit counter is mismatch with DWIDTH, this interrupt flag will be set to 1.
N     * |        |          |0 = No Slave mode bit count error event.
N     * |        |          |1 = Slave mode bit count error event occurs.
N     * |        |          |Note: If the slave select is active but there is no any bus clock input, the SLVBCEIF is also active when the slave select goes to inactive state
N     * |        |          |This bit will be cleared by writing 1 to it.
N     * |[7]     |SLVURIF   |Slave Mode TX Under Run Interrupt Flag
N     * |        |          |In Slave mode, if TX underflow event occurs and the slave select line goes to inactive state, this interrupt flag will be set to 1.
N     * |        |          |0 = No Slave TX under run event.
N     * |        |          |1 = Slave TX under run occurs.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[8]     |RXEMPTY   |Receive FIFO Buffer Empty Indicator (Read Only)
N     * |        |          |0 = Receive FIFO buffer is not empty.
N     * |        |          |1 = Receive FIFO buffer is empty.
N     * |[9]     |RXFULL    |Receive FIFO Buffer Full Indicator (Read Only)
N     * |        |          |0 = Receive FIFO buffer is not full.
N     * |        |          |1 = Receive FIFO buffer is full.
N     * |[10]    |RXTHIF    |Receive FIFO Threshold Interrupt Flag (Read Only)
N     * |        |          |0 = The valid data count within the RX FIFO buffer is smaller than or equal to the setting value of RXTH.
N     * |        |          |1 = The valid data count within the receive FIFO buffer is larger than the setting value of RXTH.
N     * |[11]    |RXOVIF    |Receive FIFO Overrun Interrupt Flag
N     * |        |          |When the receive FIFO buffer is full, the follow-up data will be dropped and this bit will be set to 1.
N     * |        |          |0 = No FIFO is over run.
N     * |        |          |1 = Receive FIFO over run.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[12]    |RXTOIF    |Receive Time-out Interrupt Flag
N     * |        |          |0 = No receive FIFO time-out event.
N     * |        |          |1 = Receive FIFO buffer is not empty and no read operation on receive FIFO buffer over 64 SPI clock periods in Master mode or over 576 peripheral clock periods in Slave mode
N     * |        |          |When the received FIFO buffer is read by software, the time-out status will be cleared automatically.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[15]    |SPIENSTS  |SPI Enable Status (Read Only)
N     * |        |          |0 = The SPI controller is disabled.
N     * |        |          |1 = The SPI controller is enabled.
N     * |        |          |Note: The SPI peripheral clock is asynchronous with the system clock
N     * |        |          |In order to make sure the SPI control logic is disabled, this bit indicates the real status of SPI controller.
N     * |[16]    |TXEMPTY   |Transmit FIFO Buffer Empty Indicator (Read Only)
N     * |        |          |0 = Transmit FIFO buffer is not empty.
N     * |        |          |1 = Transmit FIFO buffer is empty.
N     * |[17]    |TXFULL    |Transmit FIFO Buffer Full Indicator (Read Only)
N     * |        |          |0 = Transmit FIFO buffer is not full.
N     * |        |          |1 = Transmit FIFO buffer is full.
N     * |[18]    |TXTHIF    |Transmit FIFO Threshold Interrupt Flag (Read Only)
N     * |        |          |0 = The valid data count within the transmit FIFO buffer is larger than the setting value of TXTH.
N     * |        |          |1 = The valid data count within the transmit FIFO buffer is less than or equal to the setting value of TXTH.
N     * |[19]    |TXUFIF    |TX Underflow Interrupt Flag
N     * |        |          |When the TX underflow event occurs, this bit will be set to 1, the state of data output pin depends on the setting of TXUFPOL.
N     * |        |          |0 = No effect.
N     * |        |          |1 = No data in Transmit FIFO and TX shift register when the slave selection signal is active.
N     * |        |          |Note 1: This bit will be cleared by writing 1 to it.
N     * |        |          |Note 2: If reset slave's transmission circuit when slave selection signal is active, this flag will be set to 1 after 2 peripheral clock cycles + 3 system clock cycles since the reset operation is done.
N     * |[23]    |TXRXRST   |TX or RX Reset Status (Read Only)
N     * |        |          |0 = The reset function of TXRST or RXRST is done.
N     * |        |          |1 = Doing the reset function of TXRST or RXRST.
N     * |        |          |Note: Both the reset operations of TXRST and RXRST need 3 system clock cycles + 2 peripheral clock cycles
N     * |        |          |User can check the status of this bit to monitor the reset function is doing or done.
N     * |[27:24] |RXCNT     |Receive FIFO Data Count (Read Only)
N     * |        |          |This bit field indicates the valid data count of receive FIFO buffer.
N     * |[31:28] |TXCNT     |Transmit FIFO Data Count (Read Only)
N     * |        |          |This bit field indicates the valid data count of transmit FIFO buffer.
N     * @var SPI_T::TX
N     * Offset: 0x20  SPI Data Transmit Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |TX        |Data Transmit Register
N     * |        |          |The data transmit registers pass through the transmitted data into the 4-level transmit FIFO buffer
N     * |        |          |The number of valid bits depends on the setting of DWIDTH (SPI_CTL[12:8]) in SPI mode or WDWIDTH (SPI_I2SCTL[5:4]) in I2S mode.
N     * |        |          |In SPI mode, if DWIDTH is set to 0x08, the bits TX[7:0] will be transmitted
N     * |        |          |If DWIDTH is set to 0x00 , the SPI controller will perform a 32-bit transfer.
N     * |        |          |In I2S mode, if WDWIDTH (SPI_I2SCTL[5:4]) is set to 0x2, the data width of audio channel is 24-bit and corresponding to TX[24:0]
N     * |        |          |If WDWIDTH is set as 0x0, 0x1, or 0x3, all bits of this field are valid and referred to the data arrangement in I2S mode FIFO operation section
N     * |        |          |Note: In Master mode, SPI controller will start to transfer the SPI bus clock after 1 APB clock and 6 peripheral clock cycles after user writes to this register.
N     * @var SPI_T::RX
N     * Offset: 0x30  SPI Data Receive Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |RX        |Data Receive Register
N     * |        |          |There are 4-level FIFO buffers in this controller
N     * |        |          |The data receive register holds the data received from SPI data input pin
N     * |        |          |If the RXEMPTY (SPI_STATUS[8] or SPI_I2SSTS[8]) is not set to 1, the receive FIFO buffers can be accessed through software by reading this register
N     * |        |          |This is a read only register.
N     * @var SPI_T::I2SCTL
N     * Offset: 0x60  I2S Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |I2SEN     |I2S Controller Enable Bit
N     * |        |          |0 = Disabled I2S mode.
N     * |        |          |1 = Enabled I2S mode.
N     * |        |          |Note:
N     * |        |          |1. If enable this bit, I2Sn_BCLK will start to output in Master mode.
N     * |        |          |2
N     * |        |          |Before changing the configurations of SPI_I2SCTL, SPI_I2SCLK, and SPI_FIFOCTL registers, user shall clear the I2SEN (SPI_I2SCTL[0]) and confirm the I2SENSTS (SPI_I2SSTS[15]) is 0.
N     * |[1]     |TXEN      |Transmit Enable Bit
N     * |        |          |0 = Data transmit Disabled.
N     * |        |          |1 = Data transmit Enabled.
N     * |[2]     |RXEN      |Receive Enable Bit
N     * |        |          |0 = Data receive Disabled.
N     * |        |          |1 = Data receive Enabled.
N     * |[3]     |MUTE      |Transmit Mute Enable Bit
N     * |        |          |0 = Transmit data is shifted from buffer.
N     * |        |          |1= Transmit channel zero.
N     * |[5:4]   |WDWIDTH   |Word Width
N     * |        |          |00 = data size is 8-bit.
N     * |        |          |01 = data size is 16-bit.
N     * |        |          |10 = data size is 24-bit.
N     * |        |          |11 = data size is 32-bit.
N     * |[6]     |MONO      |Monaural Data
N     * |        |          |0 = Data is stereo format.
N     * |        |          |1 = Data is monaural format.
N     * |[7]     |ORDER     |Stereo Data Order in FIFO
N     * |        |          |0 = Left channel data at high byte.
N     * |        |          |1 = Left channel data at low byte.
N     * |[8]     |SLAVE     |Slave Mode
N     * |        |          |I2S can operate as master or slave
N     * |        |          |For Master mode, I2Sn_BCLK and I2Sn_LRCLK pins are output mode and send bit clock from NuMicro NUC121 series to audio CODEC chip
N     * |        |          |In Slave mode, I2Sn_BCLK and I2Sn_LRCLK pins are input mode and I2Sn_BCLK and I2Sn_LRCLK signals are received from outer audio CODEC chip.
N     * |        |          |0 = Master mode.
N     * |        |          |1 = Slave mode.
N     * |[15]    |MCLKEN    |Master Clock Enable Bit
N     * |        |          |If MCLKEN is set to 1, I2S controller will generate master clock on I2Sn_MCLK pin for external audio devices.
N     * |        |          |0 = Master clock Disabled.
N     * |        |          |1 = Master clock Enabled.
N     * |[16]    |RZCEN     |Right Channel Zero Cross Detection Enable Bit
N     * |        |          |If this bit is set to 1, when right channel data sign bit change or next shift data bits are all 0 then RZCIF flag in SPI_I2SSTS register is set to 1
N     * |        |          |This function is only available in transmit operation.
N     * |        |          |0 = Right channel zero cross detection Disabled.
N     * |        |          |1 = Right channel zero cross detection Enabled.
N     * |[17]    |LZCEN     |Left Channel Zero Cross Detection Enable Bit
N     * |        |          |If this bit is set to 1, when left channel data sign bit changes or next shift data bits are all 0 then LZCIF flag in SPI_I2SSTS register is set to 1
N     * |        |          |This function is only available in transmit operation.
N     * |        |          |0 = Left channel zero cross detection Disabled.
N     * |        |          |1 = Left channel zero cross detection Enabled.
N     * |[23]    |RXLCH     |Receive Left Channel Enable Bit
N     * |        |          |When monaural format is selected (MONO = 1), I2S controller will receive right channel data if RXLCH is set to 0, and receive left channel data if RXLCH is set to 1.
N     * |        |          |0 = Receive right channel data in Mono mode.
N     * |        |          |1 = Receive left channel data in Mono mode.
N     * |[24]    |RZCIEN    |Right Channel Zero-cross Interrupt Enable Bit
N     * |        |          |Interrupt occurs if this bit is set to 1 and right channel zero-cross event occurs.
N     * |        |          |0 = Interrupt Disabled.
N     * |        |          |1 = Interrupt Enabled.
N     * |[25]    |LZCIEN    |Left Channel Zero-cross Interrupt Enable Bit
N     * |        |          |Interrupt occurs if this bit is set to 1 and left channel zero-cross event occurs.
N     * |        |          |0 = Interrupt Disabled.
N     * |        |          |1 = Interrupt Enabled.
N     * |[29:28] |FORMAT    |Data Format Selection
N     * |        |          |00 = I2S data format.
N     * |        |          |01 = MSB justified data format.
N     * |        |          |10 = PCM mode A.
N     * |        |          |11 = PCM mode B.
N     * @var SPI_T::I2SCLK
N     * Offset: 0x64  I2S Clock Divider Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |MCLKDIV   |Master Clock Divider
N     * |        |          |If MCLKEN is set to 1, I2S controller will generate master clock for external audio devices
N     * |        |          |The frequency of master clock, fMCLK, is determined by the following expressions:
N     * |        |          |If MCLKDIV >= 1,.
N     * |        |          |If MCLKDIV = 0,.
N     * |        |          |where
N     * |        |          |is the frequency of I2S peripheral clock source, which is defined in the clock control register CLK_CLKSEL2
N     * |        |          |In general, the master clock rate is 256 times sampling clock rate.
N     * |[16:8]  |BCLKDIV   |Bit Clock Divider
N     * |        |          |The I2S controller will generate bit clock in Master mode
N     * |        |          |The clock frequency of bit clock , fBCLK, is determined by the following expression:
N     * |        |          |where
N     * |        |          |is the frequency of I2S peripheral clock source, which is defined in the clock control register CLK_CLKSEL2.
N     * |        |          |In I2S Slave mode, this field is used to define the frequency of peripheral clock and it's determined by .
N     * |        |          |The peripheral clock frequency in I2S Slave mode must be equal to or faster than 6 times of input bit clock.
N     * |        |          |Note: User should set BCLKDIV carefully because the peripheral clock frequency must be slower than or equal to system frequency
N     * @var SPI_T::I2SSTS
N     * Offset: 0x68  I2S Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[4]     |RIGHT     |Right Channel (Read Only)
N     * |        |          |This bit indicates the current transmit data is belong to which channel.
N     * |        |          |0 = Left channel.
N     * |        |          |1 = Right channel.
N     * |[8]     |RXEMPTY   |Receive FIFO Buffer Empty Indicator (Read Only)
N     * |        |          |0 = Receive FIFO buffer is not empty.
N     * |        |          |1 = Receive FIFO buffer is empty.
N     * |[9]     |RXFULL    |Receive FIFO Buffer Full Indicator (Read Only)
N     * |        |          |0 = Receive FIFO buffer is not full.
N     * |        |          |1 = Receive FIFO buffer is full.
N     * |[10]    |RXTHIF    |Receive FIFO Threshold Interrupt Flag (Read Only)
N     * |        |          |0 = The valid data count within the Rx FIFO buffer is smaller than or equal to the setting value of RXTH.
N     * |        |          |1 = The valid data count within the receive FIFO buffer is larger than the setting value of RXTH.
N     * |        |          |Note: If RXTHIEN = 1 and RXTHIF = 1, the SPI/I2S controller will generate a SPI interrupt request.
N     * |[11]    |RXOVIF    |Receive FIFO Overrun Interrupt Flag
N     * |        |          |When the receive FIFO buffer is full, the follow-up data will be dropped and this bit will be set to 1.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[12]    |RXTOIF    |Receive Time-out Interrupt Flag
N     * |        |          |0 = No receive FIFO time-out event.
N     * |        |          |1 = Receive FIFO buffer is not empty and no read operation on receive FIFO buffer over 64 SPI clock period in Master mode or over 576 peripheral clock period in Slave mode
N     * |        |          |When the received FIFO buffer is read by software, the time-out status will be cleared automatically.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[15]    |I2SENSTS  |I2S Enable Status (Read Only)
N     * |        |          |0 = The SPI/I2S control logic is disabled.
N     * |        |          |1 = The SPI/I2S control logic is enabled.
N     * |        |          |Note: The SPI peripheral clock is asynchronous with the system clock
N     * |        |          |In order to make sure the SPI/I2S controller logic is disabled, this bit indicates the real status of SPI/I2S controller logic for user.
N     * |[16]    |TXEMPTY   |Transmit FIFO Buffer Empty Indicator (Read Only)
N     * |        |          |0 = Transmit FIFO buffer is not empty.
N     * |        |          |1 = Transmit FIFO buffer is empty.
N     * |[17]    |TXFULL    |Transmit FIFO Buffer Full Indicator (Read Only)
N     * |        |          |0 = Transmit FIFO buffer is not full.
N     * |        |          |1 = Transmit FIFO buffer is full.
N     * |[18]    |TXTHIF    |Transmit FIFO Threshold Interrupt Flag (Read Only)
N     * |        |          |0 = The valid data count within the transmit FIFO buffer is larger than the setting value of TXTH.
N     * |        |          |1 = The valid data count within the transmit FIFO buffer is less than or equal to the setting value of TXTH.
N     * |        |          |Note: If TXTHIEN = 1 and TXTHIF = 1, the SPI controller will generate a SPI interrupt request.
N     * |[19]    |TXUFIF    |Transmit FIFO Underflow Interrupt Flag
N     * |        |          |When the transmit FIFO buffer is empty and there is no datum written into the FIFO buffer, if there is more bus clock input, this bit will be set to 1.
N     * |        |          |Note: This bit will be cleared by writing 1 to it.
N     * |[20]    |RZCIF     |Right Channel Zero Cross Interrupt Flag
N     * |        |          |0 = No zero cross event occurred on right channel.
N     * |        |          |1 = Zero cross event occurred on right channel.
N     * |[21]    |LZCIF     |Left Channel Zero Cross Interrupt Flag
N     * |        |          |0 = No zero cross event occurred on left channel.
N     * |        |          |1 = Zero cross event occurred on left channel.
N     * |[23]    |TXRXRST   |TX or RX Reset Status (Read Only)
N     * |        |          |0 = The reset function of TXRST or RXRST is done.
N     * |        |          |1 = Doing the reset function of TXRST or RXRST.
N     * |        |          |Note: Both the reset operations of TXRST and RXRST need 3 system clock cycles + 2 peripheral clock cycles
N     * |        |          |User can check the status of this bit to monitor the reset function is doing or done.
N     * |[26:24] |RXCNT     |Receive FIFO Data Count (Read Only)
N     * |        |          |This bit field indicates the valid data count of receive FIFO buffer.
N     * |[30:28] |TXCNT     |Transmit FIFO Data Count (Read Only)
N     * |        |          |This bit field indicates the valid data count of transmit FIFO buffer.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] SPI Control Register                                             */
X    volatile uint32_t CTL;                    
N    __IO uint32_t CLKDIV;                /*!< [0x0004] SPI Clock Divider Register                                       */
X    volatile uint32_t CLKDIV;                 
N    __IO uint32_t SSCTL;                 /*!< [0x0008] SPI Slave Select Control Register                                */
X    volatile uint32_t SSCTL;                  
N    __IO uint32_t PDMACTL;               /*!< [0x000c] SPI PDMA Control Register                                        */
X    volatile uint32_t PDMACTL;                
N    __IO uint32_t FIFOCTL;               /*!< [0x0010] SPI FIFO Control Register                                        */
X    volatile uint32_t FIFOCTL;                
N    __IO uint32_t STATUS;                /*!< [0x0014] SPI Status Register                                              */
X    volatile uint32_t STATUS;                 
N    __I  uint32_t RESERVE0[2];
X    volatile const  uint32_t RESERVE0[2];
N    __O  uint32_t TX;                    /*!< [0x0020] SPI Data Transmit Register                                       */
X    volatile  uint32_t TX;                     
N    __I  uint32_t RESERVE1[3];
X    volatile const  uint32_t RESERVE1[3];
N    __I  uint32_t RX;                    /*!< [0x0030] SPI Data Receive Register                                        */
X    volatile const  uint32_t RX;                     
N    __I  uint32_t RESERVE2[11];
X    volatile const  uint32_t RESERVE2[11];
N    __IO uint32_t I2SCTL;                /*!< [0x0060] I2S Control Register                                             */
X    volatile uint32_t I2SCTL;                 
N    __IO uint32_t I2SCLK;                /*!< [0x0064] I2S Clock Divider Control Register                               */
X    volatile uint32_t I2SCLK;                 
N    __IO uint32_t I2SSTS;                /*!< [0x0068] I2S Status Register                                              */
X    volatile uint32_t I2SSTS;                 
N} SPI_T;
N
N/**
N    @addtogroup SPI_CONST SPI Bit Field Definition
N    Constant Definitions for SPI Controller
N@{ */
N
N#define SPI_CTL_SPIEN_Pos                (0)                                               /*!< SPI_T::CTL: SPIEN Position             */
N#define SPI_CTL_SPIEN_Msk                (0x1ul << SPI_CTL_SPIEN_Pos)                      /*!< SPI_T::CTL: SPIEN Mask                 */
N
N#define SPI_CTL_RXNEG_Pos                (1)                                               /*!< SPI_T::CTL: RXNEG Position             */
N#define SPI_CTL_RXNEG_Msk                (0x1ul << SPI_CTL_RXNEG_Pos)                      /*!< SPI_T::CTL: RXNEG Mask                 */
N
N#define SPI_CTL_TXNEG_Pos                (2)                                               /*!< SPI_T::CTL: TXNEG Position             */
N#define SPI_CTL_TXNEG_Msk                (0x1ul << SPI_CTL_TXNEG_Pos)                      /*!< SPI_T::CTL: TXNEG Mask                 */
N
N#define SPI_CTL_CLKPOL_Pos               (3)                                               /*!< SPI_T::CTL: CLKPOL Position            */
N#define SPI_CTL_CLKPOL_Msk               (0x1ul << SPI_CTL_CLKPOL_Pos)                     /*!< SPI_T::CTL: CLKPOL Mask                */
N
N#define SPI_CTL_SUSPITV_Pos              (4)                                               /*!< SPI_T::CTL: SUSPITV Position           */
N#define SPI_CTL_SUSPITV_Msk              (0xful << SPI_CTL_SUSPITV_Pos)                    /*!< SPI_T::CTL: SUSPITV Mask               */
N
N#define SPI_CTL_DWIDTH_Pos               (8)                                               /*!< SPI_T::CTL: DWIDTH Position            */
N#define SPI_CTL_DWIDTH_Msk               (0x1ful << SPI_CTL_DWIDTH_Pos)                    /*!< SPI_T::CTL: DWIDTH Mask                */
N
N#define SPI_CTL_LSB_Pos                  (13)                                              /*!< SPI_T::CTL: LSB Position               */
N#define SPI_CTL_LSB_Msk                  (0x1ul << SPI_CTL_LSB_Pos)                        /*!< SPI_T::CTL: LSB Mask                   */
N
N#define SPI_CTL_HALFDPX_Pos              (14)                                              /*!< SPI_T::CTL: HALFDPX Position           */
N#define SPI_CTL_HALFDPX_Msk              (0x1ul << SPI_CTL_HALFDPX_Pos)                    /*!< SPI_T::CTL: HALFDPX Mask               */
N
N#define SPI_CTL_RXONLY_Pos               (15)                                              /*!< SPI_T::CTL: RXONLY Position            */
N#define SPI_CTL_RXONLY_Msk               (0x1ul << SPI_CTL_RXONLY_Pos)                     /*!< SPI_T::CTL: RXONLY Mask                */
N
N#define SPI_CTL_UNITIEN_Pos              (17)                                              /*!< SPI_T::CTL: UNITIEN Position           */
N#define SPI_CTL_UNITIEN_Msk              (0x1ul << SPI_CTL_UNITIEN_Pos)                    /*!< SPI_T::CTL: UNITIEN Mask               */
N
N#define SPI_CTL_SLAVE_Pos                (18)                                              /*!< SPI_T::CTL: SLAVE Position             */
N#define SPI_CTL_SLAVE_Msk                (0x1ul << SPI_CTL_SLAVE_Pos)                      /*!< SPI_T::CTL: SLAVE Mask                 */
N
N#define SPI_CTL_REORDER_Pos              (19)                                              /*!< SPI_T::CTL: REORDER Position           */
N#define SPI_CTL_REORDER_Msk              (0x1ul << SPI_CTL_REORDER_Pos)                    /*!< SPI_T::CTL: REORDER Mask               */
N
N#define SPI_CTL_DATDIR_Pos               (20)                                              /*!< SPI_T::CTL: DATDIR Position            */
N#define SPI_CTL_DATDIR_Msk               (0x1ul << SPI_CTL_DATDIR_Pos)                     /*!< SPI_T::CTL: DATDIR Mask                */
N
N#define SPI_CLKDIV_DIVIDER_Pos           (0)                                               /*!< SPI_T::CLKDIV: DIVIDER Position        */
N#define SPI_CLKDIV_DIVIDER_Msk           (0xfful << SPI_CLKDIV_DIVIDER_Pos)                /*!< SPI_T::CLKDIV: DIVIDER Mask            */
N
N#define SPI_SSCTL_SS_Pos                 (0)                                               /*!< SPI_T::SSCTL: SS Position              */
N#define SPI_SSCTL_SS_Msk                 (0x1ul << SPI_SSCTL_SS_Pos)                       /*!< SPI_T::SSCTL: SS Mask                  */
N
N#define SPI_SSCTL_SSACTPOL_Pos           (2)                                               /*!< SPI_T::SSCTL: SSACTPOL Position        */
N#define SPI_SSCTL_SSACTPOL_Msk           (0x1ul << SPI_SSCTL_SSACTPOL_Pos)                 /*!< SPI_T::SSCTL: SSACTPOL Mask            */
N
N#define SPI_SSCTL_AUTOSS_Pos             (3)                                               /*!< SPI_T::SSCTL: AUTOSS Position          */
N#define SPI_SSCTL_AUTOSS_Msk             (0x1ul << SPI_SSCTL_AUTOSS_Pos)                   /*!< SPI_T::SSCTL: AUTOSS Mask              */
N
N#define SPI_SSCTL_SLVBEIEN_Pos           (8)                                               /*!< SPI_T::SSCTL: SLVBEIEN Position        */
N#define SPI_SSCTL_SLVBEIEN_Msk           (0x1ul << SPI_SSCTL_SLVBEIEN_Pos)                 /*!< SPI_T::SSCTL: SLVBEIEN Mask            */
N
N#define SPI_SSCTL_SLVURIEN_Pos           (9)                                               /*!< SPI_T::SSCTL: SLVURIEN Position        */
N#define SPI_SSCTL_SLVURIEN_Msk           (0x1ul << SPI_SSCTL_SLVURIEN_Pos)                 /*!< SPI_T::SSCTL: SLVURIEN Mask            */
N
N#define SPI_SSCTL_SSACTIEN_Pos           (12)                                              /*!< SPI_T::SSCTL: SSACTIEN Position        */
N#define SPI_SSCTL_SSACTIEN_Msk           (0x1ul << SPI_SSCTL_SSACTIEN_Pos)                 /*!< SPI_T::SSCTL: SSACTIEN Mask            */
N
N#define SPI_SSCTL_SSINAIEN_Pos           (13)                                              /*!< SPI_T::SSCTL: SSINAIEN Position        */
N#define SPI_SSCTL_SSINAIEN_Msk           (0x1ul << SPI_SSCTL_SSINAIEN_Pos)                 /*!< SPI_T::SSCTL: SSINAIEN Mask            */
N
N#define SPI_PDMACTL_TXPDMAEN_Pos         (0)                                               /*!< SPI_T::PDMACTL: TXPDMAEN Position      */
N#define SPI_PDMACTL_TXPDMAEN_Msk         (0x1ul << SPI_PDMACTL_TXPDMAEN_Pos)               /*!< SPI_T::PDMACTL: TXPDMAEN Mask          */
N
N#define SPI_PDMACTL_RXPDMAEN_Pos         (1)                                               /*!< SPI_T::PDMACTL: RXPDMAEN Position      */
N#define SPI_PDMACTL_RXPDMAEN_Msk         (0x1ul << SPI_PDMACTL_RXPDMAEN_Pos)               /*!< SPI_T::PDMACTL: RXPDMAEN Mask          */
N
N#define SPI_PDMACTL_PDMARST_Pos          (2)                                               /*!< SPI_T::PDMACTL: PDMARST Position       */
N#define SPI_PDMACTL_PDMARST_Msk          (0x1ul << SPI_PDMACTL_PDMARST_Pos)                /*!< SPI_T::PDMACTL: PDMARST Mask           */
N
N#define SPI_FIFOCTL_RXRST_Pos            (0)                                               /*!< SPI_T::FIFOCTL: RXRST Position         */
N#define SPI_FIFOCTL_RXRST_Msk            (0x1ul << SPI_FIFOCTL_RXRST_Pos)                  /*!< SPI_T::FIFOCTL: RXRST Mask             */
N
N#define SPI_FIFOCTL_TXRST_Pos            (1)                                               /*!< SPI_T::FIFOCTL: TXRST Position         */
N#define SPI_FIFOCTL_TXRST_Msk            (0x1ul << SPI_FIFOCTL_TXRST_Pos)                  /*!< SPI_T::FIFOCTL: TXRST Mask             */
N
N#define SPI_FIFOCTL_RXTHIEN_Pos          (2)                                               /*!< SPI_T::FIFOCTL: RXTHIEN Position       */
N#define SPI_FIFOCTL_RXTHIEN_Msk          (0x1ul << SPI_FIFOCTL_RXTHIEN_Pos)                /*!< SPI_T::FIFOCTL: RXTHIEN Mask           */
N
N#define SPI_FIFOCTL_TXTHIEN_Pos          (3)                                               /*!< SPI_T::FIFOCTL: TXTHIEN Position       */
N#define SPI_FIFOCTL_TXTHIEN_Msk          (0x1ul << SPI_FIFOCTL_TXTHIEN_Pos)                /*!< SPI_T::FIFOCTL: TXTHIEN Mask           */
N
N#define SPI_FIFOCTL_RXTOIEN_Pos          (4)                                               /*!< SPI_T::FIFOCTL: RXTOIEN Position       */
N#define SPI_FIFOCTL_RXTOIEN_Msk          (0x1ul << SPI_FIFOCTL_RXTOIEN_Pos)                /*!< SPI_T::FIFOCTL: RXTOIEN Mask           */
N
N#define SPI_FIFOCTL_RXOVIEN_Pos          (5)                                               /*!< SPI_T::FIFOCTL: RXOVIEN Position       */
N#define SPI_FIFOCTL_RXOVIEN_Msk          (0x1ul << SPI_FIFOCTL_RXOVIEN_Pos)                /*!< SPI_T::FIFOCTL: RXOVIEN Mask           */
N
N#define SPI_FIFOCTL_TXUFPOL_Pos          (6)                                               /*!< SPI_T::FIFOCTL: TXUFPOL Position       */
N#define SPI_FIFOCTL_TXUFPOL_Msk          (0x1ul << SPI_FIFOCTL_TXUFPOL_Pos)                /*!< SPI_T::FIFOCTL: TXUFPOL Mask           */
N
N#define SPI_FIFOCTL_TXUFIEN_Pos          (7)                                               /*!< SPI_T::FIFOCTL: TXUFIEN Position       */
N#define SPI_FIFOCTL_TXUFIEN_Msk          (0x1ul << SPI_FIFOCTL_TXUFIEN_Pos)                /*!< SPI_T::FIFOCTL: TXUFIEN Mask           */
N
N#define SPI_FIFOCTL_RXFBCLR_Pos          (8)                                               /*!< SPI_T::FIFOCTL: RXFBCLR Position       */
N#define SPI_FIFOCTL_RXFBCLR_Msk          (0x1ul << SPI_FIFOCTL_RXFBCLR_Pos)                /*!< SPI_T::FIFOCTL: RXFBCLR Mask           */
N
N#define SPI_FIFOCTL_TXFBCLR_Pos          (9)                                               /*!< SPI_T::FIFOCTL: TXFBCLR Position       */
N#define SPI_FIFOCTL_TXFBCLR_Msk          (0x1ul << SPI_FIFOCTL_TXFBCLR_Pos)                /*!< SPI_T::FIFOCTL: TXFBCLR Mask           */
N
N#define SPI_FIFOCTL_RXTH_Pos             (24)                                              /*!< SPI_T::FIFOCTL: RXTH Position          */
N#define SPI_FIFOCTL_RXTH_Msk             (0x3ul << SPI_FIFOCTL_RXTH_Pos)                   /*!< SPI_T::FIFOCTL: RXTH Mask              */
N
N#define SPI_FIFOCTL_TXTH_Pos             (28)                                              /*!< SPI_T::FIFOCTL: TXTH Position          */
N#define SPI_FIFOCTL_TXTH_Msk             (0x3ul << SPI_FIFOCTL_TXTH_Pos)                   /*!< SPI_T::FIFOCTL: TXTH Mask              */
N
N#define SPI_STATUS_BUSY_Pos              (0)                                               /*!< SPI_T::STATUS: BUSY Position           */
N#define SPI_STATUS_BUSY_Msk              (0x1ul << SPI_STATUS_BUSY_Pos)                    /*!< SPI_T::STATUS: BUSY Mask               */
N
N#define SPI_STATUS_UNITIF_Pos            (1)                                               /*!< SPI_T::STATUS: UNITIF Position         */
N#define SPI_STATUS_UNITIF_Msk            (0x1ul << SPI_STATUS_UNITIF_Pos)                  /*!< SPI_T::STATUS: UNITIF Mask             */
N
N#define SPI_STATUS_SSACTIF_Pos           (2)                                               /*!< SPI_T::STATUS: SSACTIF Position        */
N#define SPI_STATUS_SSACTIF_Msk           (0x1ul << SPI_STATUS_SSACTIF_Pos)                 /*!< SPI_T::STATUS: SSACTIF Mask            */
N
N#define SPI_STATUS_SSINAIF_Pos           (3)                                               /*!< SPI_T::STATUS: SSINAIF Position        */
N#define SPI_STATUS_SSINAIF_Msk           (0x1ul << SPI_STATUS_SSINAIF_Pos)                 /*!< SPI_T::STATUS: SSINAIF Mask            */
N
N#define SPI_STATUS_SSLINE_Pos            (4)                                               /*!< SPI_T::STATUS: SSLINE Position         */
N#define SPI_STATUS_SSLINE_Msk            (0x1ul << SPI_STATUS_SSLINE_Pos)                  /*!< SPI_T::STATUS: SSLINE Mask             */
N
N#define SPI_STATUS_SLVBEIF_Pos           (6)                                               /*!< SPI_T::STATUS: SLVBEIF Position        */
N#define SPI_STATUS_SLVBEIF_Msk           (0x1ul << SPI_STATUS_SLVBEIF_Pos)                 /*!< SPI_T::STATUS: SLVBEIF Mask            */
N
N#define SPI_STATUS_SLVURIF_Pos           (7)                                               /*!< SPI_T::STATUS: SLVURIF Position        */
N#define SPI_STATUS_SLVURIF_Msk           (0x1ul << SPI_STATUS_SLVURIF_Pos)                 /*!< SPI_T::STATUS: SLVURIF Mask            */
N
N#define SPI_STATUS_RXEMPTY_Pos           (8)                                               /*!< SPI_T::STATUS: RXEMPTY Position        */
N#define SPI_STATUS_RXEMPTY_Msk           (0x1ul << SPI_STATUS_RXEMPTY_Pos)                 /*!< SPI_T::STATUS: RXEMPTY Mask            */
N
N#define SPI_STATUS_RXFULL_Pos            (9)                                               /*!< SPI_T::STATUS: RXFULL Position         */
N#define SPI_STATUS_RXFULL_Msk            (0x1ul << SPI_STATUS_RXFULL_Pos)                  /*!< SPI_T::STATUS: RXFULL Mask             */
N
N#define SPI_STATUS_RXTHIF_Pos            (10)                                              /*!< SPI_T::STATUS: RXTHIF Position         */
N#define SPI_STATUS_RXTHIF_Msk            (0x1ul << SPI_STATUS_RXTHIF_Pos)                  /*!< SPI_T::STATUS: RXTHIF Mask             */
N
N#define SPI_STATUS_RXOVIF_Pos            (11)                                              /*!< SPI_T::STATUS: RXOVIF Position         */
N#define SPI_STATUS_RXOVIF_Msk            (0x1ul << SPI_STATUS_RXOVIF_Pos)                  /*!< SPI_T::STATUS: RXOVIF Mask             */
N
N#define SPI_STATUS_RXTOIF_Pos            (12)                                              /*!< SPI_T::STATUS: RXTOIF Position         */
N#define SPI_STATUS_RXTOIF_Msk            (0x1ul << SPI_STATUS_RXTOIF_Pos)                  /*!< SPI_T::STATUS: RXTOIF Mask             */
N
N#define SPI_STATUS_SPIENSTS_Pos          (15)                                              /*!< SPI_T::STATUS: SPIENSTS Position       */
N#define SPI_STATUS_SPIENSTS_Msk          (0x1ul << SPI_STATUS_SPIENSTS_Pos)                /*!< SPI_T::STATUS: SPIENSTS Mask           */
N
N#define SPI_STATUS_TXEMPTY_Pos           (16)                                              /*!< SPI_T::STATUS: TXEMPTY Position        */
N#define SPI_STATUS_TXEMPTY_Msk           (0x1ul << SPI_STATUS_TXEMPTY_Pos)                 /*!< SPI_T::STATUS: TXEMPTY Mask            */
N
N#define SPI_STATUS_TXFULL_Pos            (17)                                              /*!< SPI_T::STATUS: TXFULL Position         */
N#define SPI_STATUS_TXFULL_Msk            (0x1ul << SPI_STATUS_TXFULL_Pos)                  /*!< SPI_T::STATUS: TXFULL Mask             */
N
N#define SPI_STATUS_TXTHIF_Pos            (18)                                              /*!< SPI_T::STATUS: TXTHIF Position         */
N#define SPI_STATUS_TXTHIF_Msk            (0x1ul << SPI_STATUS_TXTHIF_Pos)                  /*!< SPI_T::STATUS: TXTHIF Mask             */
N
N#define SPI_STATUS_TXUFIF_Pos            (19)                                              /*!< SPI_T::STATUS: TXUFIF Position         */
N#define SPI_STATUS_TXUFIF_Msk            (0x1ul << SPI_STATUS_TXUFIF_Pos)                  /*!< SPI_T::STATUS: TXUFIF Mask             */
N
N#define SPI_STATUS_TXRXRST_Pos           (23)                                              /*!< SPI_T::STATUS: TXRXRST Position        */
N#define SPI_STATUS_TXRXRST_Msk           (0x1ul << SPI_STATUS_TXRXRST_Pos)                 /*!< SPI_T::STATUS: TXRXRST Mask            */
N
N#define SPI_STATUS_RXCNT_Pos             (24)                                              /*!< SPI_T::STATUS: RXCNT Position          */
N#define SPI_STATUS_RXCNT_Msk             (0xful << SPI_STATUS_RXCNT_Pos)                   /*!< SPI_T::STATUS: RXCNT Mask              */
N
N#define SPI_STATUS_TXCNT_Pos             (28)                                              /*!< SPI_T::STATUS: TXCNT Position          */
N#define SPI_STATUS_TXCNT_Msk             (0xful << SPI_STATUS_TXCNT_Pos)                   /*!< SPI_T::STATUS: TXCNT Mask              */
N
N#define SPI_TX_TX_Pos                    (0)                                               /*!< SPI_T::TX: TX Position                 */
N#define SPI_TX_TX_Msk                    (0xfffffffful << SPI_TX_TX_Pos)                   /*!< SPI_T::TX: TX Mask                     */
N
N#define SPI_RX_RX_Pos                    (0)                                               /*!< SPI_T::RX: RX Position                 */
N#define SPI_RX_RX_Msk                    (0xfffffffful << SPI_RX_RX_Pos)                   /*!< SPI_T::RX: RX Mask                     */
N
N#define SPI_I2SCTL_I2SEN_Pos             (0)                                               /*!< SPI_T::I2SCTL: I2SEN Position          */
N#define SPI_I2SCTL_I2SEN_Msk             (0x1ul << SPI_I2SCTL_I2SEN_Pos)                   /*!< SPI_T::I2SCTL: I2SEN Mask              */
N
N#define SPI_I2SCTL_TXEN_Pos              (1)                                               /*!< SPI_T::I2SCTL: TXEN Position           */
N#define SPI_I2SCTL_TXEN_Msk              (0x1ul << SPI_I2SCTL_TXEN_Pos)                    /*!< SPI_T::I2SCTL: TXEN Mask               */
N
N#define SPI_I2SCTL_RXEN_Pos              (2)                                               /*!< SPI_T::I2SCTL: RXEN Position           */
N#define SPI_I2SCTL_RXEN_Msk              (0x1ul << SPI_I2SCTL_RXEN_Pos)                    /*!< SPI_T::I2SCTL: RXEN Mask               */
N
N#define SPI_I2SCTL_MUTE_Pos              (3)                                               /*!< SPI_T::I2SCTL: MUTE Position           */
N#define SPI_I2SCTL_MUTE_Msk              (0x1ul << SPI_I2SCTL_MUTE_Pos)                    /*!< SPI_T::I2SCTL: MUTE Mask               */
N
N#define SPI_I2SCTL_WDWIDTH_Pos           (4)                                               /*!< SPI_T::I2SCTL: WDWIDTH Position        */
N#define SPI_I2SCTL_WDWIDTH_Msk           (0x3ul << SPI_I2SCTL_WDWIDTH_Pos)                 /*!< SPI_T::I2SCTL: WDWIDTH Mask            */
N
N#define SPI_I2SCTL_MONO_Pos              (6)                                               /*!< SPI_T::I2SCTL: MONO Position           */
N#define SPI_I2SCTL_MONO_Msk              (0x1ul << SPI_I2SCTL_MONO_Pos)                    /*!< SPI_T::I2SCTL: MONO Mask               */
N
N#define SPI_I2SCTL_ORDER_Pos             (7)                                               /*!< SPI_T::I2SCTL: ORDER Position          */
N#define SPI_I2SCTL_ORDER_Msk             (0x1ul << SPI_I2SCTL_ORDER_Pos)                   /*!< SPI_T::I2SCTL: ORDER Mask              */
N
N#define SPI_I2SCTL_SLAVE_Pos             (8)                                               /*!< SPI_T::I2SCTL: SLAVE Position          */
N#define SPI_I2SCTL_SLAVE_Msk             (0x1ul << SPI_I2SCTL_SLAVE_Pos)                   /*!< SPI_T::I2SCTL: SLAVE Mask              */
N
N#define SPI_I2SCTL_MCLKEN_Pos            (15)                                              /*!< SPI_T::I2SCTL: MCLKEN Position         */
N#define SPI_I2SCTL_MCLKEN_Msk            (0x1ul << SPI_I2SCTL_MCLKEN_Pos)                  /*!< SPI_T::I2SCTL: MCLKEN Mask             */
N
N#define SPI_I2SCTL_RZCEN_Pos             (16)                                              /*!< SPI_T::I2SCTL: RZCEN Position          */
N#define SPI_I2SCTL_RZCEN_Msk             (0x1ul << SPI_I2SCTL_RZCEN_Pos)                   /*!< SPI_T::I2SCTL: RZCEN Mask              */
N
N#define SPI_I2SCTL_LZCEN_Pos             (17)                                              /*!< SPI_T::I2SCTL: LZCEN Position          */
N#define SPI_I2SCTL_LZCEN_Msk             (0x1ul << SPI_I2SCTL_LZCEN_Pos)                   /*!< SPI_T::I2SCTL: LZCEN Mask              */
N
N#define SPI_I2SCTL_RXLCH_Pos             (23)                                              /*!< SPI_T::I2SCTL: RXLCH Position          */
N#define SPI_I2SCTL_RXLCH_Msk             (0x1ul << SPI_I2SCTL_RXLCH_Pos)                   /*!< SPI_T::I2SCTL: RXLCH Mask              */
N
N#define SPI_I2SCTL_RZCIEN_Pos            (24)                                              /*!< SPI_T::I2SCTL: RZCIEN Position         */
N#define SPI_I2SCTL_RZCIEN_Msk            (0x1ul << SPI_I2SCTL_RZCIEN_Pos)                  /*!< SPI_T::I2SCTL: RZCIEN Mask             */
N
N#define SPI_I2SCTL_LZCIEN_Pos            (25)                                              /*!< SPI_T::I2SCTL: LZCIEN Position         */
N#define SPI_I2SCTL_LZCIEN_Msk            (0x1ul << SPI_I2SCTL_LZCIEN_Pos)                  /*!< SPI_T::I2SCTL: LZCIEN Mask             */
N
N#define SPI_I2SCTL_FORMAT_Pos            (28)                                              /*!< SPI_T::I2SCTL: FORMAT Position         */
N#define SPI_I2SCTL_FORMAT_Msk            (0x3ul << SPI_I2SCTL_FORMAT_Pos)                  /*!< SPI_T::I2SCTL: FORMAT Mask             */
N
N#define SPI_I2SCLK_MCLKDIV_Pos           (0)                                               /*!< SPI_T::I2SCLK: MCLKDIV Position        */
N#define SPI_I2SCLK_MCLKDIV_Msk           (0x3ful << SPI_I2SCLK_MCLKDIV_Pos)                /*!< SPI_T::I2SCLK: MCLKDIV Mask            */
N
N#define SPI_I2SCLK_BCLKDIV_Pos           (8)                                               /*!< SPI_T::I2SCLK: BCLKDIV Position        */
N#define SPI_I2SCLK_BCLKDIV_Msk           (0x1fful << SPI_I2SCLK_BCLKDIV_Pos)               /*!< SPI_T::I2SCLK: BCLKDIV Mask            */
N
N#define SPI_I2SSTS_RIGHT_Pos             (4)                                               /*!< SPI_T::I2SSTS: RIGHT Position          */
N#define SPI_I2SSTS_RIGHT_Msk             (0x1ul << SPI_I2SSTS_RIGHT_Pos)                   /*!< SPI_T::I2SSTS: RIGHT Mask              */
N
N#define SPI_I2SSTS_RXEMPTY_Pos           (8)                                               /*!< SPI_T::I2SSTS: RXEMPTY Position        */
N#define SPI_I2SSTS_RXEMPTY_Msk           (0x1ul << SPI_I2SSTS_RXEMPTY_Pos)                 /*!< SPI_T::I2SSTS: RXEMPTY Mask            */
N
N#define SPI_I2SSTS_RXFULL_Pos            (9)                                               /*!< SPI_T::I2SSTS: RXFULL Position         */
N#define SPI_I2SSTS_RXFULL_Msk            (0x1ul << SPI_I2SSTS_RXFULL_Pos)                  /*!< SPI_T::I2SSTS: RXFULL Mask             */
N
N#define SPI_I2SSTS_RXTHIF_Pos            (10)                                              /*!< SPI_T::I2SSTS: RXTHIF Position         */
N#define SPI_I2SSTS_RXTHIF_Msk            (0x1ul << SPI_I2SSTS_RXTHIF_Pos)                  /*!< SPI_T::I2SSTS: RXTHIF Mask             */
N
N#define SPI_I2SSTS_RXOVIF_Pos            (11)                                              /*!< SPI_T::I2SSTS: RXOVIF Position         */
N#define SPI_I2SSTS_RXOVIF_Msk            (0x1ul << SPI_I2SSTS_RXOVIF_Pos)                  /*!< SPI_T::I2SSTS: RXOVIF Mask             */
N
N#define SPI_I2SSTS_RXTOIF_Pos            (12)                                              /*!< SPI_T::I2SSTS: RXTOIF Position         */
N#define SPI_I2SSTS_RXTOIF_Msk            (0x1ul << SPI_I2SSTS_RXTOIF_Pos)                  /*!< SPI_T::I2SSTS: RXTOIF Mask             */
N
N#define SPI_I2SSTS_I2SENSTS_Pos          (15)                                              /*!< SPI_T::I2SSTS: I2SENSTS Position       */
N#define SPI_I2SSTS_I2SENSTS_Msk          (0x1ul << SPI_I2SSTS_I2SENSTS_Pos)                /*!< SPI_T::I2SSTS: I2SENSTS Mask           */
N
N#define SPI_I2SSTS_TXEMPTY_Pos           (16)                                              /*!< SPI_T::I2SSTS: TXEMPTY Position        */
N#define SPI_I2SSTS_TXEMPTY_Msk           (0x1ul << SPI_I2SSTS_TXEMPTY_Pos)                 /*!< SPI_T::I2SSTS: TXEMPTY Mask            */
N
N#define SPI_I2SSTS_TXFULL_Pos            (17)                                              /*!< SPI_T::I2SSTS: TXFULL Position         */
N#define SPI_I2SSTS_TXFULL_Msk            (0x1ul << SPI_I2SSTS_TXFULL_Pos)                  /*!< SPI_T::I2SSTS: TXFULL Mask             */
N
N#define SPI_I2SSTS_TXTHIF_Pos            (18)                                              /*!< SPI_T::I2SSTS: TXTHIF Position         */
N#define SPI_I2SSTS_TXTHIF_Msk            (0x1ul << SPI_I2SSTS_TXTHIF_Pos)                  /*!< SPI_T::I2SSTS: TXTHIF Mask             */
N
N#define SPI_I2SSTS_TXUFIF_Pos            (19)                                              /*!< SPI_T::I2SSTS: TXUFIF Position         */
N#define SPI_I2SSTS_TXUFIF_Msk            (0x1ul << SPI_I2SSTS_TXUFIF_Pos)                  /*!< SPI_T::I2SSTS: TXUFIF Mask             */
N
N#define SPI_I2SSTS_RZCIF_Pos             (20)                                              /*!< SPI_T::I2SSTS: RZCIF Position          */
N#define SPI_I2SSTS_RZCIF_Msk             (0x1ul << SPI_I2SSTS_RZCIF_Pos)                   /*!< SPI_T::I2SSTS: RZCIF Mask              */
N
N#define SPI_I2SSTS_LZCIF_Pos             (21)                                              /*!< SPI_T::I2SSTS: LZCIF Position          */
N#define SPI_I2SSTS_LZCIF_Msk             (0x1ul << SPI_I2SSTS_LZCIF_Pos)                   /*!< SPI_T::I2SSTS: LZCIF Mask              */
N
N#define SPI_I2SSTS_TXRXRST_Pos           (23)                                              /*!< SPI_T::I2SSTS: TXRXRST Position        */
N#define SPI_I2SSTS_TXRXRST_Msk           (0x1ul << SPI_I2SSTS_TXRXRST_Pos)                 /*!< SPI_T::I2SSTS: TXRXRST Mask            */
N
N#define SPI_I2SSTS_RXCNT_Pos             (24)                                              /*!< SPI_T::I2SSTS: RXCNT Position          */
N#define SPI_I2SSTS_RXCNT_Msk             (0x7ul << SPI_I2SSTS_RXCNT_Pos)                   /*!< SPI_T::I2SSTS: RXCNT Mask              */
N
N#define SPI_I2SSTS_TXCNT_Pos             (28)                                              /*!< SPI_T::I2SSTS: TXCNT Position          */
N#define SPI_I2SSTS_TXCNT_Msk             (0x7ul << SPI_I2SSTS_TXCNT_Pos)                   /*!< SPI_T::I2SSTS: TXCNT Mask              */
N
N/**@}*/ /* SPI_CONST */
N/**@}*/ /* end of SPI register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __SPI_REG_H__ */
L 162 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "sys_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\sys_reg.h" 1
N/**************************************************************************//**
N * @file     sys_reg.h
N * @version  V1.00
N * @brief    SYS register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __SYS_REG_H__
N#define __SYS_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup SYS System Manger Controller (SYS)
N    Memory Mapped Structure for SYS Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var SYS_T::PDID
N     * Offset: 0x00  Part Device Identification Number Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |PDID      |Part Device Identification Number (Read Only)
N     * |        |          |This register reflects device part number code
N     * |        |          |Software can read this register to identify which device is used.
N     * @var SYS_T::RSTSTS
N     * Offset: 0x04  System Reset Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |PORF      |POR Reset Flag
N     * |        |          |The POR reset flag is set by the "Reset Signal" from the Power-on Reset (POR) Controller or bit CHIPRST (SYS_IPRST0[0]) to indicate the previous reset source.
N     * |        |          |0 = No reset from POR or CHIPRST.
N     * |        |          |1 = Power-on Reset (POR) or CHIPRST had issued the reset signal to reset the system.
N     * |        |          |Note: This bit can be cleared by software writing '1'.
N     * |[1]     |PINRF     |NRESET Pin Reset Flag
N     * |        |          |The nRESET pin reset flag is set by the "Reset Signal" from the nRESET Pin to indicate the previous reset source.
N     * |        |          |0 = No reset from nRESET pin.
N     * |        |          |1 = Pin nRESET had issued the reset signal to reset the system.
N     * |        |          |Note: This bit can be cleared by software writing '1'.
N     * |[2]     |WDTRF     |WDT Reset Flag
N     * |        |          |The WDT reset flag is set by the "Reset Signal" from the Watchdog Timer or Window Watchdog Timer to indicate the previous reset source.
N     * |        |          |0 = No reset from watchdog timer or window watchdog timer.
N     * |        |          |1 = The watchdog timer or window watchdog timer had issued the reset signal to reset the system.
N     * |        |          |Note1: This bit can be cleared by software writing '1'.
N     * |        |          |Note2: Watchdog Timer register RSTF(WDT_CTL[2]) bit is set if the system has been reset by WDT time-out reset
N     * |        |          |Window Watchdog Timer register WWDTRF(WWDT_STATUS[1]) bit is set if the system has been reset by WWDT time-out reset.
N     * |[3]     |LVRF      |LVR Reset Flag
N     * |        |          |The LVR reset flag is set by the "Reset Signal" from the Low Voltage Reset Controller to indicate the previous reset source.
N     * |        |          |0 = No reset from LVR.
N     * |        |          |1 = LVR controller had issued the reset signal to reset the system.
N     * |        |          |Note: This bit can be cleared by software writing '1'.
N     * |[4]     |BODRF     |BOD Reset Flag
N     * |        |          |The BOD reset flag is set by the "Reset Signal" from the Brown-Out Detector to indicate the previous reset source.
N     * |        |          |0 = No reset from BOD.
N     * |        |          |1 = The BOD had issued the reset signal to reset the system.
N     * |        |          |Note: This bit can be cleared by software writing '1'.
N     * |[5]     |MCURF     |MCU Reset Flag
N     * |        |          |The MCU reset flag is set by the "Reset Signal" from the Cortex-M0 Core to indicate the previous reset source.
N     * |        |          |0 = No reset from Cortex-M0.
N     * |        |          |1 = The Cortex-M0 had issued the reset signal to reset the system by writing 1 to the bit SYSRESETREQ(AIRCR[2], Application Interrupt and Reset Control Register, address = 0xE000ED0C) in system control registers of Cortex-M0 core.
N     * |        |          |Note: This bit can be cleared by software writing '1'.
N     * |[7]     |CPURF     |CPU Reset Flag
N     * |        |          |The CPU reset flag is set by hardware if software writes CPURST (SYS_IPRST0[1]) 1 to reset Cortex-M0 Core and Flash Memory Controller (FMC).
N     * |        |          |0 = No reset from CPU.
N     * |        |          |1 = The Cortex-M0 Core and FMC are reset by software setting CPURST to 1.
N     * |        |          |Note: This bit can be cleared by software writing '1'.
N     * |[8]     |CPULKRF   |the CPULK Reset Flag Is Set by Hardware If Cortex-M0 Lockup Happened
N     * |        |          |0 = No reset from CPU lockup happened.
N     * |        |          |1 = The Cortex-M0 lockup happened and chip is reset.
N     * |        |          |Note: This bit can be cleared by software writing '1'.
N     * @var SYS_T::IPRST0
N     * Offset: 0x08  Peripheral  Reset Control Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CHIPRST   |Chip One-shot Reset (Write Protect)
N     * |        |          |Setting this bit will reset the whole chip, including Processor core and all peripherals, and this bit will automatically return to 0 after the 2 clock cycles.
N     * |        |          |The CHIPRST is same as the POR reset, all the chip controllers is reset and the chip setting from flash are also reload.
N     * |        |          |About the difference between CHIPRST and SYSRESETREQ(AIRCR[2]), please refer to section 6.2.2
N     * |        |          |0 = Chip normal operation.
N     * |        |          |1 = Chip one-shot reset.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[1]     |CPURST    |Processor Core One-shot Reset (Write Protect)
N     * |        |          |Setting this bit will only reset the processor core and Flash Memory Controller(FMC), and this bit will automatically return to 0 after the 2 clock cycles.
N     * |        |          |0 = Processor core normal operation.
N     * |        |          |1 = Processor core one-shot reset.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[2]     |PDMARST   |PDMA Controller Reset (Write Protect)
N     * |        |          |Setting this bit to 1 will generate a reset signal to the PDMA
N     * |        |          |User needs to set this bit to 0 to release from reset state.
N     * |        |          |0 = PDMA controller normal operation.
N     * |        |          |1 = PDMA controller reset.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var SYS_T::IPRST1
N     * Offset: 0x0C  Peripheral Reset Control Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |GPIORST   |GPIO Controller Reset
N     * |        |          |0 = GPIO controller normal operation.
N     * |        |          |1 = GPIO controller reset.
N     * |[2]     |TMR0RST   |Timer0 Controller Reset
N     * |        |          |0 = Timer0 controller normal operation.
N     * |        |          |1 = Timer0 controller reset.
N     * |[3]     |TMR1RST   |Timer1 Controller Reset
N     * |        |          |0 = Timer1 controller normal operation.
N     * |        |          |1 = Timer1 controller reset.
N     * |[4]     |TMR2RST   |Timer2 Controller Reset
N     * |        |          |0 = Timer2 controller normal operation.
N     * |        |          |1 = Timer2 controller reset.
N     * |[5]     |TMR3RST   |Timer3 Controller Reset
N     * |        |          |0 = Timer3 controller normal operation.
N     * |        |          |1 = Timer3 controller reset.
N     * |[8]     |I2C0RST   |I2C0 Controller Reset
N     * |        |          |0 = I2C0 controller normal operation.
N     * |        |          |1 = I2C0 controller reset.
N     * |[9]     |I2C1RST   |I2C1 Controller Reset
N     * |        |          |0 = I2C1 controller normal operation.
N     * |        |          |1 = I2C1 controller reset.
N     * |[12]    |SPI0RST   |SPI0 Controller Reset
N     * |        |          |0 = SPI0 controller normal operation.
N     * |        |          |1 = SPI0 controller reset.
N     * |[16]    |UART0RST  |UART0 Controller Reset
N     * |        |          |0 = UART0 controller normal operation.
N     * |        |          |1 = UART0 controller reset.
N     * |[20]    |BPWM0RST  |BPWM0 Controller Reset
N     * |        |          |0 = BPWM0 controller normal operation.
N     * |        |          |1 = BPWM0 controller reset.
N     * |[21]    |BPWM1RST  |BPWM1 Controller Reset
N     * |        |          |0 = BPWM1 controller normal operation.
N     * |        |          |1 = BPWM1 controller reset.
N     * |[22]    |PWM0RST   |PWM0 Controller Reset
N     * |        |          |0 = PWM0 controller normal operation.
N     * |        |          |1 = PWM0 controller reset.
N     * |[23]    |PWM1RST   |PWM1 Controller Reset
N     * |        |          |0 = PWM1 controller normal operation.
N     * |        |          |1 = PWM1 controller reset.
N     * |[27]    |USBDRST   |USB Device Controller Reset
N     * |        |          |0 = USB device controller normal operation.
N     * |        |          |1 = USB device controller reset.
N     * |[28]    |ADCRST    |ADC Controller Reset
N     * |        |          |0 = ADC controller normal operation.
N     * |        |          |1 = ADC controller reset.
N     * @var SYS_T::IPRST2
N     * Offset: 0x10  Peripheral Reset Control Register 2
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8]     |USCI0RST  |USCI0 Controller Reset
N     * |        |          |0 = USCI0 controller normal operation.
N     * |        |          |1 = USCI0 controller reset.
N     * @var SYS_T::BODCTL
N     * Offset: 0x18  Brown-Out Detector Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BODEN     |Brown-out Detector Enable Bit (Write Protect)
N     * |        |          |The default value is set by flash controller user configuration register CBODEN (CONFIG0 [23]).
N     * |        |          |0 = Brown-out Detector function Disabled.
N     * |        |          |1 = Brown-out Detector function Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[2:1]   |BODVL     |Brown-out Detector Threshold Voltage Selection (Write Protect)
N     * |        |          |The default value is set by flash controller user configuration register CBOV (CONFIG0 [22:21]).
N     * |        |          |00 = Brown-Out Detector threshold voltage is 2.2V.
N     * |        |          |01 = Brown-Out Detector threshold voltage is 2.7V.
N     * |        |          |10 = Brown-Out Detector threshold voltage is 3.7V.
N     * |        |          |11 = Brown-Out Detector threshold voltage is 4.5V.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[3]     |BODRSTEN  |Brown-out Reset Enable Bit (Write Protect)
N     * |        |          |The default value is set by flash controller user configuration register CBORST(CONFIG0[20]) bit.
N     * |        |          |0 = Brown-out "INTERRUPT" function Enabled.
N     * |        |          |1 = Brown-out "RESET" function Enabled.
N     * |        |          |Note1:
N     * |        |          |While the Brown-out Detector function is enabled (BODEN high) and BOD reset function is enabled (BODRSTEN high), BOD will assert a signal to reset chip when the detected voltage is lower than the threshold (BODOUT high).
N     * |        |          |While the BOD function is enabled (BODEN high) and BOD interrupt function is enabled (BODRSTEN low), BOD will assert an interrupt if BODOUT is high
N     * |        |          |BOD interrupt will keep till to the BODEN set to 0
N     * |        |          |BOD interrupt can be blocked by disabling the NVIC BOD interrupt or disabling BOD function (set BODEN low).
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[4]     |BODIF     |Brown-out Detector Interrupt Flag
N     * |        |          |0 = Brown-out Detector does not detect any voltage draft at VDD down through or up through the voltage of BODVL setting.
N     * |        |          |1 = When Brown-out Detector detects the VDD is dropped down through the voltage of BODVL setting or the VDD is raised up through the voltage of BODVL setting, this bit is set to 1 and the brown-out interrupt is requested if brown-out interrupt is enabled.
N     * |        |          |Note: This bit can be cleared by software writing '1'.
N     * |[5]     |BODLPM    |Brown-out Detector Low Power Mode (Write Protect)
N     * |        |          |0 = BOD operate in normal mode (default).
N     * |        |          |1 = BOD Low Power mode Enabled.
N     * |        |          |Note1: The BOD consumes about 100uA in normal mode, the low power mode can reduce the current to about 1/10 but slow the BOD response.
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[6]     |BODOUT    |Brown-out Detector Output Status
N     * |        |          |0 = Brown-out Detector output status is 0.
N     * |        |          |It means the detected voltage is higher than BODVL setting or BODEN is 0.
N     * |        |          |1 = Brown-out Detector output status is 1.
N     * |        |          |It means the detected voltage is lower than BODVL setting
N     * |        |          |If the BODEN is 0, BOD function disabled, this bit always responds 0.
N     * |[7]     |LVREN     |Low Voltage Reset Enable Bit (Write Protect)
N     * |        |          |The LVR function resets the chip when the input power voltage is lower than LVR circuit setting
N     * |        |          |LVR function is enabled by default.
N     * |        |          |0 = Low Voltage Reset function Disabled.
N     * |        |          |1 = Low Voltage Reset function Enabled.
N     * |        |          |Note1: After enabling the bit, the LVR function will be active with 200us delay for LVR output stable (default).
N     * |        |          |Note2: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[10:8]  |BODDGSEL  |Brown-out Detector Output De-glitch Time Select (Write Protect)
N     * |        |          |000 = BOD output is sampled by RC10K clock.
N     * |        |          |001 = 4 system clock (HCLK).
N     * |        |          |010 = 8 system clock (HCLK).
N     * |        |          |011 = 16 system clock (HCLK).
N     * |        |          |100 = 32 system clock (HCLK).
N     * |        |          |101 = 64 system clock (HCLK).
N     * |        |          |110 = 128 system clock (HCLK).
N     * |        |          |111 = 256 system clock (HCLK).
N     * |        |          |Note: These bits are write protected. Refer to the SYS_REGLCTL register.
N     * |[14:12] |LVRDGSEL  |LVR Output De-glitch Time Select (Write Protect)
N     * |        |          |000 = Without de-glitch function.
N     * |        |          |001 = 4 system clock (HCLK).
N     * |        |          |010 = 8 system clock (HCLK).
N     * |        |          |011 = 16 system clock (HCLK).
N     * |        |          |100 = 32 system clock (HCLK).
N     * |        |          |101 = 64 system clock (HCLK).
N     * |        |          |110 = 128 system clock (HCLK).
N     * |        |          |111 = 256 system clock (HCLK).
N     * |        |          |Note: These bits are write protected. Refer to the SYS_REGLCTL register.
N     * @var SYS_T::IVSCTL
N     * Offset: 0x1C  Internal Voltage Source Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |VTEMPEN   |Temperature Sensor Enable Bit
N     * |        |          |This bit is used to enable/disable temperature sensor function.
N     * |        |          |0 = Temperature sensor function Disabled (default).
N     * |        |          |1 = Temperature sensor function Enabled.
N     * |        |          |Note: After this bit is set to 1, the value of temperature sensor output can be obtained from ADC conversion result
N     * |        |          |Please refer to ADC function chapter for details.
N     * @var SYS_T::PORCTL
N     * Offset: 0x24  Power-On-Reset Controller Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |POROFF    |Power-on Reset Enable Bit (Write Protect)
N     * |        |          |When powered on, the POR circuit generates a reset signal to reset the whole chip function, but noise on the power may cause the POR active again
N     * |        |          |User can disable internal POR circuit to avoid unpredictable noise to cause chip reset by writing 0x5AA5 to this field.
N     * |        |          |The POR function will be active again when this field is set to another value or chip is reset by other reset source, including:
N     * |        |          |nRESET, Watchdog, LVR reset, BOD reset, ICE reset command and the software-chip reset function.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var SYS_T::GPA_MFPH
N     * Offset: 0x34  GPIOA High Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:8]  |PA10MFP   |PA.10 Multi-function Pin Selection
N     * |[15:12] |PA11MFP   |PA.11 Multi-function Pin Selection
N     * |[19:16] |PA12MFP   |PA.12 Multi-function Pin Selection
N     * |[23:20] |PA13MFP   |PA.13 Multi-function Pin Selection
N     * |[27:24] |PA14MFP   |PA.14 Multi-function Pin Selection
N     * |[31:28] |PA15MFP   |PA.15 Multi-function Pin Selection
N     * @var SYS_T::GPB_MFPL
N     * Offset: 0x38  GPIOB Low Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PB0MFP    |PB.0 Multi-function Pin Selection
N     * |[7:4]   |PB1MFP    |PB.1 Multi-function Pin Selection
N     * |[11:8]  |PB2MFP    |PB.2 Multi-function Pin Selection
N     * |[15:12] |PB3MFP    |PB.3 Multi-function Pin Selection
N     * |[19:16] |PB4MFP    |PB.4 Multi-function Pin Selection
N     * |[23:20] |PB5MFP    |PB.5 Multi-function Pin Selection
N     * |[27:24] |PB6MFP    |PB.6 Multi-function Pin Selection
N     * |[31:28] |PB7MFP    |PB.7 Multi-function Pin Selection
N     * @var SYS_T::GPB_MFPH
N     * Offset: 0x3C  GPIOB High Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PB8MFP    |PB.8 Multi-function Pin Selection
N     * |[7:4]   |PB9MFP    |PB.9 Multi-function Pin Selection
N     * |[11:8]  |PB10MFP   |PB.10 Multi-function Pin Selection
N     * |[19:16] |PB12MFP   |PB.12 Multi-function Pin Selection
N     * |[23:20] |PB13MFP   |PB.13 Multi-function Pin Selection
N     * |[27:24] |PB14MFP   |PB.14 Multi-function Pin Selection
N     * |[31:28] |PB15MFP   |PB.15 Multi-function Pin Selection
N     * @var SYS_T::GPC_MFPL
N     * Offset: 0x40  GPIOC Low Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PC0MFP    |PC.0 Multi-function Pin Selection
N     * |[7:4]   |PC1MFP    |PC.1 Multi-function Pin Selection
N     * |[11:8]  |PC2MFP    |PC.2 Multi-function Pin Selection
N     * |[15:12] |PC3MFP    |PC.3 Multi-function Pin Selection
N     * |[19:16] |PC4MFP    |PC.4 Multi-function Pin Selection
N     * |[23:20] |PC5MFP    |PC.5 Multi-function Pin Selection
N     * @var SYS_T::GPC_MFPH
N     * Offset: 0x44  GPIOC High Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PC8MFP    |PC.8 Multi-function Pin Selection
N     * |[7:4]   |PC9MFP    |PC.9 Multi-function Pin Selection
N     * |[11:8]  |PC10MFP   |PC.10 Multi-function Pin Selection
N     * |[15:12] |PC11MFP   |PC.11 Multi-function Pin Selection
N     * |[19:16] |PC12MFP   |PC.12 Multi-function Pin Selection
N     * |[23:20] |PC13MFP   |PC.13 Multi-function Pin Selection
N     * @var SYS_T::GPD_MFPL
N     * Offset: 0x48  GPIOD Low Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PD0MFP    |PD.0 Multi-function Pin Selection
N     * |[7:4]   |PD1MFP    |PD.1 Multi-function Pin Selection
N     * |[11:8]  |PD2MFP    |PD.2 Multi-function Pin Selection
N     * |[15:12] |PD3MFP    |PD.3 Multi-function Pin Selection
N     * |[19:16] |PD4MFP    |PD.4 Multi-function Pin Selection
N     * |[23:20] |PD5MFP    |PD.5 Multi-function Pin Selection
N     * @var SYS_T::GPD_MFPH
N     * Offset: 0x4C  GPIOD High Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PD8MFP    |PD.8 Multi-function Pin Selection
N     * |[7:4]   |PD9MFP    |PD.9 Multi-function Pin Selection
N     * |[11:8]  |PD10MFP   |PD.10 Multi-function Pin Selection
N     * |[15:12] |PD11MFP   |PD.11 Multi-function Pin Selection
N     * @var SYS_T::GPE_MFPL
N     * Offset: 0x50  GPIOE Low Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PE0MFP    |PE.0 Multi-function Pin Selection
N     * |[7:4]   |PE1MFP    |PE.1 Multi-function Pin Selection
N     * |[11:8]  |PE2MFP    |PE.2 Multi-function Pin Selection
N     * @var SYS_T::GPF_MFPL
N     * Offset: 0x58  GPIOF Low Byte Multiple Function Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |PF0MFP    |PF.0 Multi-function Pin Selection
N     * |[7:4]   |PF1MFP    |PF.1 Multi-function Pin Selection
N     * |[11:8]  |PF2MFP    |PF.2 Multi-function Pin Selection
N     * |[15:12] |PF3MFP    |PF.3 Multi-function Pin Selection
N     * |[19:16] |PF4MFP    |PF.4 Multi-function Pin Selection
N     * |[23:20] |PF5MFP    |PF.5 Multi-function Pin Selection
N     * @var SYS_T::IRCTCTL
N     * Offset: 0x80  HIRC Trim Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |FREQSEL   |Trim Frequency Selection
N     * |        |          |This field indicates the target frequency of internal high speed RC oscillator 1 (HIRC 1) auto trim.
N     * |        |          |During auto trim operation, if clock error detected with CESTOPEN(SYS_IRCTCTL1[8]) is set to 1 or trim retry limitation count reached, this field will be cleared to 00 automatically.
N     * |        |          |00 = Disable HIRC auto trim function.
N     * |        |          |01 = Reserved.
N     * |        |          |10 = Enable HIRC auto trim function and trim HIRC to 48 MHz.
N     * |        |          |11 = Reserved.
N     * |[5:4]   |LOOPSEL   |Trim Calculation Loop Selection
N     * |        |          |This field defines that trim value calculation is based on how many clocks of reference clock.
N     * |        |          |00 = Trim value calculation is based on average difference in 4 clocks of reference clock.
N     * |        |          |01 = Trim value calculation is based on average difference in 8 clocks of reference clock.
N     * |        |          |10 = Trim value calculation is based on average difference in 16 clocks of reference clock.
N     * |        |          |11 = Trim value calculation is based on average difference in 32 clocks of reference clock.
N     * |        |          |Note: For example, if LOOPSEL is set as 00, auto trim circuit will calculate trim value based on the average frequency difference in 4 clocks of reference clock.
N     * |[7:6]   |RETRYCNT  |Trim Value Update Limitation Count
N     * |        |          |This field defines that how many times the auto trim circuit will try to update the HIRC trim value before the frequency of HIRC locked.
N     * |        |          |Once the HIRC locked, the internal trim value update counter will be reset.
N     * |        |          |If the trim value update counter reached this limitation value and frequency of HIRC still doesn't lock, the auto trim operation will be disabled and FREQSEL(SYS_IRCTCTL1[1:0]) will be cleared to 00.
N     * |        |          |00 = Trim retry count limitation is 64 loops.
N     * |        |          |01 = Trim retry count limitation is 128 loops.
N     * |        |          |10 = Trim retry count limitation is 256 loops.
N     * |        |          |11 = Trim retry count limitation is 512 loops.
N     * |[8]     |CESTOPEN  |Clock Error Stop Enable Bit
N     * |        |          |0 = The trim operation is keep going if clock is inaccuracy.
N     * |        |          |1 = The trim operation is stopped if clock is inaccuracy.
N     * |[10]    |REFCKSEL  |Reference Clock Selection
N     * |        |          |0 = HIRC trim reference clock is from LXT (32.768 kHz).
N     * |        |          |1 = HIRC trim reference clock is from internal USB synchronous mode.
N     * @var SYS_T::IRCTIEN
N     * Offset: 0x84  HIRC Trim Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TFAILIEN  |HIRC Trim Failure Interrupt Enable Bit
N     * |        |          |This bit controls if an interrupt will be triggered while HIRC trim value update limitation count reached and HIRC frequency still not locked on target frequency set by FREQSEL(SYS_IRCTCTL1[1:0]).
N     * |        |          |If this bit is high and TFAILIF(SYS_IRCTSTS[1]) is set during auto trim operation, an interrupt will be triggered to notify that HIRC trim value update limitation count was reached.
N     * |        |          |0 = Disable TFAILIF(SYS_IRCTSTS[1]) status to trigger an interrupt to CPU.
N     * |        |          |1 = Enable TFAILIF(SYS_IRCTSTS[1]) status to trigger an interrupt to CPU.
N     * |[2]     |CLKEIEN   |HIRC Clock Error Interrupt Enable Bit
N     * |        |          |This bit controls if CPU would get an interrupt while clock is inaccuracy during auto trim operation.
N     * |        |          |If this bit is set to1, and CLKERRIF(SYS_IRCTSTS[2]) is set during auto trim operation, an interrupt will be triggered to notify the clock frequency is inaccuracy.
N     * |        |          |0 = Disable CLKERRIF(SYS_IRCTSTS[2]) status to trigger an interrupt to CPU.
N     * |        |          |1 = Enable CLKERRIF(SYS_IRCTSTS[2]) status to trigger an interrupt to CPU.
N     * @var SYS_T::IRCTISTS
N     * Offset: 0x88  HIRC Trim Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |FREQLOCK  |HIRC Frequency Lock Status
N     * |        |          |This bit indicates the HIRC frequency is locked.
N     * |        |          |This is a status bit and doesn't trigger any interrupt.
N     * |        |          |Write 1 to clear this to 0
N     * |        |          |This bit will be set automatically, if the frequecy is lock and the RC_TRIM is enabled.
N     * |        |          |0 = The internal high-speed RC oscillator 1 frequency doesn't lock at 48 MHz yet.
N     * |        |          |1 = The internal high-speed RC oscillator 1 frequency locked at 48 MHz.
N     * |[1]     |TFAILIF   |HIRC Trim Failure Interrupt Status
N     * |        |          |This bit indicates that HIRC trim value update limitation count reached and the HIRC clock frequency still doesn't be locked
N     * |        |          |Once this bit is set, the auto trim operation stopped and FREQSEL(SYS_iRCTCTL[1:0]) will be cleared to 00 by hardware automatically.
N     * |        |          |If this bit is set and TFAILIEN(SYS_IRCTIEN1[1]) is high, an interrupt will be triggered to notify that HIRC trim value update limitation count was reached
N     * |        |          |Write 1 to clear this to 0.
N     * |        |          |0 = HIRC trim value update limitation count does not reach.
N     * |        |          |1 = HIRC trim value update limitation count reached and frequency still not locked.
N     * |[2]     |CLKERRIF  |HIRC Clock Error Interrupt Status
N     * |        |          |When the frequency of SOF or 48 MHz internal high speed RC oscillator (HIRC) is shift larger to unreasonable value, this bit will be set and to be an indicate that clock frequency is inaccuracy
N     * |        |          |Once this bit is set to 1, the auto trim operation stopped and FREQSEL(SYS_IRCTCL[1:0]) will be cleared to 00 by hardware automatically if CESTOPEN(SYS_IRCTCTL[8]) is set to 1.
N     * |        |          |If this bit is set and CLKEIEN(SYS_IRCTIEN1[2]) is high, an interrupt will be triggered to notify the clock frequency is inaccuracy
N     * |        |          |Write 1 to clear this to 0.
N     * |        |          |0 = HIRC Clock frequency is accuracy.
N     * |        |          |1 = HIRC Clock frequency is inaccuracy.
N     * @var SYS_T::MODCTL
N     * Offset: 0xC0  Modulation Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |MODEN     |Modulation Function Enable Bit
N     * |        |          |This bit enables modulation funcion by modulating with BPWM2 channel output and USCI0(USCI0_DAT0) or UART0(UART0_TXD) output.
N     * |        |          |0 = Modulation Function Disabled.
N     * |        |          |1 = Modulation Function Enabled.
N     * |[1]     |MODH      |Modulation at Data High
N     * |        |          |Select modulation pulse(BPWM2) at UART0_TXD high or low
N     * |        |          |0: Modulation pulse at UART0_TXD low.
N     * |        |          |1: Modulation pulse at UART0_TXD high.
N     * |[7:4]   |MODPWMSEL |BPWM2 Channel Select for Modulation
N     * |        |          |Select the BPWM2 channel to modulate with the UART0_TXD or USCI0_DAT0.
N     * |        |          |0000: BPWM2 Channel 0 modulate with UART0_TXD.
N     * |        |          |0001: BPWM2 Channel 1 modulate with UART0_TXD.
N     * |        |          |0010: BPWM2 Channel 2 modulate with UART0_TXD.
N     * |        |          |0011: BPWM2 Channel 3 modulete with UART0_TXD.
N     * |        |          |0100: BPWM2 Channel 4 modulete with UART0_TXD.
N     * |        |          |0101: BPWM2 Channel 5 modulete with UART0_TXD.
N     * |        |          |0110: Reserved.
N     * |        |          |0111: Reserved.
N     * |        |          |1000: BPWM2 Channel 0 modulate with USCI0_DAT0.
N     * |        |          |1001: BPWM2 Channel 1 modulate with USCI0_DAT0.
N     * |        |          |1010: BPWM2 Channel 2 modulate with USCI0_DAT0.
N     * |        |          |1011: BPWM2 Channel 3 modulete with USCI0_DAT0.
N     * |        |          |1100: BPWM2 Channel 4 modulete with USCI0_DAT0.
N     * |        |          |1101: BPWM2 Channel 5 modulete with USCI0_DAT0.
N     * |        |          |1110: Reserved.
N     * |        |          |1111: Reserved.
N     * |        |          |Note: This bis is valid while MODEN (SYS_MODCTL[0]) is set to 1.
N     * @var SYS_T::REGLCTL
N     * Offset: 0x100  Register Lock Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |REGLCTL   |Register Lock Control Code (Write)
N     * |        |          |Some registers have write-protection function
N     * |        |          |Writing these registers have to disable the protected function by writing the sequence value "59h", "16h", "88h" to this field
N     * |        |          |After this sequence is completed, the REGLCTL bit will be set to 1 and write-protection registers can be normal write.
N     * |        |          |Register Lock Control Disable Index (Read)
N     * |        |          |0 = Write-protection Enabled for writing protected registers
N     * |        |          |Any write to the protected register is ignored.
N     * |        |          |1 = Write-protection Disabled for writing protected registers.
N     * |        |          |The Protected registers are:
N     * |        |          |SYS_IPRST0: address 0x5000_0008
N     * |        |          |SYS_BODCTL: address 0x5000_0018
N     * |        |          |SYS_PORCTL: address 0x5000_0024
N     * |        |          |SYS_TSOFFSET: address 0x5000_0114
N     * |        |          |CLK_PWRCTL: address 0x5000_0200 (bit[6] is not protected for power-down wake-up interrupt clear)
N     * |        |          |CLK_APBCLK0 [0]: address 0x5000_0208 (bit[0] is watchdog clock enable)
N     * |        |          |CLK_CLKSEL0: address 0x5000_0210 (for HCLK and CPU STCLK clock source select)
N     * |        |          |CLK_CLKSEL1 [1:0]: address 0x5000_0214 (for watchdog clock source select)
N     * |        |          |CLK_CLKSEL3 [8]: address 0x5000_0234 (for USBD clock source select)
N     * |        |          |CLK_CLKDSTS: address 0x5000_0274
N     * |        |          |FMC_ISPCTL: address 0x4000_C000 (Flash ISP Control register)
N     * |        |          |FMC_ISPTRG: address 0x4000_C010 (ISP Trigger Control register)
N     * |        |          |FMC_ISPSTS: address 0x4000_C040
N     * |        |          |WDT_CTL: address 0x4000_4000
N     * |        |          |WDT_ALTCTL: address 0x4000_4004
N     * |        |          |FMC_FTCTL: address 0x4000_5018
N     * |        |          |FMC_ICPCMD: address 0x4000_501C
N     * |        |          |EADC_TEST: address 0x4004_3200
N     * |        |          |AHBMCTL: address 0x40000400
N     * |        |          |CLK_PLLCTL: address 0x40000240
N     * |        |          |PWM_CTL0: address 0x4005_8000
N     * |        |          |PWM_CTL0: address 0x4005_9000
N     * |        |          |PWM_DTCTL0_1: address 0x4005_8070
N     * |        |          |PWM_DTCTL0_1: address 0x4005_9070
N     * |        |          |PWM_DTCTL2_3: address 0x4005_8074
N     * |        |          |PWM_DTCTL2_3: address 0x4005_9074
N     * |        |          |PWM_DTCTL4_5: address 0x4005_8078
N     * |        |          |PWM_DTCTL4_5: address 0x4005_9078
N     * |        |          |PWM_BRKCTL0_1: address 0x4005_80C8
N     * |        |          |PWM_BRKCTL0_1: address 0x4005_90C8
N     * |        |          |PWM_BRKCTL2_3: address0x4005_80CC
N     * |        |          |PWM_BRKCTL2_3: address0x4005_90CC
N     * |        |          |PWM_BRKCTL4_5: address0x4005_80D0
N     * |        |          |PWM_BRKCTL4_5: address0x4005_90D0
N     * |        |          |PWM_INTEN1: address0x4005_80E4
N     * |        |          |PWM_INTEN1: address0x4005_90E4
N     * |        |          |PWM_INTSTS1: address0x4005_80EC
N     * |        |          |PWM_INTSTS1: address0x4005_90EC
N     * |        |          |PWM_SELFTEST: address0x4005_8300
N     * |        |          |PWM_SELFTEST: address0x4005_9300
N     * @var SYS_T::TSOFFSET
N     * Offset: 0x114  Temperature sensor offset Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[11:0]  |VTEMP     |Temperature Sensor Offset Value
N     * |        |          |This field reflects temperature sensor output voltage offset at 25oC from flash.
N     * |        |          |Note:
N     */
N    __I  uint32_t PDID;                  /*!< [0x0000] Part Device Identification Number Register                       */
X    volatile const  uint32_t PDID;                   
N    __IO uint32_t RSTSTS;                /*!< [0x0004] System Reset Status Register                                     */
X    volatile uint32_t RSTSTS;                 
N    __IO uint32_t IPRST0;                /*!< [0x0008] Peripheral  Reset Control Register 0                             */
X    volatile uint32_t IPRST0;                 
N    __IO uint32_t IPRST1;                /*!< [0x000c] Peripheral Reset Control Register 1                              */
X    volatile uint32_t IPRST1;                 
N    __IO uint32_t IPRST2;                /*!< [0x0010] Peripheral Reset Control Register 2                              */
X    volatile uint32_t IPRST2;                 
N    __I  uint32_t RESERVE0[1];
X    volatile const  uint32_t RESERVE0[1];
N    __IO uint32_t BODCTL;                /*!< [0x0018] Brown-Out Detector Control Register                              */
X    volatile uint32_t BODCTL;                 
N    __IO uint32_t IVSCTL;                /*!< [0x001c] Internal Voltage Source Control Register                         */
X    volatile uint32_t IVSCTL;                 
N    __I  uint32_t RESERVE1[1];
X    volatile const  uint32_t RESERVE1[1];
N    __IO uint32_t PORCTL;                /*!< [0x0024] Power-On-Reset Controller Register                               */
X    volatile uint32_t PORCTL;                 
N    __I  uint32_t RESERVE2[3];
X    volatile const  uint32_t RESERVE2[3];
N    __IO uint32_t GPA_MFPH;              /*!< [0x0034] GPIOA High Byte Multiple Function Control Register               */
X    volatile uint32_t GPA_MFPH;               
N    __IO uint32_t GPB_MFPL;              /*!< [0x0038] GPIOB Low Byte Multiple Function Control Register                */
X    volatile uint32_t GPB_MFPL;               
N    __IO uint32_t GPB_MFPH;              /*!< [0x003c] GPIOB High Byte Multiple Function Control Register               */
X    volatile uint32_t GPB_MFPH;               
N    __IO uint32_t GPC_MFPL;              /*!< [0x0040] GPIOC Low Byte Multiple Function Control Register                */
X    volatile uint32_t GPC_MFPL;               
N    __IO uint32_t GPC_MFPH;              /*!< [0x0044] GPIOC High Byte Multiple Function Control Register               */
X    volatile uint32_t GPC_MFPH;               
N    __IO uint32_t GPD_MFPL;              /*!< [0x0048] GPIOD Low Byte Multiple Function Control Register                */
X    volatile uint32_t GPD_MFPL;               
N    __IO uint32_t GPD_MFPH;              /*!< [0x004c] GPIOD High Byte Multiple Function Control Register               */
X    volatile uint32_t GPD_MFPH;               
N    __IO uint32_t GPE_MFPL;              /*!< [0x0050] GPIOE Low Byte Multiple Function Control Register                */
X    volatile uint32_t GPE_MFPL;               
N    __I  uint32_t RESERVE3[1];
X    volatile const  uint32_t RESERVE3[1];
N    __IO uint32_t GPF_MFPL;              /*!< [0x0058] GPIOF Low Byte Multiple Function Control Register                */
X    volatile uint32_t GPF_MFPL;               
N    __I  uint32_t RESERVE4[9];
X    volatile const  uint32_t RESERVE4[9];
N    __IO uint32_t IRCTCTL;               /*!< [0x0080] HIRC Trim Control Register                                       */
X    volatile uint32_t IRCTCTL;                
N    __IO uint32_t IRCTIEN;               /*!< [0x0084] HIRC Trim Interrupt Enable Register                              */
X    volatile uint32_t IRCTIEN;                
N    __IO uint32_t IRCTISTS;              /*!< [0x0088] HIRC Trim Interrupt Status Register                              */
X    volatile uint32_t IRCTISTS;               
N    __I  uint32_t RESERVE5[13];
X    volatile const  uint32_t RESERVE5[13];
N    __IO uint32_t MODCTL;                /*!< [0x00c0] Modulation Control Register                                      */
X    volatile uint32_t MODCTL;                 
N    __I  uint32_t RESERVE6[15];
X    volatile const  uint32_t RESERVE6[15];
N    __IO uint32_t REGLCTL;               /*!< [0x0100] Register Lock Control Register                                   */
X    volatile uint32_t REGLCTL;                
N    __I  uint32_t RESERVE7[4];
X    volatile const  uint32_t RESERVE7[4];
N    __I  uint32_t TSOFFSET;              /*!< [0x0114] Temperature sensor offset Register                               */
X    volatile const  uint32_t TSOFFSET;               
N} SYS_T;
N
N/**
N    @addtogroup SYS_CONST SYS Bit Field Definition
N    Constant Definitions for SYS Controller
N@{ */
N
N#define SYS_PDID_PDID_Pos                (0)                                               /*!< SYS_T::PDID: PDID Position             */
N#define SYS_PDID_PDID_Msk                (0xfffffffful << SYS_PDID_PDID_Pos)               /*!< SYS_T::PDID: PDID Mask                 */
N
N#define SYS_RSTSTS_PORF_Pos              (0)                                               /*!< SYS_T::RSTSTS: PORF Position           */
N#define SYS_RSTSTS_PORF_Msk              (0x1ul << SYS_RSTSTS_PORF_Pos)                    /*!< SYS_T::RSTSTS: PORF Mask               */
N
N#define SYS_RSTSTS_PINRF_Pos             (1)                                               /*!< SYS_T::RSTSTS: PINRF Position          */
N#define SYS_RSTSTS_PINRF_Msk             (0x1ul << SYS_RSTSTS_PINRF_Pos)                   /*!< SYS_T::RSTSTS: PINRF Mask              */
N
N#define SYS_RSTSTS_WDTRF_Pos             (2)                                               /*!< SYS_T::RSTSTS: WDTRF Position          */
N#define SYS_RSTSTS_WDTRF_Msk             (0x1ul << SYS_RSTSTS_WDTRF_Pos)                   /*!< SYS_T::RSTSTS: WDTRF Mask              */
N
N#define SYS_RSTSTS_LVRF_Pos              (3)                                               /*!< SYS_T::RSTSTS: LVRF Position           */
N#define SYS_RSTSTS_LVRF_Msk              (0x1ul << SYS_RSTSTS_LVRF_Pos)                    /*!< SYS_T::RSTSTS: LVRF Mask               */
N
N#define SYS_RSTSTS_BODRF_Pos             (4)                                               /*!< SYS_T::RSTSTS: BODRF Position          */
N#define SYS_RSTSTS_BODRF_Msk             (0x1ul << SYS_RSTSTS_BODRF_Pos)                   /*!< SYS_T::RSTSTS: BODRF Mask              */
N
N#define SYS_RSTSTS_MCURF_Pos             (5)                                               /*!< SYS_T::RSTSTS: MCURF Position          */
N#define SYS_RSTSTS_MCURF_Msk             (0x1ul << SYS_RSTSTS_MCURF_Pos)                   /*!< SYS_T::RSTSTS: MCURF Mask              */
N
N#define SYS_RSTSTS_CPURF_Pos             (7)                                               /*!< SYS_T::RSTSTS: CPURF Position          */
N#define SYS_RSTSTS_CPURF_Msk             (0x1ul << SYS_RSTSTS_CPURF_Pos)                   /*!< SYS_T::RSTSTS: CPURF Mask              */
N
N#define SYS_RSTSTS_CPULKRF_Pos           (8)                                               /*!< SYS_T::RSTSTS: CPULKRF Position        */
N#define SYS_RSTSTS_CPULKRF_Msk           (0x1ul << SYS_RSTSTS_CPULKRF_Pos)                 /*!< SYS_T::RSTSTS: CPULKRF Mask            */
N
N#define SYS_IPRST0_CHIPRST_Pos           (0)                                               /*!< SYS_T::IPRST0: CHIPRST Position        */
N#define SYS_IPRST0_CHIPRST_Msk           (0x1ul << SYS_IPRST0_CHIPRST_Pos)                 /*!< SYS_T::IPRST0: CHIPRST Mask            */
N
N#define SYS_IPRST0_CPURST_Pos            (1)                                               /*!< SYS_T::IPRST0: CPURST Position         */
N#define SYS_IPRST0_CPURST_Msk            (0x1ul << SYS_IPRST0_CPURST_Pos)                  /*!< SYS_T::IPRST0: CPURST Mask             */
N
N#define SYS_IPRST0_PDMARST_Pos           (2)                                               /*!< SYS_T::IPRST0: PDMARST Position        */
N#define SYS_IPRST0_PDMARST_Msk           (0x1ul << SYS_IPRST0_PDMARST_Pos)                 /*!< SYS_T::IPRST0: PDMARST Mask            */
N
N#define SYS_IPRST1_GPIORST_Pos           (1)                                               /*!< SYS_T::IPRST1: GPIORST Position        */
N#define SYS_IPRST1_GPIORST_Msk           (0x1ul << SYS_IPRST1_GPIORST_Pos)                 /*!< SYS_T::IPRST1: GPIORST Mask            */
N
N#define SYS_IPRST1_TMR0RST_Pos           (2)                                               /*!< SYS_T::IPRST1: TMR0RST Position        */
N#define SYS_IPRST1_TMR0RST_Msk           (0x1ul << SYS_IPRST1_TMR0RST_Pos)                 /*!< SYS_T::IPRST1: TMR0RST Mask            */
N
N#define SYS_IPRST1_TMR1RST_Pos           (3)                                               /*!< SYS_T::IPRST1: TMR1RST Position        */
N#define SYS_IPRST1_TMR1RST_Msk           (0x1ul << SYS_IPRST1_TMR1RST_Pos)                 /*!< SYS_T::IPRST1: TMR1RST Mask            */
N
N#define SYS_IPRST1_TMR2RST_Pos           (4)                                               /*!< SYS_T::IPRST1: TMR2RST Position        */
N#define SYS_IPRST1_TMR2RST_Msk           (0x1ul << SYS_IPRST1_TMR2RST_Pos)                 /*!< SYS_T::IPRST1: TMR2RST Mask            */
N
N#define SYS_IPRST1_TMR3RST_Pos           (5)                                               /*!< SYS_T::IPRST1: TMR3RST Position        */
N#define SYS_IPRST1_TMR3RST_Msk           (0x1ul << SYS_IPRST1_TMR3RST_Pos)                 /*!< SYS_T::IPRST1: TMR3RST Mask            */
N
N#define SYS_IPRST1_I2C0RST_Pos           (8)                                               /*!< SYS_T::IPRST1: I2C0RST Position        */
N#define SYS_IPRST1_I2C0RST_Msk           (0x1ul << SYS_IPRST1_I2C0RST_Pos)                 /*!< SYS_T::IPRST1: I2C0RST Mask            */
N
N#define SYS_IPRST1_I2C1RST_Pos           (9)                                               /*!< SYS_T::IPRST1: I2C1RST Position        */
N#define SYS_IPRST1_I2C1RST_Msk           (0x1ul << SYS_IPRST1_I2C1RST_Pos)                 /*!< SYS_T::IPRST1: I2C1RST Mask            */
N
N#define SYS_IPRST1_SPI0RST_Pos           (12)                                              /*!< SYS_T::IPRST1: SPI0RST Position        */
N#define SYS_IPRST1_SPI0RST_Msk           (0x1ul << SYS_IPRST1_SPI0RST_Pos)                 /*!< SYS_T::IPRST1: SPI0RST Mask            */
N
N#define SYS_IPRST1_UART0RST_Pos          (16)                                              /*!< SYS_T::IPRST1: UART0RST Position       */
N#define SYS_IPRST1_UART0RST_Msk          (0x1ul << SYS_IPRST1_UART0RST_Pos)                /*!< SYS_T::IPRST1: UART0RST Mask           */
N
N#define SYS_IPRST1_BPWM0RST_Pos          (20)                                              /*!< SYS_T::IPRST1: BPWM0RST Position       */
N#define SYS_IPRST1_BPWM0RST_Msk          (0x1ul << SYS_IPRST1_BPWM0RST_Pos)                /*!< SYS_T::IPRST1: BPWM0RST Mask           */
N
N#define SYS_IPRST1_BPWM1RST_Pos          (21)                                              /*!< SYS_T::IPRST1: BPWM1RST Position       */
N#define SYS_IPRST1_BPWM1RST_Msk          (0x1ul << SYS_IPRST1_BPWM1RST_Pos)                /*!< SYS_T::IPRST1: BPWM1RST Mask           */
N
N#define SYS_IPRST1_PWM0RST_Pos           (22)                                              /*!< SYS_T::IPRST1: PWM0RST Position        */
N#define SYS_IPRST1_PWM0RST_Msk           (0x1ul << SYS_IPRST1_PWM0RST_Pos)                 /*!< SYS_T::IPRST1: PWM0RST Mask            */
N
N#define SYS_IPRST1_PWM1RST_Pos           (23)                                              /*!< SYS_T::IPRST1: PWM1RST Position        */
N#define SYS_IPRST1_PWM1RST_Msk           (0x1ul << SYS_IPRST1_PWM1RST_Pos)                 /*!< SYS_T::IPRST1: PWM1RST Mask            */
N
N#define SYS_IPRST1_USBDRST_Pos           (27)                                              /*!< SYS_T::IPRST1: USBDRST Position        */
N#define SYS_IPRST1_USBDRST_Msk           (0x1ul << SYS_IPRST1_USBDRST_Pos)                 /*!< SYS_T::IPRST1: USBDRST Mask            */
N
N#define SYS_IPRST1_ADCRST_Pos            (28)                                              /*!< SYS_T::IPRST1: ADCRST Position         */
N#define SYS_IPRST1_ADCRST_Msk            (0x1ul << SYS_IPRST1_ADCRST_Pos)                  /*!< SYS_T::IPRST1: ADCRST Mask             */
N
N#define SYS_IPRST2_USCI0RST_Pos          (8)                                               /*!< SYS_T::IPRST2: USCI0RST Position       */
N#define SYS_IPRST2_USCI0RST_Msk          (0x1ul << SYS_IPRST2_USCI0RST_Pos)                /*!< SYS_T::IPRST2: USCI0RST Mask           */
N
N#define SYS_BODCTL_BODEN_Pos             (0)                                               /*!< SYS_T::BODCTL: BODEN Position          */
N#define SYS_BODCTL_BODEN_Msk             (0x1ul << SYS_BODCTL_BODEN_Pos)                   /*!< SYS_T::BODCTL: BODEN Mask              */
N
N#define SYS_BODCTL_BODVL_Pos             (1)                                               /*!< SYS_T::BODCTL: BODVL Position          */
N#define SYS_BODCTL_BODVL_Msk             (0x3ul << SYS_BODCTL_BODVL_Pos)                   /*!< SYS_T::BODCTL: BODVL Mask              */
N
N#define SYS_BODCTL_BODRSTEN_Pos          (3)                                               /*!< SYS_T::BODCTL: BODRSTEN Position       */
N#define SYS_BODCTL_BODRSTEN_Msk          (0x1ul << SYS_BODCTL_BODRSTEN_Pos)                /*!< SYS_T::BODCTL: BODRSTEN Mask           */
N
N#define SYS_BODCTL_BODIF_Pos             (4)                                               /*!< SYS_T::BODCTL: BODIF Position          */
N#define SYS_BODCTL_BODIF_Msk             (0x1ul << SYS_BODCTL_BODIF_Pos)                   /*!< SYS_T::BODCTL: BODIF Mask              */
N
N#define SYS_BODCTL_BODLPM_Pos            (5)                                               /*!< SYS_T::BODCTL: BODLPM Position         */
N#define SYS_BODCTL_BODLPM_Msk            (0x1ul << SYS_BODCTL_BODLPM_Pos)                  /*!< SYS_T::BODCTL: BODLPM Mask             */
N
N#define SYS_BODCTL_BODOUT_Pos            (6)                                               /*!< SYS_T::BODCTL: BODOUT Position         */
N#define SYS_BODCTL_BODOUT_Msk            (0x1ul << SYS_BODCTL_BODOUT_Pos)                  /*!< SYS_T::BODCTL: BODOUT Mask             */
N
N#define SYS_BODCTL_LVREN_Pos             (7)                                               /*!< SYS_T::BODCTL: LVREN Position          */
N#define SYS_BODCTL_LVREN_Msk             (0x1ul << SYS_BODCTL_LVREN_Pos)                   /*!< SYS_T::BODCTL: LVREN Mask              */
N
N#define SYS_BODCTL_BODDGSEL_Pos          (8)                                               /*!< SYS_T::BODCTL: BODDGSEL Position       */
N#define SYS_BODCTL_BODDGSEL_Msk          (0x7ul << SYS_BODCTL_BODDGSEL_Pos)                /*!< SYS_T::BODCTL: BODDGSEL Mask           */
N
N#define SYS_BODCTL_LVRDGSEL_Pos          (12)                                              /*!< SYS_T::BODCTL: LVRDGSEL Position       */
N#define SYS_BODCTL_LVRDGSEL_Msk          (0x7ul << SYS_BODCTL_LVRDGSEL_Pos)                /*!< SYS_T::BODCTL: LVRDGSEL Mask           */
N
N#define SYS_IVSCTL_VTEMPEN_Pos           (0)                                               /*!< SYS_T::IVSCTL: VTEMPEN Position        */
N#define SYS_IVSCTL_VTEMPEN_Msk           (0x1ul << SYS_IVSCTL_VTEMPEN_Pos)                 /*!< SYS_T::IVSCTL: VTEMPEN Mask            */
N
N#define SYS_PORCTL_POROFF_Pos            (0)                                               /*!< SYS_T::PORCTL: POROFF Position         */
N#define SYS_PORCTL_POROFF_Msk            (0xfffful << SYS_PORCTL_POROFF_Pos)               /*!< SYS_T::PORCTL: POROFF Mask             */
N
N#define SYS_GPA_MFPH_PA10MFP_Pos         (8)                                               /*!< SYS_T::GPA_MFPH: PA10MFP Position      */
N#define SYS_GPA_MFPH_PA10MFP_Msk         (0xful << SYS_GPA_MFPH_PA10MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA10MFP Mask          */
N
N#define SYS_GPA_MFPH_PA11MFP_Pos         (12)                                              /*!< SYS_T::GPA_MFPH: PA11MFP Position      */
N#define SYS_GPA_MFPH_PA11MFP_Msk         (0xful << SYS_GPA_MFPH_PA11MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA11MFP Mask          */
N
N#define SYS_GPA_MFPH_PA12MFP_Pos         (16)                                              /*!< SYS_T::GPA_MFPH: PA12MFP Position      */
N#define SYS_GPA_MFPH_PA12MFP_Msk         (0xful << SYS_GPA_MFPH_PA12MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA12MFP Mask          */
N
N#define SYS_GPA_MFPH_PA13MFP_Pos         (20)                                              /*!< SYS_T::GPA_MFPH: PA13MFP Position      */
N#define SYS_GPA_MFPH_PA13MFP_Msk         (0xful << SYS_GPA_MFPH_PA13MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA13MFP Mask          */
N
N#define SYS_GPA_MFPH_PA14MFP_Pos         (24)                                              /*!< SYS_T::GPA_MFPH: PA14MFP Position      */
N#define SYS_GPA_MFPH_PA14MFP_Msk         (0xful << SYS_GPA_MFPH_PA14MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA14MFP Mask          */
N
N#define SYS_GPA_MFPH_PA15MFP_Pos         (28)                                              /*!< SYS_T::GPA_MFPH: PA15MFP Position      */
N#define SYS_GPA_MFPH_PA15MFP_Msk         (0xful << SYS_GPA_MFPH_PA15MFP_Pos)               /*!< SYS_T::GPA_MFPH: PA15MFP Mask          */
N
N#define SYS_GPB_MFPL_PB0MFP_Pos          (0)                                               /*!< SYS_T::GPB_MFPL: PB0MFP Position       */
N#define SYS_GPB_MFPL_PB0MFP_Msk          (0xful << SYS_GPB_MFPL_PB0MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB0MFP Mask           */
N
N#define SYS_GPB_MFPL_PB1MFP_Pos          (4)                                               /*!< SYS_T::GPB_MFPL: PB1MFP Position       */
N#define SYS_GPB_MFPL_PB1MFP_Msk          (0xful << SYS_GPB_MFPL_PB1MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB1MFP Mask           */
N
N#define SYS_GPB_MFPL_PB2MFP_Pos          (8)                                               /*!< SYS_T::GPB_MFPL: PB2MFP Position       */
N#define SYS_GPB_MFPL_PB2MFP_Msk          (0xful << SYS_GPB_MFPL_PB2MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB2MFP Mask           */
N
N#define SYS_GPB_MFPL_PB3MFP_Pos          (12)                                              /*!< SYS_T::GPB_MFPL: PB3MFP Position       */
N#define SYS_GPB_MFPL_PB3MFP_Msk          (0xful << SYS_GPB_MFPL_PB3MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB3MFP Mask           */
N
N#define SYS_GPB_MFPL_PB4MFP_Pos          (16)                                              /*!< SYS_T::GPB_MFPL: PB4MFP Position       */
N#define SYS_GPB_MFPL_PB4MFP_Msk          (0xful << SYS_GPB_MFPL_PB4MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB4MFP Mask           */
N
N#define SYS_GPB_MFPL_PB5MFP_Pos          (20)                                              /*!< SYS_T::GPB_MFPL: PB5MFP Position       */
N#define SYS_GPB_MFPL_PB5MFP_Msk          (0xful << SYS_GPB_MFPL_PB5MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB5MFP Mask           */
N
N#define SYS_GPB_MFPL_PB6MFP_Pos          (24)                                              /*!< SYS_T::GPB_MFPL: PB6MFP Position       */
N#define SYS_GPB_MFPL_PB6MFP_Msk          (0xful << SYS_GPB_MFPL_PB6MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB6MFP Mask           */
N
N#define SYS_GPB_MFPL_PB7MFP_Pos          (28)                                              /*!< SYS_T::GPB_MFPL: PB7MFP Position       */
N#define SYS_GPB_MFPL_PB7MFP_Msk          (0xful << SYS_GPB_MFPL_PB7MFP_Pos)                /*!< SYS_T::GPB_MFPL: PB7MFP Mask           */
N
N#define SYS_GPB_MFPH_PB8MFP_Pos          (0)                                               /*!< SYS_T::GPB_MFPH: PB8MFP Position       */
N#define SYS_GPB_MFPH_PB8MFP_Msk          (0xful << SYS_GPB_MFPH_PB8MFP_Pos)                /*!< SYS_T::GPB_MFPH: PB8MFP Mask           */
N
N#define SYS_GPB_MFPH_PB9MFP_Pos          (4)                                               /*!< SYS_T::GPB_MFPH: PB9MFP Position       */
N#define SYS_GPB_MFPH_PB9MFP_Msk          (0xful << SYS_GPB_MFPH_PB9MFP_Pos)                /*!< SYS_T::GPB_MFPH: PB9MFP Mask           */
N
N#define SYS_GPB_MFPH_PB10MFP_Pos         (8)                                               /*!< SYS_T::GPB_MFPH: PB10MFP Position      */
N#define SYS_GPB_MFPH_PB10MFP_Msk         (0xful << SYS_GPB_MFPH_PB10MFP_Pos)               /*!< SYS_T::GPB_MFPH: PB10MFP Mask          */
N
N#define SYS_GPB_MFPH_PB12MFP_Pos         (16)                                              /*!< SYS_T::GPB_MFPH: PB12MFP Position      */
N#define SYS_GPB_MFPH_PB12MFP_Msk         (0xful << SYS_GPB_MFPH_PB12MFP_Pos)               /*!< SYS_T::GPB_MFPH: PB12MFP Mask          */
N
N#define SYS_GPB_MFPH_PB13MFP_Pos         (20)                                              /*!< SYS_T::GPB_MFPH: PB13MFP Position      */
N#define SYS_GPB_MFPH_PB13MFP_Msk         (0xful << SYS_GPB_MFPH_PB13MFP_Pos)               /*!< SYS_T::GPB_MFPH: PB13MFP Mask          */
N
N#define SYS_GPB_MFPH_PB14MFP_Pos         (24)                                              /*!< SYS_T::GPB_MFPH: PB14MFP Position      */
N#define SYS_GPB_MFPH_PB14MFP_Msk         (0xful << SYS_GPB_MFPH_PB14MFP_Pos)               /*!< SYS_T::GPB_MFPH: PB14MFP Mask          */
N
N#define SYS_GPB_MFPH_PB15MFP_Pos         (28)                                              /*!< SYS_T::GPB_MFPH: PB15MFP Position      */
N#define SYS_GPB_MFPH_PB15MFP_Msk         (0xful << SYS_GPB_MFPH_PB15MFP_Pos)               /*!< SYS_T::GPB_MFPH: PB15MFP Mask          */
N
N#define SYS_GPC_MFPL_PC0MFP_Pos          (0)                                               /*!< SYS_T::GPC_MFPL: PC0MFP Position       */
N#define SYS_GPC_MFPL_PC0MFP_Msk          (0xful << SYS_GPC_MFPL_PC0MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC0MFP Mask           */
N
N#define SYS_GPC_MFPL_PC1MFP_Pos          (4)                                               /*!< SYS_T::GPC_MFPL: PC1MFP Position       */
N#define SYS_GPC_MFPL_PC1MFP_Msk          (0xful << SYS_GPC_MFPL_PC1MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC1MFP Mask           */
N
N#define SYS_GPC_MFPL_PC2MFP_Pos          (8)                                               /*!< SYS_T::GPC_MFPL: PC2MFP Position       */
N#define SYS_GPC_MFPL_PC2MFP_Msk          (0xful << SYS_GPC_MFPL_PC2MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC2MFP Mask           */
N
N#define SYS_GPC_MFPL_PC3MFP_Pos          (12)                                              /*!< SYS_T::GPC_MFPL: PC3MFP Position       */
N#define SYS_GPC_MFPL_PC3MFP_Msk          (0xful << SYS_GPC_MFPL_PC3MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC3MFP Mask           */
N
N#define SYS_GPC_MFPL_PC4MFP_Pos          (16)                                              /*!< SYS_T::GPC_MFPL: PC4MFP Position       */
N#define SYS_GPC_MFPL_PC4MFP_Msk          (0xful << SYS_GPC_MFPL_PC4MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC4MFP Mask           */
N
N#define SYS_GPC_MFPL_PC5MFP_Pos          (20)                                              /*!< SYS_T::GPC_MFPL: PC5MFP Position       */
N#define SYS_GPC_MFPL_PC5MFP_Msk          (0xful << SYS_GPC_MFPL_PC5MFP_Pos)                /*!< SYS_T::GPC_MFPL: PC5MFP Mask           */
N
N#define SYS_GPC_MFPH_PC8MFP_Pos          (0)                                               /*!< SYS_T::GPC_MFPH: PC8MFP Position       */
N#define SYS_GPC_MFPH_PC8MFP_Msk          (0xful << SYS_GPC_MFPH_PC8MFP_Pos)                /*!< SYS_T::GPC_MFPH: PC8MFP Mask           */
N
N#define SYS_GPC_MFPH_PC9MFP_Pos          (4)                                               /*!< SYS_T::GPC_MFPH: PC9MFP Position       */
N#define SYS_GPC_MFPH_PC9MFP_Msk          (0xful << SYS_GPC_MFPH_PC9MFP_Pos)                /*!< SYS_T::GPC_MFPH: PC9MFP Mask           */
N
N#define SYS_GPC_MFPH_PC10MFP_Pos         (8)                                               /*!< SYS_T::GPC_MFPH: PC10MFP Position      */
N#define SYS_GPC_MFPH_PC10MFP_Msk         (0xful << SYS_GPC_MFPH_PC10MFP_Pos)               /*!< SYS_T::GPC_MFPH: PC10MFP Mask          */
N
N#define SYS_GPC_MFPH_PC11MFP_Pos         (12)                                              /*!< SYS_T::GPC_MFPH: PC11MFP Position      */
N#define SYS_GPC_MFPH_PC11MFP_Msk         (0xful << SYS_GPC_MFPH_PC11MFP_Pos)               /*!< SYS_T::GPC_MFPH: PC11MFP Mask          */
N
N#define SYS_GPC_MFPH_PC12MFP_Pos         (16)                                              /*!< SYS_T::GPC_MFPH: PC12MFP Position      */
N#define SYS_GPC_MFPH_PC12MFP_Msk         (0xful << SYS_GPC_MFPH_PC12MFP_Pos)               /*!< SYS_T::GPC_MFPH: PC12MFP Mask          */
N
N#define SYS_GPC_MFPH_PC13MFP_Pos         (20)                                              /*!< SYS_T::GPC_MFPH: PC13MFP Position      */
N#define SYS_GPC_MFPH_PC13MFP_Msk         (0xful << SYS_GPC_MFPH_PC13MFP_Pos)               /*!< SYS_T::GPC_MFPH: PC13MFP Mask          */
N
N#define SYS_GPD_MFPL_PD0MFP_Pos          (0)                                               /*!< SYS_T::GPD_MFPL: PD0MFP Position       */
N#define SYS_GPD_MFPL_PD0MFP_Msk          (0xful << SYS_GPD_MFPL_PD0MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD0MFP Mask           */
N
N#define SYS_GPD_MFPL_PD1MFP_Pos          (4)                                               /*!< SYS_T::GPD_MFPL: PD1MFP Position       */
N#define SYS_GPD_MFPL_PD1MFP_Msk          (0xful << SYS_GPD_MFPL_PD1MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD1MFP Mask           */
N
N#define SYS_GPD_MFPL_PD2MFP_Pos          (8)                                               /*!< SYS_T::GPD_MFPL: PD2MFP Position       */
N#define SYS_GPD_MFPL_PD2MFP_Msk          (0xful << SYS_GPD_MFPL_PD2MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD2MFP Mask           */
N
N#define SYS_GPD_MFPL_PD3MFP_Pos          (12)                                              /*!< SYS_T::GPD_MFPL: PD3MFP Position       */
N#define SYS_GPD_MFPL_PD3MFP_Msk          (0xful << SYS_GPD_MFPL_PD3MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD3MFP Mask           */
N
N#define SYS_GPD_MFPL_PD4MFP_Pos          (16)                                              /*!< SYS_T::GPD_MFPL: PD4MFP Position       */
N#define SYS_GPD_MFPL_PD4MFP_Msk          (0xful << SYS_GPD_MFPL_PD4MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD4MFP Mask           */
N
N#define SYS_GPD_MFPL_PD5MFP_Pos          (20)                                              /*!< SYS_T::GPD_MFPL: PD5MFP Position       */
N#define SYS_GPD_MFPL_PD5MFP_Msk          (0xful << SYS_GPD_MFPL_PD5MFP_Pos)                /*!< SYS_T::GPD_MFPL: PD5MFP Mask           */
N
N#define SYS_GPD_MFPH_PD8MFP_Pos          (0)                                               /*!< SYS_T::GPD_MFPH: PD8MFP Position       */
N#define SYS_GPD_MFPH_PD8MFP_Msk          (0xful << SYS_GPD_MFPH_PD8MFP_Pos)                /*!< SYS_T::GPD_MFPH: PD8MFP Mask           */
N
N#define SYS_GPD_MFPH_PD9MFP_Pos          (4)                                               /*!< SYS_T::GPD_MFPH: PD9MFP Position       */
N#define SYS_GPD_MFPH_PD9MFP_Msk          (0xful << SYS_GPD_MFPH_PD9MFP_Pos)                /*!< SYS_T::GPD_MFPH: PD9MFP Mask           */
N
N#define SYS_GPD_MFPH_PD10MFP_Pos         (8)                                               /*!< SYS_T::GPD_MFPH: PD10MFP Position      */
N#define SYS_GPD_MFPH_PD10MFP_Msk         (0xful << SYS_GPD_MFPH_PD10MFP_Pos)               /*!< SYS_T::GPD_MFPH: PD10MFP Mask          */
N
N#define SYS_GPD_MFPH_PD11MFP_Pos         (12)                                              /*!< SYS_T::GPD_MFPH: PD11MFP Position      */
N#define SYS_GPD_MFPH_PD11MFP_Msk         (0xful << SYS_GPD_MFPH_PD11MFP_Pos)               /*!< SYS_T::GPD_MFPH: PD11MFP Mask          */
N
N#define SYS_GPE_MFPL_PE0MFP_Pos          (0)                                               /*!< SYS_T::GPE_MFPL: PE0MFP Position       */
N#define SYS_GPE_MFPL_PE0MFP_Msk          (0xful << SYS_GPE_MFPL_PE0MFP_Pos)                /*!< SYS_T::GPE_MFPL: PE0MFP Mask           */
N
N#define SYS_GPE_MFPL_PE1MFP_Pos          (4)                                               /*!< SYS_T::GPE_MFPL: PE1MFP Position       */
N#define SYS_GPE_MFPL_PE1MFP_Msk          (0xful << SYS_GPE_MFPL_PE1MFP_Pos)                /*!< SYS_T::GPE_MFPL: PE1MFP Mask           */
N
N#define SYS_GPE_MFPL_PE2MFP_Pos          (8)                                               /*!< SYS_T::GPE_MFPL: PE2MFP Position       */
N#define SYS_GPE_MFPL_PE2MFP_Msk          (0xful << SYS_GPE_MFPL_PE2MFP_Pos)                /*!< SYS_T::GPE_MFPL: PE2MFP Mask           */
N
N#define SYS_GPF_MFPL_PF0MFP_Pos          (0)                                               /*!< SYS_T::GPF_MFPL: PF0MFP Position       */
N#define SYS_GPF_MFPL_PF0MFP_Msk          (0xful << SYS_GPF_MFPL_PF0MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF0MFP Mask           */
N
N#define SYS_GPF_MFPL_PF1MFP_Pos          (4)                                               /*!< SYS_T::GPF_MFPL: PF1MFP Position       */
N#define SYS_GPF_MFPL_PF1MFP_Msk          (0xful << SYS_GPF_MFPL_PF1MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF1MFP Mask           */
N
N#define SYS_GPF_MFPL_PF2MFP_Pos          (8)                                               /*!< SYS_T::GPF_MFPL: PF2MFP Position       */
N#define SYS_GPF_MFPL_PF2MFP_Msk          (0xful << SYS_GPF_MFPL_PF2MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF2MFP Mask           */
N
N#define SYS_GPF_MFPL_PF3MFP_Pos          (12)                                              /*!< SYS_T::GPF_MFPL: PF3MFP Position       */
N#define SYS_GPF_MFPL_PF3MFP_Msk          (0xful << SYS_GPF_MFPL_PF3MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF3MFP Mask           */
N
N#define SYS_GPF_MFPL_PF4MFP_Pos          (16)                                              /*!< SYS_T::GPF_MFPL: PF4MFP Position       */
N#define SYS_GPF_MFPL_PF4MFP_Msk          (0xful << SYS_GPF_MFPL_PF4MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF4MFP Mask           */
N
N#define SYS_GPF_MFPL_PF5MFP_Pos          (20)                                              /*!< SYS_T::GPF_MFPL: PF5MFP Position       */
N#define SYS_GPF_MFPL_PF5MFP_Msk          (0xful << SYS_GPF_MFPL_PF5MFP_Pos)                /*!< SYS_T::GPF_MFPL: PF5MFP Mask           */
N
N#define SYS_IRCTCTL_FREQSEL_Pos          (0)                                               /*!< SYS_T::IRCTCTL: FREQSEL Position       */
N#define SYS_IRCTCTL_FREQSEL_Msk          (0x3ul << SYS_IRCTCTL_FREQSEL_Pos)                /*!< SYS_T::IRCTCTL: FREQSEL Mask           */
N
N#define SYS_IRCTCTL_LOOPSEL_Pos          (4)                                               /*!< SYS_T::IRCTCTL: LOOPSEL Position       */
N#define SYS_IRCTCTL_LOOPSEL_Msk          (0x3ul << SYS_IRCTCTL_LOOPSEL_Pos)                /*!< SYS_T::IRCTCTL: LOOPSEL Mask           */
N
N#define SYS_IRCTCTL_RETRYCNT_Pos         (6)                                               /*!< SYS_T::IRCTCTL: RETRYCNT Position      */
N#define SYS_IRCTCTL_RETRYCNT_Msk         (0x3ul << SYS_IRCTCTL_RETRYCNT_Pos)               /*!< SYS_T::IRCTCTL: RETRYCNT Mask          */
N
N#define SYS_IRCTCTL_CESTOPEN_Pos         (8)                                               /*!< SYS_T::IRCTCTL: CESTOPEN Position      */
N#define SYS_IRCTCTL_CESTOPEN_Msk         (0x1ul << SYS_IRCTCTL_CESTOPEN_Pos)               /*!< SYS_T::IRCTCTL: CESTOPEN Mask          */
N
N#define SYS_IRCTCTL_REFCKSEL_Pos         (10)                                              /*!< SYS_T::IRCTCTL: REFCKSEL Position      */
N#define SYS_IRCTCTL_REFCKSEL_Msk         (0x1ul << SYS_IRCTCTL_REFCKSEL_Pos)               /*!< SYS_T::IRCTCTL: REFCKSEL Mask          */
N
N#define SYS_IRCTIEN_TFAILIEN_Pos         (1)                                               /*!< SYS_T::IRCTIEN: TFAILIEN Position      */
N#define SYS_IRCTIEN_TFAILIEN_Msk         (0x1ul << SYS_IRCTIEN_TFAILIEN_Pos)               /*!< SYS_T::IRCTIEN: TFAILIEN Mask          */
N
N#define SYS_IRCTIEN_CLKEIEN_Pos          (2)                                               /*!< SYS_T::IRCTIEN: CLKEIEN Position       */
N#define SYS_IRCTIEN_CLKEIEN_Msk          (0x1ul << SYS_IRCTIEN_CLKEIEN_Pos)                /*!< SYS_T::IRCTIEN: CLKEIEN Mask           */
N
N#define SYS_IRCTISTS_FREQLOCK_Pos        (0)                                               /*!< SYS_T::IRCTISTS: FREQLOCK Position     */
N#define SYS_IRCTISTS_FREQLOCK_Msk        (0x1ul << SYS_IRCTISTS_FREQLOCK_Pos)              /*!< SYS_T::IRCTISTS: FREQLOCK Mask         */
N
N#define SYS_IRCTISTS_TFAILIF_Pos         (1)                                               /*!< SYS_T::IRCTISTS: TFAILIF Position      */
N#define SYS_IRCTISTS_TFAILIF_Msk         (0x1ul << SYS_IRCTISTS_TFAILIF_Pos)               /*!< SYS_T::IRCTISTS: TFAILIF Mask          */
N
N#define SYS_IRCTISTS_CLKERRIF_Pos        (2)                                               /*!< SYS_T::IRCTISTS: CLKERRIF Position     */
N#define SYS_IRCTISTS_CLKERRIF_Msk        (0x1ul << SYS_IRCTISTS_CLKERRIF_Pos)              /*!< SYS_T::IRCTISTS: CLKERRIF Mask         */
N
N#define SYS_MODCTL_MODEN_Pos             (0)                                               /*!< SYS_T::MODCTL: MODEN Position          */
N#define SYS_MODCTL_MODEN_Msk             (0x1ul << SYS_MODCTL_MODEN_Pos)                   /*!< SYS_T::MODCTL: MODEN Mask              */
N
N#define SYS_MODCTL_MODH_Pos              (1)                                               /*!< SYS_T::MODCTL: MODH Position           */
N#define SYS_MODCTL_MODH_Msk              (0x1ul << SYS_MODCTL_MODH_Pos)                    /*!< SYS_T::MODCTL: MODH Mask               */
N
N#define SYS_MODCTL_MODPWMSEL_Pos         (4)                                               /*!< SYS_T::MODCTL: MODPWMSEL Position      */
N#define SYS_MODCTL_MODPWMSEL_Msk         (0xful << SYS_MODCTL_MODPWMSEL_Pos)               /*!< SYS_T::MODCTL: MODPWMSEL Mask          */
N
N#define SYS_REGLCTL_REGLCTL_Pos          (0)                                               /*!< SYS_T::REGLCTL: REGLCTL Position       */
N#define SYS_REGLCTL_REGLCTL_Msk          (0xfful << SYS_REGLCTL_REGLCTL_Pos)               /*!< SYS_T::REGLCTL: REGLCTL Mask           */
N
N#define SYS_TSOFFSET_VTEMP_Pos           (0)                                               /*!< SYS_T::TSOFFSET: VTEMP Position        */
N#define SYS_TSOFFSET_VTEMP_Msk           (0xffful << SYS_TSOFFSET_VTEMP_Pos)               /*!< SYS_T::TSOFFSET: VTEMP Mask            */
N
N/**@}*/ /* SYS_CONST */
N/**@}*/ /* end of SYS register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __SYS_REG_H__ */
L 163 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "timer_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\timer_reg.h" 1
N/**************************************************************************//**
N * @file     timer_reg.h
N * @version  V1.00
N * @brief    TIMER register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __TIMER_REG_H__
N#define __TIMER_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup TIMER Timer Controller (TIMER)
N    Memory Mapped Structure for TIMER Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var TIMER_T::CTL
N     * Offset: 0x00/0x20  Timer0~3 Control and Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |PSC       |Prescale Counter
N     * |        |          |Timer input clock or event source is divided by (PSC+1) before it is fed to the timer up counter
N     * |        |          |If this field is 0 (PSC = 0), then there is no scaling.
N     * |[8]     |TRGPDMA   |Trigger DAC Enable Bit
N     * |        |          |If this bit is set to 1, timer time-out interrupt or capture interrupt can trigger PDMA.
N     * |        |          |0 = Timer interrupt trigger PDMA Disabled.
N     * |        |          |1 = Timer interrupt trigger PDMA Enabled.
N     * |        |          |Note: If TRGSSEL (TIMERx_CTL[18]) = 0, time-out interrupt signal will trigger PDMA.
N     * |        |          |If TRGSSEL (TIMERx_CTL[18]) = 1, capture interrupt signal will trigger PDMA.
N     * |[9]     |TRGBPWM   |Trigger DAC Enable Bit
N     * |        |          |If this bit is set to 1, timer time-out interrupt or capture interrupt can trigger BPWM.
N     * |        |          |0 = Timer interrupt trigger BPWM Disabled.
N     * |        |          |1 = Timer interrupt trigger BPWM Enabled.
N     * |        |          |Note: If TRGSSEL (TIMERx_CTL[18]) = 0, time-out interrupt signal will trigger BPWM.
N     * |        |          |If TRGSSEL (TIMERx_CTL[18]) = 1, capture interrupt signal will trigger BPWM.
N     * |[18]    |TRGSSEL   |Trigger Source Select Bit
N     * |        |          |This bit is used to select trigger source from Timer time-out interrupt signal or capture interrupt signal.
N     * |        |          |0 = Timer time-out interrupt signal is used to trigger PWM, BPWM, PDMA,ADC and DAC.
N     * |        |          |1 = Capture interrupt signal is used to trigger PWM, BPWM, PDMA, ADC and DAC.
N     * |[19]    |TRGPWM    |Trigger PWM Enable Bit
N     * |        |          |If this bit is set to 1, timer time-out interrupt or capture interrupt can trigger PWM.
N     * |        |          |0 = Timer interrupt trigger PWM Disabled.
N     * |        |          |1 = Timer interrupt trigger PWM Enabled.
N     * |        |          |Note: If TRGSSEL (TIMERx_CTL[18]) = 0, time-out interrupt signal will trigger PWM.
N     * |        |          |If TRGSSEL (TIMERx_CTL[18]) = 1, capture interrupt signal will trigger PWM.
N     * |[21]    |TRGADC    |Trigger ADC Enable Bit
N     * |        |          |If this bit is set to 1, timer time-out interrupt or capture interrupt can trigger ADC.
N     * |        |          |0 = Timer interrupt trigger ADC Disabled.
N     * |        |          |1 = Timer interrupt trigger ADC Enabled.
N     * |        |          |Note: If TRGSSEL (TIMERx_CTL[18]) = 0, time-out interrupt signal will trigger ADC.
N     * |        |          |If TRGSSEL (TIMERx_CTL[18]) = 1, capture interrupt signal will trigger ADC.
N     * |[22]    |TGLPINSEL |Toggle-output Pin Select
N     * |        |          |0 = Toggle mode output to Tx (Timer Event Counter Pin).
N     * |        |          |1 = Toggle mode output to Tx_EXT (Timer External Capture Pin).
N     * |[23]    |WKEN      |Wake-up Function Enable Bit
N     * |        |          |If this bit is set to 1, while timer interrupt flag TIF (TIMERx_INTSTS[0]) is 1 and INTEN (TIMERx_CTL[29]) is enabled, the timer interrupt signal will generate a wake-up trigger event to CPU.
N     * |        |          |0 = Wake-up function Disabled if timer interrupt signal generated.
N     * |        |          |1 = Wake-up function Enabled if timer interrupt signal generated.
N     * |[24]    |EXTCNTEN  |Event Counter Mode Enable Bit
N     * |        |          |This bit is for external counting pin function enabled.
N     * |        |          |0 = Event counter mode Disabled.
N     * |        |          |1 = Event counter mode Enabled.
N     * |        |          |Note: When timer is used as an event counter, this bit should be set to 1 and select PCLK as timer clock source.
N     * |[25]    |ACTSTS    |Timer Active Status Bit (Read Only)
N     * |        |          |This bit indicates the 24-bit up counter status.
N     * |        |          |0 = 24-bit up counter is not active.
N     * |        |          |1 = 24-bit up counter is active.
N     * |[26]    |RSTCNT    |Timer Counter Reset Bit
N     * |        |          |Setting this bit will reset the 24-bit up counter value CNT (TIMERx_CNT[23:0]) and also force CNTEN (TIMERx_CTL[30]) to 0 if ACTSTS (TIMERx_CTL[25]) is 1.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset internal 8-bit prescale counter, 24-bit up counter value and CNTEN bit.
N     * |[28:27] |OPMODE    |Timer Operating Mode Select
N     * |        |          |00 = The Timer controller is operated in One-shot mode.
N     * |        |          |01 = The Timer controller is operated in Periodic mode.
N     * |        |          |10 = The Timer controller is operated in Toggle-output mode.
N     * |        |          |11 = The Timer controller is operated in Continuous Counting mode.
N     * |[29]    |INTEN     |Timer Interrupt Enable Bit
N     * |        |          |0 = Timer Interrupt Disabled.
N     * |        |          |1 = Timer Interrupt Enabled.
N     * |        |          |Note: If this bit is enabled, when the timer interrupt flag TIF is set to 1, the timer interrupt signal is generated and inform to CPU.
N     * |[30]    |CNTEN     |Timer Counting Enable Bit
N     * |        |          |0 = Stops/Suspends counting.
N     * |        |          |1 = Starts counting.
N     * |        |          |Note1: In stop status, and then set CNTEN to 1 will enable the 24-bit up counter to keep counting from the last stop counting value.
N     * |        |          |Note2: This bit is auto-cleared by hardware in one-shot mode (TIMER_CTL[28:27] = 00) when the timer interrupt flag TIF (TIMERx_INTSTS[0]) is generated.
N     * |[31]    |ICEDEBUG  |ICE Debug Mode Acknowledge Disable (Write Protect)
N     * |        |          |0 = ICE debug mode acknowledgement affects TIMER counting.
N     * |        |          |TIMER counter will be held while CPU is held by ICE.
N     * |        |          |1 = ICE debug mode acknowledgement Disabled.
N     * |        |          |TIMER counter will keep going no matter CPU is held by ICE or not.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var TIMER_T::CMP
N     * Offset: 0x04/0x24  Timer0~3 Compare Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[23:0]  |CMPDAT    |Timer Compared Value
N     * |        |          |CMPDAT is a 24-bit compared value register
N     * |        |          |When the internal 24-bit up counter value is equal to CMPDAT value, the TIF (TIMERx_INTSTS[0] Timer Interrupt Flag) will set to 1.
N     * |        |          |Time-out period = (Period of timer clock input) * (8-bit PSC + 1) * (24-bit CMPDAT).
N     * |        |          |Note1: Never write 0x0 or 0x1 in CMPDAT field, or the core will run into unknown state.
N     * |        |          |Note2: When timer is operating at continuous counting mode, the 24-bit up counter will keep counting continuously even if user writes a new value into CMPDAT field
N     * |        |          |But if timer is operating at other modes, the 24-bit up counter will restart counting from 0 and using newest CMPDAT value to be the timer compared value while user writes a new value into CMPDAT field.
N     * @var TIMER_T::INTSTS
N     * Offset: 0x08/0x28  Timer0~3 Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TIF       |Timer Interrupt Flag
N     * |        |          |This bit indicates the interrupt flag status of Timer while 24-bit timer up counter CNT (TIMERx_CNT[23:0]) value reaches to CMPDAT (TIMERx_CMP[23:0]) value.
N     * |        |          |0 = No effect.
N     * |        |          |1 = CNT value matches the CMPDAT value.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[1]     |TWKF      |Timer Wake-up Flag
N     * |        |          |This bit indicates the interrupt wake-up flag status of timer.
N     * |        |          |0 = Timer does not cause CPU wake-up.
N     * |        |          |1 = CPU wake-up from Idle or Power-down mode if timer time-out interrupt signal generated.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * @var TIMER_T::CNT
N     * Offset: 0x0C/0x2C  Timer0~3 Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[23:0]  |CNT       |Timer Data Register
N     * |        |          |This field can be reflected the internal 24-bit timer counter value or external event input counter value from Tx (x=0~3) pin.
N     * |        |          |If EXTCNTEN (TIMERx_CTL[24] ) is 0, user can read CNT value to get current 24- bit counter value .
N     * |        |          |If EXTCNTEN (TIMERx_CTL[24] ) is 1, user can read CNT value to get current 24- bit event input counter value.
N     * @var TIMER_T::CAP
N     * Offset: 0x10/0x30  Timer0~3 Capture Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[23:0]  |CAPDAT    |Timer Capture Data Register
N     * |        |          |When CAPEN (TIMERx_EXTCTL[3]) bit is set, CAPFUNCS (TIMERx_EXTCTL[4]) bit is 0, and a transition on Tx_EXT pin is matched with the CAPEDGE (TIMERx_EXTCTL[2:1]) setting, CAPIF (TIMERx_EINTSTS[0]) will set to 1 and the current timer counter value CNT (TIMERx_CNT[23:0]) will be auto-loaded into this CAPDAT field.
N     * @var TIMER_T::EXTCTL
N     * Offset: 0x14/0x34  Timer0~3 External Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CNTPHASE  |Timer External Count Phase
N     * |        |          |This bit indicates the detection phase of external counting pin Tx (x= 0~3).
N     * |        |          |0 = A Falling edge of external counting pin will be counted.
N     * |        |          |1 = A Rising edge of external counting pin will be counted.
N     * |[2:1]   |CAPEDGE   |Timer External Capture Pin Edge Detect
N     * |        |          |00 = A Falling edge on Tx_EXT (x= 0~3) pin will be detected.
N     * |        |          |01 = A Rising edge on Tx_EXT (x= 0~3) pin will be detected.
N     * |        |          |10 = Either Rising or Falling edge on Tx_EXT (x= 0~3) pin will be detected.
N     * |        |          |11 = Reserved.
N     * |[3]     |CAPEN     |Timer External Capture Pin Enable
N     * |        |          |This bit enables the Tx_EXT pin.
N     * |        |          |0 =Tx_EXT (x= 0~3) pin Disabled.
N     * |        |          |1 =Tx_EXT (x= 0~3) pin Enabled.
N     * |[4]     |CAPFUNCS  |Capture Function Selection
N     * |        |          |0 = External Capture Mode Enabled.
N     * |        |          |1 = External Reset Mode Enabled.
N     * |        |          |Note1: When CAPFUNCS is 0, transition on Tx_EXT (x= 0~3) pin is using to save the 24-bit timer counter value.
N     * |        |          |Note2: When CAPFUNCS is 1, transition on Tx_EXT (x= 0~3) pin is using to reset the 24-bit timer counter value.
N     * |[5]     |CAPIEN    |Timer External Capture Interrupt Enable Bit
N     * |        |          |0 = Tx_EXT (x= 0~3) pin detection Interrupt Disabled.
N     * |        |          |1 = Tx_EXT (x= 0~3) pin detection Interrupt Enabled.
N     * |        |          |Note: CAPIEN is used to enable timer external interrupt
N     * |        |          |If CAPIEN enabled, timer will rise an interrupt when CAPIF (TIMERx_EINTSTS[0]) is 1.
N     * |        |          |For example, while CAPIEN = 1, CAPEN = 1, and CAPEDGE = 00, a 1 to 0 transition on the Tx_EXT pin will cause the CAPIF to be set then the interrupt signal is generated and sent to NVIC to inform CPU.
N     * |[6]     |CAPDBEN   |Timer External Capture Pin De-bounce Enable Bit
N     * |        |          |0 = Tx_EXT (x= 0~3) pin de-bounce Disabled.
N     * |        |          |1 = Tx_EXT (x= 0~3) pin de-bounce Enabled.
N     * |        |          |Note: If this bit is enabled, the edge detection of Tx_EXT pin is detected with de-bounce circuit.
N     * |[7]     |CNTDBEN   |Timer Counter Pin De-bounce Enable Bit
N     * |        |          |0 = Tx (x= 0~3) pin de-bounce Disabled.
N     * |        |          |1 = Tx (x= 0~3) pin de-bounce Enabled.
N     * |        |          |Note: If this bit is enabled, the edge detection of Tx pin is detected with de-bounce circuit.
N     * @var TIMER_T::EINTSTS
N     * Offset: 0x18/x038  Timer0~3 External Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CAPIF     |Timer External Capture Interrupt Flag
N     * |        |          |This bit indicates the timer external capture interrupt flag status.
N     * |        |          |0 = Tx_EXT (x= 0~3) pin interrupt did not occur.
N     * |        |          |1 = Tx_EXT (x= 0~3) pin interrupt occurred.
N     * |        |          |Note1: This bit is cleared by writing 1 to it.
N     * |        |          |Note2: When CAPEN (TIMERx_EXTCTL[3]) bit is set, CAPFUNCS (TIMERx_EXTCTL[4]) bit is 0, and a transition on Tx_EXT (x= 0~3) pin is matched with the CAPEDGE (TIMERx_EXTCTL[2:1]) setting, this bit will set to 1 by hardware.
N     * |        |          |Note3: There is a new incoming capture event detected before CPU clearing the CAPIF status
N     * |        |          |If the above condition occurred, the Timer will keep register TIMERx_CAP unchanged and drop the new capture value.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000/0x0020] Timer0~3 Control and Status Register                               */
X    volatile uint32_t CTL;                    
N    __IO uint32_t CMP;                   /*!< [0x0004/0x0024] Timer0~3 Compare Register                                          */
X    volatile uint32_t CMP;                    
N    __IO uint32_t INTSTS;                /*!< [0x0008/0x0028] Timer0~3 Interrupt Status Register                                 */
X    volatile uint32_t INTSTS;                 
N    __I  uint32_t CNT;                   /*!< [0x000c/0x002c] Timer0~3 Data Register                                             */
X    volatile const  uint32_t CNT;                    
N    __I  uint32_t CAP;                   /*!< [0x0010/0x0030] Timer0~3 Capture Data Register                                     */
X    volatile const  uint32_t CAP;                    
N    __IO uint32_t EXTCTL;                /*!< [0x0014/0x0034] Timer0~3 External Control Register                                 */
X    volatile uint32_t EXTCTL;                 
N    __IO uint32_t EINTSTS;               /*!< [0x0018/0x0038] Timer0~3 External Interrupt Status Register                        */
X    volatile uint32_t EINTSTS;                
N} TIMER_T;
N
N/**
N    @addtogroup TIMER_CONST TMR01 Bit Field Definition
N    Constant Definitions for TMR01 Controller
N@{ */
N
N#define TIMER_CTL_PSC_Pos                (0)                                               /*!< TIMER_T::CTL: PSC Position             */
N#define TIMER_CTL_PSC_Msk                (0xfful << TIMER_CTL_PSC_Pos)                     /*!< TIMER_T::CTL: PSC Mask                 */
N
N#define TIMER_CTL_TRGPDMA_Pos            (8)                                               /*!< TIMER_T::CTL: TRGPDMA Position         */
N#define TIMER_CTL_TRGPDMA_Msk            (0x1ul << TIMER_CTL_TRGPDMA_Pos)                  /*!< TIMER_T::CTL: TRGPDMA Mask             */
N
N#define TIMER_CTL_TRGBPWM_Pos            (9)                                               /*!< TIMER_T::CTL: TRGBPWM Position         */
N#define TIMER_CTL_TRGBPWM_Msk            (0x1ul << TIMER_CTL_TRGBPWM_Pos)                  /*!< TIMER_T::CTL: TRGBPWM Mask             */
N
N#define TIMER_CTL_TRGSSEL_Pos            (18)                                              /*!< TIMER_T::CTL: TRGSSEL Position         */
N#define TIMER_CTL_TRGSSEL_Msk            (0x1ul << TIMER_CTL_TRGSSEL_Pos)                  /*!< TIMER_T::CTL: TRGSSEL Mask             */
N
N#define TIMER_CTL_TRGPWM_Pos             (19)                                              /*!< TIMER_T::CTL: TRGPWM Position          */
N#define TIMER_CTL_TRGPWM_Msk             (0x1ul << TIMER_CTL_TRGPWM_Pos)                   /*!< TIMER_T::CTL: TRGPWM Mask              */
N
N#define TIMER_CTL_TRGADC_Pos             (21)                                              /*!< TIMER_T::CTL: TRGADC Position          */
N#define TIMER_CTL_TRGADC_Msk             (0x1ul << TIMER_CTL_TRGADC_Pos)                   /*!< TIMER_T::CTL: TRGADC Mask              */
N
N#define TIMER_CTL_TGLPINSEL_Pos          (22)                                              /*!< TIMER_T::CTL: TGLPINSEL Position       */
N#define TIMER_CTL_TGLPINSEL_Msk          (0x1ul << TIMER_CTL_TGLPINSEL_Pos)                /*!< TIMER_T::CTL: TGLPINSEL Mask           */
N
N#define TIMER_CTL_WKEN_Pos               (23)                                              /*!< TIMER_T::CTL: WKEN Position            */
N#define TIMER_CTL_WKEN_Msk               (0x1ul << TIMER_CTL_WKEN_Pos)                     /*!< TIMER_T::CTL: WKEN Mask                */
N
N#define TIMER_CTL_EXTCNTEN_Pos           (24)                                              /*!< TIMER_T::CTL: EXTCNTEN Position        */
N#define TIMER_CTL_EXTCNTEN_Msk           (0x1ul << TIMER_CTL_EXTCNTEN_Pos)                 /*!< TIMER_T::CTL: EXTCNTEN Mask            */
N
N#define TIMER_CTL_ACTSTS_Pos             (25)                                              /*!< TIMER_T::CTL: ACTSTS Position          */
N#define TIMER_CTL_ACTSTS_Msk             (0x1ul << TIMER_CTL_ACTSTS_Pos)                   /*!< TIMER_T::CTL: ACTSTS Mask              */
N
N#define TIMER_CTL_RSTCNT_Pos             (26)                                              /*!< TIMER_T::CTL: RSTCNT Position          */
N#define TIMER_CTL_RSTCNT_Msk             (0x1ul << TIMER_CTL_RSTCNT_Pos)                   /*!< TIMER_T::CTL: RSTCNT Mask              */
N
N#define TIMER_CTL_OPMODE_Pos             (27)                                              /*!< TIMER_T::CTL: OPMODE Position          */
N#define TIMER_CTL_OPMODE_Msk             (0x3ul << TIMER_CTL_OPMODE_Pos)                   /*!< TIMER_T::CTL: OPMODE Mask              */
N
N#define TIMER_CTL_INTEN_Pos              (29)                                              /*!< TIMER_T::CTL: INTEN Position           */
N#define TIMER_CTL_INTEN_Msk              (0x1ul << TIMER_CTL_INTEN_Pos)                    /*!< TIMER_T::CTL: INTEN Mask               */
N
N#define TIMER_CTL_CNTEN_Pos              (30)                                              /*!< TIMER_T::CTL: CNTEN Position           */
N#define TIMER_CTL_CNTEN_Msk              (0x1ul << TIMER_CTL_CNTEN_Pos)                    /*!< TIMER_T::CTL: CNTEN Mask               */
N
N#define TIMER_CTL_ICEDEBUG_Pos           (31)                                              /*!< TIMER_T::CTL: ICEDEBUG Position        */
N#define TIMER_CTL_ICEDEBUG_Msk           (0x1ul << TIMER_CTL_ICEDEBUG_Pos)                 /*!< TIMER_T::CTL: ICEDEBUG Mask            */
N
N#define TIMER_CMP_CMPDAT_Pos             (0)                                               /*!< TIMER_T::CMP: CMPDAT Position          */
N#define TIMER_CMP_CMPDAT_Msk             (0xfffffful << TIMER_CMP_CMPDAT_Pos)              /*!< TIMER_T::CMP: CMPDAT Mask              */
N
N#define TIMER_INTSTS_TIF_Pos             (0)                                               /*!< TIMER_T::INTSTS: TIF Position          */
N#define TIMER_INTSTS_TIF_Msk             (0x1ul << TIMER_INTSTS_TIF_Pos)                   /*!< TIMER_T::INTSTS: TIF Mask              */
N
N#define TIMER_INTSTS_TWKF_Pos            (1)                                               /*!< TIMER_T::INTSTS: TWKF Position         */
N#define TIMER_INTSTS_TWKF_Msk            (0x1ul << TIMER_INTSTS_TWKF_Pos)                  /*!< TIMER_T::INTSTS: TWKF Mask             */
N
N#define TIMER_CNT_CNT_Pos                (0)                                               /*!< TIMER_T::CNT: CNT Position             */
N#define TIMER_CNT_CNT_Msk                (0xfffffful << TIMER_CNT_CNT_Pos)                 /*!< TIMER_T::CNT: CNT Mask                 */
N
N#define TIMER_CAP_CAPDAT_Pos             (0)                                               /*!< TIMER_T::CAP: CAPDAT Position          */
N#define TIMER_CAP_CAPDAT_Msk             (0xfffffful << TIMER_CAP_CAPDAT_Pos)              /*!< TIMER_T::CAP: CAPDAT Mask              */
N
N#define TIMER_EXTCTL_CNTPHASE_Pos        (0)                                               /*!< TIMER_T::EXTCTL: CNTPHASE Position     */
N#define TIMER_EXTCTL_CNTPHASE_Msk        (0x1ul << TIMER_EXTCTL_CNTPHASE_Pos)              /*!< TIMER_T::EXTCTL: CNTPHASE Mask         */
N
N#define TIMER_EXTCTL_CAPEDGE_Pos         (1)                                               /*!< TIMER_T::EXTCTL: CAPEDGE Position      */
N#define TIMER_EXTCTL_CAPEDGE_Msk         (0x3ul << TIMER_EXTCTL_CAPEDGE_Pos)               /*!< TIMER_T::EXTCTL: CAPEDGE Mask          */
N
N#define TIMER_EXTCTL_CAPEN_Pos           (3)                                               /*!< TIMER_T::EXTCTL: CAPEN Position        */
N#define TIMER_EXTCTL_CAPEN_Msk           (0x1ul << TIMER_EXTCTL_CAPEN_Pos)                 /*!< TIMER_T::EXTCTL: CAPEN Mask            */
N
N#define TIMER_EXTCTL_CAPFUNCS_Pos        (4)                                               /*!< TIMER_T::EXTCTL: CAPFUNCS Position     */
N#define TIMER_EXTCTL_CAPFUNCS_Msk        (0x1ul << TIMER_EXTCTL_CAPFUNCS_Pos)              /*!< TIMER_T::EXTCTL: CAPFUNCS Mask         */
N
N#define TIMER_EXTCTL_CAPIEN_Pos          (5)                                               /*!< TIMER_T::EXTCTL: CAPIEN Position       */
N#define TIMER_EXTCTL_CAPIEN_Msk          (0x1ul << TIMER_EXTCTL_CAPIEN_Pos)                /*!< TIMER_T::EXTCTL: CAPIEN Mask           */
N
N#define TIMER_EXTCTL_CAPDBEN_Pos         (6)                                               /*!< TIMER_T::EXTCTL: CAPDBEN Position      */
N#define TIMER_EXTCTL_CAPDBEN_Msk         (0x1ul << TIMER_EXTCTL_CAPDBEN_Pos)               /*!< TIMER_T::EXTCTL: CAPDBEN Mask          */
N
N#define TIMER_EXTCTL_CNTDBEN_Pos         (7)                                               /*!< TIMER_T::EXTCTL: CNTDBEN Position      */
N#define TIMER_EXTCTL_CNTDBEN_Msk         (0x1ul << TIMER_EXTCTL_CNTDBEN_Pos)               /*!< TIMER_T::EXTCTL: CNTDBEN Mask          */
N
N#define TIMER_EINTSTS_CAPIF_Pos          (0)                                               /*!< TIMER_T::EINTSTS: CAPIF Position       */
N#define TIMER_EINTSTS_CAPIF_Msk          (0x1ul << TIMER_EINTSTS_CAPIF_Pos)                /*!< TIMER_T::EINTSTS: CAPIF Mask           */
N
N/**@}*/ /* TIMER_CONST */
N/**@}*/ /* end of TIMER register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __TIMER_REG_H__ */
L 164 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "uart_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\uart_reg.h" 1
N/**************************************************************************//**
N * @file     uart_reg.h
N * @version  V1.00
N * @brief    UART register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __UART_REG_H__
N#define __UART_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup UART Universal Asynchronous Receiver/Transmitter Controller (UART)
N    Memory Mapped Structure for UART Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var UART_T::DAT
N     * Offset: 0x00  UART Receive/Transmit Buffer Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |DAT       |Data Receive/Transmit Buffer
N     * |        |          |Write Operation:
N     * |        |          |By writing one byte to this register, the data byte will be stored in transmitter FIFO
N     * |        |          |The UART controller will send out the data stored in transmitter FIFO top location through the UART_TXD.
N     * |        |          |Read Operation:
N     * |        |          |By reading this register, the UART controller will return an 8-bit data received from receiver FIFO.
N     * |[8]     |PARITY    |Parity Bit Receive/Transmit Buffer
N     * |        |          |Write Operation:
N     * |        |          |By writing to this bit, the parity bit will be stored in transmitter FIFO
N     * |        |          |If PBE (UART_LINE[3]) and PSS (UART_LINE[7]) are set, the UART controller will send out this bit follow the DAT (UART_DAT[7:0]) through the UART_TXD.
N     * |        |          |Read Operation:
N     * |        |          |If PBE (UART_LINE[3]) and PSS (UART_LINE[7]) are enabled, the parity bit can be read by this bit.
N     * |        |          |Note: This bit has effect only when PBE (UART_LINE[3]) and PSS (UART_LINE[7]) are set.
N     * @var UART_T::INTEN
N     * Offset: 0x04  UART Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RDAIEN    |Receive Data Available Interrupt Enable Bit
N     * |        |          |0 = Receive data available interrupt Disabled.
N     * |        |          |1 = Receive data available interrupt Enabled.
N     * |[1]     |THREIEN   |Transmit Holding Register Empty Interrupt Enable Bit
N     * |        |          |0 = Transmit holding register empty interrupt Disabled.
N     * |        |          |1 = Transmit holding register empty interrupt Enabled.
N     * |[2]     |RLSIEN    |Receive Line Status Interrupt Enable Bit
N     * |        |          |0 = Receive Line Status interrupt Disabled.
N     * |        |          |1 = Receive Line Status interrupt Enabled.
N     * |[3]     |MODEMIEN  |Modem Status Interrupt Enable Bit
N     * |        |          |0 = Modem status interrupt Disabled.
N     * |        |          |1 = Modem status interrupt Enabled.
N     * |[4]     |RXTOIEN   |RX Time-out Interrupt Enable Bit
N     * |        |          |0 = RX time-out interrupt Disabled.
N     * |        |          |1 = RX time-out interrupt Enabled.
N     * |[5]     |BUFERRIEN |Buffer Error Interrupt Enable Bit
N     * |        |          |0 = Buffer error interrupt Disabled.
N     * |        |          |1 = Buffer error interrupt Enabled.
N     * |[6]     |WKIEN     |Wake-up Interrupt Enable Bit
N     * |        |          |0 = Wake-up Interrupt Disabled.
N     * |        |          |1 = Wake-up Interrupt Enabled.
N     * |[8]     |LINIEN    |LIN Bus Interrupt Enable Bit
N     * |        |          |0 = LIN bus interrupt Disabled.
N     * |        |          |1 = LIN bus interrupt Enabled.
N     * |        |          |Note: This bit is used for LIN function mode.
N     * |[11]    |TOCNTEN   |Receive Buffer Time-out Counter Enable Bit
N     * |        |          |0 = Receive Buffer Time-out counter Disabled.
N     * |        |          |1 = Receive Buffer Time-out counter Enabled.
N     * |[12]    |ATORTSEN  |nRTS Auto-flow Control Enable Bit
N     * |        |          |0 = nRTS auto-flow control Disabled.
N     * |        |          |1 = nRTS auto-flow control Enabled.
N     * |        |          |Note: When nRTS auto-flow is enabled, if the number of bytes in the RX FIFO equals the RTSTRGLV (UART_FIFO[19:16]), the UART will de-assert nRTS signal.
N     * |[13]    |ATOCTSEN  |nCTS Auto-flow Control Enable Bit
N     * |        |          |0 = nCTS auto-flow control Disabled.
N     * |        |          |1 = nCTS auto-flow control Enabled.
N     * |        |          |Note: When nCTS auto-flow is enabled, the UART will send data to external device if nCTS input assert (UART will not send data to device until nCTS is asserted).
N     * |[14]    |TXPDMAEN  |TX PDMA Enable Bit
N     * |        |          |This bit can enable or disable TX PDMA service.
N     * |        |          |0 = TX PDMA Disabled.
N     * |        |          |1 = TX PDMA Enabled.Note: If RLSIEN (UART_INTEN[2]) is enabled and HWRLSINT (UART_INTSTS[26]) is set to '1', the RLS (Receive Line Status) Interrupt is caused
N     * |        |          |If RLS interrupt is caused by Break Error Flag BIF(UART_FIFOSTS[6]), Frame Error Flag FEF(UART_FIFO[5]) or Parity Error Flag PEF(UART_FIFOSTS[4]) , UART PDMA receive request operation is stop
N     * |        |          |Clear Break Error Flag BIF or Frame Error Flag FEF or Parity Error Flag PEF by writing '1' to corresponding BIF, FEF and PEF to make UART PDMA receive request operation continue.
N     * |[15]    |RXPDMAEN  |RX PDMA Enable Bit
N     * |        |          |This bit can enable or disable RX PDMA service.
N     * |        |          |0 = RX PDMA Disabled.
N     * |        |          |1 = RX PDMA Enabled.
N     * |        |          |Note: If RLSIEN (UART_INTEN[2]) is enabled and HWRLSINT (UART_INTSTS[26]) is set to '1', the RLS (Receive Line Status) Interrupt is caused
N     * |        |          |If RLS interrupt is caused by Break Error Flag BIF(UART_FIFOSTS[6]), Frame Error Flag FEF(UART_FIFO[5]) or Parity Error Flag PEF(UART_FIFOSTS[4]) , UART PDMA receive request operation is stop
N     * |        |          |Clear Break Error Flag BIF or Frame Error Flag FEF or Parity Error Flag PEF by writing '1' to corresponding BIF, FEF and PEF to make UART PDMA receive request operation continue.
N     * |[18]    |ABRIEN    |Auto-baud Rate Interrupt Enable Bit
N     * |        |          |0 = Auto-baud rate interrupt Disabled.
N     * |        |          |1 = Auto-baud rate interrupt Enabled.
N     * |[22]    |TXENDIEN  |Transmitter Empty Interrupt Enable Bit
N     * |        |          |If TXENDIEN (UART_INTEN[22]) is enabled, the Transmitter Empty interrupt TXENDINT (UART_INTSTS[30]) will be generated when TXENDIF (UART_INTSTS[22]) is set (TX FIFO (UART_DAT) is empty and the STOP bit of the last byte has been transmitted).
N     * |        |          |0 = Transmitter empty interrupt Disabled.
N     * |        |          |1 = Transmitter empty interrupt Enabled.
N     * @var UART_T::FIFO
N     * Offset: 0x08  UART FIFO Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |RXRST     |RX Field Software Reset
N     * |        |          |When RXRST (UART_FIFO[1]) is set, all the byte in the receiver FIFO and RX internal state machine are cleared.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the RX internal state machine and pointers.
N     * |        |          |Note1: This bit will automatically clear at least 3 UART peripheral clock cycles.
N     * |        |          |Note2: Before setting this bit, it should wait for the RXIDLE (UART_FIFOSTS[29]) be set.
N     * |[2]     |TXRST     |TX Field Software Reset
N     * |        |          |When TXRST (UART_FIFO[2]) is set, all the byte in the transmit FIFO and TX internal state machine are cleared.
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the TX internal state machine and pointers.
N     * |        |          |Note1: This bit will automatically clear at least 3 UART peripheral clock cycles.
N     * |        |          |Note2: Before setting this bit, it should wait for the TXEMPTYF (UART_FIFOSTS[28]) be set.
N     * |[7:4]   |RFITL     |RX FIFO Interrupt Trigger Level
N     * |        |          |When the number of bytes in the receive FIFO equals the RFITL, the RDAIF (UART_INTSTS[0]) will be set (if RDAIEN (UART_INTEN [0]) enabled, and an interrupt will be generated).
N     * |        |          |0000 = RX FIFO Interrupt Trigger Level is 1 byte.
N     * |        |          |0001 = RX FIFO Interrupt Trigger Level is 4 bytes.
N     * |        |          |0010 = RX FIFO Interrupt Trigger Level is 8 bytes.
N     * |        |          |0011 = RX FIFO Interrupt Trigger Level is 14 bytes.
N     * |        |          |Others = Reserved.
N     * |[8]     |RXOFF     |Receiver Disable Bit
N     * |        |          |The receiver is disabled or not (set 1 to disable receiver).
N     * |        |          |0 = Receiver Enabled.
N     * |        |          |1 = Receiver Disabled.
N     * |        |          |Note: This bit is used for RS-485 Normal Multi-drop mode
N     * |        |          |It should be programmed before RS485NMM (UART_ALTCTL [8]) is programmed.
N     * |[19:16] |RTSTRGLV  |nRTS Trigger Level for Auto-flow Control Use
N     * |        |          |0000 = nRTS Trigger Level is 1 byte.
N     * |        |          |0001 = nRTS Trigger Level is 4 bytes.
N     * |        |          |0010 = nRTS Trigger Level is 8 bytes.
N     * |        |          |0011 = nRTS Trigger Level is 14 bytes.
N     * |        |          |Others = Reserved.
N     * |        |          |Note: This field is used for auto nRTS flow control.
N     * @var UART_T::LINE
N     * Offset: 0x0C  UART Line Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |WLS       |Word Length Selection
N     * |        |          |This field sets UART word length.
N     * |        |          |00 = 5 bits.
N     * |        |          |01 = 6 bits.
N     * |        |          |10 = 7 bits.
N     * |        |          |11 = 8 bits.
N     * |[2]     |NSB       |Number of "STOP Bit"
N     * |        |          |0 = One "STOP bit" is generated in the transmitted data.
N     * |        |          |1 = When select 5-bit word length, 1.5 "STOP bit" is generated in the transmitted data
N     * |        |          |When select 6-, 7- and 8-bit word length, 2 "STOP bit" is generated in the transmitted data.
N     * |[3]     |PBE       |Parity Bit Enable Bit
N     * |        |          |0 = Parity bit generated Disabled.
N     * |        |          |1 = Parity bit generated Enabled.
N     * |        |          |Note: Parity bit is generated on each outgoing character and is checked on each incoming data.
N     * |[4]     |EPE       |Even Parity Enable Bit
N     * |        |          |0 = Odd number of logic 1's is transmitted and checked in each word.
N     * |        |          |1 = Even number of logic 1's is transmitted and checked in each word.
N     * |        |          |Note: This bit has effect only when PBE (UART_LINE[3]) is set.
N     * |[5]     |SPE       |Stick Parity Enable Bit
N     * |        |          |0 = Stick parity Disabled.
N     * |        |          |1 = Stick parity Enabled.
N     * |        |          |Note: If PBE (UART_LINE[3]) and EPE (UART_LINE[4]) are logic 1, the parity bit is transmitted and checked as logic 0
N     * |        |          |If PBE (UART_LINE[3]) is 1 and EPE (UART_LINE[4]) is '0' then the parity bit is transmitted and checked as 1.
N     * |[6]     |BCB       |Break Control Bit
N     * |        |          |0 = Break Control Disabled.
N     * |        |          |1 = Break Control Enabled.
N     * |        |          |Note: When this bit is set to logic 1, the transmitted serial data output (TX) is forced to the Spacing State (logic 0)
N     * |        |          |This bit acts only on TX line and has no effect on the transmitter logic.
N     * |[7]     |PSS       |Parity Bit Source Selection
N     * |        |          |The parity bit can be selected to be generated and checked automatically or by software.
N     * |        |          |0 = Parity bit is generated by EPE (UART_LINE[4]) and SPE (UART_LINE[5]) setting and checked automatically.
N     * |        |          |1 = Parity bit generated and checked by software.
N     * |        |          |Note1: This bit has effect only when PBE (UART_LINE[3]) is set.
N     * |        |          |Note2: If PSS is 0, the parity bit is transmitted and checked automatically
N     * |        |          |If PSS is 1, the transmitted parity bit value can be determined by writing PARITY (UART_DAT[8]) and the parity bit can be read by reading PARITY (UART_DAT[8]).
N     * |[8]     |TXDINV    |TX Data Inverted
N     * |        |          |0 = Transmitted data signal inverted Disabled.
N     * |        |          |1 = Transmitted data signal inverted Enabled.
N     * |        |          |Note1: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * |        |          |Note2: This bit is valid when FUNCSEL (UART_FUNCSEL[1:0]) is select UART, LIN or RS485 function.
N     * |[9]     |RXDINV    |RX Data Inverted
N     * |        |          |0 = Received data signal inverted Disabled.
N     * |        |          |1 = Received data signal inverted Enabled.
N     * |        |          |Note1: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * |        |          |Note2: This bit is valid when FUNCSEL (UART_FUNCSEL[1:0]) is select UART, LIN or RS485 function.
N     * @var UART_T::MODEM
N     * Offset: 0x10  UART Modem Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |RTS       |nRTS (Request-to-send) Signal Control
N     * |        |          |This bit is direct control internal nRTS signal active or not, and then drive the nRTS pin output with RTSACTLV bit configuration.
N     * |        |          |0 = nRTS signal is active.
N     * |        |          |1 = nRTS signal is inactive.
N     * |        |          |Note1: This nRTS signal control bit is not effective when nRTS auto-flow control is enabled in UART function mode.
N     * |        |          |Note2: This nRTS signal control bit is not effective when RS-485 auto direction mode (AUD) is enabled in RS-485 function mode.
N     * |[9]     |RTSACTLV  |nRTS Pin Active Level
N     * |        |          |This bit defines the active level state of nRTS pin output.
N     * |        |          |0 = nRTS pin output is high level active.
N     * |        |          |1 = nRTS pin output is low level active. (Default)
N     * |        |          |Note1: Refer to Figure 6.16-13 and Figure 6.16-14 for UART function mode.
N     * |        |          |Note2: Refer to Figure 6.16-24 and Figure 6.16-25 for RS-485 function mode.
N     * |        |          |Note3: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * |[13]    |RTSSTS    |nRTS Pin Status (Read Only)
N     * |        |          |This bit mirror from nRTS pin output of voltage logic status.
N     * |        |          |0 = nRTS pin output is low level voltage logic state.
N     * |        |          |1 = nRTS pin output is high level voltage logic state.
N     * @var UART_T::MODEMSTS
N     * Offset: 0x14  UART Modem Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CTSDETF   |Detect nCTS State Change Flag
N     * |        |          |This bit is set whenever nCTS input has change state, and it will generate Modem interrupt to CPU when MODEMIEN (UART_INTEN [3]) is set to 1.
N     * |        |          |0 = nCTS input has not change state.
N     * |        |          |1 = nCTS input has change state.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[4]     |CTSSTS    |nCTS Pin Status (Read Only)
N     * |        |          |This bit mirror from nCTS pin input of voltage logic status.
N     * |        |          |0 = nCTS pin input is low level voltage logic state.
N     * |        |          |1 = nCTS pin input is high level voltage logic state.
N     * |        |          |Note: This bit echoes when UART controller peripheral clock is enabled, and nCTS multi-function port is selected.
N     * |[8]     |CTSACTLV  |nCTS Pin Active Level
N     * |        |          |This bit defines the active level state of nCTS pin input.
N     * |        |          |0 = nCTS pin input is high level active.
N     * |        |          |1 = nCTS pin input is low level active. (Default)
N     * |        |          |Note: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * @var UART_T::FIFOSTS
N     * Offset: 0x18  UART FIFO Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RXOVIF    |RX Overflow Error Interrupt Flag
N     * |        |          |This bit is set when RX FIFO overflow.
N     * |        |          |If the number of bytes of received data is greater than RX_FIFO (UART_DAT) size 16 bytes, this bit will be set.
N     * |        |          |0 = RX FIFO is not overflow.
N     * |        |          |1 = RX FIFO is overflow.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[1]     |ABRDIF    |Auto-baud Rate Detect Interrupt Flag
N     * |        |          |This bit is set to logic "1" when auto-baud rate detect function is finished.
N     * |        |          |0 = Auto-baud rate detect function is not finished.
N     * |        |          |1 = Auto-baud rate detect function is finished.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[2]     |ABRDTOIF  |Auto-baud Rate Detect Time-out Interrupt Flag
N     * |        |          |This bit is set to logic "1" in Auto-baud Rate Detect mode when the baud rate counter is overflow.
N     * |        |          |0 = Auto-baud rate counter is underflow.
N     * |        |          |1 = Auto-baud rate counter is overflow.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[3]     |ADDRDETF  |RS-485 Address Byte Detect Flag
N     * |        |          |0 = Receiver detects a data that is not an address bit (bit 9 ='0').
N     * |        |          |1 = Receiver detects a data that is an address bit (bit 9 ='1').
N     * |        |          |Note1: This field is used for RS-485 function mode and ADDRDEN (UART_ALTCTL[15]) is set to 1 to enable Address detection mode.
N     * |        |          |Note2: This bit can be cleared by writing "1" to it.
N     * |[4]     |PEF       |Parity Error Flag
N     * |        |          |This bit is set to logic 1 whenever the received character does not have a valid "parity bit".
N     * |        |          |0 = No parity error is generated.
N     * |        |          |1 = Parity error is generated.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[5]     |FEF       |Framing Error Flag
N     * |        |          |This bit is set to logic 1 whenever the received character does not have a valid "stop bit" (that is, the stop bit following the last data bit or parity bit is detected as logic 0).
N     * |        |          |0 = No framing error is generated.
N     * |        |          |1 = Framing error is generated.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[6]     |BIF       |Break Interrupt Flag
N     * |        |          |This bit is set to logic 1 whenever the received data input (RX) is held in the "spacing state" (logic 0) for longer than a full word transmission time (that is, the total time of "start bit" + data bits + parity + stop bits).
N     * |        |          |0 = No Break interrupt is generated.
N     * |        |          |1 = Break interrupt is generated.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[13:8]  |RXPTR     |RX FIFO Pointer (Read Only)
N     * |        |          |This field indicates the RX FIFO Buffer Pointer
N     * |        |          |When UART receives one byte from external device, RXPTR increases one
N     * |        |          |When one byte of RX FIFO is read by CPU, RXPTR decreases one.
N     * |        |          |The Maximum value shown in RXPTR is 15
N     * |        |          |When the using level of RX FIFO Buffer equal to 16, the RXFULL bit is set to 1 and RXPTR will show 0
N     * |        |          |As one byte of RX FIFO is read by CPU, the RXFULL bit is cleared to 0 and RXPTR will show 15
N     * |[14]    |RXEMPTY   |Receiver FIFO Empty (Read Only)
N     * |        |          |This bit initiate RX FIFO empty or not.
N     * |        |          |0 = RX FIFO is not empty.
N     * |        |          |1 = RX FIFO is empty.
N     * |        |          |Note: When the last byte of RX FIFO has been read by CPU, hardware sets this bit high
N     * |        |          |It will be cleared when UART receives any new data.
N     * |[15]    |RXFULL    |Receiver FIFO Full (Read Only)
N     * |        |          |This bit initiates RX FIFO full or not.
N     * |        |          |0 = RX FIFO is not full.
N     * |        |          |1 = RX FIFO is full.
N     * |        |          |Note: This bit is set when the number of usage in RX FIFO Buffer is equal to 16, otherwise it is cleared by hardware.
N     * |[21:16] |TXPTR     |TX FIFO Pointer (Read Only)
N     * |        |          |This field indicates the TX FIFO Buffer Pointer
N     * |        |          |When CPU writes one byte into UART_DAT, TXPTR increases one
N     * |        |          |When one byte of TX FIFO is transferred to Transmitter Shift Register, TXPTR decreases one.
N     * |        |          |The Maximum value shown in TXPTR is 15
N     * |        |          |When the using level of TX FIFO Buffer equal to 16, the TXFULL bit is set to 1 and TXPTR will show 0
N     * |        |          |As one byte of TX FIFO is transferred to Transmitter Shift Register, the TXFULL bit is cleared to 0 and TXPTR will show 15
N     * |[22]    |TXEMPTY   |Transmitter FIFO Empty (Read Only)
N     * |        |          |This bit indicates TX FIFO empty or not.
N     * |        |          |0 = TX FIFO is not empty.
N     * |        |          |1 = TX FIFO is empty.
N     * |        |          |Note: When the last byte of TX FIFO has been transferred to Transmitter Shift Register, hardware sets this bit high
N     * |        |          |It will be cleared when writing data into UART_DAT (TX FIFO not empty).
N     * |[23]    |TXFULL    |Transmitter FIFO Full (Read Only)
N     * |        |          |This bit indicates TX FIFO full or not.
N     * |        |          |0 = TX FIFO is not full.
N     * |        |          |1 = TX FIFO is full.
N     * |        |          |Note: This bit is set when the number of usage in TX FIFO Buffer is equal to 16, otherwise it is cleared by hardware.
N     * |[24]    |TXOVIF    |TX Overflow Error Interrupt Flag
N     * |        |          |If TX FIFO (UART_DAT) is full, an additional write to UART_DAT will cause this bit to logic 1.
N     * |        |          |0 = TX FIFO is not overflow.
N     * |        |          |1 = TX FIFO is overflow.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[28]    |TXEMPTYF  |Transmitter Empty Flag (Read Only)
N     * |        |          |This bit is set by hardware when TX FIFO (UART_DAT) is empty and the STOP bit of the last byte has been transmitted.
N     * |        |          |0 = TX FIFO is not empty or the STOP bit of the last byte has been not transmitted.
N     * |        |          |1 = TX FIFO is empty and the STOP bit of the last byte has been transmitted.
N     * |        |          |Note: This bit is cleared automatically when TX FIFO is not empty or the last byte transmission has not completed.
N     * |[29]    |RXIDLE    |RX Idle Status (Read Only)
N     * |        |          |This bit is set by hardware when RX is idle.
N     * |        |          |0 = RX is busy.
N     * |        |          |1 = RX is idle. (Default)
N     * |[31]    |TXRXACT   |TX and RX Active Status (Read Only)
N     * |        |          |This bit indicates TX and RX are active or inactive.
N     * |        |          |0 = TX and RX are inactive.
N     * |        |          |1 = TX and RX are active. (Default)
N     * |        |          |Note: When TXRXDIS (UART_FUNCSEL[3]) is set and both TX and RX are in idle state, this bit is cleared
N     * |        |          |The UART controller can not transmit or receive data at this moment
N     * |        |          |Otherwise this bit is set.
N     * @var UART_T::INTSTS
N     * Offset: 0x1C  UART Interrupt Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RDAIF     |Receive Data Available Interrupt Flag (Read Only)
N     * |        |          |When the number of bytes in the RX FIFO equals the RFITL then the RDAIF(UART_INTSTS[0]) will be set
N     * |        |          |If RDAIEN (UART_INTEN [0]) is enabled, the RDA interrupt will be generated.
N     * |        |          |0 = No RDA interrupt flag is generated.
N     * |        |          |1 = RDA interrupt flag is generated.
N     * |        |          |Note: This bit is read only and it will be cleared when the number of unread bytes of RX FIFO drops below the threshold level (RFITL(UART_FIFO[7:4]).
N     * |[1]     |THREIF    |Transmit Holding Register Empty Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the last data of TX FIFO is transferred to Transmitter Shift Register
N     * |        |          |If THREIEN (UART_INTEN[1]) is enabled, the THRE interrupt will be generated.
N     * |        |          |0 = No THRE interrupt flag is generated.
N     * |        |          |1 = THRE interrupt flag is generated.
N     * |        |          |Note: This bit is read only and it will be cleared when writing data into UART_DAT (TX FIFO not empty).
N     * |[2]     |RLSIF     |Receive Line Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the RX receive data have parity error, frame error or break error (at least one of 3 bits, BIF(UART_FIFOSTS[6]), FEF(UART_FIFOSTS[5]) and PEF(UART_FIFOSTS[4]), is set)
N     * |        |          |If RLSIEN (UART_INTEN [2]) is enabled, the RLS interrupt will be generated.
N     * |        |          |0 = No RLS interrupt flag is generated.
N     * |        |          |1 = RLS interrupt flag is generated.
N     * |        |          |Note1: In RS-485 function mode, this field is set include "receiver detect and received address byte character (bit9 = '1') bit"
N     * |        |          |At the same time, the bit of ADDRDETF (UART_FIFOSTS[3]) is also set.
N     * |        |          |Note2: This bit is read only and reset to 0 when all bits of BIF (UART_FIFOSTS[6]), FEF(UART_FIFOSTS[5]) and PEF(UART_FIFOSTS[4]) are cleared.
N     * |        |          |Note3: In RS-485 function mode, this bit is read only and reset to 0 when all bits of BIF (UART_FIFOSTS[6]) , FEF(UART_FIFOSTS[5]), PEF(UART_FIFOSTS[4]) and ADDRDETF (UART_FIFOSTS[3]) are cleared.
N     * |[3]     |MODEMIF   |MODEM Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the nCTS pin has state change (CTSDETF (UART_MODEMSTS[0]) = 1)
N     * |        |          |If MODEMIEN (UART_INTEN [3]) is enabled, the Modem interrupt will be generated.
N     * |        |          |0 = No Modem interrupt flag is generated.
N     * |        |          |1 = Modem interrupt flag is generated.
N     * |        |          |Note: This bit is read only and reset to 0 when bit CTSDETF is cleared by a write 1 on CTSDETF(UART_MODEMSTS[0]).
N     * |[4]     |RXTOIF    |RX Time-out Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the RX FIFO is not empty, RX does not receive data and the time-out counter equal to TOIC (UART_TOUT[7:0])
N     * |        |          |If RXTOIEN (UART_INTEN [4]) is enabled, the RX time-out interrupt will be generated.
N     * |        |          |0 = No RX time-out interrupt flag is generated.
N     * |        |          |1 = RX time-out interrupt flag is generated.
N     * |        |          |Note1: This bit is read only and user can read UART_DAT (RX is in active) to clear it.
N     * |        |          |Note2: This bit is set once if RX does not receive data after this bis is clear.
N     * |[5]     |BUFERRIF  |Buffer Error Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the TX FIFO or RX FIFO overflows (TXOVIF (UART_FIFOSTS[24]) or RXOVIF (UART_FIFOSTS[0]) is set)
N     * |        |          |When BUFERRIF (UART_INTSTS[5]) is set, the transfer is not correct
N     * |        |          |If BUFERRIEN (UART_INTEN [5]) is enabled, the buffer error interrupt will be generated.
N     * |        |          |0 = No buffer error interrupt flag is generated.
N     * |        |          |1 = Buffer error interrupt flag is generated.
N     * |        |          |Note: This bit is cleared if both of RXOVIF(UART_FIFOSTS[0]) and TXOVIF(UART_FIFOSTS[24]) are cleared to 0 by writing 1 to RXOVIF(UART_FIFOSTS[0]) and TXOVIF(UART_FIFOSTS[24]).
N     * |[6]     |WKIF      |UART Wake-up Interrupt Flag (Read Only)
N     * |        |          |This bit is set when TOUTWKF (UART_WKSTS[4]), RS485WKF (UART_WKSTS[3]), RFRTWKF (UART_WKSTS[2]), DATWKF (UART_WKSTS[1]) or CTSWKF(UART_WKSTS[0]) is set to 1.
N     * |        |          |0 = No UART wake-up interrupt flag is generated.
N     * |        |          |1 = UART wake-up interrupt flag is generated.
N     * |        |          |Note: This bit is cleared if all of TOUTWKF, RS485WKF, RFRTWKF, DATWKF and CTSWKF are cleared to 0 by writing 1 to the corresponding interrupt flag.
N     * |[7]     |LINIF     |LIN Bus Interrupt Flag
N     * |        |          |This bit is set when LIN slave header detect (SLVHDETF (UART_LINSTS[0] =1)), LIN break detect (BRKDETF(UART_LINSTS[8]=1)), bit error detect (BITEF(UART_LINSTS[9]=1)), LIN slave ID parity error (SLVIDPEF(UART_LINSTS[2] = 1)) or LIN slave header error detect (SLVHEF (UART_LINSTS[1]))
N     * |        |          |If LINIEN (UART_INTEN [8]) is enabled the LIN interrupt will be generated.
N     * |        |          |0 = None of SLVHDETF, BRKDETF, BITEF, SLVIDPEF and SLVHEF is generated.
N     * |        |          |1 = At least one of SLVHDETF, BRKDETF, BITEF, SLVIDPEF and SLVHEF is generated.
N     * |        |          |Note: This bit is cleared when SLVHDETF(UART_LINSTS[0]), BRKDETF(UART_LINSTS[8]), BITEF(UART_LINSTS[9]), SLVIDPEF (UART_LINSTS[2]) and SLVHEF(UART_LINSTS[1]) all are cleared and software writing '1' to LINIF(UART_INTSTS[7]).
N     * |[8]     |RDAINT    |Receive Data Available Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if RDAIEN (UART_INTEN[0]) and RDAIF (UART_INTSTS[0]) are both set to 1.
N     * |        |          |0 = No RDA interrupt is generated.
N     * |        |          |1 = RDA interrupt is generated.
N     * |[9]     |THREINT   |Transmit Holding Register Empty Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if THREIEN (UART_INTEN[1]) and THREIF(UART_INTSTS[1]) are both set to 1.
N     * |        |          |0 = No THRE interrupt is generated.
N     * |        |          |1 = THRE interrupt is generated.
N     * |[10]    |RLSINT    |Receive Line Status Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if RLSIEN (UART_INTEN[2]) and RLSIF(UART_INTSTS[2]) are both set to 1.
N     * |        |          |0 = No RLS interrupt is generated.
N     * |        |          |1 = RLS interrupt is generated.
N     * |[11]    |MODEMINT  |MODEM Status Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if MODEMIEN(UART_INTEN[3]) and MODEMIF(UART_INTSTS[3]) are both set to 1
N     * |        |          |0 = No Modem interrupt is generated.
N     * |        |          |1 = Modem interrupt is generated.
N     * |[12]    |RXTOINT   |RX Time-out Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if RXTOIEN (UART_INTEN[4]) and RXTOIF(UART_INTSTS[4]) are both set to 1.
N     * |        |          |0 = No RX time-out interrupt is generated.
N     * |        |          |1 = RX time-out interrupt is generated.
N     * |[13]    |BUFERRINT |Buffer Error Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if BUFERRIEN(UART_INTEN[5]) and BUFERRIF(UART_ INTSTS[5]) are both set to 1.
N     * |        |          |0 = No buffer error interrupt is generated.
N     * |        |          |1 = Buffer error interrupt is generated.
N     * |[14]    |WKINT     |UART Wake-up Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if WKIEN (UART_INTEN[6]) and WKIF (UART_INTSTS[6]) are both set to 1.
N     * |        |          |0 = No UART wake-up interrupt is generated.
N     * |        |          |1 = UART wake-up interrupt is generated.
N     * |[15]    |LININT    |LIN Bus Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if LINIEN (UART_INTEN[8]) and LINIF(UART_INTSTS[7]) are both set to 1.
N     * |        |          |0 = No LIN Bus interrupt is generated.
N     * |        |          |1 = The LIN Bus interrupt is generated.
N     * |[18]    |HWRLSIF   |PDMA Mode Receive Line Status Flag (Read Only)
N     * |        |          |This bit is set when the RX receive data have parity error, frame error or break error (at least one of 3 bits, BIF (UART_FIFOSTS[6]), FEF (UART_FIFOSTS[5]) and PEF (UART_FIFOSTS[4]) is set)
N     * |        |          |If RLSIEN (UART_INTEN [2]) is enabled, the RLS interrupt will be generated.
N     * |        |          |0 = No RLS interrupt flag is generated in PDMA mode.
N     * |        |          |1 = RLS interrupt flag is generated in PDMA mode.
N     * |        |          |Note1: In RS-485 function mode, this field include "receiver detect any address byte received address byte character (bit9 = '1') bit".
N     * |        |          |Note2: In UART function mode, this bit is read only and reset to 0 when all bits of BIF(UART_FIFOSTS[6]) , FEF(UART_FIFOSTS[5]) and PEF(UART_FIFOSTS[4]) are cleared.
N     * |        |          |Note3: In RS-485 function mode, this bit is read only and reset to 0 when all bits of BIF(UART_FIFOSTS[6]), FEF(UART_FIFOSTS[5]), PEF(UART_FIFOSTS[4]) and ADDRDETF (UART_FIFOSTS[3]) are cleared
N     * |[19]    |HWMODIF   |PDMA Mode MODEM Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the nCTS pin has state change (CTSDETF (UART_MODEMSTS [0] =1))
N     * |        |          |If MODEMIEN (UART_INTEN [3]) is enabled, the Modem interrupt will be generated.
N     * |        |          |0 = No Modem interrupt flag is generated in PDMA mode.
N     * |        |          |1 = Modem interrupt flag is generated in PDMA mode.
N     * |        |          |Note: This bit is read only and reset to 0 when the bit CTSDETF (UART_MODEMSTS[0]) is cleared by writing 1 on CTSDETF (UART_MODEMSTS [0]).
N     * |[20]    |HWTOIF    |PDMA Mode RX Time-out Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the RX FIFO is not empty and no activities occurred in the RX FIFO and the time-out counter equal to TOIC (UART_TOUT[7:0])
N     * |        |          |If RXTOIEN (UART_INTEN [4]) is enabled, the RX time-out interrupt will be generated .
N     * |        |          |0 = No RX time-out interrupt flag is generated in PDMA mode.
N     * |        |          |1 = RX time-out interrupt flag is generated in PDMA mode.
N     * |        |          |Note: This bit is read only and user can read UART_DAT (RX is in active) to clear it.
N     * |[21]    |HWBUFEIF  |PDMA Mode Buffer Error Interrupt Flag (Read Only)
N     * |        |          |This bit is set when the TX or RX FIFO overflows (TXOVIF (UART_FIFOSTS [24]) or RXOVIF (UART_FIFOSTS[0]) is set)
N     * |        |          |When BUFERRIF (UART_INTSTS[5]) is set, the transfer maybe is not correct
N     * |        |          |If BUFERRIEN (UART_INTEN [5]) is enabled, the buffer error interrupt will be generated.
N     * |        |          |0 = No buffer error interrupt flag is generated in PDMA mode.
N     * |        |          |1 = Buffer error interrupt flag is generated in PDMA mode.
N     * |        |          |Note: This bit is cleared when both TXOVIF (UART_FIFOSTS[24]]) and RXOVIF (UART_FIFOSTS[0]) are cleared.
N     * |[22]    |TXENDIF   |Transmitter Empty Interrupt Flag
N     * |        |          |This bit is set when TX FIFO (UART_DAT) is empty and the STOP bit of the last byte has been transmitted (TXEMPTYF (UART_FIFOSTS[28]) is set)
N     * |        |          |If TXENDIEN (UART_INTEN[22]) is enabled, the Transmitter Empty interrupt will be generated.
N     * |        |          |0 = No transmitter empty interrupt flag is generated.
N     * |        |          |1 = Transmitter empty interrupt flag is generated.
N     * |        |          |Note: This bit is cleared automatically when TX FIFO is not empty or the last byte transmission has not completed.
N     * |[26]    |HWRLSINT  |PDMA Mode Receive Line Status Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if RLSIEN (UART_INTEN[2]) and HWRLSIF(UART_INTSTS[18]) are both set to 1.
N     * |        |          |0 = No RLS interrupt is generated in PDMA mode.
N     * |        |          |1 = RLS interrupt is generated in PDMA mode.
N     * |[27]    |HWMODINT  |PDMA Mode MODEM Status Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if MODEMIEN (UART_INTEN[3]) and HWMODIF(UART_INTSTS[19]) are both set to 1.
N     * |        |          |0 = No Modem interrupt is generated inP DMA mode.
N     * |        |          |1 = Modem interrupt is generated in PDMA mode.
N     * |[28]    |HWTOINT   |PDMA Mode RX Time-out Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if RXTOIEN (UART_INTEN[4]) and HWTOIF(UART_INTSTS[20]) are both set to 1.
N     * |        |          |0 = No RX time-out interrupt is generated in PDMA mode.
N     * |        |          |1 = RX time-out interrupt is generated in PDMA mode.
N     * |[29]    |HWBUFEINT |PDMA Mode Buffer Error Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if BUFERRIEN (UART_INTEN[5]) and HWBUFEIF (UART_INTSTS[21]) are both set to 1.
N     * |        |          |0 = No buffer error interrupt is generated in PDMA mode.
N     * |        |          |1 = Buffer error interrupt is generated in PDMA mode.
N     * |[30]    |TXENDINT  |Transmitter Empty Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if TXENDIEN (UART_INTEN[22]) and TXENDIF(UART_INTSTS[22]) are both set to 1.
N     * |        |          |0 = No Transmitter Empty interrupt is generated.
N     * |        |          |1 = Transmitter Empty interrupt is generated.
N     * |[31]    |ABRINT    |Auto-baud Rate Interrupt Indicator (Read Only)
N     * |        |          |This bit is set if ABRIEN (UART_INTEN[18]) and ABRIF (UART_ALTCTL[17]) are both set to 1.
N     * |        |          |0 = No Auto-baud Rate interrupt is generated.
N     * |        |          |1 = The Auto-baud Rate interrupt is generated.
N     * @var UART_T::TOUT
N     * Offset: 0x20  UART Time-out Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7:0]   |TOIC      |Time-out Interrupt Comparator
N     * |        |          |The time-out counter resets and starts counting (the counting clock = baud rate) whenever the RX FIFO receives a new data word if time out counter is enabled by setting TOCNTEN (UART_INTEN[11])
N     * |        |          |Once the content of time-out counter is equal to that of time-out interrupt comparator (TOIC (UART_TOUT[7:0])), a receiver time-out interrupt (RXTOINT(UART_INTSTS[12])) is generated if RXTOIEN (UART_INTEN [4]) enabled
N     * |        |          |A new incoming data word or RX FIFO empty will clear RXTOIF (UART_INTSTS[4])
N     * |        |          |In order to avoid receiver time-out interrupt generation immediately during one character is being received, TOIC value should be set between 40 and 255
N     * |        |          |So, for example, if TOIC is set with 40, the time-out interrupt is generated after four characters are not received when 1 stop bit and no parity check is set for UART transfer.
N     * |[15:8]  |DLY       |TX Delay Time Value
N     * |        |          |This field is used to programming the transfer delay time between the last stop bit and next start bit
N     * |        |          |The unit is bit time.
N     * @var UART_T::BAUD
N     * Offset: 0x24  UART Baud Rate Divider Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |BRD       |Baud Rate Divider
N     * |        |          |The field indicates the baud rate divider
N     * |        |          |This filed is used in baud rate calculation
N     * |        |          |The detail description is shown in Table 6.16-3.
N     * |[27:24] |EDIVM1    |Extra Divider for BAUD Rate Mode 1
N     * |        |          |This field is used for baud rate calculation in mode 1 and has no effect for baud rate calculation in Mode 0 and Mode 2
N     * |        |          |The detail description is shown in Table 6.16-3
N     * |[28]    |BAUDM0    |BAUD Rate Mode Selection Bit 0
N     * |        |          |This bit is baud rate mode selection bit 0
N     * |        |          |UART provides three baud rate calculation modes
N     * |        |          |This bit combines with BAUDM1 (UART_BAUD[29]) to select baud rate calculation mode
N     * |        |          |The detail description is shown in Table 6.16-3.
N     * |[29]    |BAUDM1    |BAUD Rate Mode Selection Bit 1
N     * |        |          |This bit is baud rate mode selection bit 1
N     * |        |          |UART provides three baud rate calculation modes
N     * |        |          |This bit combines with BAUDM0 (UART_BAUD[28]) to select baud rate calculation mode
N     * |        |          |The detail description is shown in Table 6.16-3.
N     * |        |          |Note: In IrDA mode must be operated in mode 0.
N     * @var UART_T::IRDA
N     * Offset: 0x28  UART IrDA Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TXEN      |IrDA Receiver/Transmitter Selection Enable Bit
N     * |        |          |0 = IrDA Transmitter Disabled and Receiver Enabled. (Default)
N     * |        |          |1 = IrDA Transmitter Enabled and Receiver Disabled.
N     * |        |          |Note: In IrDA mode, the BAUDM1 (UART_BAUD [29]) register must be disabled, the baud equation must be Clock / (16 * (BRD + 2)).
N     * |[5]     |TXINV     |IrDA Inverse Transmitting Output Signal
N     * |        |          |0 = None inverse transmitting signal. (Default).
N     * |        |          |1 = Inverse transmitting output signal.
N     * |        |          |Note1: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * |        |          |Note2: This bit is valid when FUNCSEL (UART_FUNCSEL[1:0]) is select IrDA function.
N     * |[6]     |RXINV     |IrDA Inverse Receive Input Signal
N     * |        |          |0 = None inverse receiving input signal.
N     * |        |          |1 = Inverse receiving input signal. (Default)
N     * |        |          |Note1: Before setting this bit, TXRXDIS (UART_FUNCSEL[3]) should be set then waited for TXRXACT (UART_FIFOSTS[31]) is cleared
N     * |        |          |When the configuration is done, cleared TXRXDIS (UART_FUNCSEL[3]) to activate UART controller.
N     * |        |          |Note2: This bit is valid when FUNCSEL (UART_FUNCSEL[1:0]) is select IrDA function.
N     * @var UART_T::ALTCTL
N     * Offset: 0x2C  UART Alternate Control/Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |BRKFL     |UART LIN Break Field Length
N     * |        |          |This field indicates a 4-bit LIN TX break field count.
N     * |        |          |Note1: This break field length is BRKFL + 1.
N     * |        |          |Note2: According to LIN spec, the reset value is 0xC (break field length = 13).
N     * |[6]     |LINRXEN   |LIN RX Enable Bit
N     * |        |          |0 = LIN RX mode Disabled.
N     * |        |          |1 = LIN RX mode Enabled.
N     * |[7]     |LINTXEN   |LIN TX Break Mode Enable Bit
N     * |        |          |0 = LIN TX Break mode Disabled.
N     * |        |          |1 = LIN TX Break mode Enabled.
N     * |        |          |Note: When TX break field transfer operation finished, this bit will be cleared automatically.
N     * |[8]     |RS485NMM  |RS-485 Normal Multi-drop Operation Mode (NMM)
N     * |        |          |0 = RS-485 Normal Multi-drop Operation mode (NMM) Disabled.
N     * |        |          |1 = RS-485 Normal Multi-drop Operation mode (NMM) Enabled.
N     * |        |          |Note: It cannot be active with RS-485_AAD operation mode.
N     * |[9]     |RS485AAD  |RS-485 Auto Address Detection Operation Mode (AAD)
N     * |        |          |0 = RS-485 Auto Address Detection Operation mode (AAD) Disabled.
N     * |        |          |1 = RS-485 Auto Address Detection Operation mode (AAD) Enabled.
N     * |        |          |Note: It cannot be active with RS-485_NMM operation mode.
N     * |[10]    |RS485AUD  |RS-485 Auto Direction Function (AUD)
N     * |        |          |0 = RS-485 Auto Direction Operation function (AUD) Disabled.
N     * |        |          |1 = RS-485 Auto Direction Operation function (AUD) Enabled.
N     * |        |          |Note: It can be active with RS-485_AAD or RS-485_NMM operation mode.
N     * |[15]    |ADDRDEN   |RS-485 Address Detection Enable Bit
N     * |        |          |This bit is used to enable RS-485 Address Detection mode.
N     * |        |          |0 = Address detection mode Disabled.
N     * |        |          |1 = Address detection mode Enabled.
N     * |        |          |Note: This bit is used for RS-485 any operation mode.
N     * |[17]    |ABRIF     |Auto-baud Rate Interrupt Flag (Read Only)
N     * |        |          |This bit is set when auto-baud rate detection function finished or the auto-baud rate counter was overflow and if ABRIEN(UART_INTEN [18]) is set then the auto-baud rate interrupt will be generated.
N     * |        |          |0 = No auto-baud rate interrupt flag is generated.
N     * |        |          |1 = Auto-baud rate interrupt flag is generated.
N     * |        |          |Note: This bit is read only, but it can be cleared by writing "1" to ABRDTOIF (UART_FIFOSTS[2]) and ABRDIF(UART_FIFOSTS[1])
N     * |[18]    |ABRDEN    |Auto-baud Rate Detect Enable Bit
N     * |        |          |0 = Auto-baud rate detect function Disabled.
N     * |        |          |1 = Auto-baud rate detect function Enabled.
N     * |        |          |Note : This bit is cleared automatically after auto-baud detection is finished.
N     * |[20:19] |ABRDBITS  |Auto-baud Rate Detect Bit Length
N     * |        |          |00 = 1-bit time from Start bit to the 1st rising edge. The input pattern shall be 0x01.
N     * |        |          |01 = 2-bit time from Start bit to the 1st rising edge. The input pattern shall be 0x02.
N     * |        |          |10 = 4-bit time from Start bit to the 1st rising edge. The input pattern shall be 0x08.
N     * |        |          |11 = 8-bit time from Start bit to the 1st rising edge. The input pattern shall be 0x80.
N     * |        |          |Note : The calculation of bit number includes the START bit.
N     * |[31:24] |ADDRMV    |Address Match Value
N     * |        |          |This field contains the RS-485 address match values.
N     * |        |          |Note: This field is used for RS-485 auto address detection mode.
N     * @var UART_T::FUNCSEL
N     * Offset: 0x30  UART Function Select Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |FUNCSEL   |Function Select
N     * |        |          |00 = UART function.
N     * |        |          |01 = LIN function.
N     * |        |          |10 = IrDA function.
N     * |        |          |11 = RS-485 function.
N     * |[3]     |TXRXDIS   |TX and RX Disable Bit
N     * |        |          |Setting this bit can disable TX and RX.
N     * |        |          |0 = TX and RX Enabled.
N     * |        |          |1 = TX and RX Disabled.
N     * |        |          |Note: The TX and RX will not disable immediately when this bit is set
N     * |        |          |The TX and RX compelet current task before disable TX and RX
N     * |        |          |When TX and RX disable, the TXRXACT (UART_FIFOSTS[31]) is cleared.
N     * @var UART_T::LINCTL
N     * Offset: 0x34  UART LIN Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SLVEN     |LIN Slave Mode Enable Bit
N     * |        |          |0 = LIN slave mode Disabled.
N     * |        |          |1 = LIN slave mode Enabled.
N     * |[1]     |SLVHDEN   |LIN Slave Header Detection Enable Bit
N     * |        |          |0 = LIN slave header detection Disabled.
N     * |        |          |1 = LIN slave header detection Enabled.
N     * |        |          |Note1: This bit only valid when in LIN slave mode (SLVEN (UART_LINCTL[0]) = 1).
N     * |        |          |Note2: In LIN function mode, when detect header field (break + sync + frame ID), SLVHDETF (UART_LINSTS [0]) flag will be asserted
N     * |        |          |If the LINIEN (UART_INTEN[8]) = 1, an interrupt will be generated.
N     * |[2]     |SLVAREN   |LIN Slave Automatic Resynchronization Mode Enable Bit
N     * |        |          |0 = LIN automatic resynchronization Disabled.
N     * |        |          |1 = LIN automatic resynchronization Enabled.
N     * |        |          |Note1: This bit only valid when in LIN slave mode (SLVEN (UART_LINCTL[0]) = 1).
N     * |        |          |Note2: When operation in Automatic Resynchronization mode, the baud rate setting must be mode2 (BAUDM1 (UART_BAUD [29]) and BAUDM0 (UART_BAUD [28]) must be 1).
N     * |        |          |Note3: The control and interactions of this field are explained in 6.16.5.10 (Slave mode with automatic resynchronization).
N     * |[3]     |SLVDUEN   |LIN Slave Divider Update Method Enable Bit
N     * |        |          |0 = UART_BAUD updated is written by software (if no automatic resynchronization update occurs at the same time).
N     * |        |          |1 = UART_BAUD is updated at the next received character
N     * |        |          |User must set the bit before checksum reception.
N     * |        |          |Note1: This bit only valid when in LIN slave mode (SLVEN (UART_LINCTL[0]) = 1).
N     * |        |          |Note2: This bit used for LIN Slave Automatic Resynchronization mode
N     * |        |          |(for Non-Automatic Resynchronization mode, this bit should be kept cleared)
N     * |        |          |Note3: The control and interactions of this field are explained in 6.16.5.10 (Slave mode with automatic resynchronization).
N     * |[4]     |MUTE      |LIN Mute Mode Enable Bit
N     * |        |          |0 = LIN mute mode Disabled.
N     * |        |          |1 = LIN mute mode Enabled.
N     * |        |          |Note: The exit from mute mode condition and each control and interactions of this field are explained in 6.16.5.10 (LIN slave mode).
N     * |[8]     |SENDH     |LIN TX Send Header Enable Bit
N     * |        |          |The LIN TX header can be "break field" or "break and sync field" or "break, sync and frame ID field", it is depend on setting HSEL (UART_LINCTL[23:22]).
N     * |        |          |0 = Send LIN TX header Disabled.
N     * |        |          |1 = Send LIN TX header Enabled.
N     * |        |          |Note1: This bit is shadow bit of LINTXEN (UART_ALTCTL [7]); user can read/write it by setting LINTXEN (UART_ALTCTL [7]) or SENDH (UART_LINCTL [8]).
N     * |        |          |Note2: When transmitter header field (it may be "break" or "break + sync" or "break + sync + frame ID" selected by HSEL (UART_LINCTL[23:22]) field) transfer operation finished, this bit will be cleared automatically.
N     * |[9]     |IDPEN     |LIN ID Parity Enable Bit
N     * |        |          |0 = LIN frame ID parity Disabled.
N     * |        |          |1 = LIN frame ID parity Enabled.
N     * |        |          |Note1: This bit can be used for LIN master to sending header field (SENDH (UART_LINCTL[8])) = 1 and HSEL (UART_LINCTL[23:22]) = 10 or be used for enable LIN slave received frame ID parity checked.
N     * |        |          |Note2: This bit is only used when the operation header transmitter is in HSEL (UART_LINCTL[23:22]) = 10
N     * |[10]    |BRKDETEN  |LIN Break Detection Enable Bit
N     * |        |          |When detect consecutive dominant greater than 11 bits, and are followed by a delimiter character, the BRKDETF (UART_LINSTS[8]) flag is set at the end of break field
N     * |        |          |If the LINIEN (UART_INTEN [8])=1, an interrupt will be generated.
N     * |        |          |0 = LIN break detection Disabled .
N     * |        |          |1 = LIN break detection Enabled.
N     * |[11]    |LINRXOFF  |LIN Receiver Disable Bit
N     * |        |          |If the receiver is enabled (LINRXOFF (UART_LINCTL[11] ) = 0), all received byte data will be accepted and stored in the RX FIFO, and if the receiver is disabled (LINRXOFF (UART_LINCTL[11] = 1), all received byte data will be ignore.
N     * |        |          |0 = LIN receiver Enabled.
N     * |        |          |1 = LIN receiver Disabled.
N     * |        |          |Note: This bit is only valid when operating in LIN function mode (FUNCSEL (UART_FUNCSEL[1:0]) = 01).
N     * |[12]    |BITERREN  |Bit Error Detect Enable Bit
N     * |        |          |0 = Bit error detection function Disabled.
N     * |        |          |1 = Bit error detection function Enabled.
N     * |        |          |Note: In LIN function mode, when occur bit error, the BITEF (UART_LINSTS[9]) flag will be asserted
N     * |        |          |If the LINIEN (UART_INTEN[8]) = 1, an interrupt will be generated.
N     * |[19:16] |BRKFL     |LIN Break Field Length
N     * |        |          |This field indicates a 4-bit LIN TX break field count.
N     * |        |          |Note1: These registers are shadow registers of BRKFL (UART_ALTCTL[3:0]), User can read/write it by setting BRKFL (UART_ALTCTL[3:0]) or BRKFL (UART_LINCTL[19:16]).
N     * |        |          |Note2: This break field length is BRKFL + 1.
N     * |        |          |Note3: According to LIN spec, the reset value is 12 (break field length = 13).
N     * |[21:20] |BSL       |LIN Break/Sync Delimiter Length
N     * |        |          |00 = The LIN break/sync delimiter length is 1-bit time.
N     * |        |          |01 = The LIN break/sync delimiter length is 2-bit time.
N     * |        |          |10 = The LIN break/sync delimiter length is 3-bit time.
N     * |        |          |11 = The LIN break/sync delimiter length is 4-bit time.
N     * |        |          |Note: This bit used for LIN master to sending header field.
N     * |[23:22] |HSEL      |LIN Header Select
N     * |        |          |00 = The LIN header includes "break field".
N     * |        |          |01 = The LIN header includes "break field" and "sync field".
N     * |        |          |10 = The LIN header includes "break field", "sync field" and "frame ID field".
N     * |        |          |11 = Reserved.
N     * |        |          |Note: This bit is used to master mode for LIN to send header field (SENDH (UART_LINCTL [8]) = 1) or used to slave to indicates exit from mute mode condition (MUTE (UART_LINCTL[4] = 1).
N     * |[31:24] |PID       |LIN PID Bits
N     * |        |          |This field contains the LIN frame ID value when in LIN function mode, the frame ID parity can be generated by software or hardware depends on IDPEN (UART_LINCTL[9]) = 1.
N     * |        |          |If the parity generated by hardware, user fill ID0~ID5 (PID [29:24] ), hardware will calculate P0 (PID[30]) and P1 (PID[31]), otherwise user must filled frame ID and parity in this field.
N     * |        |          |Note1: User can fill any 8-bit value to this field and the bit 24 indicates ID0 (LSB first).
N     * |        |          |Note2: This field can be used for LIN master mode or slave mode.
N     * @var UART_T::LINSTS
N     * Offset: 0x38  UART LIN Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SLVHDETF  |LIN Slave Header Detection Flag
N     * |        |          |This bit is set by hardware when a LIN header is detected in LIN slave mode and be cleared by writing 1 to it.
N     * |        |          |0 = LIN header not detected.
N     * |        |          |1 = LIN header detected (break + sync + frame ID).
N     * |        |          |Note1: This bit can be cleared by writing 1 to it.
N     * |        |          |Note2: This bit is only valid when in LIN slave mode (SLVEN (UART_LINCTL [0]) = 1) and enable LIN slave header detection function (SLVHDEN (UART_LINCTL [1])).
N     * |        |          |Note3: When enable ID parity check IDPEN (UART_LINCTL [9]), if hardware detect complete header ("break + sync + frame ID"), the SLVHDETF will be set whether the frame ID correct or not.
N     * |[1]     |SLVHEF    |LIN Slave Header Error Flag
N     * |        |          |This bit is set by hardware when a LIN header error is detected in LIN slave mode and be cleared by writing 1 to it
N     * |        |          |The header errors include "break delimiter is too short (less than 0.5 bit time)", "frame error in sync field or Identifier field", "sync field data is not 0x55 in Non-Automatic Resynchronization mode", "sync field deviation error with Automatic Resynchronization mode", "sync field measure time-out with "Automatic Resynchronization mode" and "LIN header reception time-out".
N     * |        |          |0 = LIN header error not detected.
N     * |        |          |1 = LIN header error detected.
N     * |        |          |Note1: This bit can be cleared by writing 1 to it.
N     * |        |          |Note2: This bit is only valid when UART is operated in LIN slave mode (SLVEN (UART_LINCTL [0]) = 1) and enables LIN slave header detection function (SLVHDEN (UART_LINCTL [1])).
N     * |[2]     |SLVIDPEF  |LIN Slave ID Parity Error Flag
N     * |        |          |This bit is set by hardware when receipted frame ID parity is not correct.
N     * |        |          |0 = No active.
N     * |        |          |1 = Receipted frame ID parity is not correct.
N     * |        |          |Note1: This bit can be cleared by writing 1 to it.
N     * |        |          |Note2: This bit is only valid when in LIN slave mode (SLVEN (UART_LINCTL [0])= 1) and enable LIN frame ID parity check function IDPEN (UART_LINCTL [9]).
N     * |[3]     |SLVSYNCF  |LIN Slave Sync Field
N     * |        |          |This bit indicates that the LIN sync field is being analyzed in Automatic Resynchronization mode
N     * |        |          |When the receiver header have some error been detect, user must reset the internal circuit to re-search new frame header by writing 1 to this bit.
N     * |        |          |0 = The current character is not at LIN sync state.
N     * |        |          |1 = The current character is at LIN sync state.
N     * |        |          |Note1: This bit is only valid when in LIN Slave mode (SLVEN(UART_LINCTL[0]) = 1).
N     * |        |          |Note2: This bit can be cleared by writing 1 to it.
N     * |        |          |Note3: When writing 1 to it, hardware will reload the initial baud rate and re-search a new frame header.
N     * |[8]     |BRKDETF   |LIN Break Detection Flag
N     * |        |          |This bit is set by hardware when a break is detected and be cleared by writing 1 to it through software.
N     * |        |          |0 = LIN break not detected.
N     * |        |          |1 = LIN break detected.
N     * |        |          |Note1: This bit can be cleared by writing 1 to it.
N     * |        |          |Note2: This bit is only valid when LIN break detection function is enabled (BRKDETEN (UART_LINCTL[10]) =1).
N     * |[9]     |BITEF     |Bit Error Detect Status Flag
N     * |        |          |At TX transfer state, hardware will monitor the bus state, if the input pin (UART_RXD) state not equals to the output pin (UART_TXD) state, BITEF (UART_LINSTS[9]) will be set.
N     * |        |          |When occur bit error, if the LINIEN (UART_INTEN[8]) = 1, an interrupt will be generated.
N     * |        |          |0 = Bit error not detected.
N     * |        |          |1 = Bit error detected.
N     * |        |          |Note1: This bit can be cleared by writing 1 to it.
N     * |        |          |Note2: This bit is only valid when enable bit error detection function (BITERREN (UART_LINCTL [12]) = 1).
N     * @var UART_T::BRCOMP
N     * Offset: 0x3C  UART Baud Rate Compensation Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[8:0]   |BRCOMP    |Baud Rate Compensation Patten
N     * |        |          |These 9-bits are used to define the relative bit is compensated or not.
N     * |        |          |BRCOMP[7:0] is used to define the compensation of UART_DAT[7:0] and BRCOM[8] is used to define the parity bit.
N     * |[31]    |BRCOMPDEC |Baud Rate Compensation Decrease
N     * |        |          |0 = Positive (increase one module clock) compensation for each compensated bit.
N     * |        |          |1 = Negative (decrease one module clock) compensation for each compensated bit.
N     * @var UART_T::WKCTL
N     * Offset: 0x40  UART Wake-up Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKCTSEN   |nCTS Wake-up Enable Bit
N     * |        |          |0 = nCTS Wake-up system function Disabled.
N     * |        |          |1 = nCTS Wake-up system function Enabled, when the system is in Power-down mode, an external nCTS change will wake-up system from Power-down mode.
N     * |[1]     |WKDATEN   |Incoming Data Wake-up Enable Bit
N     * |        |          |0 = Incoming data wake-up system function Disabled.
N     * |        |          |1 = Incoming data wake-up system function Enabled, when the system is in Power-down mode, incoming data will wake-up system from Power-down mode.
N     * |[2]     |WKRFRTEN  |Received Data FIFO Reached Threshold Wake-up Enable Bit
N     * |        |          |0 = Received Data FIFO reached threshold wake-up system function Disabled.
N     * |        |          |1 = Received Data FIFO reached threshold wake-up system function Enabled, when the system is in Power-down mode, Received Data FIFO reached threshold will wake-up system from
N     * |        |          |Power-down mode.
N     * |[3]     |WKRS485EN |RS-485 Address Match (AAD Mode) Wake-up Enable Bit
N     * |        |          |0 = RS-485 Address Match (AAD mode) wake-up system function Disabled.
N     * |        |          |1 = RS-485 Address Match (AAD mode) wake-up system function Enabled, when the system is in.
N     * |        |          |Power-down mode, RS-485 Address Match will wake-up system from Power-down mode.
N     * |        |          |Note: This bit is used for RS-485 Auto Address Detection (AAD) mode in RS-485 function mode
N     * |        |          |and ADDRDEN (UART_ALTCTL[15]) is set to 1.
N     * |[4]     |WKTOUTEN  |Received Data FIFO Reached Threshold Time-out Wake-up Enable Bit
N     * |        |          |0 = Received Data FIFO reached threshold time-out wake-up system function Disabled.
N     * |        |          |1 = Received Data FIFO reached threshold time-out wake-up system function Enabled, when the system is in Power-down mode, Received Data FIFO reached threshold time-out will wake-up system from Power-down mode.
N     * |        |          |Note: It is suggest the function is enabled when the WKRFRTEN (UART_WKCTL[2]) is set to 1.
N     * @var UART_T::WKSTS
N     * Offset: 0x44  UART Wake-up Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CTSWKF    |nCTS Wake-up Flag
N     * |        |          |This bit is set if chip wake-up from power-down state by nCTS wake-up.
N     * |        |          |0 = Chip stays in power-down state.
N     * |        |          |1 = Chip wake-up from power-down state by nCTS wake-up.
N     * |        |          |Note1: If WKCTSEN (UART_WKCTL[0]) is enabled, the nCTS wake-up cause this bit is set to '1'.
N     * |        |          |Note2: This bit can be cleared by writing '1' to it.
N     * |[1]     |DATWKF    |Incoming Data Wake-up Flag
N     * |        |          |This bit is set if chip wake-up from power-down state by data wake-up.
N     * |        |          |0 = Chip stays in power-down state.
N     * |        |          |1 = Chip wake-up from power-down state by Incoming Data wake-up.
N     * |        |          |Note1: If WKDATEN (UART_WKCTL[1]) is enabled, the Incoming Data wake-up cause this bit is set to '1'.
N     * |        |          |Note2: This bit can be cleared by writing '1' to it.
N     * |[2]     |RFRTWKF   |Received Data FIFO Reached Threshold Wake-up Flag
N     * |        |          |This bit is set if chip wake-up from power-down state by Received Data FIFO reached threshold
N     * |        |          |wake-up .
N     * |        |          |0 = Chip stays in power-down state.
N     * |        |          |1 = Chip wake-up from power-down state by Received Data FIFO Reached Threshold wake-up.
N     * |        |          |Note1: If WKRFRTEN (UART_WKCTL[2]) is enabled, the Received Data FIFO Reached Threshold wake-up cause this bit is set to '1'.
N     * |        |          |Note2: This bit can be cleared by writing '1' to it.
N     * |[3]     |RS485WKF  |RS-485 Address Match (AAD Mode) Wake-up Flag
N     * |        |          |This bit is set if chip wake-up from power-down state by RS-485 Address Match (AAD mode).
N     * |        |          |0 = Chip stays in power-down state.
N     * |        |          |1 = Chip wake-up from power-down state by RS-485 Address Match (AAD mode) wake-up.
N     * |        |          |Note1: If WKRS485EN (UART_WKCTL[3]) is enabled, the RS-485 Address Match (AAD mode) wake-up cause this bit is set to '1'.
N     * |        |          |Note2: This bit can be cleared by writing '1' to it.
N     * |[4]     |TOUTWKF   |Received Data FIFO Threshold Time-out Wake-up Flag
N     * |        |          |This bit is set if chip wake-up from power-down state by Received Data FIFO Threshold Time-out
N     * |        |          |wake-up.
N     * |        |          |0 = Chip stays in power-down state.
N     * |        |          |1 = Chip wake-up from power-down state by Received Data FIFO reached threshold time-out wake-up.
N     * |        |          |Note1: If WKTOUTEN (UART_WKCTL[4]) is enabled, the Received Data FIFO reached threshold time-out wake-up cause this bit is set to '1'.
N     * |        |          |Note2: This bit can be cleared by writing '1' to it.
N     * @var UART_T::DWKCOMP
N     * Offset: 0x48  UART Imcoming Data Wake-up Compensation Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |STCOMP    |Start Bit Compensation Value
N     * |        |          |These bits field indicate how many clock cycle selected by UART_CLK do the UART controller can get the 1st bit (start bit) when the device is wake-up from power-down mode.
N     * |        |          |Note: It is valid only when WKDATEN (UART_WKCTL[1]) is set.
N     */
N    __IO uint32_t DAT;                   /*!< [0x0000] UART Receive/Transmit Buffer Register                            */
X    volatile uint32_t DAT;                    
N    __IO uint32_t INTEN;                 /*!< [0x0004] UART Interrupt Enable Register                                   */
X    volatile uint32_t INTEN;                  
N    __IO uint32_t FIFO;                  /*!< [0x0008] UART FIFO Control Register                                       */
X    volatile uint32_t FIFO;                   
N    __IO uint32_t LINE;                  /*!< [0x000c] UART Line Control Register                                       */
X    volatile uint32_t LINE;                   
N    __IO uint32_t MODEM;                 /*!< [0x0010] UART Modem Control Register                                      */
X    volatile uint32_t MODEM;                  
N    __IO uint32_t MODEMSTS;              /*!< [0x0014] UART Modem Status Register                                       */
X    volatile uint32_t MODEMSTS;               
N    __IO uint32_t FIFOSTS;               /*!< [0x0018] UART FIFO Status Register                                        */
X    volatile uint32_t FIFOSTS;                
N    __IO uint32_t INTSTS;                /*!< [0x001c] UART Interrupt Status Register                                   */
X    volatile uint32_t INTSTS;                 
N    __IO uint32_t TOUT;                  /*!< [0x0020] UART Time-out Register                                           */
X    volatile uint32_t TOUT;                   
N    __IO uint32_t BAUD;                  /*!< [0x0024] UART Baud Rate Divider Register                                  */
X    volatile uint32_t BAUD;                   
N    __IO uint32_t IRDA;                  /*!< [0x0028] UART IrDA Control Register                                       */
X    volatile uint32_t IRDA;                   
N    __IO uint32_t ALTCTL;                /*!< [0x002c] UART Alternate Control/Status Register                           */
X    volatile uint32_t ALTCTL;                 
N    __IO uint32_t FUNCSEL;               /*!< [0x0030] UART Function Select Register                                    */
X    volatile uint32_t FUNCSEL;                
N    __IO uint32_t LINCTL;                /*!< [0x0034] UART LIN Control Register                                        */
X    volatile uint32_t LINCTL;                 
N    __IO uint32_t LINSTS;                /*!< [0x0038] UART LIN Status Register                                         */
X    volatile uint32_t LINSTS;                 
N    __IO uint32_t BRCOMP;                /*!< [0x003c] UART Baud Rate Compensation Register                             */
X    volatile uint32_t BRCOMP;                 
N    __IO uint32_t WKCTL;                 /*!< [0x0040] UART Wake-up Control Register                                    */
X    volatile uint32_t WKCTL;                  
N    __IO uint32_t WKSTS;                 /*!< [0x0044] UART Wake-up Status Register                                     */
X    volatile uint32_t WKSTS;                  
N    __IO uint32_t DWKCOMP;               /*!< [0x0048] UART Imcoming Data Wake-up Compensation Register                 */
X    volatile uint32_t DWKCOMP;                
N} UART_T;
N
N/**
N    @addtogroup UART_CONST UART Bit Field Definition
N    Constant Definitions for UART Controller
N@{ */
N
N#define UART_DAT_DAT_Pos                 (0)                                               /*!< UART_T::DAT: DAT Position              */
N#define UART_DAT_DAT_Msk                 (0xfful << UART_DAT_DAT_Pos)                      /*!< UART_T::DAT: DAT Mask                  */
N
N#define UART_DAT_PARITY_Pos              (8)                                               /*!< UART_T::DAT: PARITY Position           */
N#define UART_DAT_PARITY_Msk              (0x1ul << UART_DAT_PARITY_Pos)                    /*!< UART_T::DAT: PARITY Mask               */
N
N#define UART_INTEN_RDAIEN_Pos            (0)                                               /*!< UART_T::INTEN: RDAIEN Position         */
N#define UART_INTEN_RDAIEN_Msk            (0x1ul << UART_INTEN_RDAIEN_Pos)                  /*!< UART_T::INTEN: RDAIEN Mask             */
N
N#define UART_INTEN_THREIEN_Pos           (1)                                               /*!< UART_T::INTEN: THREIEN Position        */
N#define UART_INTEN_THREIEN_Msk           (0x1ul << UART_INTEN_THREIEN_Pos)                 /*!< UART_T::INTEN: THREIEN Mask            */
N
N#define UART_INTEN_RLSIEN_Pos            (2)                                               /*!< UART_T::INTEN: RLSIEN Position         */
N#define UART_INTEN_RLSIEN_Msk            (0x1ul << UART_INTEN_RLSIEN_Pos)                  /*!< UART_T::INTEN: RLSIEN Mask             */
N
N#define UART_INTEN_MODEMIEN_Pos          (3)                                               /*!< UART_T::INTEN: MODEMIEN Position       */
N#define UART_INTEN_MODEMIEN_Msk          (0x1ul << UART_INTEN_MODEMIEN_Pos)                /*!< UART_T::INTEN: MODEMIEN Mask           */
N
N#define UART_INTEN_RXTOIEN_Pos           (4)                                               /*!< UART_T::INTEN: RXTOIEN Position        */
N#define UART_INTEN_RXTOIEN_Msk           (0x1ul << UART_INTEN_RXTOIEN_Pos)                 /*!< UART_T::INTEN: RXTOIEN Mask            */
N
N#define UART_INTEN_BUFERRIEN_Pos         (5)                                               /*!< UART_T::INTEN: BUFERRIEN Position      */
N#define UART_INTEN_BUFERRIEN_Msk         (0x1ul << UART_INTEN_BUFERRIEN_Pos)               /*!< UART_T::INTEN: BUFERRIEN Mask          */
N
N#define UART_INTEN_WKIEN_Pos             (6)                                               /*!< UART_T::INTEN: WKIEN Position          */
N#define UART_INTEN_WKIEN_Msk             (0x1ul << UART_INTEN_WKIEN_Pos)                   /*!< UART_T::INTEN: WKIEN Mask              */
N
N#define UART_INTEN_LINIEN_Pos            (8)                                               /*!< UART_T::INTEN: LINIEN Position         */
N#define UART_INTEN_LINIEN_Msk            (0x1ul << UART_INTEN_LINIEN_Pos)                  /*!< UART_T::INTEN: LINIEN Mask             */
N
N#define UART_INTEN_TOCNTEN_Pos           (11)                                              /*!< UART_T::INTEN: TOCNTEN Position        */
N#define UART_INTEN_TOCNTEN_Msk           (0x1ul << UART_INTEN_TOCNTEN_Pos)                 /*!< UART_T::INTEN: TOCNTEN Mask            */
N
N#define UART_INTEN_ATORTSEN_Pos          (12)                                              /*!< UART_T::INTEN: ATORTSEN Position       */
N#define UART_INTEN_ATORTSEN_Msk          (0x1ul << UART_INTEN_ATORTSEN_Pos)                /*!< UART_T::INTEN: ATORTSEN Mask           */
N
N#define UART_INTEN_ATOCTSEN_Pos          (13)                                              /*!< UART_T::INTEN: ATOCTSEN Position       */
N#define UART_INTEN_ATOCTSEN_Msk          (0x1ul << UART_INTEN_ATOCTSEN_Pos)                /*!< UART_T::INTEN: ATOCTSEN Mask           */
N
N#define UART_INTEN_TXPDMAEN_Pos          (14)                                              /*!< UART_T::INTEN: TXPDMAEN Position       */
N#define UART_INTEN_TXPDMAEN_Msk          (0x1ul << UART_INTEN_TXPDMAEN_Pos)                /*!< UART_T::INTEN: TXPDMAEN Mask           */
N
N#define UART_INTEN_RXPDMAEN_Pos          (15)                                              /*!< UART_T::INTEN: RXPDMAEN Position       */
N#define UART_INTEN_RXPDMAEN_Msk          (0x1ul << UART_INTEN_RXPDMAEN_Pos)                /*!< UART_T::INTEN: RXPDMAEN Mask           */
N
N#define UART_INTEN_ABRIEN_Pos            (18)                                              /*!< UART_T::INTEN: ABRIEN Position         */
N#define UART_INTEN_ABRIEN_Msk            (0x1ul << UART_INTEN_ABRIEN_Pos)                  /*!< UART_T::INTEN: ABRIEN Mask             */
N
N#define UART_INTEN_TXENDIEN_Pos          (22)                                              /*!< UART_T::INTEN: TXENDIEN Position       */
N#define UART_INTEN_TXENDIEN_Msk          (0x1ul << UART_INTEN_TXENDIEN_Pos)                /*!< UART_T::INTEN: TXENDIEN Mask           */
N
N#define UART_FIFO_RXRST_Pos              (1)                                               /*!< UART_T::FIFO: RXRST Position           */
N#define UART_FIFO_RXRST_Msk              (0x1ul << UART_FIFO_RXRST_Pos)                    /*!< UART_T::FIFO: RXRST Mask               */
N
N#define UART_FIFO_TXRST_Pos              (2)                                               /*!< UART_T::FIFO: TXRST Position           */
N#define UART_FIFO_TXRST_Msk              (0x1ul << UART_FIFO_TXRST_Pos)                    /*!< UART_T::FIFO: TXRST Mask               */
N
N#define UART_FIFO_RFITL_Pos              (4)                                               /*!< UART_T::FIFO: RFITL Position           */
N#define UART_FIFO_RFITL_Msk              (0xful << UART_FIFO_RFITL_Pos)                    /*!< UART_T::FIFO: RFITL Mask               */
N
N#define UART_FIFO_RXOFF_Pos              (8)                                               /*!< UART_T::FIFO: RXOFF Position           */
N#define UART_FIFO_RXOFF_Msk              (0x1ul << UART_FIFO_RXOFF_Pos)                    /*!< UART_T::FIFO: RXOFF Mask               */
N
N#define UART_FIFO_RTSTRGLV_Pos           (16)                                              /*!< UART_T::FIFO: RTSTRGLV Position        */
N#define UART_FIFO_RTSTRGLV_Msk           (0xful << UART_FIFO_RTSTRGLV_Pos)                 /*!< UART_T::FIFO: RTSTRGLV Mask            */
N
N#define UART_LINE_WLS_Pos                (0)                                               /*!< UART_T::LINE: WLS Position             */
N#define UART_LINE_WLS_Msk                (0x3ul << UART_LINE_WLS_Pos)                      /*!< UART_T::LINE: WLS Mask                 */
N
N#define UART_LINE_NSB_Pos                (2)                                               /*!< UART_T::LINE: NSB Position             */
N#define UART_LINE_NSB_Msk                (0x1ul << UART_LINE_NSB_Pos)                      /*!< UART_T::LINE: NSB Mask                 */
N
N#define UART_LINE_PBE_Pos                (3)                                               /*!< UART_T::LINE: PBE Position             */
N#define UART_LINE_PBE_Msk                (0x1ul << UART_LINE_PBE_Pos)                      /*!< UART_T::LINE: PBE Mask                 */
N
N#define UART_LINE_EPE_Pos                (4)                                               /*!< UART_T::LINE: EPE Position             */
N#define UART_LINE_EPE_Msk                (0x1ul << UART_LINE_EPE_Pos)                      /*!< UART_T::LINE: EPE Mask                 */
N
N#define UART_LINE_SPE_Pos                (5)                                               /*!< UART_T::LINE: SPE Position             */
N#define UART_LINE_SPE_Msk                (0x1ul << UART_LINE_SPE_Pos)                      /*!< UART_T::LINE: SPE Mask                 */
N
N#define UART_LINE_BCB_Pos                (6)                                               /*!< UART_T::LINE: BCB Position             */
N#define UART_LINE_BCB_Msk                (0x1ul << UART_LINE_BCB_Pos)                      /*!< UART_T::LINE: BCB Mask                 */
N
N#define UART_LINE_PSS_Pos                (7)                                               /*!< UART_T::LINE: PSS Position             */
N#define UART_LINE_PSS_Msk                (0x1ul << UART_LINE_PSS_Pos)                      /*!< UART_T::LINE: PSS Mask                 */
N
N#define UART_LINE_TXDINV_Pos             (8)                                               /*!< UART_T::LINE: TXDINV Position          */
N#define UART_LINE_TXDINV_Msk             (0x1ul << UART_LINE_TXDINV_Pos)                   /*!< UART_T::LINE: TXDINV Mask              */
N
N#define UART_LINE_RXDINV_Pos             (9)                                               /*!< UART_T::LINE: RXDINV Position          */
N#define UART_LINE_RXDINV_Msk             (0x1ul << UART_LINE_RXDINV_Pos)                   /*!< UART_T::LINE: RXDINV Mask              */
N
N#define UART_MODEM_RTS_Pos               (1)                                               /*!< UART_T::MODEM: RTS Position            */
N#define UART_MODEM_RTS_Msk               (0x1ul << UART_MODEM_RTS_Pos)                     /*!< UART_T::MODEM: RTS Mask                */
N
N#define UART_MODEM_RTSACTLV_Pos          (9)                                               /*!< UART_T::MODEM: RTSACTLV Position       */
N#define UART_MODEM_RTSACTLV_Msk          (0x1ul << UART_MODEM_RTSACTLV_Pos)                /*!< UART_T::MODEM: RTSACTLV Mask           */
N
N#define UART_MODEM_RTSSTS_Pos            (13)                                              /*!< UART_T::MODEM: RTSSTS Position         */
N#define UART_MODEM_RTSSTS_Msk            (0x1ul << UART_MODEM_RTSSTS_Pos)                  /*!< UART_T::MODEM: RTSSTS Mask             */
N
N#define UART_MODEMSTS_CTSDETF_Pos        (0)                                               /*!< UART_T::MODEMSTS: CTSDETF Position     */
N#define UART_MODEMSTS_CTSDETF_Msk        (0x1ul << UART_MODEMSTS_CTSDETF_Pos)              /*!< UART_T::MODEMSTS: CTSDETF Mask         */
N
N#define UART_MODEMSTS_CTSSTS_Pos         (4)                                               /*!< UART_T::MODEMSTS: CTSSTS Position      */
N#define UART_MODEMSTS_CTSSTS_Msk         (0x1ul << UART_MODEMSTS_CTSSTS_Pos)               /*!< UART_T::MODEMSTS: CTSSTS Mask          */
N
N#define UART_MODEMSTS_CTSACTLV_Pos       (8)                                               /*!< UART_T::MODEMSTS: CTSACTLV Position    */
N#define UART_MODEMSTS_CTSACTLV_Msk       (0x1ul << UART_MODEMSTS_CTSACTLV_Pos)             /*!< UART_T::MODEMSTS: CTSACTLV Mask        */
N
N#define UART_FIFOSTS_RXOVIF_Pos          (0)                                               /*!< UART_T::FIFOSTS: RXOVIF Position       */
N#define UART_FIFOSTS_RXOVIF_Msk          (0x1ul << UART_FIFOSTS_RXOVIF_Pos)                /*!< UART_T::FIFOSTS: RXOVIF Mask           */
N
N#define UART_FIFOSTS_ABRDIF_Pos          (1)                                               /*!< UART_T::FIFOSTS: ABRDIF Position       */
N#define UART_FIFOSTS_ABRDIF_Msk          (0x1ul << UART_FIFOSTS_ABRDIF_Pos)                /*!< UART_T::FIFOSTS: ABRDIF Mask           */
N
N#define UART_FIFOSTS_ABRDTOIF_Pos        (2)                                               /*!< UART_T::FIFOSTS: ABRDTOIF Position     */
N#define UART_FIFOSTS_ABRDTOIF_Msk        (0x1ul << UART_FIFOSTS_ABRDTOIF_Pos)              /*!< UART_T::FIFOSTS: ABRDTOIF Mask         */
N
N#define UART_FIFOSTS_ADDRDETF_Pos        (3)                                               /*!< UART_T::FIFOSTS: ADDRDETF Position     */
N#define UART_FIFOSTS_ADDRDETF_Msk        (0x1ul << UART_FIFOSTS_ADDRDETF_Pos)              /*!< UART_T::FIFOSTS: ADDRDETF Mask         */
N
N#define UART_FIFOSTS_PEF_Pos             (4)                                               /*!< UART_T::FIFOSTS: PEF Position          */
N#define UART_FIFOSTS_PEF_Msk             (0x1ul << UART_FIFOSTS_PEF_Pos)                   /*!< UART_T::FIFOSTS: PEF Mask              */
N
N#define UART_FIFOSTS_FEF_Pos             (5)                                               /*!< UART_T::FIFOSTS: FEF Position          */
N#define UART_FIFOSTS_FEF_Msk             (0x1ul << UART_FIFOSTS_FEF_Pos)                   /*!< UART_T::FIFOSTS: FEF Mask              */
N
N#define UART_FIFOSTS_BIF_Pos             (6)                                               /*!< UART_T::FIFOSTS: BIF Position          */
N#define UART_FIFOSTS_BIF_Msk             (0x1ul << UART_FIFOSTS_BIF_Pos)                   /*!< UART_T::FIFOSTS: BIF Mask              */
N
N#define UART_FIFOSTS_RXPTR_Pos           (8)                                               /*!< UART_T::FIFOSTS: RXPTR Position        */
N#define UART_FIFOSTS_RXPTR_Msk           (0x3ful << UART_FIFOSTS_RXPTR_Pos)                /*!< UART_T::FIFOSTS: RXPTR Mask            */
N
N#define UART_FIFOSTS_RXEMPTY_Pos         (14)                                              /*!< UART_T::FIFOSTS: RXEMPTY Position      */
N#define UART_FIFOSTS_RXEMPTY_Msk         (0x1ul << UART_FIFOSTS_RXEMPTY_Pos)               /*!< UART_T::FIFOSTS: RXEMPTY Mask          */
N
N#define UART_FIFOSTS_RXFULL_Pos          (15)                                              /*!< UART_T::FIFOSTS: RXFULL Position       */
N#define UART_FIFOSTS_RXFULL_Msk          (0x1ul << UART_FIFOSTS_RXFULL_Pos)                /*!< UART_T::FIFOSTS: RXFULL Mask           */
N
N#define UART_FIFOSTS_TXPTR_Pos           (16)                                              /*!< UART_T::FIFOSTS: TXPTR Position        */
N#define UART_FIFOSTS_TXPTR_Msk           (0x3ful << UART_FIFOSTS_TXPTR_Pos)                /*!< UART_T::FIFOSTS: TXPTR Mask            */
N
N#define UART_FIFOSTS_TXEMPTY_Pos         (22)                                              /*!< UART_T::FIFOSTS: TXEMPTY Position      */
N#define UART_FIFOSTS_TXEMPTY_Msk         (0x1ul << UART_FIFOSTS_TXEMPTY_Pos)               /*!< UART_T::FIFOSTS: TXEMPTY Mask          */
N
N#define UART_FIFOSTS_TXFULL_Pos          (23)                                              /*!< UART_T::FIFOSTS: TXFULL Position       */
N#define UART_FIFOSTS_TXFULL_Msk          (0x1ul << UART_FIFOSTS_TXFULL_Pos)                /*!< UART_T::FIFOSTS: TXFULL Mask           */
N
N#define UART_FIFOSTS_TXOVIF_Pos          (24)                                              /*!< UART_T::FIFOSTS: TXOVIF Position       */
N#define UART_FIFOSTS_TXOVIF_Msk          (0x1ul << UART_FIFOSTS_TXOVIF_Pos)                /*!< UART_T::FIFOSTS: TXOVIF Mask           */
N
N#define UART_FIFOSTS_TXEMPTYF_Pos        (28)                                              /*!< UART_T::FIFOSTS: TXEMPTYF Position     */
N#define UART_FIFOSTS_TXEMPTYF_Msk        (0x1ul << UART_FIFOSTS_TXEMPTYF_Pos)              /*!< UART_T::FIFOSTS: TXEMPTYF Mask         */
N
N#define UART_FIFOSTS_RXIDLE_Pos          (29)                                              /*!< UART_T::FIFOSTS: RXIDLE Position       */
N#define UART_FIFOSTS_RXIDLE_Msk          (0x1ul << UART_FIFOSTS_RXIDLE_Pos)                /*!< UART_T::FIFOSTS: RXIDLE Mask           */
N
N#define UART_FIFOSTS_TXRXACT_Pos         (31)                                              /*!< UART_T::FIFOSTS: TXRXACT Position      */
N#define UART_FIFOSTS_TXRXACT_Msk         (0x1ul << UART_FIFOSTS_TXRXACT_Pos)               /*!< UART_T::FIFOSTS: TXRXACT Mask          */
N
N#define UART_INTSTS_RDAIF_Pos            (0)                                               /*!< UART_T::INTSTS: RDAIF Position         */
N#define UART_INTSTS_RDAIF_Msk            (0x1ul << UART_INTSTS_RDAIF_Pos)                  /*!< UART_T::INTSTS: RDAIF Mask             */
N
N#define UART_INTSTS_THREIF_Pos           (1)                                               /*!< UART_T::INTSTS: THREIF Position        */
N#define UART_INTSTS_THREIF_Msk           (0x1ul << UART_INTSTS_THREIF_Pos)                 /*!< UART_T::INTSTS: THREIF Mask            */
N
N#define UART_INTSTS_RLSIF_Pos            (2)                                               /*!< UART_T::INTSTS: RLSIF Position         */
N#define UART_INTSTS_RLSIF_Msk            (0x1ul << UART_INTSTS_RLSIF_Pos)                  /*!< UART_T::INTSTS: RLSIF Mask             */
N
N#define UART_INTSTS_MODEMIF_Pos          (3)                                               /*!< UART_T::INTSTS: MODEMIF Position       */
N#define UART_INTSTS_MODEMIF_Msk          (0x1ul << UART_INTSTS_MODEMIF_Pos)                /*!< UART_T::INTSTS: MODEMIF Mask           */
N
N#define UART_INTSTS_RXTOIF_Pos           (4)                                               /*!< UART_T::INTSTS: RXTOIF Position        */
N#define UART_INTSTS_RXTOIF_Msk           (0x1ul << UART_INTSTS_RXTOIF_Pos)                 /*!< UART_T::INTSTS: RXTOIF Mask            */
N
N#define UART_INTSTS_BUFERRIF_Pos         (5)                                               /*!< UART_T::INTSTS: BUFERRIF Position      */
N#define UART_INTSTS_BUFERRIF_Msk         (0x1ul << UART_INTSTS_BUFERRIF_Pos)               /*!< UART_T::INTSTS: BUFERRIF Mask          */
N
N#define UART_INTSTS_WKIF_Pos             (6)                                               /*!< UART_T::INTSTS: WKIF Position          */
N#define UART_INTSTS_WKIF_Msk             (0x1ul << UART_INTSTS_WKIF_Pos)                   /*!< UART_T::INTSTS: WKIF Mask              */
N
N#define UART_INTSTS_LINIF_Pos            (7)                                               /*!< UART_T::INTSTS: LINIF Position         */
N#define UART_INTSTS_LINIF_Msk            (0x1ul << UART_INTSTS_LINIF_Pos)                  /*!< UART_T::INTSTS: LINIF Mask             */
N
N#define UART_INTSTS_RDAINT_Pos           (8)                                               /*!< UART_T::INTSTS: RDAINT Position        */
N#define UART_INTSTS_RDAINT_Msk           (0x1ul << UART_INTSTS_RDAINT_Pos)                 /*!< UART_T::INTSTS: RDAINT Mask            */
N
N#define UART_INTSTS_THREINT_Pos          (9)                                               /*!< UART_T::INTSTS: THREINT Position       */
N#define UART_INTSTS_THREINT_Msk          (0x1ul << UART_INTSTS_THREINT_Pos)                /*!< UART_T::INTSTS: THREINT Mask           */
N
N#define UART_INTSTS_RLSINT_Pos           (10)                                              /*!< UART_T::INTSTS: RLSINT Position        */
N#define UART_INTSTS_RLSINT_Msk           (0x1ul << UART_INTSTS_RLSINT_Pos)                 /*!< UART_T::INTSTS: RLSINT Mask            */
N
N#define UART_INTSTS_MODEMINT_Pos         (11)                                              /*!< UART_T::INTSTS: MODEMINT Position      */
N#define UART_INTSTS_MODEMINT_Msk         (0x1ul << UART_INTSTS_MODEMINT_Pos)               /*!< UART_T::INTSTS: MODEMINT Mask          */
N
N#define UART_INTSTS_RXTOINT_Pos          (12)                                              /*!< UART_T::INTSTS: RXTOINT Position       */
N#define UART_INTSTS_RXTOINT_Msk          (0x1ul << UART_INTSTS_RXTOINT_Pos)                /*!< UART_T::INTSTS: RXTOINT Mask           */
N
N#define UART_INTSTS_BUFERRINT_Pos        (13)                                              /*!< UART_T::INTSTS: BUFERRINT Position     */
N#define UART_INTSTS_BUFERRINT_Msk        (0x1ul << UART_INTSTS_BUFERRINT_Pos)              /*!< UART_T::INTSTS: BUFERRINT Mask         */
N
N#define UART_INTSTS_WKINT_Pos            (14)                                              /*!< UART_T::INTSTS: WKINT Position         */
N#define UART_INTSTS_WKINT_Msk            (0x1ul << UART_INTSTS_WKINT_Pos)                  /*!< UART_T::INTSTS: WKINT Mask             */
N
N#define UART_INTSTS_LININT_Pos           (15)                                              /*!< UART_T::INTSTS: LININT Position        */
N#define UART_INTSTS_LININT_Msk           (0x1ul << UART_INTSTS_LININT_Pos)                 /*!< UART_T::INTSTS: LININT Mask            */
N
N#define UART_INTSTS_HWRLSIF_Pos          (18)                                              /*!< UART_T::INTSTS: HWRLSIF Position       */
N#define UART_INTSTS_HWRLSIF_Msk          (0x1ul << UART_INTSTS_HWRLSIF_Pos)                /*!< UART_T::INTSTS: HWRLSIF Mask           */
N
N#define UART_INTSTS_HWMODIF_Pos          (19)                                              /*!< UART_T::INTSTS: HWMODIF Position       */
N#define UART_INTSTS_HWMODIF_Msk          (0x1ul << UART_INTSTS_HWMODIF_Pos)                /*!< UART_T::INTSTS: HWMODIF Mask           */
N
N#define UART_INTSTS_HWTOIF_Pos           (20)                                              /*!< UART_T::INTSTS: HWTOIF Position        */
N#define UART_INTSTS_HWTOIF_Msk           (0x1ul << UART_INTSTS_HWTOIF_Pos)                 /*!< UART_T::INTSTS: HWTOIF Mask            */
N
N#define UART_INTSTS_HWBUFEIF_Pos         (21)                                              /*!< UART_T::INTSTS: HWBUFEIF Position      */
N#define UART_INTSTS_HWBUFEIF_Msk         (0x1ul << UART_INTSTS_HWBUFEIF_Pos)               /*!< UART_T::INTSTS: HWBUFEIF Mask          */
N
N#define UART_INTSTS_TXENDIF_Pos          (22)                                              /*!< UART_T::INTSTS: TXENDIF Position       */
N#define UART_INTSTS_TXENDIF_Msk          (0x1ul << UART_INTSTS_TXENDIF_Pos)                /*!< UART_T::INTSTS: TXENDIF Mask           */
N
N#define UART_INTSTS_HWRLSINT_Pos         (26)                                              /*!< UART_T::INTSTS: HWRLSINT Position      */
N#define UART_INTSTS_HWRLSINT_Msk         (0x1ul << UART_INTSTS_HWRLSINT_Pos)               /*!< UART_T::INTSTS: HWRLSINT Mask          */
N
N#define UART_INTSTS_HWMODINT_Pos         (27)                                              /*!< UART_T::INTSTS: HWMODINT Position      */
N#define UART_INTSTS_HWMODINT_Msk         (0x1ul << UART_INTSTS_HWMODINT_Pos)               /*!< UART_T::INTSTS: HWMODINT Mask          */
N
N#define UART_INTSTS_HWTOINT_Pos          (28)                                              /*!< UART_T::INTSTS: HWTOINT Position       */
N#define UART_INTSTS_HWTOINT_Msk          (0x1ul << UART_INTSTS_HWTOINT_Pos)                /*!< UART_T::INTSTS: HWTOINT Mask           */
N
N#define UART_INTSTS_HWBUFEINT_Pos        (29)                                              /*!< UART_T::INTSTS: HWBUFEINT Position     */
N#define UART_INTSTS_HWBUFEINT_Msk        (0x1ul << UART_INTSTS_HWBUFEINT_Pos)              /*!< UART_T::INTSTS: HWBUFEINT Mask         */
N
N#define UART_INTSTS_TXENDINT_Pos         (30)                                              /*!< UART_T::INTSTS: TXENDINT Position      */
N#define UART_INTSTS_TXENDINT_Msk         (0x1ul << UART_INTSTS_TXENDINT_Pos)               /*!< UART_T::INTSTS: TXENDINT Mask          */
N
N#define UART_INTSTS_ABRINT_Pos           (31)                                              /*!< UART_T::INTSTS: ABRINT Position        */
N#define UART_INTSTS_ABRINT_Msk           (0x1ul << UART_INTSTS_ABRINT_Pos)                 /*!< UART_T::INTSTS: ABRINT Mask            */
N
N#define UART_TOUT_TOIC_Pos               (0)                                               /*!< UART_T::TOUT: TOIC Position            */
N#define UART_TOUT_TOIC_Msk               (0xfful << UART_TOUT_TOIC_Pos)                    /*!< UART_T::TOUT: TOIC Mask                */
N
N#define UART_TOUT_DLY_Pos                (8)                                               /*!< UART_T::TOUT: DLY Position             */
N#define UART_TOUT_DLY_Msk                (0xfful << UART_TOUT_DLY_Pos)                     /*!< UART_T::TOUT: DLY Mask                 */
N
N#define UART_BAUD_BRD_Pos                (0)                                               /*!< UART_T::BAUD: BRD Position             */
N#define UART_BAUD_BRD_Msk                (0xfffful << UART_BAUD_BRD_Pos)                   /*!< UART_T::BAUD: BRD Mask                 */
N
N#define UART_BAUD_EDIVM1_Pos             (24)                                              /*!< UART_T::BAUD: EDIVM1 Position          */
N#define UART_BAUD_EDIVM1_Msk             (0xful << UART_BAUD_EDIVM1_Pos)                   /*!< UART_T::BAUD: EDIVM1 Mask              */
N
N#define UART_BAUD_BAUDM0_Pos             (28)                                              /*!< UART_T::BAUD: BAUDM0 Position          */
N#define UART_BAUD_BAUDM0_Msk             (0x1ul << UART_BAUD_BAUDM0_Pos)                   /*!< UART_T::BAUD: BAUDM0 Mask              */
N
N#define UART_BAUD_BAUDM1_Pos             (29)                                              /*!< UART_T::BAUD: BAUDM1 Position          */
N#define UART_BAUD_BAUDM1_Msk             (0x1ul << UART_BAUD_BAUDM1_Pos)                   /*!< UART_T::BAUD: BAUDM1 Mask              */
N
N#define UART_IRDA_TXEN_Pos               (1)                                               /*!< UART_T::IRDA: TXEN Position            */
N#define UART_IRDA_TXEN_Msk               (0x1ul << UART_IRDA_TXEN_Pos)                     /*!< UART_T::IRDA: TXEN Mask                */
N
N#define UART_IRDA_TXINV_Pos              (5)                                               /*!< UART_T::IRDA: TXINV Position           */
N#define UART_IRDA_TXINV_Msk              (0x1ul << UART_IRDA_TXINV_Pos)                    /*!< UART_T::IRDA: TXINV Mask               */
N
N#define UART_IRDA_RXINV_Pos              (6)                                               /*!< UART_T::IRDA: RXINV Position           */
N#define UART_IRDA_RXINV_Msk              (0x1ul << UART_IRDA_RXINV_Pos)                    /*!< UART_T::IRDA: RXINV Mask               */
N
N#define UART_ALTCTL_BRKFL_Pos            (0)                                               /*!< UART_T::ALTCTL: BRKFL Position         */
N#define UART_ALTCTL_BRKFL_Msk            (0xful << UART_ALTCTL_BRKFL_Pos)                  /*!< UART_T::ALTCTL: BRKFL Mask             */
N
N#define UART_ALTCTL_LINRXEN_Pos          (6)                                               /*!< UART_T::ALTCTL: LINRXEN Position       */
N#define UART_ALTCTL_LINRXEN_Msk          (0x1ul << UART_ALTCTL_LINRXEN_Pos)                /*!< UART_T::ALTCTL: LINRXEN Mask           */
N
N#define UART_ALTCTL_LINTXEN_Pos          (7)                                               /*!< UART_T::ALTCTL: LINTXEN Position       */
N#define UART_ALTCTL_LINTXEN_Msk          (0x1ul << UART_ALTCTL_LINTXEN_Pos)                /*!< UART_T::ALTCTL: LINTXEN Mask           */
N
N#define UART_ALTCTL_RS485NMM_Pos         (8)                                               /*!< UART_T::ALTCTL: RS485NMM Position      */
N#define UART_ALTCTL_RS485NMM_Msk         (0x1ul << UART_ALTCTL_RS485NMM_Pos)               /*!< UART_T::ALTCTL: RS485NMM Mask          */
N
N#define UART_ALTCTL_RS485AAD_Pos         (9)                                               /*!< UART_T::ALTCTL: RS485AAD Position      */
N#define UART_ALTCTL_RS485AAD_Msk         (0x1ul << UART_ALTCTL_RS485AAD_Pos)               /*!< UART_T::ALTCTL: RS485AAD Mask          */
N
N#define UART_ALTCTL_RS485AUD_Pos         (10)                                              /*!< UART_T::ALTCTL: RS485AUD Position      */
N#define UART_ALTCTL_RS485AUD_Msk         (0x1ul << UART_ALTCTL_RS485AUD_Pos)               /*!< UART_T::ALTCTL: RS485AUD Mask          */
N
N#define UART_ALTCTL_ADDRDEN_Pos          (15)                                              /*!< UART_T::ALTCTL: ADDRDEN Position       */
N#define UART_ALTCTL_ADDRDEN_Msk          (0x1ul << UART_ALTCTL_ADDRDEN_Pos)                /*!< UART_T::ALTCTL: ADDRDEN Mask           */
N
N#define UART_ALTCTL_ABRIF_Pos            (17)                                              /*!< UART_T::ALTCTL: ABRIF Position         */
N#define UART_ALTCTL_ABRIF_Msk            (0x1ul << UART_ALTCTL_ABRIF_Pos)                  /*!< UART_T::ALTCTL: ABRIF Mask             */
N
N#define UART_ALTCTL_ABRDEN_Pos           (18)                                              /*!< UART_T::ALTCTL: ABRDEN Position        */
N#define UART_ALTCTL_ABRDEN_Msk           (0x1ul << UART_ALTCTL_ABRDEN_Pos)                 /*!< UART_T::ALTCTL: ABRDEN Mask            */
N
N#define UART_ALTCTL_ABRDBITS_Pos         (19)                                              /*!< UART_T::ALTCTL: ABRDBITS Position      */
N#define UART_ALTCTL_ABRDBITS_Msk         (0x3ul << UART_ALTCTL_ABRDBITS_Pos)               /*!< UART_T::ALTCTL: ABRDBITS Mask          */
N
N#define UART_ALTCTL_ADDRMV_Pos           (24)                                              /*!< UART_T::ALTCTL: ADDRMV Position        */
N#define UART_ALTCTL_ADDRMV_Msk           (0xfful << UART_ALTCTL_ADDRMV_Pos)                /*!< UART_T::ALTCTL: ADDRMV Mask            */
N
N#define UART_FUNCSEL_FUNCSEL_Pos         (0)                                               /*!< UART_T::FUNCSEL: FUNCSEL Position      */
N#define UART_FUNCSEL_FUNCSEL_Msk         (0x3ul << UART_FUNCSEL_FUNCSEL_Pos)               /*!< UART_T::FUNCSEL: FUNCSEL Mask          */
N
N#define UART_FUNCSEL_TXRXDIS_Pos         (3)                                               /*!< UART_T::FUNCSEL: TXRXDIS Position      */
N#define UART_FUNCSEL_TXRXDIS_Msk         (0x1ul << UART_FUNCSEL_TXRXDIS_Pos)               /*!< UART_T::FUNCSEL: TXRXDIS Mask          */
N
N#define UART_LINCTL_SLVEN_Pos            (0)                                               /*!< UART_T::LINCTL: SLVEN Position         */
N#define UART_LINCTL_SLVEN_Msk            (0x1ul << UART_LINCTL_SLVEN_Pos)                  /*!< UART_T::LINCTL: SLVEN Mask             */
N
N#define UART_LINCTL_SLVHDEN_Pos          (1)                                               /*!< UART_T::LINCTL: SLVHDEN Position       */
N#define UART_LINCTL_SLVHDEN_Msk          (0x1ul << UART_LINCTL_SLVHDEN_Pos)                /*!< UART_T::LINCTL: SLVHDEN Mask           */
N
N#define UART_LINCTL_SLVAREN_Pos          (2)                                               /*!< UART_T::LINCTL: SLVAREN Position       */
N#define UART_LINCTL_SLVAREN_Msk          (0x1ul << UART_LINCTL_SLVAREN_Pos)                /*!< UART_T::LINCTL: SLVAREN Mask           */
N
N#define UART_LINCTL_SLVDUEN_Pos          (3)                                               /*!< UART_T::LINCTL: SLVDUEN Position       */
N#define UART_LINCTL_SLVDUEN_Msk          (0x1ul << UART_LINCTL_SLVDUEN_Pos)                /*!< UART_T::LINCTL: SLVDUEN Mask           */
N
N#define UART_LINCTL_MUTE_Pos             (4)                                               /*!< UART_T::LINCTL: MUTE Position          */
N#define UART_LINCTL_MUTE_Msk             (0x1ul << UART_LINCTL_MUTE_Pos)                   /*!< UART_T::LINCTL: MUTE Mask              */
N
N#define UART_LINCTL_SENDH_Pos            (8)                                               /*!< UART_T::LINCTL: SENDH Position         */
N#define UART_LINCTL_SENDH_Msk            (0x1ul << UART_LINCTL_SENDH_Pos)                  /*!< UART_T::LINCTL: SENDH Mask             */
N
N#define UART_LINCTL_IDPEN_Pos            (9)                                               /*!< UART_T::LINCTL: IDPEN Position         */
N#define UART_LINCTL_IDPEN_Msk            (0x1ul << UART_LINCTL_IDPEN_Pos)                  /*!< UART_T::LINCTL: IDPEN Mask             */
N
N#define UART_LINCTL_BRKDETEN_Pos         (10)                                              /*!< UART_T::LINCTL: BRKDETEN Position      */
N#define UART_LINCTL_BRKDETEN_Msk         (0x1ul << UART_LINCTL_BRKDETEN_Pos)               /*!< UART_T::LINCTL: BRKDETEN Mask          */
N
N#define UART_LINCTL_LINRXOFF_Pos         (11)                                              /*!< UART_T::LINCTL: LINRXOFF Position      */
N#define UART_LINCTL_LINRXOFF_Msk         (0x1ul << UART_LINCTL_LINRXOFF_Pos)               /*!< UART_T::LINCTL: LINRXOFF Mask          */
N
N#define UART_LINCTL_BITERREN_Pos         (12)                                              /*!< UART_T::LINCTL: BITERREN Position      */
N#define UART_LINCTL_BITERREN_Msk         (0x1ul << UART_LINCTL_BITERREN_Pos)               /*!< UART_T::LINCTL: BITERREN Mask          */
N
N#define UART_LINCTL_BRKFL_Pos            (16)                                              /*!< UART_T::LINCTL: BRKFL Position         */
N#define UART_LINCTL_BRKFL_Msk            (0xful << UART_LINCTL_BRKFL_Pos)                  /*!< UART_T::LINCTL: BRKFL Mask             */
N
N#define UART_LINCTL_BSL_Pos              (20)                                              /*!< UART_T::LINCTL: BSL Position           */
N#define UART_LINCTL_BSL_Msk              (0x3ul << UART_LINCTL_BSL_Pos)                    /*!< UART_T::LINCTL: BSL Mask               */
N
N#define UART_LINCTL_HSEL_Pos             (22)                                              /*!< UART_T::LINCTL: HSEL Position          */
N#define UART_LINCTL_HSEL_Msk             (0x3ul << UART_LINCTL_HSEL_Pos)                   /*!< UART_T::LINCTL: HSEL Mask              */
N
N#define UART_LINCTL_PID_Pos              (24)                                              /*!< UART_T::LINCTL: PID Position           */
N#define UART_LINCTL_PID_Msk              (0xfful << UART_LINCTL_PID_Pos)                   /*!< UART_T::LINCTL: PID Mask               */
N
N#define UART_LINSTS_SLVHDETF_Pos         (0)                                               /*!< UART_T::LINSTS: SLVHDETF Position      */
N#define UART_LINSTS_SLVHDETF_Msk         (0x1ul << UART_LINSTS_SLVHDETF_Pos)               /*!< UART_T::LINSTS: SLVHDETF Mask          */
N
N#define UART_LINSTS_SLVHEF_Pos           (1)                                               /*!< UART_T::LINSTS: SLVHEF Position        */
N#define UART_LINSTS_SLVHEF_Msk           (0x1ul << UART_LINSTS_SLVHEF_Pos)                 /*!< UART_T::LINSTS: SLVHEF Mask            */
N
N#define UART_LINSTS_SLVIDPEF_Pos         (2)                                               /*!< UART_T::LINSTS: SLVIDPEF Position      */
N#define UART_LINSTS_SLVIDPEF_Msk         (0x1ul << UART_LINSTS_SLVIDPEF_Pos)               /*!< UART_T::LINSTS: SLVIDPEF Mask          */
N
N#define UART_LINSTS_SLVSYNCF_Pos         (3)                                               /*!< UART_T::LINSTS: SLVSYNCF Position      */
N#define UART_LINSTS_SLVSYNCF_Msk         (0x1ul << UART_LINSTS_SLVSYNCF_Pos)               /*!< UART_T::LINSTS: SLVSYNCF Mask          */
N
N#define UART_LINSTS_BRKDETF_Pos          (8)                                               /*!< UART_T::LINSTS: BRKDETF Position       */
N#define UART_LINSTS_BRKDETF_Msk          (0x1ul << UART_LINSTS_BRKDETF_Pos)                /*!< UART_T::LINSTS: BRKDETF Mask           */
N
N#define UART_LINSTS_BITEF_Pos            (9)                                               /*!< UART_T::LINSTS: BITEF Position         */
N#define UART_LINSTS_BITEF_Msk            (0x1ul << UART_LINSTS_BITEF_Pos)                  /*!< UART_T::LINSTS: BITEF Mask             */
N
N#define UART_BRCOMP_BRCOMP_Pos           (0)                                               /*!< UART_T::BRCOMP: BRCOMP Position        */
N#define UART_BRCOMP_BRCOMP_Msk           (0x1fful << UART_BRCOMP_BRCOMP_Pos)               /*!< UART_T::BRCOMP: BRCOMP Mask            */
N
N#define UART_BRCOMP_BRCOMPDEC_Pos        (31)                                              /*!< UART_T::BRCOMP: BRCOMPDEC Position     */
N#define UART_BRCOMP_BRCOMPDEC_Msk        (0x1ul << UART_BRCOMP_BRCOMPDEC_Pos)              /*!< UART_T::BRCOMP: BRCOMPDEC Mask         */
N
N#define UART_WKCTL_WKCTSEN_Pos           (0)                                               /*!< UART_T::WKCTL: WKCTSEN Position        */
N#define UART_WKCTL_WKCTSEN_Msk           (0x1ul << UART_WKCTL_WKCTSEN_Pos)                 /*!< UART_T::WKCTL: WKCTSEN Mask            */
N
N#define UART_WKCTL_WKDATEN_Pos           (1)                                               /*!< UART_T::WKCTL: WKDATEN Position        */
N#define UART_WKCTL_WKDATEN_Msk           (0x1ul << UART_WKCTL_WKDATEN_Pos)                 /*!< UART_T::WKCTL: WKDATEN Mask            */
N
N#define UART_WKCTL_WKRFRTEN_Pos          (2)                                               /*!< UART_T::WKCTL: WKRFRTEN Position       */
N#define UART_WKCTL_WKRFRTEN_Msk          (0x1ul << UART_WKCTL_WKRFRTEN_Pos)                /*!< UART_T::WKCTL: WKRFRTEN Mask           */
N
N#define UART_WKCTL_WKRS485EN_Pos         (3)                                               /*!< UART_T::WKCTL: WKRS485EN Position      */
N#define UART_WKCTL_WKRS485EN_Msk         (0x1ul << UART_WKCTL_WKRS485EN_Pos)               /*!< UART_T::WKCTL: WKRS485EN Mask          */
N
N#define UART_WKCTL_WKTOUTEN_Pos          (4)                                               /*!< UART_T::WKCTL: WKTOUTEN Position       */
N#define UART_WKCTL_WKTOUTEN_Msk          (0x1ul << UART_WKCTL_WKTOUTEN_Pos)                /*!< UART_T::WKCTL: WKTOUTEN Mask           */
N
N#define UART_WKSTS_CTSWKF_Pos            (0)                                               /*!< UART_T::WKSTS: CTSWKF Position         */
N#define UART_WKSTS_CTSWKF_Msk            (0x1ul << UART_WKSTS_CTSWKF_Pos)                  /*!< UART_T::WKSTS: CTSWKF Mask             */
N
N#define UART_WKSTS_DATWKF_Pos            (1)                                               /*!< UART_T::WKSTS: DATWKF Position         */
N#define UART_WKSTS_DATWKF_Msk            (0x1ul << UART_WKSTS_DATWKF_Pos)                  /*!< UART_T::WKSTS: DATWKF Mask             */
N
N#define UART_WKSTS_RFRTWKF_Pos           (2)                                               /*!< UART_T::WKSTS: RFRTWKF Position        */
N#define UART_WKSTS_RFRTWKF_Msk           (0x1ul << UART_WKSTS_RFRTWKF_Pos)                 /*!< UART_T::WKSTS: RFRTWKF Mask            */
N
N#define UART_WKSTS_RS485WKF_Pos          (3)                                               /*!< UART_T::WKSTS: RS485WKF Position       */
N#define UART_WKSTS_RS485WKF_Msk          (0x1ul << UART_WKSTS_RS485WKF_Pos)                /*!< UART_T::WKSTS: RS485WKF Mask           */
N
N#define UART_WKSTS_TOUTWKF_Pos           (4)                                               /*!< UART_T::WKSTS: TOUTWKF Position        */
N#define UART_WKSTS_TOUTWKF_Msk           (0x1ul << UART_WKSTS_TOUTWKF_Pos)                 /*!< UART_T::WKSTS: TOUTWKF Mask            */
N
N#define UART_DWKCOMP_STCOMP_Pos          (0)                                               /*!< UART_T::DWKCOMP: STCOMP Position       */
N#define UART_DWKCOMP_STCOMP_Msk          (0xfffful << UART_DWKCOMP_STCOMP_Pos)             /*!< UART_T::DWKCOMP: STCOMP Mask           */
N
N/**@}*/ /* UART_CONST */
N/**@}*/ /* end of UART register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __UART_REG_H__ */
L 165 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "ui2c_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\ui2c_reg.h" 1
N/**************************************************************************//**
N * @file     ui2c_reg.h
N * @version  V1.00
N * @brief    UI2C register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __UI2C_REG_H__
N#define __UI2C_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup UI2C I2C Mode of USCI Controller (UI2C)
N    Memory Mapped Structure for UI2C Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var UI2C_T::CTL
N     * Offset: 0x00  USCI Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |FUNMODE   |Function Mode
N     * |        |          |This bit field selects the protocol for this USCI controller
N     * |        |          |Selecting a protocol that is not available or a reserved combination disables the USCI
N     * |        |          |When switching between two protocols, the USCI has to be disabled before selecting a new protocol
N     * |        |          |Simultaneously, the USCI will be reset when user write 000 to FUNMODE.
N     * |        |          |000 = The USCI is disabled. All protocol related state machines are set to idle state.
N     * |        |          |001 = The SPI protocol is selected.
N     * |        |          |010 = The UART protocol is selected.
N     * |        |          |100 = The I2C protocol is selected.
N     * |        |          |Note: Other bit combinations are reserved.
N     * @var UI2C_T::BRGEN
N     * Offset: 0x08  USCI Baud Rate Generator Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RCLKSEL   |Reference Clock Source Selection
N     * |        |          |This bit selects the source signal of reference clock (fREF_CLK).
N     * |        |          |0 = Peripheral device clock fPCLK.
N     * |        |          |1 = Reserved.
N     * |[1]     |PTCLKSEL  |Protocol Clock Source Selection
N     * |        |          |This bit selects the source signal of protocol clock (fPROT_CLK).
N     * |        |          |0 = Reference clock fREF_CLK.
N     * |        |          |1 = fREF_CLK2 (its frequency is half of fREF_CLK).
N     * |[3:2]   |SPCLKSEL  |Sample Clock Source Selection
N     * |        |          |This bit field used for the clock source selection of a sample clock (fSAMP_CLK) for the protocol processor.
N     * |        |          |00 = fSAMP_CLK = fDIV_CLK.
N     * |        |          |01 = fSAMP_CLK = fPROT_CLK.
N     * |        |          |10 = fSAMP_CLK = fSCLK.
N     * |        |          |11 = fSAMP_CLK = fREF_CLK.
N     * |[4]     |TMCNTEN   |Time Measurement Counter Enable Bit
N     * |        |          |This bit enables the 10-bit timing measurement counter.
N     * |        |          |0 = Time measurement counter is Disabled.
N     * |        |          |1 = Time measurement counter is Enabled.
N     * |[5]     |TMCNTSRC  |Time Measurement Counter Clock Source Selection
N     * |        |          |0 = Time measurement counter with fPROT_CLK.
N     * |        |          |1 = Time measurement counter with fDIV_CLK.
N     * |[9:8]   |PDSCNT    |Pre-divider for Sample Counter
N     * |        |          |This bit field defines the divide ratio of the clock division from sample clock fSAMP_CLK
N     * |        |          |The divided frequency fPDS_CNT = fSAMP_CLK / (PDSCNT+1).
N     * |[14:10] |DSCNT     |Denominator for Sample Counter
N     * |        |          |This bit field defines the divide ratio of the sample clock fSAMP_CLK.
N     * |        |          |The divided frequency fDS_CNT = fPDS_CNT / (DSCNT+1).
N     * |        |          |Note: The maximum value of DSCNT is 0xF on UART mode and suggest to set over 4 to confirm the receiver data is sampled in right value
N     * |[25:16] |CLKDIV    |Clock Divider
N     * |        |          |This bit field defines the ratio between the protocol clock frequency fPROT_CLK and the clock divider frequency fDIV_CLK (fDIV_CLK = fPROT_CLK / (CLKDIV+1) ).
N     * |        |          |Note: I2C function, the minimum value of CLKDIV is 8.
N     * |        |          |Note: In UART function, it can be updated by hardware in the 4th falling edge of the input data 0x55 when the auto baud rate function (ABREN(UI2C_PROTCTL[6])) is enabled
N     * |        |          |The revised value is the average bit time between bit 5 and bit 6
N     * |        |          |The user can use revised CLKDIV and new BRDETITV (UI2C_PROTCTL[24:16]) to calculate the precise baud rate.
N     * @var UI2C_T::LINECTL
N     * Offset: 0x2C  USCI Line Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |LSB       |LSB First Transmission Selection
N     * |        |          |0 = The MSB, which bit of transmit/receive data buffer depends on the setting of DWIDTH, is transmitted/received first.
N     * |        |          |1 = The LSB, the bit 0 of data buffer, will be transmitted/received first.
N     * |[11:8]  |DWIDTH    |Word Length of Transmission
N     * |        |          |This bit field defines the data word length (amount of bits) for reception and transmission
N     * |        |          |The data word is always right-aligned in the data buffer
N     * |        |          |USCI support word length from 4 to 16 bits.
N     * |        |          |0x0: The data word contains 16 bits located at bit positions [15:0].
N     * |        |          |0x1: Reserved.
N     * |        |          |0x2: Reserved.
N     * |        |          |0x3: Reserved.
N     * |        |          |0x4: The data word contains 4 bits located at bit positions [3:0].
N     * |        |          |0x5: The data word contains 5 bits located at bit positions [4:0].
N     * |        |          |..
N     * |        |          |0xF: The data word contains 15 bits located at bit positions [14:0].
N     * |        |          |Note: In I2C protocol, the length must be configured as 8 bits.
N     * @var UI2C_T::TXDAT
N     * Offset: 0x30  USCI Transmit Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |TXDAT     |Transmit Data
N     * |        |          |Software can use this bit field to write 16-bit transmit data for transmission.
N     * @var UI2C_T::RXDAT
N     * Offset: 0x34  USCI Receive Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RXDAT     |Received Data
N     * |        |          |This bit field monitors the received data which stored in receive data buffer.
N     * |        |          |Note 1: In I2C protocol, RXDAT[12:8] indicate the different transmission conditions which defined in I2C.
N     * |        |          |Note 2: In UART protocol, RXDAT[15:13] indicate the same frame status of BREAK, FRMERR and PARITYERR (UI2C_PROTSTS[7:5]).
N     * @var UI2C_T::DEVADDR0
N     * Offset: 0x44  USCI Device Address Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |DEVADDR   |Device Address
N     * |        |          |In I2C protocol, this bit field contains the programmed   slave address
N     * |        |          |If the first received address byte are 1111 0AAXB,   the AA bits are compared to the bits DEVADDR[9:8] to check for   address match, where the X is R/W bit
N     * |        |          |Then the second address byte is also   compared to DEVADDR[7:0].
N     * |        |          |Note: The   DEVADDR [9:7] must be set 3'b000 when I2C operating in 7-bit   address mode.
N     * @var UI2C_T::DEVADDR1
N     * Offset: 0x48  USCI Device Address Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |DEVADDR   |Device Address
N     * |        |          |In I2C protocol, this bit field contains the programmed   slave address
N     * |        |          |If the first received address byte are 1111 0AAXB,   the AA bits are compared to the bits DEVADDR[9:8] to check for   address match, where the X is R/W bit
N     * |        |          |Then the second address byte is also   compared to DEVADDR[7:0].
N     * |        |          |Note: The   DEVADDR [9:7] must be set 3'b000 when I2C operating in 7-bit   address mode.
N     * @var UI2C_T::ADDRMSK0
N     * Offset: 0x4C  USCI Device Address Mask Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |ADDRMSK   |USCI Device Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register.).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care.).
N     * |        |          |USCI support multiple address recognition with two address mask register
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * @var UI2C_T::ADDRMSK1
N     * Offset: 0x50  USCI Device Address Mask Register 1
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |ADDRMSK   |USCI Device Address Mask
N     * |        |          |0 = Mask Disabled (the received corresponding register bit should be exact the same as address register.).
N     * |        |          |1 = Mask Enabled (the received corresponding address bit is don't care.).
N     * |        |          |USCI support multiple address recognition with two address mask register
N     * |        |          |When the bit in the address mask register is set to one, it means the received corresponding address bit is don't-care
N     * |        |          |If the bit is set to zero, that means the received corresponding register bit should be exact the same as address register.
N     * @var UI2C_T::WKCTL
N     * Offset: 0x54  USCI Wake-up Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKEN      |Wake-up Enable Bit
N     * |        |          |0 = Wake-up function Disabled.
N     * |        |          |1 = Wake-up function Enabled.
N     * |[1]     |WKADDREN  |Wake-up Address Match Enable Bit
N     * |        |          |0 = The chip is woken up according data toggle.
N     * |        |          |1 = The chip is woken up according address match.
N     * @var UI2C_T::WKSTS
N     * Offset: 0x58  USCI Wake-up Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKF       |Wake-up Flag
N     * |        |          |When chip is woken up from Power-down mode, this bit is set to 1
N     * |        |          |Software can write 1 to clear this bit.
N     * @var UI2C_T::PROTCTL
N     * Offset: 0x5C  USCI Protocol Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |GCFUNC    |General Call Function
N     * |        |          |0 = General Call Function Disabled.
N     * |        |          |1 = General Call Function Enabled.
N     * |[1]     |AA        |Assert Acknowledge Control
N     * |        |          |When AA =1 prior to address or data received, an acknowledged (low level to SDA) will be returned during the acknowledge clock pulse on the SCL line when 1.) A slave is acknowledging the address sent from master, 2.) The receiver devices are acknowledging the data sent by transmitter
N     * |        |          |When AA=0 prior to address or data received, a Not acknowledged (high level to SDA) will be returned during the acknowledge clock pulse on the SCL line.
N     * |[2]     |STO       |I2C STOP Control
N     * |        |          |In Master mode, setting STO to transmit a STOP condition to bus then I2C hardware will check the bus condition if a STOP condition is detected this bit will be cleared by hardware automatically
N     * |        |          |In a slave mode, setting STO resets I2C hardware to the defined "not addressed" slave mode when bus error (UI2C_PROTSTS.ERRIF = 1).
N     * |[3]     |STA       |I2C START Control
N     * |        |          |Setting STA to logic 1 to enter Master mode, the I2C hardware sends a START or repeat START condition to bus when the bus is free.
N     * |[4]     |ADDR10EN  |Address 10-bit Function Enable Bit
N     * |        |          |0 = Address match 10 bit function is disabled.
N     * |        |          |1 = Address match 10 bit function is enabled.
N     * |[5]     |PTRG      |I2C Protocol Trigger
N     * |        |          |When a new state is present in the UI2C_PROTSTS register, if the related interrupt enable bits are set, the I2C interrupt is requested
N     * |        |          |It must write one by software to this bit after the related interrupt flags are set to 1 and the I2C protocol function will go ahead until the STOP is active or the PROTEN is disabled.
N     * |        |          |0 = I2C's stretch disabled and the I2C protocol function will go ahead.
N     * |        |          |1 = I2C's stretch active.
N     * |[8]     |SCLOUTEN  |SCL Output Enable Bit
N     * |        |          |This bit enables monitor pulling SCL to low
N     * |        |          |This monitor will pull SCL to low until it has had time to respond to an I2C interrupt.
N     * |        |          |0 = SCL output will be forced high due to open drain mechanism.
N     * |        |          |1 = I2C module may act as a slave peripheral just like in normal operation, the I2C holds the clock line low until it has had time to clear I2C interrupt.
N     * |[9]     |MONEN     |Monitor Mode Enable Bit
N     * |        |          |This bit enables monitor mode
N     * |        |          |In monitor mode the SDA output will be put in high impedance mode
N     * |        |          |This prevents the I2C module from outputting data of any kind (including ACK) onto the I2C data bus.
N     * |        |          |0 = The monitor mode is disabled.
N     * |        |          |1 = The monitor mode is enabled.
N     * |        |          |Note: Depending on the state of the SCLOUTEN bit, the SCL output may be also forced high, preventing the module from having control over the I2C clock line.
N     * |[25:16] |TOCNT     |Time-out Clock Cycle
N     * |        |          |This bit field indicates how many clock cycle selected by TMCNTSRC (UI2C_BRGEN [5]) when each interrupt flags are clear
N     * |        |          |The time-out is enable when TOCNT bigger than 0.
N     * |        |          |Note: The TMCNTSRC (UI2C_BRGEN [5]) must be set zero on I2C mode.
N     * |[31]    |PROTEN    |I2C Protocol Enable Bit
N     * |        |          |0 = I2C Protocol disable.
N     * |        |          |1 = I2C Protocol enable.
N     * @var UI2C_T::PROTIEN
N     * Offset: 0x60  USCI Protocol Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |TOIEN     |Time-out Interrupt Enable Control
N     * |        |          |In I2C protocol, this bit enables the interrupt generation in case of a time-out event.
N     * |        |          |0 = The time-out interrupt is disabled.
N     * |        |          |1 = The time-out interrupt is enabled.
N     * |[1]     |STARIEN   |Start Condition Received Interrupt Enable Control
N     * |        |          |This bit enables the generation of a protocol interrupt if a start condition is detected.
N     * |        |          |0 = The start condition interrupt is disabled.
N     * |        |          |1 = The start condition interrupt is enabled.
N     * |[2]     |STORIEN   |Stop Condition Received Interrupt Enable Control
N     * |        |          |This bit enables the generation of a protocol interrupt if a stop condition is detected.
N     * |        |          |0 = The stop condition interrupt is disabled.
N     * |        |          |1 = The stop condition interrupt is enabled.
N     * |[3]     |NACKIEN   |Non - Acknowledge Interrupt Enable Control
N     * |        |          |This bit enables the generation of a protocol interrupt if a non - acknowledge is detected by a master.
N     * |        |          |0 = The non - acknowledge interrupt is disabled.
N     * |        |          |1 = The non - acknowledge interrupt is enabled.
N     * |[4]     |ARBLOIEN  |Arbitration Lost Interrupt Enable Control
N     * |        |          |This bit enables the generation of a protocol interrupt if an arbitration lost event is detected.
N     * |        |          |0 = The arbitration lost interrupt is disabled.
N     * |        |          |1 = The arbitration lost interrupt is enabled.
N     * |[5]     |ERRIEN    |Error Interrupt Enable Control
N     * |        |          |This bit enables the generation of a protocol interrupt if an I2C error condition is detected (indicated by ERR (UI2C_PROTSTS [16])).
N     * |        |          |0 = The error interrupt is disabled.
N     * |        |          |1 = The error interrupt is enabled.
N     * |[6]     |ACKIEN    |Acknowledge Interrupt Enable Control
N     * |        |          |This bit enables the generation of a protocol interrupt if an acknowledge is detected by a master.
N     * |        |          |0 = The acknowledge interrupt is disabled.
N     * |        |          |1 = The acknowledge interrupt is enabled.
N     * @var UI2C_T::PROTSTS
N     * Offset: 0x64  USCI Protocol Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5]     |TOIF      |Time-out Interrupt Flag
N     * |        |          |0 = A time-out interrupt status has not occurred.
N     * |        |          |1 = A time-out interrupt status has occurred.
N     * |        |          |Note: It is cleared by software writing one into this bit
N     * |[6]     |ONBUSY    |On Bus Busy
N     * |        |          |Indicates that a communication is in progress on the bus
N     * |        |          |It is set by hardware when a START condition is detected
N     * |        |          |It is cleared by hardware when a STOP condition is detected
N     * |        |          |0 = The bus is IDLE (both SCLK and SDA High).
N     * |        |          |1 = The bus is busy.
N     * |[8]     |STARIF    |Start Condition Received Interrupt Flag
N     * |        |          |This bit indicates that a start condition or repeated start condition has been detected on master mode
N     * |        |          |However, this bit also indicates that a repeated start condition has been detected on slave mode.
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.STARIEN = 1.
N     * |        |          |0 = A start condition has not yet been detected.
N     * |        |          |1 = A start condition has been detected.
N     * |        |          |It is cleared by software writing one into this bit
N     * |[9]     |STORIF    |Stop Condition Received Interrupt Flag
N     * |        |          |This bit indicates that a stop condition has been detected on the I2C bus lines
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.STORIEN = 1.
N     * |        |          |0 = A stop condition has not yet been detected.
N     * |        |          |1 = A stop condition has been detected.
N     * |        |          |It is cleared by software writing one into this bit
N     * |[10]    |NACKIF    |Non - Acknowledge Received Interrupt Flag
N     * |        |          |This bit indicates that a non - acknowledge has been received in master mode
N     * |        |          |This bit is not set in slave mode
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.NACKIEN = 1.
N     * |        |          |0 = A non - acknowledge has not been received.
N     * |        |          |1 = A non - acknowledge has been received.
N     * |        |          |It is cleared by software writing one into this bit
N     * |[11]    |ARBLOIF   |Arbitration Lost Interrupt Flag
N     * |        |          |This bit indicates that an arbitration has been lost
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.ARBLOIEN = 1.
N     * |        |          |0 = An arbitration has not been lost.
N     * |        |          |1 = An arbitration has been lost.
N     * |        |          |It is cleared by software writing one into this bit
N     * |[12]    |ERRIF     |Error Interrupt Flag
N     * |        |          |This bit indicates that a Bus Error occurs when a START or STOP condition is present at an illegal position in the formation frame
N     * |        |          |Example of illegal position are during the serial transfer of an address byte, a data byte or an acknowledge bit
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.ERRIEN = 1.
N     * |        |          |0 = An I2C error has not been detected.
N     * |        |          |1 = An I2C error has been detected.
N     * |        |          |It is cleared by software writing one into this bit
N     * |        |          |Note: This bit is set when slave mode, user must write one into STO register to the defined "not addressed" slave mode.
N     * |[13]    |ACKIF     |Acknowledge Received Interrupt Flag
N     * |        |          |This bit indicates that an acknowledge has been received in master mode
N     * |        |          |This bit is not set in slave mode
N     * |        |          |A protocol interrupt can be generated if UI2C_PROTCTL.ACKIEN = 1.
N     * |        |          |0 = An acknowledge has not been received.
N     * |        |          |1 = An acknowledge has been received.
N     * |        |          |It is cleared by software writing one into this bit
N     * |[14]    |SLASEL    |Slave Select Status
N     * |        |          |This bit indicates that this device has been selected as slave.
N     * |        |          |0 = The device is not selected as slave.
N     * |        |          |1 = The device is selected as slave.
N     * |        |          |Note: This bit has no interrupt signal, and it will be cleared automatically by hardware.
N     * |[15]    |SLAREAD   |Slave Read Request Status
N     * |        |          |This bit indicates that a slave read request has been detected.
N     * |        |          |0 = A slave read request has not been detected.
N     * |        |          |1 = A slave read request has been detected.
N     * |        |          |Note: This bit has no interrupt signal, and it will be cleared automatically by hardware.
N     * |[16]    |WKAKDONE  |Wakeup Address Frame Acknowledge Bit Done
N     * |        |          |0 = The ACK bit cycle of address match frame isn't done.
N     * |        |          |1 = The ACK bit cycle of address match frame is done in power-down.
N     * |        |          |Note: This bit can't release when WKUPIF is set.
N     * |[17]    |WRSTSWK   |Read/Write Status Bit in Address Wakeup Frame
N     * |        |          |0 = Write command be record on the address match wakeup frame.
N     * |        |          |1 = Read command be record on the address match wakeup frame.
N     * |[18]    |BUSHANG   |Bus Hang-up
N     * |        |          |This bit indicates bus hang-up status
N     * |        |          |There is 4-bit counter count when SCL hold high and refer fSAMP_CLK
N     * |        |          |The hang-up counter will count to overflow and set this bit when SDA is low
N     * |        |          |The counter will be reset by falling edge of SCL signal.
N     * |        |          |0 = The bus is normal status for transmission.
N     * |        |          |1 = The bus is hang-up status for transmission.
N     * |        |          |Note: This bit has no interrupt signal, and it will be cleared automatically by hardware.
N     * @var UI2C_T::ADMAT
N     * Offset: 0x88  I2C Slave Match Address Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |ADMAT0    |USCI Address 0 Match Status Register
N     * |        |          |When address 0 is matched, hardware will inform which address used
N     * |        |          |This bit will set to 1, and software can write 1 to clear this bit.
N     * |[1]     |ADMAT1    |USCI Address 1 Match Status Register
N     * |        |          |When address 1 is matched, hardware will inform which address used
N     * |        |          |This bit will set to 1, and software can write 1 to clear this bit.
N     * @var UI2C_T::TMCTL
N     * Offset: 0x8C  I2C Timing Configure Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |STCTL     |Setup Time Configure Control Register
N     * |        |          |This field is used to generate a delay timing between SDA edge and SCL rising edge in transmission mode.
N     * |        |          |The delay setup time is numbers of peripheral clock = STCTL x fPCLK.
N     * |[11:6]  |HTCTL     |Hold Time Configure Control Register
N     * |        |          |This field is used to generate the delay timing between SCL falling edge SDA edge in
N     * |        |          |transmission mode.
N     * |        |          |The delay hold time is numbers of peripheral clock = HTCTL x fPCLK.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] USCI Control Register                                            */
X    volatile uint32_t CTL;                    
N    __I  uint32_t RESERVE0[1];
X    volatile const  uint32_t RESERVE0[1];
N    __IO uint32_t BRGEN;                 /*!< [0x0008] USCI Baud Rate Generator Register                                */
X    volatile uint32_t BRGEN;                  
N    __I  uint32_t RESERVE1[8];
X    volatile const  uint32_t RESERVE1[8];
N    __IO uint32_t LINECTL;               /*!< [0x002c] USCI Line Control Register                                       */
X    volatile uint32_t LINECTL;                
N    __O  uint32_t TXDAT;                 /*!< [0x0030] USCI Transmit Data Register                                      */
X    volatile  uint32_t TXDAT;                  
N    __I  uint32_t RXDAT;                 /*!< [0x0034] USCI Receive Data Register                                       */
X    volatile const  uint32_t RXDAT;                  
N    __I  uint32_t RESERVE2[3];
X    volatile const  uint32_t RESERVE2[3];
N    __IO uint32_t DEVADDR0;              /*!< [0x0044] USCI Device Address Register 0                                   */
X    volatile uint32_t DEVADDR0;               
N    __IO uint32_t DEVADDR1;              /*!< [0x0048] USCI Device Address Register 1                                   */
X    volatile uint32_t DEVADDR1;               
N    __IO uint32_t ADDRMSK0;              /*!< [0x004c] USCI Device Address Mask Register 0                              */
X    volatile uint32_t ADDRMSK0;               
N    __IO uint32_t ADDRMSK1;              /*!< [0x0050] USCI Device Address Mask Register 1                              */
X    volatile uint32_t ADDRMSK1;               
N    __IO uint32_t WKCTL;                 /*!< [0x0054] USCI Wake-up Control Register                                    */
X    volatile uint32_t WKCTL;                  
N    __IO uint32_t WKSTS;                 /*!< [0x0058] USCI Wake-up Status Register                                     */
X    volatile uint32_t WKSTS;                  
N    __IO uint32_t PROTCTL;               /*!< [0x005c] USCI Protocol Control Register                                   */
X    volatile uint32_t PROTCTL;                
N    __IO uint32_t PROTIEN;               /*!< [0x0060] USCI Protocol Interrupt Enable Register                          */
X    volatile uint32_t PROTIEN;                
N    __IO uint32_t PROTSTS;               /*!< [0x0064] USCI Protocol Status Register                                    */
X    volatile uint32_t PROTSTS;                
N    __I  uint32_t RESERVE3[8];
X    volatile const  uint32_t RESERVE3[8];
N    __IO uint32_t ADMAT;                 /*!< [0x0088] I2C Slave Match Address Register                                 */
X    volatile uint32_t ADMAT;                  
N    __IO uint32_t TMCTL;                 /*!< [0x008c] I2C Timing Configure Control Register                            */
X    volatile uint32_t TMCTL;                  
N} UI2C_T;
N
N/**
N    @addtogroup UI2C_CONST UI2C Bit Field Definition
N    Constant Definitions for UI2C Controller
N@{ */
N
N#define UI2C_CTL_FUNMODE_Pos             (0)                                               /*!< UI2C_T::CTL: FUNMODE Position          */
N#define UI2C_CTL_FUNMODE_Msk             (0x7ul << UI2C_CTL_FUNMODE_Pos)                   /*!< UI2C_T::CTL: FUNMODE Mask              */
N
N#define UI2C_BRGEN_RCLKSEL_Pos           (0)                                               /*!< UI2C_T::BRGEN: RCLKSEL Position        */
N#define UI2C_BRGEN_RCLKSEL_Msk           (0x1ul << UI2C_BRGEN_RCLKSEL_Pos)                 /*!< UI2C_T::BRGEN: RCLKSEL Mask            */
N
N#define UI2C_BRGEN_PTCLKSEL_Pos          (1)                                               /*!< UI2C_T::BRGEN: PTCLKSEL Position       */
N#define UI2C_BRGEN_PTCLKSEL_Msk          (0x1ul << UI2C_BRGEN_PTCLKSEL_Pos)                /*!< UI2C_T::BRGEN: PTCLKSEL Mask           */
N
N#define UI2C_BRGEN_SPCLKSEL_Pos          (2)                                               /*!< UI2C_T::BRGEN: SPCLKSEL Position       */
N#define UI2C_BRGEN_SPCLKSEL_Msk          (0x3ul << UI2C_BRGEN_SPCLKSEL_Pos)                /*!< UI2C_T::BRGEN: SPCLKSEL Mask           */
N
N#define UI2C_BRGEN_TMCNTEN_Pos           (4)                                               /*!< UI2C_T::BRGEN: TMCNTEN Position        */
N#define UI2C_BRGEN_TMCNTEN_Msk           (0x1ul << UI2C_BRGEN_TMCNTEN_Pos)                 /*!< UI2C_T::BRGEN: TMCNTEN Mask            */
N
N#define UI2C_BRGEN_TMCNTSRC_Pos          (5)                                               /*!< UI2C_T::BRGEN: TMCNTSRC Position       */
N#define UI2C_BRGEN_TMCNTSRC_Msk          (0x1ul << UI2C_BRGEN_TMCNTSRC_Pos)                /*!< UI2C_T::BRGEN: TMCNTSRC Mask           */
N
N#define UI2C_BRGEN_PDSCNT_Pos            (8)                                               /*!< UI2C_T::BRGEN: PDSCNT Position         */
N#define UI2C_BRGEN_PDSCNT_Msk            (0x3ul << UI2C_BRGEN_PDSCNT_Pos)                  /*!< UI2C_T::BRGEN: PDSCNT Mask             */
N
N#define UI2C_BRGEN_DSCNT_Pos             (10)                                              /*!< UI2C_T::BRGEN: DSCNT Position          */
N#define UI2C_BRGEN_DSCNT_Msk             (0x1ful << UI2C_BRGEN_DSCNT_Pos)                  /*!< UI2C_T::BRGEN: DSCNT Mask              */
N
N#define UI2C_BRGEN_CLKDIV_Pos            (16)                                              /*!< UI2C_T::BRGEN: CLKDIV Position         */
N#define UI2C_BRGEN_CLKDIV_Msk            (0x3fful << UI2C_BRGEN_CLKDIV_Pos)                /*!< UI2C_T::BRGEN: CLKDIV Mask             */
N
N#define UI2C_LINECTL_LSB_Pos             (0)                                               /*!< UI2C_T::LINECTL: LSB Position          */
N#define UI2C_LINECTL_LSB_Msk             (0x1ul << UI2C_LINECTL_LSB_Pos)                   /*!< UI2C_T::LINECTL: LSB Mask              */
N
N#define UI2C_LINECTL_DWIDTH_Pos          (8)                                               /*!< UI2C_T::LINECTL: DWIDTH Position       */
N#define UI2C_LINECTL_DWIDTH_Msk          (0xful << UI2C_LINECTL_DWIDTH_Pos)                /*!< UI2C_T::LINECTL: DWIDTH Mask           */
N
N#define UI2C_TXDAT_TXDAT_Pos             (0)                                               /*!< UI2C_T::TXDAT: TXDAT Position          */
N#define UI2C_TXDAT_TXDAT_Msk             (0xfffful << UI2C_TXDAT_TXDAT_Pos)                /*!< UI2C_T::TXDAT: TXDAT Mask              */
N
N#define UI2C_RXDAT_RXDAT_Pos             (0)                                               /*!< UI2C_T::RXDAT: RXDAT Position          */
N#define UI2C_RXDAT_RXDAT_Msk             (0xfffful << UI2C_RXDAT_RXDAT_Pos)                /*!< UI2C_T::RXDAT: RXDAT Mask              */
N
N#define UI2C_DEVADDR0_DEVADDR_Pos        (0)                                               /*!< UI2C_T::DEVADDR0: DEVADDR Position     */
N#define UI2C_DEVADDR0_DEVADDR_Msk        (0x3fful << UI2C_DEVADDR0_DEVADDR_Pos)            /*!< UI2C_T::DEVADDR0: DEVADDR Mask         */
N
N#define UI2C_DEVADDR1_DEVADDR_Pos        (0)                                               /*!< UI2C_T::DEVADDR1: DEVADDR Position     */
N#define UI2C_DEVADDR1_DEVADDR_Msk        (0x3fful << UI2C_DEVADDR1_DEVADDR_Pos)            /*!< UI2C_T::DEVADDR1: DEVADDR Mask         */
N
N#define UI2C_ADDRMSK0_ADDRMSK_Pos        (0)                                               /*!< UI2C_T::ADDRMSK0: ADDRMSK Position     */
N#define UI2C_ADDRMSK0_ADDRMSK_Msk        (0x3fful << UI2C_ADDRMSK0_ADDRMSK_Pos)            /*!< UI2C_T::ADDRMSK0: ADDRMSK Mask         */
N
N#define UI2C_ADDRMSK1_ADDRMSK_Pos        (0)                                               /*!< UI2C_T::ADDRMSK1: ADDRMSK Position     */
N#define UI2C_ADDRMSK1_ADDRMSK_Msk        (0x3fful << UI2C_ADDRMSK1_ADDRMSK_Pos)            /*!< UI2C_T::ADDRMSK1: ADDRMSK Mask         */
N
N#define UI2C_WKCTL_WKEN_Pos              (0)                                               /*!< UI2C_T::WKCTL: WKEN Position           */
N#define UI2C_WKCTL_WKEN_Msk              (0x1ul << UI2C_WKCTL_WKEN_Pos)                    /*!< UI2C_T::WKCTL: WKEN Mask               */
N
N#define UI2C_WKCTL_WKADDREN_Pos          (1)                                               /*!< UI2C_T::WKCTL: WKADDREN Position       */
N#define UI2C_WKCTL_WKADDREN_Msk          (0x1ul << UI2C_WKCTL_WKADDREN_Pos)                /*!< UI2C_T::WKCTL: WKADDREN Mask           */
N
N#define UI2C_WKSTS_WKF_Pos               (0)                                               /*!< UI2C_T::WKSTS: WKF Position            */
N#define UI2C_WKSTS_WKF_Msk               (0x1ul << UI2C_WKSTS_WKF_Pos)                     /*!< UI2C_T::WKSTS: WKF Mask                */
N
N#define UI2C_PROTCTL_GCFUNC_Pos          (0)                                               /*!< UI2C_T::PROTCTL: GCFUNC Position       */
N#define UI2C_PROTCTL_GCFUNC_Msk          (0x1ul << UI2C_PROTCTL_GCFUNC_Pos)                /*!< UI2C_T::PROTCTL: GCFUNC Mask           */
N
N#define UI2C_PROTCTL_AA_Pos              (1)                                               /*!< UI2C_T::PROTCTL: AA Position           */
N#define UI2C_PROTCTL_AA_Msk              (0x1ul << UI2C_PROTCTL_AA_Pos)                    /*!< UI2C_T::PROTCTL: AA Mask               */
N
N#define UI2C_PROTCTL_STO_Pos             (2)                                               /*!< UI2C_T::PROTCTL: STO Position          */
N#define UI2C_PROTCTL_STO_Msk             (0x1ul << UI2C_PROTCTL_STO_Pos)                   /*!< UI2C_T::PROTCTL: STO Mask              */
N
N#define UI2C_PROTCTL_STA_Pos             (3)                                               /*!< UI2C_T::PROTCTL: STA Position          */
N#define UI2C_PROTCTL_STA_Msk             (0x1ul << UI2C_PROTCTL_STA_Pos)                   /*!< UI2C_T::PROTCTL: STA Mask              */
N
N#define UI2C_PROTCTL_ADDR10EN_Pos        (4)                                               /*!< UI2C_T::PROTCTL: ADDR10EN Position     */
N#define UI2C_PROTCTL_ADDR10EN_Msk        (0x1ul << UI2C_PROTCTL_ADDR10EN_Pos)              /*!< UI2C_T::PROTCTL: ADDR10EN Mask         */
N
N#define UI2C_PROTCTL_PTRG_Pos            (5)                                               /*!< UI2C_T::PROTCTL: PTRG Position         */
N#define UI2C_PROTCTL_PTRG_Msk            (0x1ul << UI2C_PROTCTL_PTRG_Pos)                  /*!< UI2C_T::PROTCTL: PTRG Mask             */
N
N#define UI2C_PROTCTL_SCLOUTEN_Pos        (8)                                               /*!< UI2C_T::PROTCTL: SCLOUTEN Position     */
N#define UI2C_PROTCTL_SCLOUTEN_Msk        (0x1ul << UI2C_PROTCTL_SCLOUTEN_Pos)              /*!< UI2C_T::PROTCTL: SCLOUTEN Mask         */
N
N#define UI2C_PROTCTL_MONEN_Pos           (9)                                               /*!< UI2C_T::PROTCTL: MONEN Position        */
N#define UI2C_PROTCTL_MONEN_Msk           (0x1ul << UI2C_PROTCTL_MONEN_Pos)                 /*!< UI2C_T::PROTCTL: MONEN Mask            */
N
N#define UI2C_PROTCTL_TOCNT_Pos           (16)                                              /*!< UI2C_T::PROTCTL: TOCNT Position        */
N#define UI2C_PROTCTL_TOCNT_Msk           (0x3fful << UI2C_PROTCTL_TOCNT_Pos)               /*!< UI2C_T::PROTCTL: TOCNT Mask            */
N
N#define UI2C_PROTCTL_PROTEN_Pos          (31)                                              /*!< UI2C_T::PROTCTL: PROTEN Position       */
N#define UI2C_PROTCTL_PROTEN_Msk          (0x1ul << UI2C_PROTCTL_PROTEN_Pos)                /*!< UI2C_T::PROTCTL: PROTEN Mask           */
N
N#define UI2C_PROTIEN_TOIEN_Pos           (0)                                               /*!< UI2C_T::PROTIEN: TOIEN Position        */
N#define UI2C_PROTIEN_TOIEN_Msk           (0x1ul << UI2C_PROTIEN_TOIEN_Pos)                 /*!< UI2C_T::PROTIEN: TOIEN Mask            */
N
N#define UI2C_PROTIEN_STARIEN_Pos         (1)                                               /*!< UI2C_T::PROTIEN: STARIEN Position      */
N#define UI2C_PROTIEN_STARIEN_Msk         (0x1ul << UI2C_PROTIEN_STARIEN_Pos)               /*!< UI2C_T::PROTIEN: STARIEN Mask          */
N
N#define UI2C_PROTIEN_STORIEN_Pos         (2)                                               /*!< UI2C_T::PROTIEN: STORIEN Position      */
N#define UI2C_PROTIEN_STORIEN_Msk         (0x1ul << UI2C_PROTIEN_STORIEN_Pos)               /*!< UI2C_T::PROTIEN: STORIEN Mask          */
N
N#define UI2C_PROTIEN_NACKIEN_Pos         (3)                                               /*!< UI2C_T::PROTIEN: NACKIEN Position      */
N#define UI2C_PROTIEN_NACKIEN_Msk         (0x1ul << UI2C_PROTIEN_NACKIEN_Pos)               /*!< UI2C_T::PROTIEN: NACKIEN Mask          */
N
N#define UI2C_PROTIEN_ARBLOIEN_Pos        (4)                                               /*!< UI2C_T::PROTIEN: ARBLOIEN Position     */
N#define UI2C_PROTIEN_ARBLOIEN_Msk        (0x1ul << UI2C_PROTIEN_ARBLOIEN_Pos)              /*!< UI2C_T::PROTIEN: ARBLOIEN Mask         */
N
N#define UI2C_PROTIEN_ERRIEN_Pos          (5)                                               /*!< UI2C_T::PROTIEN: ERRIEN Position       */
N#define UI2C_PROTIEN_ERRIEN_Msk          (0x1ul << UI2C_PROTIEN_ERRIEN_Pos)                /*!< UI2C_T::PROTIEN: ERRIEN Mask           */
N
N#define UI2C_PROTIEN_ACKIEN_Pos          (6)                                               /*!< UI2C_T::PROTIEN: ACKIEN Position       */
N#define UI2C_PROTIEN_ACKIEN_Msk          (0x1ul << UI2C_PROTIEN_ACKIEN_Pos)                /*!< UI2C_T::PROTIEN: ACKIEN Mask           */
N
N#define UI2C_PROTSTS_TOIF_Pos            (5)                                               /*!< UI2C_T::PROTSTS: TOIF Position         */
N#define UI2C_PROTSTS_TOIF_Msk            (0x1ul << UI2C_PROTSTS_TOIF_Pos)                  /*!< UI2C_T::PROTSTS: TOIF Mask             */
N
N#define UI2C_PROTSTS_ONBUSY_Pos          (6)                                               /*!< UI2C_T::PROTSTS: ONBUSY Position       */
N#define UI2C_PROTSTS_ONBUSY_Msk          (0x1ul << UI2C_PROTSTS_ONBUSY_Pos)                /*!< UI2C_T::PROTSTS: ONBUSY Mask           */
N
N#define UI2C_PROTSTS_STARIF_Pos          (8)                                               /*!< UI2C_T::PROTSTS: STARIF Position       */
N#define UI2C_PROTSTS_STARIF_Msk          (0x1ul << UI2C_PROTSTS_STARIF_Pos)                /*!< UI2C_T::PROTSTS: STARIF Mask           */
N
N#define UI2C_PROTSTS_STORIF_Pos          (9)                                               /*!< UI2C_T::PROTSTS: STORIF Position       */
N#define UI2C_PROTSTS_STORIF_Msk          (0x1ul << UI2C_PROTSTS_STORIF_Pos)                /*!< UI2C_T::PROTSTS: STORIF Mask           */
N
N#define UI2C_PROTSTS_NACKIF_Pos          (10)                                              /*!< UI2C_T::PROTSTS: NACKIF Position       */
N#define UI2C_PROTSTS_NACKIF_Msk          (0x1ul << UI2C_PROTSTS_NACKIF_Pos)                /*!< UI2C_T::PROTSTS: NACKIF Mask           */
N
N#define UI2C_PROTSTS_ARBLOIF_Pos         (11)                                              /*!< UI2C_T::PROTSTS: ARBLOIF Position      */
N#define UI2C_PROTSTS_ARBLOIF_Msk         (0x1ul << UI2C_PROTSTS_ARBLOIF_Pos)               /*!< UI2C_T::PROTSTS: ARBLOIF Mask          */
N
N#define UI2C_PROTSTS_ERRIF_Pos           (12)                                              /*!< UI2C_T::PROTSTS: ERRIF Position        */
N#define UI2C_PROTSTS_ERRIF_Msk           (0x1ul << UI2C_PROTSTS_ERRIF_Pos)                 /*!< UI2C_T::PROTSTS: ERRIF Mask            */
N
N#define UI2C_PROTSTS_ACKIF_Pos           (13)                                              /*!< UI2C_T::PROTSTS: ACKIF Position        */
N#define UI2C_PROTSTS_ACKIF_Msk           (0x1ul << UI2C_PROTSTS_ACKIF_Pos)                 /*!< UI2C_T::PROTSTS: ACKIF Mask            */
N
N#define UI2C_PROTSTS_SLASEL_Pos          (14)                                              /*!< UI2C_T::PROTSTS: SLASEL Position       */
N#define UI2C_PROTSTS_SLASEL_Msk          (0x1ul << UI2C_PROTSTS_SLASEL_Pos)                /*!< UI2C_T::PROTSTS: SLASEL Mask           */
N
N#define UI2C_PROTSTS_SLAREAD_Pos         (15)                                              /*!< UI2C_T::PROTSTS: SLAREAD Position      */
N#define UI2C_PROTSTS_SLAREAD_Msk         (0x1ul << UI2C_PROTSTS_SLAREAD_Pos)               /*!< UI2C_T::PROTSTS: SLAREAD Mask          */
N
N#define UI2C_PROTSTS_WKAKDONE_Pos        (16)                                              /*!< UI2C_T::PROTSTS: WKAKDONE Position     */
N#define UI2C_PROTSTS_WKAKDONE_Msk        (0x1ul << UI2C_PROTSTS_WKAKDONE_Pos)              /*!< UI2C_T::PROTSTS: WKAKDONE Mask         */
N
N#define UI2C_PROTSTS_WRSTSWK_Pos         (17)                                              /*!< UI2C_T::PROTSTS: WRSTSWK Position      */
N#define UI2C_PROTSTS_WRSTSWK_Msk         (0x1ul << UI2C_PROTSTS_WRSTSWK_Pos)               /*!< UI2C_T::PROTSTS: WRSTSWK Mask          */
N
N#define UI2C_PROTSTS_BUSHANG_Pos         (18)                                              /*!< UI2C_T::PROTSTS: BUSHANG Position      */
N#define UI2C_PROTSTS_BUSHANG_Msk         (0x1ul << UI2C_PROTSTS_BUSHANG_Pos)               /*!< UI2C_T::PROTSTS: BUSHANG Mask          */
N
N#define UI2C_ADMAT_ADMAT0_Pos            (0)                                               /*!< UI2C_T::ADMAT: ADMAT0 Position         */
N#define UI2C_ADMAT_ADMAT0_Msk            (0x1ul << UI2C_ADMAT_ADMAT0_Pos)                  /*!< UI2C_T::ADMAT: ADMAT0 Mask             */
N
N#define UI2C_ADMAT_ADMAT1_Pos            (1)                                               /*!< UI2C_T::ADMAT: ADMAT1 Position         */
N#define UI2C_ADMAT_ADMAT1_Msk            (0x1ul << UI2C_ADMAT_ADMAT1_Pos)                  /*!< UI2C_T::ADMAT: ADMAT1 Mask             */
N
N#define UI2C_TMCTL_STCTL_Pos             (0)                                               /*!< UI2C_T::TMCTL: STCTL Position          */
N#define UI2C_TMCTL_STCTL_Msk             (0x3ful << UI2C_TMCTL_STCTL_Pos)                  /*!< UI2C_T::TMCTL: STCTL Mask              */
N
N#define UI2C_TMCTL_HTCTL_Pos             (6)                                               /*!< UI2C_T::TMCTL: HTCTL Position          */
N#define UI2C_TMCTL_HTCTL_Msk             (0x3ful << UI2C_TMCTL_HTCTL_Pos)                  /*!< UI2C_T::TMCTL: HTCTL Mask              */
N
N/**@}*/ /* UI2C_CONST */
N/**@}*/ /* end of UI2C register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __UI2C_REG_H__ */
L 166 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "uspi_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\uspi_reg.h" 1
N/**************************************************************************//**
N * @file     uspi_reg.h
N * @version  V1.00
N * @brief    USPI register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __USPI_REG_H__
N#define __USPI_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup USPI SPI Mode of USCI Controller (USPI)
N    Memory Mapped Structure for USPI Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var USPI_T::CTL
N     * Offset: 0x00  USCI Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |FUNMODE   |Function Mode
N     * |        |          |This bit field selects the protocol for this USCI controller
N     * |        |          |Selecting a protocol that is not available or a reserved combination disables the USCI
N     * |        |          |When switching between two protocols, the USCI has to be disabled before selecting a new protocol
N     * |        |          |Simultaneously, the USCI will be reset when user write 000 to FUNMODE.
N     * |        |          |000 = The USCI is disabled. All protocol related state machines are set to idle state.
N     * |        |          |001 = The SPI protocol is selected.
N     * |        |          |010 = The UART protocol is selected.
N     * |        |          |100 = The I2C protocol is selected.
N     * |        |          |Note: Other bit combinations are reserved.
N     * @var USPI_T::INTEN
N     * Offset: 0x04  USCI Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TXSTIEN   |Transmit Start Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a transmit start event.
N     * |        |          |0 = The transmit start interrupt is disabled.
N     * |        |          |1 = The transmit start interrupt is enabled.
N     * |[2]     |TXENDIEN  |Transmit End Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a transmit finish event.
N     * |        |          |0 = The transmit finish interrupt is disabled.
N     * |        |          |1 = The transmit finish interrupt is enabled.
N     * |[3]     |RXSTIEN   |Receive Start Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a receive start event.
N     * |        |          |0 = The receive start interrupt is disabled.
N     * |        |          |1 = The receive start interrupt is enabled.
N     * |[4]     |RXENDIEN  |Receive End Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a receive finish event.
N     * |        |          |0 = The receive end interrupt is disabled.
N     * |        |          |1 = The receive end interrupt is enabled.
N     * @var USPI_T::BRGEN
N     * Offset: 0x08  USCI Baud Rate Generator Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RCLKSEL   |Reference Clock Source Selection
N     * |        |          |This bit selects the source of reference clock (fREF_CLK).
N     * |        |          |0 = Peripheral device clock fPCLK.
N     * |        |          |1 = Reserved.
N     * |[1]     |PTCLKSEL  |Protocol Clock Source Selection
N     * |        |          |This bit selects the source of protocol clock (fPROT_CLK).
N     * |        |          |0 = Reference clock fREF_CLK.
N     * |        |          |1 = fREF_CLK2 (its frequency is half of fREF_CLK).
N     * |[3:2]   |SPCLKSEL  |Sample Clock Source Selection
N     * |        |          |This bit field used for the clock source selection of sample clock (fSAMP_CLK) for the protocol processor.
N     * |        |          |00 = fDIV_CLK.
N     * |        |          |01 = fPROT_CLK.
N     * |        |          |10 = fSCLK.
N     * |        |          |11 = fREF_CLK.
N     * |[4]     |TMCNTEN   |Time Measurement Counter Enable Bit
N     * |        |          |This bit enables the 10-bit timing measurement counter.
N     * |        |          |0 = Time measurement counter is Disabled.
N     * |        |          |1 = Time measurement counter is Enabled.
N     * |[5]     |TMCNTSRC  |Time Measurement Counter Clock Source Selection
N     * |        |          |0 = Time measurement counter with fPROT_CLK.
N     * |        |          |1 = Time measurement counter with fDIV_CLK.
N     * |[25:16] |CLKDIV    |Clock Divider
N     * |        |          |This bit field defines the ratio between the protocol clock frequency fPROT_CLK and the clock divider frequency fDIV_CLK (fDIV_CLK = fPROT_CLK / (CLKDIV+1) ).
N     * |        |          |Note: In UART function, it can be updated by hardware in the 4th falling edge of the input data 0x55 when the auto baud rate function (ABREN(USPI_PROTCTL[6])) is enabled
N     * |        |          |The revised value is the average bit time between bit 5 and bit 6
N     * |        |          |The user can use revised CLKDIV and new BRDETITV (USPI_PROTCTL[24:16]) to calculate the precise baud rate.
N     * @var USPI_T::DATIN0
N     * Offset: 0x10  USCI Input Data Signal Configuration Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input Signal Synchronization Selection
N     * |        |          |This bit selects if the un-synchronized input signal (with optionally   inverted) or the synchronized (and optionally filtered) signal can be used as   input for the data shift unit.
N     * |        |          |0 = The un-synchronized signal can be taken as input for the data shift   unit.
N     * |        |          |1 = The synchronized signal can be taken as input for the data shift   unit.
N     * |        |          |Note: In SPI protocol, we suggest this bit should be set as 0.
N     * |[2]     |ININV     |Input Signal Inverse Selection
N     * |        |          |This bit defines the inverter enable of the input asynchronous signal.
N     * |        |          |0 = The un-synchronized input signal will not be inverted.
N     * |        |          |1 = The un-synchronized input signal will be inverted.
N     * |        |          |Note: In SPI protocol, we suggest this bit should be set as 0.
N     * @var USPI_T::CTLIN0
N     * Offset: 0x20  USCI Input Control Signal Configuration Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input Synchronization Signal Selection
N     * |        |          |This bit selects if the un-synchronized input signal (with optionally   inverted) or the synchronized (and optionally filtered) signal can be used as   input for the data shift unit.
N     * |        |          |0 = The un-synchronized signal can be taken as input for the data shift   unit.
N     * |        |          |1 = The synchronized signal can be taken as input for the data shift   unit.
N     * |        |          |Note: In SPI protocol, we suggest this bit should be set as 0.
N     * |[2]     |ININV     |Input Signal Inverse Selection
N     * |        |          |This bit defines the inverter enable of the input asynchronous signal.
N     * |        |          |0 = The un-synchronized input signal will not be inverted.
N     * |        |          |1 = The un-synchronized input signal will be inverted.
N     * @var USPI_T::CLKIN
N     * Offset: 0x28  USCI Input Clock Signal Configuration Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input Synchronization Signal Selection
N     * |        |          |This bit selects if the un-synchronized input signal or the   synchronized (and optionally filtered) signal can be used as input for the   data shift unit.
N     * |        |          |0 = The un-synchronized signal can be taken as input for the data shift   unit.
N     * |        |          |1 = The synchronized signal can be taken as input for the data shift   unit.
N     * |        |          |Note: In SPI protocol, we suggest this bit should be set as 0.
N     * @var USPI_T::LINECTL
N     * Offset: 0x2C  USCI Line Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |LSB       |LSB First Transmission Selection
N     * |        |          |0 = The MSB, which bit of transmit/receive data buffer depends on the setting of DWIDTH, is transmitted/received first.
N     * |        |          |1 = The LSB, the bit 0 of data buffer, will be transmitted/received first.
N     * |[5]     |DATOINV   |Data Output Inverse Selection
N     * |        |          |This bit defines the relation between the internal shift data value and the output data signal of USCIx_DAT0/1 pin.
N     * |        |          |0 = Data output level is not inverted.
N     * |        |          |1 = Data output level is inverted.
N     * |[7]     |CTLOINV   |Control Signal Output Inverse Selection
N     * |        |          |This bit defines the relation between the internal control signal and the output control signal.
N     * |        |          |0 = No effect.
N     * |        |          |1 = The control signal will be inverted before its output.
N     * |        |          |Note: The control signal has different definitions in different protocol
N     * |        |          |In SPI protocol, the control signal means slave select signal
N     * |[11:8]  |DWIDTH    |Word Length of Transmission
N     * |        |          |This bit field defines the data word length (amount of bits) for reception and transmission
N     * |        |          |The data word is always right-aligned in the data buffer
N     * |        |          |USCI support word length from 4 to 16 bits.
N     * |        |          |0x0: The data word contains 16 bits located at bit positions [15:0].
N     * |        |          |0x1: Reserved.
N     * |        |          |0x2: Reserved.
N     * |        |          |0x3: Reserved.
N     * |        |          |0x4: The data word contains 4 bits located at bit positions [3:0].
N     * |        |          |0x5: The data word contains 5 bits located at bit positions [4:0].
N     * |        |          |..
N     * |        |          |0xF: The data word contains 15 bits located at bit positions [14:0].
N     * |        |          |Note:
N     * @var USPI_T::TXDAT
N     * Offset: 0x30  USCI Transmit Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |TXDAT     |Transmit Data
N     * |        |          |Software can use this bit field to write 16-bit transmit data for transmission
N     * |        |          |In order to avoid overwriting the transmit data, user have to check TXEMPTY (USPI_BUFSTS[8]) status before writing transmit data into this bit field.
N     * |[16]    |PORTDIR   |Port Direction Control
N     * |        |          |This bit field is only available while USCI operates in SPI protocol (FUNMODE = 0x1) with half-duplex transfer
N     * |        |          |It is used to define the direction of the data port pin
N     * |        |          |When software writes USPI_TXDAT register, the transmit data and its port direction are settled simultaneously.
N     * |        |          |0 = The data pin is configured as output mode.
N     * |        |          |1 = The data pin is configured as input mode.
N     * @var USPI_T::RXDAT
N     * Offset: 0x34  USCI Receive Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RXDAT     |Received Data
N     * |        |          |This bit field monitors the received data which stored in receive data buffer.
N     * @var USPI_T::BUFCTL
N     * Offset: 0x38  USCI Transmit/Receive Buffer Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[6]     |TXUDRIEN  |Slave Transmit Under Run Interrupt Enable Bit
N     * |        |          |0 = Transmit under-run interrupt Disabled.
N     * |        |          |1 = Transmit under-run interrupt Enabled.
N     * |[7]     |TXCLR     |Clear Transmit Buffer
N     * |        |          |0 = No effect.
N     * |        |          |1 = The transmit buffer is cleared
N     * |        |          |Should only be used while the buffer is not taking part in data traffic.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * |[14]    |RXOVIEN   |Receive Buffer Overrun Interrupt Enable Control
N     * |        |          |0 = Receive overrun interrupt Disabled.
N     * |        |          |1 = Receive overrun interrupt Enabled.
N     * |[15]    |RXCLR     |Clear Receive Buffer
N     * |        |          |0 = No effect.
N     * |        |          |1 = The receive buffer is cleared
N     * |        |          |Should only be used while the buffer is not taking part in data traffic.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * |[16]    |TXRST     |Transmit Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the transmit-related counters, state machine, and the content of transmit shift register and data buffer.
N     * |        |          |Note1: It is cleared automatically after one PCLK cycle.
N     * |        |          |Note2: Write 1 to this bit will set the output data pin to zero if USPI_BUFCTL[5]=0.
N     * |[17]    |RXRST     |Receive Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the receive-related counters, state machine, and the content of receive shift register and data buffer.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * @var USPI_T::BUFSTS
N     * Offset: 0x3C  USCI Transmit/Receive Buffer Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RXEMPTY   |Receive Buffer Empty Indicator
N     * |        |          |0 = Receive buffer is not empty.
N     * |        |          |1 = Receive buffer is empty.
N     * |[1]     |RXFULL    |Receive Buffer Full Indicator
N     * |        |          |0 = Receive buffer is not full.
N     * |        |          |1 = Receive buffer is full.
N     * |[3]     |RXOVIF    |Receive Buffer Over-run Interrupt Status
N     * |        |          |This bit indicates that a receive buffer overrun event has been detected
N     * |        |          |If RXOVIEN (USPI_BUFCTL[14]) is enabled, the corresponding interrupt request is activated
N     * |        |          |It is cleared by software writes 1 to this bit.
N     * |        |          |0 = A receive buffer overrun event has not been detected.
N     * |        |          |1 = A receive buffer overrun event has been detected.
N     * |[8]     |TXEMPTY   |Transmit Buffer Empty Indicator
N     * |        |          |0 = Transmit buffer is not empty.
N     * |        |          |1 = Transmit buffer is empty and available for the next transmission datum.
N     * |[9]     |TXFULL    |Transmit Buffer Full Indicator
N     * |        |          |0 = Transmit buffer is not full.
N     * |        |          |1 = Transmit buffer is full.
N     * |[11]    |TXUDRIF   |Transmit Buffer Under-run Interrupt Status
N     * |        |          |This bit indicates that a transmit buffer under-run event has been detected
N     * |        |          |If enabled by TXUDRIEN (USPI_BUFCTL[6]), the corresponding interrupt request is activated
N     * |        |          |It is cleared by software writes 1 to this bit
N     * |        |          |0 = A transmit buffer under-run event has not been detected.
N     * |        |          |1 = A transmit buffer under-run event has been detected.
N     * @var USPI_T::PDMACTL
N     * Offset: 0x40  USCI PDMA Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |PDMARST   |PDMA Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the USCI's PDMA control logic. This bit will be cleared to 0 automatically.
N     * |[1]     |TXPDMAEN  |PDMA Transmit Channel Available
N     * |        |          |0 = Transmit PDMA function Disabled.
N     * |        |          |1 = Transmit PDMA function Enabled.
N     * |[2]     |RXPDMAEN  |PDMA Receive Channel Available
N     * |        |          |0 = Receive PDMA function Disabled.
N     * |        |          |1 = Receive PDMA function Enabled.
N     * |[3]     |PDMAEN    |PDMA Mode Enable Bit
N     * |        |          |0 = PDMA function Disabled.
N     * |        |          |1 = PDMA function Enabled.
N     * |        |          |Notice: The I2C is not supporting PDMA function.
N     * @var USPI_T::WKCTL
N     * Offset: 0x54  USCI Wake-up Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKEN      |Wake-up Enable Bit
N     * |        |          |0 = Wake-up function Disabled.
N     * |        |          |1 = Wake-up function Enabled.
N     * |[1]     |WKADDREN  |Wake-up Address Match Enable Bit
N     * |        |          |0 = The chip is woken up according data toggle.
N     * |        |          |1 = The chip is woken up according address match.
N     * |[2]     |PDBOPT    |Power Down Blocking Option
N     * |        |          |0 = If user attempts to enter Power-down mode by executing WFI while the protocol is in transferring, MCU will stop the transfer and enter Power-down mode immediately.
N     * |        |          |1 = If user attempts to enter Power-down mode by executing WFI while the protocol is in transferring, the on-going transfer will not be stopped and MCU will enter idle mode immediately.
N     * @var USPI_T::WKSTS
N     * Offset: 0x58  USCI Wake-up Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKF       |Wake-up Flag
N     * |        |          |When chip is woken up from Power-down mode, this bit is set to 1
N     * |        |          |Software can write 1 to clear this bit.
N     * @var USPI_T::PROTCTL
N     * Offset: 0x5C  USCI Protocol Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SLAVE     |Slave Mode Selection
N     * |        |          |0 = Master mode.
N     * |        |          |1 = Slave mode.
N     * |[1]     |SLV3WIRE  |Slave 3-wire Mode Selection (Slave Only)
N     * |        |          |The SPI protocol can work with 3-wire interface (without slave select signal) in Slave mode.
N     * |        |          |0 = 4-wire bi-direction interface.
N     * |        |          |1 = 3-wire bi-direction interface.
N     * |[2]     |SS        |Slave Select Control (Master Only)
N     * |        |          |If AUTOSS bit is cleared, setting this bit to 1 will set the slave select signal to active state, and setting this bit to 0 will set the slave select back to inactive state.
N     * |        |          |If the AUTOSS function is enabled (AUTOSS = 1), the setting value of this bit will not affect the current state of slave select signal.
N     * |        |          |Note: In SPI protocol, the internal slave select signal is active high.
N     * |[3]     |AUTOSS    |Automatic Slave Select Function Enable (Master Only)
N     * |        |          |0 = Slave select signal will be controlled by the setting value of SS (USPI_PROTCTL[2]) bit.
N     * |        |          |1 = Slave select signal will be generated automatically
N     * |        |          |The slave select signal will be asserted by the SPI controller when transmit/receive is started, and will be de-asserted after each transmit/receive is finished.
N     * |[7:6]   |SCLKMODE  |Serial Bus Clock Mode
N     * |        |          |This bit field defines the SCLK idle status, data transmit, and data receive edge.
N     * |        |          |MODE0 = The idle state of SPI clock is low level
N     * |        |          |Data is transmitted with falling edge and received with rising edge.
N     * |        |          |MODE1 = The idle state of SPI clock is low level
N     * |        |          |Data is transmitted with rising edge and received with falling edge.
N     * |        |          |MODE2 = The idle state of SPI clock is high level
N     * |        |          |Data is transmitted with rising edge and received with falling edge.
N     * |        |          |MODE3 = The idle state of SPI clock is high level
N     * |        |          |Data is transmitted with falling edge and received with rising edge.
N     * |[11:8]  |SUSPITV   |Suspend Interval (Master Only)
N     * |        |          |This bit field provides the configurable suspend interval between two successive transmit/receive transaction in a transfer
N     * |        |          |The definition of the suspend interval is the interval between the last clock edge of the preceding transaction word and the first clock edge of the following transaction word
N     * |        |          |The default value is 0x3
N     * |        |          |The period of the suspend interval is obtained according to the following equation.
N     * |        |          |(SUSPITV[3:0] + 0.5) * period of SPI_CLK clock cycle
N     * |        |          |Example:
N     * |        |          |SUSPITV = 0x0 " 0.5 SPI_CLK clock cycle.
N     * |        |          |SUSPITV = 0x1 " 1.5 SPI_CLK clock cycle.
N     * |        |          |"..
N     * |        |          |SUSPITV = 0xE " 14.5 SPI_CLK clock cycle.
N     * |        |          |SUSPITV = 0xF " 15.5 SPI_CLK clock cycle.
N     * |[14:12] |TSMSEL    |Transmit Data Mode Selection
N     * |        |          |This bit field describes how receive and transmit data is shifted in and out.
N     * |        |          |TSMSEL = 000b: Full-duplex SPI.
N     * |        |          |TSMSEL = 100b: Half-duplex SPI.
N     * |        |          |Other values are reserved.
N     * |        |          |Note: Changing the value of this bit field will produce the TXRST and RXRST to clear the TX/RX data buffer automatically.
N     * |[25:16] |SLVTOCNT  |Slave Mode Time-out Period (Slave Only)
N     * |        |          |In Slave mode, this bit field is used for Slave time-out period
N     * |        |          |This bit field indicates how many clock periods (selected by TMCNTSRC, USPI_BRGEN[5]) between the two edges of input SCLK will assert the Slave time-out event
N     * |        |          |Writing 0x0 into this bit field will disable the Slave time-out function.
N     * |        |          |Example: Assume SLVTOCNT is 0x0A and TMCNTSRC (USPI_BRGEN[5]) is 1, it means the time-out event will occur if the state of SPI bus clock pin is not changed more than (10+1) periods of fDIV_CLK.
N     * |[28]    |TXUDRPOL  |Transmit Under-run Data Polarity (for Slave)
N     * |        |          |This bit defines the transmitting data level when no data is available for transferring.
N     * |        |          |0 = The output data level is 0 if TX under run event occurs.
N     * |        |          |1 = The output data level is 1 if TX under run event occurs.
N     * |[31]    |PROTEN    |SPI Protocol Enable Bit
N     * |        |          |0 = SPI Protocol Disabled.
N     * |        |          |1 = SPI Protocol Enabled.
N     * @var USPI_T::PROTIEN
N     * Offset: 0x60  USCI Protocol Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SSINAIEN  |Slave Select Inactive Interrupt Enable Control
N     * |        |          |This bit enables/disables the generation of a slave select interrupt if the slave select changes to inactive.
N     * |        |          |0 = Slave select inactive interrupt generation Disabled.
N     * |        |          |1 = Slave select inactive interrupt generation Enabled.
N     * |[1]     |SSACTIEN  |Slave Select Active Interrupt Enable Control
N     * |        |          |This bit enables/disables the generation of a slave select interrupt if the slave select changes to active.
N     * |        |          |0 = Slave select active interrupt generation Disabled.
N     * |        |          |1 = Slave select active interrupt generation Enabled.
N     * |[2]     |SLVTOIEN  |Slave Time-out Interrupt Enable Control
N     * |        |          |In SPI protocol, this bit enables the interrupt generation in case of a Slave time-out event.
N     * |        |          |0 = The Slave time-out interrupt Disabled.
N     * |        |          |1 = The Slave time-out interrupt Enabled.
N     * |[3]     |SLVBEIEN  |Slave Mode Bit Count Error Interrupt Enable Control
N     * |        |          |If data transfer is terminated by slave time-out or slave select inactive event in Slave mode, so that the transmit/receive data bit count does not match the setting of DWIDTH (USPI_LINECTL[11:8])
N     * |        |          |Bit count error event occurs.
N     * |        |          |0 = The Slave mode bit count error interrupt Disabled.
N     * |        |          |1 = The Slave mode bit count error interrupt Enabled.
N     * @var USPI_T::PROTSTS
N     * Offset: 0x64  USCI Protocol Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TXSTIF    |Transmit Start Interrupt Flag
N     * |        |          |0 = Transmit start event does not occur.
N     * |        |          |1 = Transmit start event occurs.
N     * |        |          |Note: It is cleared by software writes 1 to this bit
N     * |[2]     |TXENDIF   |Transmit End Interrupt Flag
N     * |        |          |0 = Transmit end event does not occur.
N     * |        |          |1 = Transmit end event occurs.
N     * |        |          |Note: It is cleared by software writes 1 to this bit
N     * |[3]     |RXSTIF    |Receive Start Interrupt Flag
N     * |        |          |0 = Receive start event does not occur.
N     * |        |          |1 = Receive start event occurs.
N     * |        |          |Note: It is cleared by software writes 1 to this bit
N     * |[4]     |RXENDIF   |Receive End Interrupt Flag
N     * |        |          |0 = Receive end event does not occur.
N     * |        |          |1 = Receive end event occurs.
N     * |        |          |Note: It is cleared by software writes 1 to this bit
N     * |[5]     |SLVTOIF   |Slave Time-out Interrupt Flag (for Slave Only)
N     * |        |          |0 = Slave time-out event does not occur.
N     * |        |          |1 = Slave time-out event occurs.
N     * |        |          |Note: It is cleared by software writes 1 to this bit
N     * |[6]     |SLVBEIF   |Slave Bit Count Error Interrupt Flag (for Slave Only)
N     * |        |          |0 = Slave bit count error event does not occur.
N     * |        |          |1 = Slave bit count error event occurs.
N     * |        |          |Note: It is cleared by software writes 1 to this bit.
N     * |[8]     |SSINAIF   |Slave Select Inactive Interrupt Flag (for Slave Only)
N     * |        |          |This bit indicates that the internal slave select signal has changed to inactive
N     * |        |          |It is cleared by software writes 1 to this bit
N     * |        |          |0 = The slave select signal has not changed to inactive.
N     * |        |          |1 = The slave select signal has changed to inactive.
N     * |        |          |Note: The internal slave select signal is active high.
N     * |[9]     |SSACTIF   |Slave Select Active Interrupt Flag (for Slave Only)
N     * |        |          |This bit indicates that the internal slave select signal has changed to active
N     * |        |          |It is cleared by software writes one to this bit
N     * |        |          |0 = The slave select signal has not changed to active.
N     * |        |          |1 = The slave select signal has changed to active.
N     * |        |          |Note: The internal slave select signal is active high.
N     * |[16]    |SSLINE    |Slave Select Line Bus Status (Read Only)
N     * |        |          |This bit is only available in Slave mode
N     * |        |          |It used to monitor the current status of the input slave select signal on the bus.
N     * |        |          |0 = The slave select line status is 0.
N     * |        |          |1 = The slave select line status is 1.
N     * |[17]    |BUSY      |Busy Status (Read Only)
N     * |        |          |0 = SPI is in idle state.
N     * |        |          |1 = SPI is in busy state.
N     * |        |          |The following listing are the bus busy conditions:
N     * |        |          |a. USPI_PROTCTL[31] = 1 and the TXEMPTY = 0.
N     * |        |          |b. For SPI Master mode, the TXEMPTY = 1 but the current transaction is not finished yet.
N     * |        |          |c
N     * |        |          |For SPI Slave mode, the USPI_PROTCTL[31] = 1 and there is serial clock input into the SPI core logic when slave select is active.
N     * |        |          |d
N     * |        |          |For SPI Slave mode, the USPI_PROTCTL[31] = 1 and the transmit buffer or transmit shift register is not empty even if the slave select is inactive.
N     * |[18]    |SLVUDR    |Slave Mode Transmit Under-run Status (Read Only)
N     * |        |          |In Slave mode, if there is no available transmit data in buffer while transmit data shift out caused by input serial bus clock, this status flag will be set to 1
N     * |        |          |This bit indicates whether the current shift-out data of word transmission is switched to TXUDRPOL (USPI_PROTCTL[28]) or not.
N     * |        |          |0 = Slave transmit under run event does not occur.
N     * |        |          |1 = Slave transmit under run event occurs.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] USCI Control Register                                            */
X    volatile uint32_t CTL;                    
N    __IO uint32_t INTEN;                 /*!< [0x0004] USCI Interrupt Enable Register                                   */
X    volatile uint32_t INTEN;                  
N    __IO uint32_t BRGEN;                 /*!< [0x0008] USCI Baud Rate Generator Register                                */
X    volatile uint32_t BRGEN;                  
N    __I  uint32_t RESERVE0[1];
X    volatile const  uint32_t RESERVE0[1];
N    __IO uint32_t DATIN0;                /*!< [0x0010] USCI Input Data Signal Configuration Register 0                  */
X    volatile uint32_t DATIN0;                 
N    __I  uint32_t RESERVE1[3];
X    volatile const  uint32_t RESERVE1[3];
N    __IO uint32_t CTLIN0;                /*!< [0x0020] USCI Input Control Signal Configuration Register 0               */
X    volatile uint32_t CTLIN0;                 
N    __I  uint32_t RESERVE2[1];
X    volatile const  uint32_t RESERVE2[1];
N    __IO uint32_t CLKIN;                 /*!< [0x0028] USCI Input Clock Signal Configuration Register                   */
X    volatile uint32_t CLKIN;                  
N    __IO uint32_t LINECTL;               /*!< [0x002c] USCI Line Control Register                                       */
X    volatile uint32_t LINECTL;                
N    __O  uint32_t TXDAT;                 /*!< [0x0030] USCI Transmit Data Register                                      */
X    volatile  uint32_t TXDAT;                  
N    __I  uint32_t RXDAT;                 /*!< [0x0034] USCI Receive Data Register                                       */
X    volatile const  uint32_t RXDAT;                  
N    __IO uint32_t BUFCTL;                /*!< [0x0038] USCI Transmit/Receive Buffer Control Register                    */
X    volatile uint32_t BUFCTL;                 
N    __IO uint32_t BUFSTS;                /*!< [0x003c] USCI Transmit/Receive Buffer Status Register                     */
X    volatile uint32_t BUFSTS;                 
N    __IO uint32_t PDMACTL;               /*!< [0x0040] USCI PDMA Control Register                                       */
X    volatile uint32_t PDMACTL;                
N    __I  uint32_t RESERVE3[4];
X    volatile const  uint32_t RESERVE3[4];
N    __IO uint32_t WKCTL;                 /*!< [0x0054] USCI Wake-up Control Register                                    */
X    volatile uint32_t WKCTL;                  
N    __IO uint32_t WKSTS;                 /*!< [0x0058] USCI Wake-up Status Register                                     */
X    volatile uint32_t WKSTS;                  
N    __IO uint32_t PROTCTL;               /*!< [0x005c] USCI Protocol Control Register                                   */
X    volatile uint32_t PROTCTL;                
N    __IO uint32_t PROTIEN;               /*!< [0x0060] USCI Protocol Interrupt Enable Register                          */
X    volatile uint32_t PROTIEN;                
N    __IO uint32_t PROTSTS;               /*!< [0x0064] USCI Protocol Status Register                                    */
X    volatile uint32_t PROTSTS;                
N} USPI_T;
N
N/**
N    @addtogroup USPI_CONST USPI Bit Field Definition
N    Constant Definitions for USPI Controller
N@{ */
N
N#define USPI_CTL_FUNMODE_Pos             (0)                                               /*!< USPI_T::CTL: FUNMODE Position          */
N#define USPI_CTL_FUNMODE_Msk             (0x7ul << USPI_CTL_FUNMODE_Pos)                   /*!< USPI_T::CTL: FUNMODE Mask              */
N
N#define USPI_INTEN_TXSTIEN_Pos           (1)                                               /*!< USPI_T::INTEN: TXSTIEN Position        */
N#define USPI_INTEN_TXSTIEN_Msk           (0x1ul << USPI_INTEN_TXSTIEN_Pos)                 /*!< USPI_T::INTEN: TXSTIEN Mask            */
N
N#define USPI_INTEN_TXENDIEN_Pos          (2)                                               /*!< USPI_T::INTEN: TXENDIEN Position       */
N#define USPI_INTEN_TXENDIEN_Msk          (0x1ul << USPI_INTEN_TXENDIEN_Pos)                /*!< USPI_T::INTEN: TXENDIEN Mask           */
N
N#define USPI_INTEN_RXSTIEN_Pos           (3)                                               /*!< USPI_T::INTEN: RXSTIEN Position        */
N#define USPI_INTEN_RXSTIEN_Msk           (0x1ul << USPI_INTEN_RXSTIEN_Pos)                 /*!< USPI_T::INTEN: RXSTIEN Mask            */
N
N#define USPI_INTEN_RXENDIEN_Pos          (4)                                               /*!< USPI_T::INTEN: RXENDIEN Position       */
N#define USPI_INTEN_RXENDIEN_Msk          (0x1ul << USPI_INTEN_RXENDIEN_Pos)                /*!< USPI_T::INTEN: RXENDIEN Mask           */
N
N#define USPI_BRGEN_RCLKSEL_Pos           (0)                                               /*!< USPI_T::BRGEN: RCLKSEL Position        */
N#define USPI_BRGEN_RCLKSEL_Msk           (0x1ul << USPI_BRGEN_RCLKSEL_Pos)                 /*!< USPI_T::BRGEN: RCLKSEL Mask            */
N
N#define USPI_BRGEN_PTCLKSEL_Pos          (1)                                               /*!< USPI_T::BRGEN: PTCLKSEL Position       */
N#define USPI_BRGEN_PTCLKSEL_Msk          (0x1ul << USPI_BRGEN_PTCLKSEL_Pos)                /*!< USPI_T::BRGEN: PTCLKSEL Mask           */
N
N#define USPI_BRGEN_SPCLKSEL_Pos          (2)                                               /*!< USPI_T::BRGEN: SPCLKSEL Position       */
N#define USPI_BRGEN_SPCLKSEL_Msk          (0x3ul << USPI_BRGEN_SPCLKSEL_Pos)                /*!< USPI_T::BRGEN: SPCLKSEL Mask           */
N
N#define USPI_BRGEN_TMCNTEN_Pos           (4)                                               /*!< USPI_T::BRGEN: TMCNTEN Position        */
N#define USPI_BRGEN_TMCNTEN_Msk           (0x1ul << USPI_BRGEN_TMCNTEN_Pos)                 /*!< USPI_T::BRGEN: TMCNTEN Mask            */
N
N#define USPI_BRGEN_TMCNTSRC_Pos          (5)                                               /*!< USPI_T::BRGEN: TMCNTSRC Position       */
N#define USPI_BRGEN_TMCNTSRC_Msk          (0x1ul << USPI_BRGEN_TMCNTSRC_Pos)                /*!< USPI_T::BRGEN: TMCNTSRC Mask           */
N
N#define USPI_BRGEN_CLKDIV_Pos            (16)                                              /*!< USPI_T::BRGEN: CLKDIV Position         */
N#define USPI_BRGEN_CLKDIV_Msk            (0x3fful << USPI_BRGEN_CLKDIV_Pos)                /*!< USPI_T::BRGEN: CLKDIV Mask             */
N
N#define USPI_DATIN0_SYNCSEL_Pos          (0)                                               /*!< USPI_T::DATIN0: SYNCSEL Position       */
N#define USPI_DATIN0_SYNCSEL_Msk          (0x1ul << USPI_DATIN0_SYNCSEL_Pos)                /*!< USPI_T::DATIN0: SYNCSEL Mask           */
N
N#define USPI_DATIN0_ININV_Pos            (2)                                               /*!< USPI_T::DATIN0: ININV Position         */
N#define USPI_DATIN0_ININV_Msk            (0x1ul << USPI_DATIN0_ININV_Pos)                  /*!< USPI_T::DATIN0: ININV Mask             */
N
N#define USPI_CTLIN0_SYNCSEL_Pos          (0)                                               /*!< USPI_T::CTLIN0: SYNCSEL Position       */
N#define USPI_CTLIN0_SYNCSEL_Msk          (0x1ul << USPI_CTLIN0_SYNCSEL_Pos)                /*!< USPI_T::CTLIN0: SYNCSEL Mask           */
N
N#define USPI_CTLIN0_ININV_Pos            (2)                                               /*!< USPI_T::CTLIN0: ININV Position         */
N#define USPI_CTLIN0_ININV_Msk            (0x1ul << USPI_CTLIN0_ININV_Pos)                  /*!< USPI_T::CTLIN0: ININV Mask             */
N
N#define USPI_CLKIN_SYNCSEL_Pos           (0)                                               /*!< USPI_T::CLKIN: SYNCSEL Position        */
N#define USPI_CLKIN_SYNCSEL_Msk           (0x1ul << USPI_CLKIN_SYNCSEL_Pos)                 /*!< USPI_T::CLKIN: SYNCSEL Mask            */
N
N#define USPI_LINECTL_LSB_Pos             (0)                                               /*!< USPI_T::LINECTL: LSB Position          */
N#define USPI_LINECTL_LSB_Msk             (0x1ul << USPI_LINECTL_LSB_Pos)                   /*!< USPI_T::LINECTL: LSB Mask              */
N
N#define USPI_LINECTL_DATOINV_Pos         (5)                                               /*!< USPI_T::LINECTL: DATOINV Position      */
N#define USPI_LINECTL_DATOINV_Msk         (0x1ul << USPI_LINECTL_DATOINV_Pos)               /*!< USPI_T::LINECTL: DATOINV Mask          */
N
N#define USPI_LINECTL_CTLOINV_Pos         (7)                                               /*!< USPI_T::LINECTL: CTLOINV Position      */
N#define USPI_LINECTL_CTLOINV_Msk         (0x1ul << USPI_LINECTL_CTLOINV_Pos)               /*!< USPI_T::LINECTL: CTLOINV Mask          */
N
N#define USPI_LINECTL_DWIDTH_Pos          (8)                                               /*!< USPI_T::LINECTL: DWIDTH Position       */
N#define USPI_LINECTL_DWIDTH_Msk          (0xful << USPI_LINECTL_DWIDTH_Pos)                /*!< USPI_T::LINECTL: DWIDTH Mask           */
N
N#define USPI_TXDAT_TXDAT_Pos             (0)                                               /*!< USPI_T::TXDAT: TXDAT Position          */
N#define USPI_TXDAT_TXDAT_Msk             (0xfffful << USPI_TXDAT_TXDAT_Pos)                /*!< USPI_T::TXDAT: TXDAT Mask              */
N
N#define USPI_TXDAT_PORTDIR_Pos           (16)                                              /*!< USPI_T::TXDAT: PORTDIR Position        */
N#define USPI_TXDAT_PORTDIR_Msk           (0x1ul << USPI_TXDAT_PORTDIR_Pos)                 /*!< USPI_T::TXDAT: PORTDIR Mask            */
N
N#define USPI_RXDAT_RXDAT_Pos             (0)                                               /*!< USPI_T::RXDAT: RXDAT Position          */
N#define USPI_RXDAT_RXDAT_Msk             (0xfffful << USPI_RXDAT_RXDAT_Pos)                /*!< USPI_T::RXDAT: RXDAT Mask              */
N
N#define USPI_BUFCTL_TXUDRIEN_Pos         (6)                                               /*!< USPI_T::BUFCTL: TXUDRIEN Position      */
N#define USPI_BUFCTL_TXUDRIEN_Msk         (0x1ul << USPI_BUFCTL_TXUDRIEN_Pos)               /*!< USPI_T::BUFCTL: TXUDRIEN Mask          */
N
N#define USPI_BUFCTL_TXCLR_Pos            (7)                                               /*!< USPI_T::BUFCTL: TXCLR Position         */
N#define USPI_BUFCTL_TXCLR_Msk            (0x1ul << USPI_BUFCTL_TXCLR_Pos)                  /*!< USPI_T::BUFCTL: TXCLR Mask             */
N
N#define USPI_BUFCTL_RXOVIEN_Pos          (14)                                              /*!< USPI_T::BUFCTL: RXOVIEN Position       */
N#define USPI_BUFCTL_RXOVIEN_Msk          (0x1ul << USPI_BUFCTL_RXOVIEN_Pos)                /*!< USPI_T::BUFCTL: RXOVIEN Mask           */
N
N#define USPI_BUFCTL_RXCLR_Pos            (15)                                              /*!< USPI_T::BUFCTL: RXCLR Position         */
N#define USPI_BUFCTL_RXCLR_Msk            (0x1ul << USPI_BUFCTL_RXCLR_Pos)                  /*!< USPI_T::BUFCTL: RXCLR Mask             */
N
N#define USPI_BUFCTL_TXRST_Pos            (16)                                              /*!< USPI_T::BUFCTL: TXRST Position         */
N#define USPI_BUFCTL_TXRST_Msk            (0x1ul << USPI_BUFCTL_TXRST_Pos)                  /*!< USPI_T::BUFCTL: TXRST Mask             */
N
N#define USPI_BUFCTL_RXRST_Pos            (17)                                              /*!< USPI_T::BUFCTL: RXRST Position         */
N#define USPI_BUFCTL_RXRST_Msk            (0x1ul << USPI_BUFCTL_RXRST_Pos)                  /*!< USPI_T::BUFCTL: RXRST Mask             */
N
N#define USPI_BUFSTS_RXEMPTY_Pos          (0)                                               /*!< USPI_T::BUFSTS: RXEMPTY Position       */
N#define USPI_BUFSTS_RXEMPTY_Msk          (0x1ul << USPI_BUFSTS_RXEMPTY_Pos)                /*!< USPI_T::BUFSTS: RXEMPTY Mask           */
N
N#define USPI_BUFSTS_RXFULL_Pos           (1)                                               /*!< USPI_T::BUFSTS: RXFULL Position        */
N#define USPI_BUFSTS_RXFULL_Msk           (0x1ul << USPI_BUFSTS_RXFULL_Pos)                 /*!< USPI_T::BUFSTS: RXFULL Mask            */
N
N#define USPI_BUFSTS_RXOVIF_Pos           (3)                                               /*!< USPI_T::BUFSTS: RXOVIF Position        */
N#define USPI_BUFSTS_RXOVIF_Msk           (0x1ul << USPI_BUFSTS_RXOVIF_Pos)                 /*!< USPI_T::BUFSTS: RXOVIF Mask            */
N
N#define USPI_BUFSTS_TXEMPTY_Pos          (8)                                               /*!< USPI_T::BUFSTS: TXEMPTY Position       */
N#define USPI_BUFSTS_TXEMPTY_Msk          (0x1ul << USPI_BUFSTS_TXEMPTY_Pos)                /*!< USPI_T::BUFSTS: TXEMPTY Mask           */
N
N#define USPI_BUFSTS_TXFULL_Pos           (9)                                               /*!< USPI_T::BUFSTS: TXFULL Position        */
N#define USPI_BUFSTS_TXFULL_Msk           (0x1ul << USPI_BUFSTS_TXFULL_Pos)                 /*!< USPI_T::BUFSTS: TXFULL Mask            */
N
N#define USPI_BUFSTS_TXUDRIF_Pos          (11)                                              /*!< USPI_T::BUFSTS: TXUDRIF Position       */
N#define USPI_BUFSTS_TXUDRIF_Msk          (0x1ul << USPI_BUFSTS_TXUDRIF_Pos)                /*!< USPI_T::BUFSTS: TXUDRIF Mask           */
N
N#define USPI_PDMACTL_PDMARST_Pos         (0)                                               /*!< USPI_T::PDMACTL: PDMARST Position      */
N#define USPI_PDMACTL_PDMARST_Msk         (0x1ul << USPI_PDMACTL_PDMARST_Pos)               /*!< USPI_T::PDMACTL: PDMARST Mask          */
N
N#define USPI_PDMACTL_TXPDMAEN_Pos        (1)                                               /*!< USPI_T::PDMACTL: TXPDMAEN Position     */
N#define USPI_PDMACTL_TXPDMAEN_Msk        (0x1ul << USPI_PDMACTL_TXPDMAEN_Pos)              /*!< USPI_T::PDMACTL: TXPDMAEN Mask         */
N
N#define USPI_PDMACTL_RXPDMAEN_Pos        (2)                                               /*!< USPI_T::PDMACTL: RXPDMAEN Position     */
N#define USPI_PDMACTL_RXPDMAEN_Msk        (0x1ul << USPI_PDMACTL_RXPDMAEN_Pos)              /*!< USPI_T::PDMACTL: RXPDMAEN Mask         */
N
N#define USPI_PDMACTL_PDMAEN_Pos          (3)                                               /*!< USPI_T::PDMACTL: PDMAEN Position       */
N#define USPI_PDMACTL_PDMAEN_Msk          (0x1ul << USPI_PDMACTL_PDMAEN_Pos)                /*!< USPI_T::PDMACTL: PDMAEN Mask           */
N
N#define USPI_WKCTL_WKEN_Pos              (0)                                               /*!< USPI_T::WKCTL: WKEN Position           */
N#define USPI_WKCTL_WKEN_Msk              (0x1ul << USPI_WKCTL_WKEN_Pos)                    /*!< USPI_T::WKCTL: WKEN Mask               */
N
N#define USPI_WKCTL_WKADDREN_Pos          (1)                                               /*!< USPI_T::WKCTL: WKADDREN Position       */
N#define USPI_WKCTL_WKADDREN_Msk          (0x1ul << USPI_WKCTL_WKADDREN_Pos)                /*!< USPI_T::WKCTL: WKADDREN Mask           */
N
N#define USPI_WKCTL_PDBOPT_Pos            (2)                                               /*!< USPI_T::WKCTL: PDBOPT Position         */
N#define USPI_WKCTL_PDBOPT_Msk            (0x1ul << USPI_WKCTL_PDBOPT_Pos)                  /*!< USPI_T::WKCTL: PDBOPT Mask             */
N
N#define USPI_WKSTS_WKF_Pos               (0)                                               /*!< USPI_T::WKSTS: WKF Position            */
N#define USPI_WKSTS_WKF_Msk               (0x1ul << USPI_WKSTS_WKF_Pos)                     /*!< USPI_T::WKSTS: WKF Mask                */
N
N#define USPI_PROTCTL_SLAVE_Pos           (0)                                               /*!< USPI_T::PROTCTL: SLAVE Position        */
N#define USPI_PROTCTL_SLAVE_Msk           (0x1ul << USPI_PROTCTL_SLAVE_Pos)                 /*!< USPI_T::PROTCTL: SLAVE Mask            */
N
N#define USPI_PROTCTL_SLV3WIRE_Pos        (1)                                               /*!< USPI_T::PROTCTL: SLV3WIRE Position     */
N#define USPI_PROTCTL_SLV3WIRE_Msk        (0x1ul << USPI_PROTCTL_SLV3WIRE_Pos)              /*!< USPI_T::PROTCTL: SLV3WIRE Mask         */
N
N#define USPI_PROTCTL_SS_Pos              (2)                                               /*!< USPI_T::PROTCTL: SS Position           */
N#define USPI_PROTCTL_SS_Msk              (0x1ul << USPI_PROTCTL_SS_Pos)                    /*!< USPI_T::PROTCTL: SS Mask               */
N
N#define USPI_PROTCTL_AUTOSS_Pos          (3)                                               /*!< USPI_T::PROTCTL: AUTOSS Position       */
N#define USPI_PROTCTL_AUTOSS_Msk          (0x1ul << USPI_PROTCTL_AUTOSS_Pos)                /*!< USPI_T::PROTCTL: AUTOSS Mask           */
N
N#define USPI_PROTCTL_SCLKMODE_Pos        (6)                                               /*!< USPI_T::PROTCTL: SCLKMODE Position     */
N#define USPI_PROTCTL_SCLKMODE_Msk        (0x3ul << USPI_PROTCTL_SCLKMODE_Pos)              /*!< USPI_T::PROTCTL: SCLKMODE Mask         */
N
N#define USPI_PROTCTL_SUSPITV_Pos         (8)                                               /*!< USPI_T::PROTCTL: SUSPITV Position      */
N#define USPI_PROTCTL_SUSPITV_Msk         (0xful << USPI_PROTCTL_SUSPITV_Pos)               /*!< USPI_T::PROTCTL: SUSPITV Mask          */
N
N#define USPI_PROTCTL_TSMSEL_Pos          (12)                                              /*!< USPI_T::PROTCTL: TSMSEL Position       */
N#define USPI_PROTCTL_TSMSEL_Msk          (0x7ul << USPI_PROTCTL_TSMSEL_Pos)                /*!< USPI_T::PROTCTL: TSMSEL Mask           */
N
N#define USPI_PROTCTL_SLVTOCNT_Pos        (16)                                              /*!< USPI_T::PROTCTL: SLVTOCNT Position     */
N#define USPI_PROTCTL_SLVTOCNT_Msk        (0x3fful << USPI_PROTCTL_SLVTOCNT_Pos)            /*!< USPI_T::PROTCTL: SLVTOCNT Mask         */
N
N#define USPI_PROTCTL_TXUDRPOL_Pos        (28)                                              /*!< USPI_T::PROTCTL: TXUDRPOL Position     */
N#define USPI_PROTCTL_TXUDRPOL_Msk        (0x1ul << USPI_PROTCTL_TXUDRPOL_Pos)              /*!< USPI_T::PROTCTL: TXUDRPOL Mask         */
N
N#define USPI_PROTCTL_PROTEN_Pos          (31)                                              /*!< USPI_T::PROTCTL: PROTEN Position       */
N#define USPI_PROTCTL_PROTEN_Msk          (0x1ul << USPI_PROTCTL_PROTEN_Pos)                /*!< USPI_T::PROTCTL: PROTEN Mask           */
N
N#define USPI_PROTIEN_SSINAIEN_Pos        (0)                                               /*!< USPI_T::PROTIEN: SSINAIEN Position     */
N#define USPI_PROTIEN_SSINAIEN_Msk        (0x1ul << USPI_PROTIEN_SSINAIEN_Pos)              /*!< USPI_T::PROTIEN: SSINAIEN Mask         */
N
N#define USPI_PROTIEN_SSACTIEN_Pos        (1)                                               /*!< USPI_T::PROTIEN: SSACTIEN Position     */
N#define USPI_PROTIEN_SSACTIEN_Msk        (0x1ul << USPI_PROTIEN_SSACTIEN_Pos)              /*!< USPI_T::PROTIEN: SSACTIEN Mask         */
N
N#define USPI_PROTIEN_SLVTOIEN_Pos        (2)                                               /*!< USPI_T::PROTIEN: SLVTOIEN Position     */
N#define USPI_PROTIEN_SLVTOIEN_Msk        (0x1ul << USPI_PROTIEN_SLVTOIEN_Pos)              /*!< USPI_T::PROTIEN: SLVTOIEN Mask         */
N
N#define USPI_PROTIEN_SLVBEIEN_Pos        (3)                                               /*!< USPI_T::PROTIEN: SLVBEIEN Position     */
N#define USPI_PROTIEN_SLVBEIEN_Msk        (0x1ul << USPI_PROTIEN_SLVBEIEN_Pos)              /*!< USPI_T::PROTIEN: SLVBEIEN Mask         */
N
N#define USPI_PROTSTS_TXSTIF_Pos          (1)                                               /*!< USPI_T::PROTSTS: TXSTIF Position       */
N#define USPI_PROTSTS_TXSTIF_Msk          (0x1ul << USPI_PROTSTS_TXSTIF_Pos)                /*!< USPI_T::PROTSTS: TXSTIF Mask           */
N
N#define USPI_PROTSTS_TXENDIF_Pos         (2)                                               /*!< USPI_T::PROTSTS: TXENDIF Position      */
N#define USPI_PROTSTS_TXENDIF_Msk         (0x1ul << USPI_PROTSTS_TXENDIF_Pos)               /*!< USPI_T::PROTSTS: TXENDIF Mask          */
N
N#define USPI_PROTSTS_RXSTIF_Pos          (3)                                               /*!< USPI_T::PROTSTS: RXSTIF Position       */
N#define USPI_PROTSTS_RXSTIF_Msk          (0x1ul << USPI_PROTSTS_RXSTIF_Pos)                /*!< USPI_T::PROTSTS: RXSTIF Mask           */
N
N#define USPI_PROTSTS_RXENDIF_Pos         (4)                                               /*!< USPI_T::PROTSTS: RXENDIF Position      */
N#define USPI_PROTSTS_RXENDIF_Msk         (0x1ul << USPI_PROTSTS_RXENDIF_Pos)               /*!< USPI_T::PROTSTS: RXENDIF Mask          */
N
N#define USPI_PROTSTS_SLVTOIF_Pos         (5)                                               /*!< USPI_T::PROTSTS: SLVTOIF Position      */
N#define USPI_PROTSTS_SLVTOIF_Msk         (0x1ul << USPI_PROTSTS_SLVTOIF_Pos)               /*!< USPI_T::PROTSTS: SLVTOIF Mask          */
N
N#define USPI_PROTSTS_SLVBEIF_Pos         (6)                                               /*!< USPI_T::PROTSTS: SLVBEIF Position      */
N#define USPI_PROTSTS_SLVBEIF_Msk         (0x1ul << USPI_PROTSTS_SLVBEIF_Pos)               /*!< USPI_T::PROTSTS: SLVBEIF Mask          */
N
N#define USPI_PROTSTS_SSINAIF_Pos         (8)                                               /*!< USPI_T::PROTSTS: SSINAIF Position      */
N#define USPI_PROTSTS_SSINAIF_Msk         (0x1ul << USPI_PROTSTS_SSINAIF_Pos)               /*!< USPI_T::PROTSTS: SSINAIF Mask          */
N
N#define USPI_PROTSTS_SSACTIF_Pos         (9)                                               /*!< USPI_T::PROTSTS: SSACTIF Position      */
N#define USPI_PROTSTS_SSACTIF_Msk         (0x1ul << USPI_PROTSTS_SSACTIF_Pos)               /*!< USPI_T::PROTSTS: SSACTIF Mask          */
N
N#define USPI_PROTSTS_SSLINE_Pos          (16)                                              /*!< USPI_T::PROTSTS: SSLINE Position       */
N#define USPI_PROTSTS_SSLINE_Msk          (0x1ul << USPI_PROTSTS_SSLINE_Pos)                /*!< USPI_T::PROTSTS: SSLINE Mask           */
N
N#define USPI_PROTSTS_BUSY_Pos            (17)                                              /*!< USPI_T::PROTSTS: BUSY Position         */
N#define USPI_PROTSTS_BUSY_Msk            (0x1ul << USPI_PROTSTS_BUSY_Pos)                  /*!< USPI_T::PROTSTS: BUSY Mask             */
N
N#define USPI_PROTSTS_SLVUDR_Pos          (18)                                              /*!< USPI_T::PROTSTS: SLVUDR Position       */
N#define USPI_PROTSTS_SLVUDR_Msk          (0x1ul << USPI_PROTSTS_SLVUDR_Pos)                /*!< USPI_T::PROTSTS: SLVUDR Mask           */
N
N/**@}*/ /* USPI_CONST */
N/**@}*/ /* end of USPI register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __USPI_REG_H__ */
L 167 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "uuart_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\uuart_reg.h" 1
N/**************************************************************************//**
N * @file     uuart_reg.h
N * @version  V1.00
N * @brief    UUART register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __UUART_REG_H__
N#define __UUART_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup UUART UART Mode of USCI Controller (UUART)
N    Memory Mapped Structure for UUART Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var UUART_T::CTL
N     * Offset: 0x00  USCI Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[2:0]   |FUNMODE   |Function Mode
N     * |        |          |This bit field selects the protocol for this USCI controller
N     * |        |          |Selecting a protocol that is not available or a reserved combination disables the USCI
N     * |        |          |When switching between two protocols, the USCI has to be disabled before selecting a new protocol
N     * |        |          |Simultaneously, the USCI will be reset when user write 000 to FUNMODE.
N     * |        |          |000 = The USCI is disabled. All protocol related state machines are set to idle state.
N     * |        |          |001 = The SPI protocol is selected.
N     * |        |          |010 = The UART protocol is selected.
N     * |        |          |100 = The I2C protocol is selected.
N     * |        |          |Note: Other bit combinations are reserved.
N     * @var UUART_T::INTEN
N     * Offset: 0x04  USCI Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TXSTIEN   |Transmit Start Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a transmit start event.
N     * |        |          |0 = The transmit start interrupt is disabled.
N     * |        |          |1 = The transmit start interrupt is enabled.
N     * |[2]     |TXENDIEN  |Transmit End Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a transmit finish event.
N     * |        |          |0 = The transmit finish interrupt is disabled.
N     * |        |          |1 = The transmit finish interrupt is enabled.
N     * |[3]     |RXSTIEN   |Receive Start Interrupt Enable BIt
N     * |        |          |This bit enables the interrupt generation in case of a receive start event.
N     * |        |          |0 = The receive start interrupt is disabled.
N     * |        |          |1 = The receive start interrupt is enabled.
N     * |[4]     |RXENDIEN  |Receive End Interrupt Enable Bit
N     * |        |          |This bit enables the interrupt generation in case of a receive finish event.
N     * |        |          |0 = The receive end interrupt is disabled.
N     * |        |          |1 = The receive end interrupt is enabled.
N     * @var UUART_T::BRGEN
N     * Offset: 0x08  USCI Baud Rate Generator Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RCLKSEL   |Reference Clock Source Selection
N     * |        |          |This bit selects the source signal of reference clock (fREF_CLK).
N     * |        |          |0 = Peripheral device clock fPCLK.
N     * |        |          |1 = Reserved.
N     * |[1]     |PTCLKSEL  |Protocol Clock Source Selection
N     * |        |          |This bit selects the source signal of protocol clock (fPROT_CLK).
N     * |        |          |0 = Reference clock fREF_CLK.
N     * |        |          |1 = fREF_CLK2 (its frequency is half of fREF_CLK).
N     * |[3:2]   |SPCLKSEL  |Sample Clock Source Selection
N     * |        |          |This bit field used for the clock source selection of a sample clock (fSAMP_CLK) for the protocol processor.
N     * |        |          |00 = fSAMP_CLK = fDIV_CLK.
N     * |        |          |01 = fSAMP_CLK = fPROT_CLK.
N     * |        |          |10 = fSAMP_CLK = fSCLK.
N     * |        |          |11 = fSAMP_CLK = fREF_CLK.
N     * |[4]     |TMCNTEN   |Timing Measurement Counter Enable Bit
N     * |        |          |This bit enables the 10-bit timing measurement counter.
N     * |        |          |0 = Timing measurement counter is Disabled.
N     * |        |          |1 = Timing measurement counter is Enabled.
N     * |[5]     |TMCNTSRC  |Timing Measurement Counter Clock Source Selection
N     * |        |          |0 = Timing measurement counter with fPROT_CLK.
N     * |        |          |1 = Timing measurement counter with fDIV_CLK.
N     * |[9:8]   |PDSCNT    |Pre-divider for Sample Counter
N     * |        |          |This bit field defines the divide ratio of the clock division from sample clock fSAMP_CLK
N     * |        |          |The divided frequency fPDS_CNT = fSAMP_CLK / (PDSCNT+1).
N     * |[14:10] |DSCNT     |Denominator for Sample Counter
N     * |        |          |This bit field defines the divide ratio of the sample clock fSAMP_CLK.
N     * |        |          |The divided frequency fDS_CNT = fPDS_CNT / (DSCNT+1).
N     * |        |          |Note: The maximum value of DSCNT is 0xF on UART mode and suggest to set over 4 to confirm the receiver data is sampled in right value
N     * |[25:16] |CLKDIV    |Clock Divider
N     * |        |          |This bit field defines the ratio between the protocol clock frequency fPROT_CLK and the clock divider frequency fDIV_CLK (fDIV_CLK = fPROT_CLK / (CLKDIV+1) ).
N     * |        |          |Note: In UART function, it can be updated by hardware in the 4th falling edge of the input data 0x55 when the auto baud rate function (ABREN(UUART_PROTCTL[6])) is enabled
N     * |        |          |The revised value is the average bit time between bit 5 and bit 6
N     * |        |          |The user can use revised CLKDIV and new BRDETITV (UUART_PROTCTL[24:16]) to calculate the precise baud rate.
N     * @var UUART_T::DATIN0
N     * Offset: 0x10  USCI Input Data Signal Configuration Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input Signal Synchronization Selection
N     * |        |          |This bit selects if the un-synchronized input signal (with optionally   inverted) or the synchronized (and optionally filtered) signal can be used as   input for the data shift unit.
N     * |        |          |0 = The un-synchronized signal can be taken as input for the data shift   unit.
N     * |        |          |1 = The synchronized signal can be taken as input for the data shift   unit.
N     * |[2]     |ININV     |Input Signal Inverse Selection
N     * |        |          |This bit defines the inverter enable of the input asynchronous signal.
N     * |        |          |0 = The un-synchronized input signal will not be inverted.
N     * |        |          |1 = The un-synchronized input signal will be inverted.
N     * |[4:3]   |EDGEDET   |Input Signal Edge Detection Mode
N     * |        |          |This bit field selects which edge actives the trigger event of input   data signal.
N     * |        |          |00 = The trigger event activation is disabled.
N     * |        |          |01 = A rising edge activates the trigger event of input data signal.
N     * |        |          |10 = A falling edge activates the trigger event of input data signal.
N     * |        |          |11 = Both edges activate the trigger event of input data signal.
N     * |        |          |Note: In UART function mode, it is suggested to set this bit field as 10.
N     * @var UUART_T::CTLIN0
N     * Offset: 0x20  USCI Input Control Signal Configuration Register 0
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input Synchronization Signal Selection
N     * |        |          |This bit selects if the un-synchronized input signal (with optionally   inverted) or the synchronized (and optionally filtered) signal can be used as   input for the data shift unit.
N     * |        |          |0 = The un-synchronized signal can be taken as input for the data shift   unit.
N     * |        |          |1 = The synchronized signal can be taken as input for the data shift   unit.
N     * |[2]     |ININV     |Input Signal Inverse Selection
N     * |        |          |This bit defines the inverter enable of the input asynchronous signal.
N     * |        |          |0 = The un-synchronized input signal will not be inverted.
N     * |        |          |1 = The un-synchronized input signal will be inverted.
N     * @var UUART_T::CLKIN
N     * Offset: 0x28  USCI Input Clock Signal Configuration Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SYNCSEL   |Input Synchronization Signal Selection
N     * |        |          |This bit selects if the un-synchronized input signal or the   synchronized (and optionally filtered) signal can be used as input for the   data shift unit.
N     * |        |          |0 = The un-synchronized signal can be taken as input for the data shift   unit.
N     * |        |          |1 = The synchronized signal can be taken as input for the data shift unit.
N     * @var UUART_T::LINECTL
N     * Offset: 0x2C  USCI Line Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |LSB       |LSB First Transmission Selection
N     * |        |          |0 = The MSB, which bit of transmit/receive data buffer depends on the setting of DWIDTH, is transmitted/received first.
N     * |        |          |1 = The LSB, the bit 0 of data buffer, will be transmitted/received first.
N     * |[5]     |DATOINV   |Data Output Inverse Selection
N     * |        |          |This bit defines the relation between the internal shift data value and the output data signal of USCIx_DAT1 pin.
N     * |        |          |0 = The value of USCIx_DAT1 is equal to the data shift register.
N     * |        |          |1 = The value of USCIx_DAT1 is the inversion of data shift register.
N     * |[7]     |CTLOINV   |Control Signal Output Inverse Selection
N     * |        |          |This bit defines the relation between the internal control signal and the output control signal.
N     * |        |          |0 = No effect.
N     * |        |          |1 = The control signal will be inverted before its output.
N     * |        |          |Note: In UART protocol, the control signal means nRTS signal.
N     * |[11:8]  |DWIDTH    |Word Length of Transmission
N     * |        |          |This bit field defines the data word length (amount of bits) for reception and transmission
N     * |        |          |The data word is always right-aligned in the data buffer
N     * |        |          |USCI support word length from 4 to 16 bits.
N     * |        |          |0x0: The data word contains 16 bits located at bit positions [15:0].
N     * |        |          |0x1: Reserved.
N     * |        |          |0x2: Reserved.
N     * |        |          |0x3: Reserved.
N     * |        |          |0x4: The data word contains 4 bits located at bit positions [3:0].
N     * |        |          |0x5: The data word contains 5 bits located at bit positions [4:0].
N     * |        |          |..
N     * |        |          |0xF: The data word contains 15 bits located at bit positions [14:0].
N     * |        |          |Note: In UART protocol, the length can be configured as 6~13 bits.
N     * @var UUART_T::TXDAT
N     * Offset: 0x30  USCI Transmit Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |TXDAT     |Transmit Data
N     * |        |          |Software can use this bit field to write 16-bit transmit data for transmission.
N     * @var UUART_T::RXDAT
N     * Offset: 0x34  USCI Receive Data Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[15:0]  |RXDAT     |Received Data
N     * |        |          |This bit field monitors the received data which stored in receive data buffer.
N     * |        |          |Note: RXDAT[15:13] indicate the same frame status of BREAK, FRMERR and PARITYERR (UUART_PROTSTS[7:5]).
N     * @var UUART_T::BUFCTL
N     * Offset: 0x38  USCI Transmit/Receive Buffer Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7]     |TXCLR     |Clear Transmit Buffer
N     * |        |          |0 = No effect.
N     * |        |          |1 = The transmit buffer is cleared (filling level is cleared and output pointer is set to input pointer value)
N     * |        |          |Should only be used while the buffer is not taking part in data traffic.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * |[14]    |RXOVIEN   |Receive Buffer Overrun Error Interrupt Enable Control
N     * |        |          |0 = Receive overrun interrupt Disabled.
N     * |        |          |1 = Receive overrun interrupt Enabled.
N     * |[15]    |RXCLR     |Clear Receive Buffer
N     * |        |          |0 = No effect.
N     * |        |          |1 = The receive buffer is cleared (filling level is cleared and output pointer is set to input pointer value)
N     * |        |          |Should only be used while the buffer is not taking part in data traffic.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * |[16]    |TXRST     |Transmit Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the transmit-related counters, state machine, and the content of transmit shift register and data buffer.
N     * |        |          |Note: It is cleared automatically after one PCLK cycle.
N     * |[17]    |RXRST     |Receive Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the receive-related counters, state machine, and the content of receive shift register and data buffer.
N     * |        |          |Note 1: It is cleared automatically after one PCLK cycle.
N     * |        |          |Note 2: It is suggest to check the RXBUSY (UUART_PROTSTS[10]) before this bit will be set to 1.
N     * @var UUART_T::BUFSTS
N     * Offset: 0x3C  USCI Transmit/Receive Buffer Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RXEMPTY   |Receive Buffer Empty Indicator
N     * |        |          |0 = Receive buffer is not empty.
N     * |        |          |1 = Receive buffer is empty.
N     * |[1]     |RXFULL    |Receive Buffer Full Indicator
N     * |        |          |0 = Receive buffer is not full.
N     * |        |          |1 = Receive buffer is full.
N     * |[3]     |RXOVIF    |Receive Buffer Over-run Error Interrupt Status
N     * |        |          |This bit indicates that a receive buffer overrun error event has been detected
N     * |        |          |If RXOVIEN (UUART_BUFCTL[14]) is enabled, the corresponding interrupt request is activated
N     * |        |          |It is cleared by software writes 1 to this bit.
N     * |        |          |0 = A receive buffer overrun error event has not been detected.
N     * |        |          |1 = A receive buffer overrun error event has been detected.
N     * |[8]     |TXEMPTY   |Transmit Buffer Empty Indicator
N     * |        |          |0 = Transmit buffer is not empty.
N     * |        |          |1 = Transmit buffer is empty.
N     * |[9]     |TXFULL    |Transmit Buffer Full Indicator
N     * |        |          |0 = Transmit buffer is not full.
N     * |        |          |1 = Transmit buffer is full.
N     * @var UUART_T::PDMACTL
N     * Offset: 0x40  USCI PDMA Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |PDMARST   |PDMA Reset
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the USCI's PDMA control logic. This bit will be cleared to 0 automatically.
N     * |[1]     |TXPDMAEN  |PDMA Transmit Channel Available
N     * |        |          |0 = Transmit PDMA function Disabled.
N     * |        |          |1 = Transmit PDMA function Enabled.
N     * |[2]     |RXPDMAEN  |PDMA Receive Channel Available
N     * |        |          |0 = Receive PDMA function Disabled.
N     * |        |          |1 = Receive PDMA function Enabled.
N     * |[3]     |PDMAEN    |PDMA Mode Enable Bit
N     * |        |          |0 = PDMA function Disabled.
N     * |        |          |1 = PDMA function Enabled.
N     * |        |          |Notice: The I2C is not supporting PDMA function.
N     * @var UUART_T::WKCTL
N     * Offset: 0x54  USCI Wake-up Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKEN      |Wake-up Enable Bit
N     * |        |          |0 = Wake-up function Disabled.
N     * |        |          |1 = Wake-up function Enabled.
N     * |[2]     |PDBOPT    |Power Down Blocking Option
N     * |        |          |0 = If user attempts to enter Power-down mode by executing WFI while the protocol is in transferring, MCU will stop the transfer and enter Power-down mode immediately.
N     * |        |          |1 = If user attempts to enter Power-down mode by executing WFI while the protocol is in transferring, the on-going transfer will not be stopped and MCU will enter idle mode immediately.
N     * @var UUART_T::WKSTS
N     * Offset: 0x58  USCI Wake-up Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WKF       |Wake-up Flag
N     * |        |          |When chip is woken up from Power-down mode, this bit is set to 1
N     * |        |          |Software can write 1 to clear this bit.
N     * @var UUART_T::PROTCTL
N     * Offset: 0x5C  USCI Protocol Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |STOPB     |Stop Bits
N     * |        |          |This bit defines the number of stop bits in an UART frame.
N     * |        |          |0 = The number of stop bits is 1.
N     * |        |          |1 = The number of stop bits is 2.
N     * |[1]     |PARITYEN  |Parity Enable Bit
N     * |        |          |This bit defines the parity bit is enabled in an UART frame.
N     * |        |          |0 = The parity bit Disabled.
N     * |        |          |1 = The parity bit Enabled.
N     * |[2]     |EVENPARITY|Even Parity Enable Bit
N     * |        |          |0 = Odd number of logic 1's is transmitted and checked in each word.
N     * |        |          |1 = Even number of logic 1's is transmitted and checked in each word.
N     * |        |          |Note: This bit has effect only when PARITYEN is set.
N     * |[3]     |RTSAUTOEN |nRTS Auto-flow Control Enable Bit
N     * |        |          |When nRTS auto-flow is enabled, if the receiver buffer is full (RXFULL (UUART_BUFSTS[1] = 1'b1)), the UART will de-assert nRTS signal.
N     * |        |          |0 = nRTS auto-flow control Disabled.
N     * |        |          |1 = nRTS auto-flow control Enabled.
N     * |        |          |Note: This bit has effect only when the RTSAUDIREN is not set.
N     * |[4]     |CTSAUTOEN |nCTS Auto-flow Control Enable Bit
N     * |        |          |When nCTS auto-flow is enabled, the UART will send data to external device when nCTS input assert (UART will not send data to device if nCTS input is dis-asserted).
N     * |        |          |0 = nCTS auto-flow control Disabled.
N     * |        |          |1 = nCTS auto-flow control Enabled.
N     * |[5]     |RTSAUDIREN|nRTS Auto Direction Enable Bit
N     * |        |          |When nRTS auto direction is enabled, if the transmitted bytes in the TX buffer is empty, the UART will reassert nRTS signal.
N     * |        |          |0 = nRTS auto direction control Disabled.
N     * |        |          |1 = nRTS auto direction control Enabled.
N     * |        |          |Note 1: This bit is used for nRTS auto direction control for RS485.
N     * |        |          |Note 2: This bit has effect only when the RTSAUTOEN is not set.
N     * |[6]     |ABREN     |Auto-baud Rate Detect Enable Bit
N     * |        |          |0 = Auto-baud rate detect function Disabled.
N     * |        |          |1 = Auto-baud rate detect function Enabled.
N     * |        |          |Note: When the auto - baud rate detect operation finishes, hardware will clear this bit
N     * |        |          |The associated interrupt ABRDETIF (UUART_PROTST[9]) will be generated (If ARBIEN (UUART_PROTIEN [1]) is enabled).
N     * |[9]     |DATWKEN   |Data Wake-up Mode Enable Bit
N     * |        |          |0 = Data wake-up mode Disabled.
N     * |        |          |1 = Data wake-up mode Enabled.
N     * |[10]    |CTSWKEN   |nCTS Wake-up Mode Enable Bit
N     * |        |          |0 = nCTS wake-up mode Disabled.
N     * |        |          |1 = nCTS wake-up mode Enabled.
N     * |[14:11] |WAKECNT   |Wake-up Counter
N     * |        |          |These bits field indicate how many clock cycle selected by fPDS_CNT do the slave can get the 1st bit (start bit) when the device is wake-up from Power-down mode.
N     * |[24:16] |BRDETITV  |Baud Rate Detection Interval
N     * |        |          |This bit fields indicate how many clock cycle selected by TMCNTSRC (UUART_BRGEN [5]) does the slave calculates the baud rate in one bits
N     * |        |          |The order of the bus shall be 1 and 0 step by step (e.g
N     * |        |          |the input data pattern shall be 0x55)
N     * |        |          |The user can read the value to know the current input baud rate of the bus whenever the ABRDETIF (UUART_PROTCTL[9]) is set.
N     * |        |          |Note: This bit can be cleared to 0 by software writing '0' to the BRDETITV.
N     * |[26]    |STICKEN   |Stick Parity Enable Bit
N     * |        |          |0 = Stick parity Disabled.
N     * |        |          |1 = Stick parity Enabled.
N     * |        |          |Note: Refer to RS-485 Support section for detail information.
N     * |[29]    |BCEN      |Transmit Break Control Enable Bit
N     * |        |          |0 = Transmit Break Control Disabled.
N     * |        |          |1 = Transmit Break Control Enabled.
N     * |        |          |Note: When this bit is set to logic 1, the serial data output (TX) is forced to the Spacing State (logic 0)
N     * |        |          |This bit acts only on TX line and has no effect on the transmitter logic.
N     * |[31]    |PROTEN    |UART Protocol Enable Bit
N     * |        |          |0 = UART Protocol Disabled.
N     * |        |          |1 = UART Protocol Enabled.
N     * @var UUART_T::PROTIEN
N     * Offset: 0x60  USCI Protocol Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |ABRIEN    |Auto-baud Rate Interrupt Enable Bit
N     * |        |          |0 = Auto-baud rate interrupt Disabled.
N     * |        |          |1 = Auto-baud rate interrupt Enabled.
N     * |[2]     |RLSIEN    |Receive Line Status Interrupt Enable Bit
N     * |        |          |0 = Receive line status interrupt Disabled.
N     * |        |          |1 = Receive line status interrupt Enabled.
N     * |        |          |Note: UUART_PROTSTS[7:5] indicates the current interrupt event for receive line status interrupt.
N     * @var UUART_T::PROTSTS
N     * Offset: 0x64  USCI Protocol Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1]     |TXSTIF    |Transmit Start Interrupt Flag
N     * |        |          |0 = A transmit start interrupt status has not occurred.
N     * |        |          |1 = A transmit start interrupt status has occurred.
N     * |        |          |Note 1: It is cleared by software writing one into this bit.
N     * |        |          |Note 2: Used for user to load next transmit data when there is no data in transmit buffer.
N     * |[2]     |TXENDIF   |Transmit End Interrupt Flag
N     * |        |          |0 = A transmit end interrupt status has not occurred.
N     * |        |          |1 = A transmit end interrupt status has occurred.
N     * |        |          |Note: It is cleared by software writing one into this bit.
N     * |[3]     |RXSTIF    |Receive Start Interrupt Flag
N     * |        |          |0 = A receive start interrupt status has not occurred.
N     * |        |          |1 = A receive start interrupt status has occurred.
N     * |        |          |Note: It is cleared by software writing one into this bit.
N     * |[4]     |RXENDIF   |Receive End Interrupt Flag
N     * |        |          |0 = A receive finish interrupt status has not occurred.
N     * |        |          |1 = A receive finish interrupt status has occurred.
N     * |        |          |Note: It is cleared by software writing one into this bit.
N     * |[5]     |PARITYERR |Parity Error Flag
N     * |        |          |This bit is set to logic 1 whenever the received character does not have a valid "parity bit".
N     * |        |          |0 = No parity error is generated.
N     * |        |          |1 = Parity error is generated.
N     * |        |          |Note: This bit can be cleared by write "1" among the BREAK, FRMERR and PARITYERR bits.
N     * |[6]     |FRMERR    |Framing Error Flag
N     * |        |          |This bit is set to logic 1 whenever the received character does not have a valid "stop bit" (that is, the stop bit following the last data bit or parity bit is detected as logic 0).
N     * |        |          |0 = No framing error is generated.
N     * |        |          |1 = Framing error is generated.
N     * |        |          |Note: This bit can be cleared by write "1" among the BREAK, FRMERR and PARITYERR bits.
N     * |[7]     |BREAK     |Break Flag
N     * |        |          |This bit is set to logic 1 whenever the received data input (RX) is held in the "spacing state" (logic 0) for longer than a full word transmission time (that is, the total time of "start bit" + data bits + parity + stop bits).
N     * |        |          |0 = No Break is generated.
N     * |        |          |1 = Break is generated in the receiver bus.
N     * |        |          |Note: This bit can be cleared by write "1" among the BREAK, FRMERR and PARITYERR bits.
N     * |[9]     |ABRDETIF  |Auto-baud Rate Interrupt Flag
N     * |        |          |This bit is set when auto-baud rate detection is done among the falling edge of the input data
N     * |        |          |If the ABRIEN (UUART_PROTCTL[6]) is set, the auto-baud rate interrupt will be generated
N     * |        |          |This bit can be set 4 times when the input data pattern is 0x55 and it is cleared before the next falling edge of the input bus.
N     * |        |          |0 = Auto-baud rate detect function is not done.
N     * |        |          |1 = One Bit auto-baud rate detect function is done.
N     * |        |          |Note: This bit can be cleared by writing "1" to it.
N     * |[10]    |RXBUSY    |RX Bus Status Flag (Read Only)
N     * |        |          |This bit indicates the busy status of the receiver.
N     * |        |          |0 = The receiver is Idle.
N     * |        |          |1 = The receiver is BUSY.
N     * |[11]    |ABERRSTS  |Auto-baud Rate Error Status
N     * |        |          |This bit is set when auto-baud rate detection counter overrun
N     * |        |          |When the auto-baud rate counter overrun, the user shall revise the CLKDIV (UUART_BRGEN[25:16]) value and enable ABREN (UUART_PROTCTL[6]) to detect the correct baud rate again.
N     * |        |          |0 = Auto-baud rate detect counter is not overrun.
N     * |        |          |1 = Auto-baud rate detect counter is overrun.
N     * |        |          |Note 1: This bit is set at the same time of ABRDETIF.
N     * |        |          |Note 2: This bit can be cleared by writing "1" to ABRDETIF or ABERRSTS.
N     * |[16]    |CTSSYNCLV |nCTS Synchronized Level Status (Read Only)
N     * |        |          |This bit used to indicate the current status of the internal synchronized nCTS signal.
N     * |        |          |0 = The internal synchronized nCTS is low.
N     * |        |          |1 = The internal synchronized nCTS is high.
N     * |[17]    |CTSLV     |nCTS Pin Status (Read Only)
N     * |        |          |This bit used to monitor the current status of nCTS pin input.
N     * |        |          |0 = nCTS pin input is low level voltage logic state.
N     * |        |          |1 = nCTS pin input is high level voltage logic state.
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] USCI Control Register                                            */
X    volatile uint32_t CTL;                    
N    __IO uint32_t INTEN;                 /*!< [0x0004] USCI Interrupt Enable Register                                   */
X    volatile uint32_t INTEN;                  
N    __IO uint32_t BRGEN;                 /*!< [0x0008] USCI Baud Rate Generator Register                                */
X    volatile uint32_t BRGEN;                  
N    __I  uint32_t RESERVE0[1];
X    volatile const  uint32_t RESERVE0[1];
N    __IO uint32_t DATIN0;                /*!< [0x0010] USCI Input Data Signal Configuration Register 0                  */
X    volatile uint32_t DATIN0;                 
N    __I  uint32_t RESERVE1[3];
X    volatile const  uint32_t RESERVE1[3];
N    __IO uint32_t CTLIN0;                /*!< [0x0020] USCI Input Control Signal Configuration Register 0               */
X    volatile uint32_t CTLIN0;                 
N    __I  uint32_t RESERVE2[1];
X    volatile const  uint32_t RESERVE2[1];
N    __IO uint32_t CLKIN;                 /*!< [0x0028] USCI Input Clock Signal Configuration Register                   */
X    volatile uint32_t CLKIN;                  
N    __IO uint32_t LINECTL;               /*!< [0x002c] USCI Line Control Register                                       */
X    volatile uint32_t LINECTL;                
N    __O  uint32_t TXDAT;                 /*!< [0x0030] USCI Transmit Data Register                                      */
X    volatile  uint32_t TXDAT;                  
N    __I  uint32_t RXDAT;                 /*!< [0x0034] USCI Receive Data Register                                       */
X    volatile const  uint32_t RXDAT;                  
N    __IO uint32_t BUFCTL;                /*!< [0x0038] USCI Transmit/Receive Buffer Control Register                    */
X    volatile uint32_t BUFCTL;                 
N    __IO uint32_t BUFSTS;                /*!< [0x003c] USCI Transmit/Receive Buffer Status Register                     */
X    volatile uint32_t BUFSTS;                 
N    __IO uint32_t PDMACTL;               /*!< [0x0040] USCI PDMA Control Register                                       */
X    volatile uint32_t PDMACTL;                
N    __I  uint32_t RESERVE3[4];
X    volatile const  uint32_t RESERVE3[4];
N    __IO uint32_t WKCTL;                 /*!< [0x0054] USCI Wake-up Control Register                                    */
X    volatile uint32_t WKCTL;                  
N    __IO uint32_t WKSTS;                 /*!< [0x0058] USCI Wake-up Status Register                                     */
X    volatile uint32_t WKSTS;                  
N    __IO uint32_t PROTCTL;               /*!< [0x005c] USCI Protocol Control Register                                   */
X    volatile uint32_t PROTCTL;                
N    __IO uint32_t PROTIEN;               /*!< [0x0060] USCI Protocol Interrupt Enable Register                          */
X    volatile uint32_t PROTIEN;                
N    __IO uint32_t PROTSTS;               /*!< [0x0064] USCI Protocol Status Register                                    */
X    volatile uint32_t PROTSTS;                
N} UUART_T;
N
N/**
N    @addtogroup UUART_CONST UUART Bit Field Definition
N    Constant Definitions for UUART Controller
N@{ */
N
N#define UUART_CTL_FUNMODE_Pos            (0)                                               /*!< UUART_T::CTL: FUNMODE Position         */
N#define UUART_CTL_FUNMODE_Msk            (0x7ul << UUART_CTL_FUNMODE_Pos)                  /*!< UUART_T::CTL: FUNMODE Mask             */
N
N#define UUART_INTEN_TXSTIEN_Pos          (1)                                               /*!< UUART_T::INTEN: TXSTIEN Position       */
N#define UUART_INTEN_TXSTIEN_Msk          (0x1ul << UUART_INTEN_TXSTIEN_Pos)                /*!< UUART_T::INTEN: TXSTIEN Mask           */
N
N#define UUART_INTEN_TXENDIEN_Pos         (2)                                               /*!< UUART_T::INTEN: TXENDIEN Position      */
N#define UUART_INTEN_TXENDIEN_Msk         (0x1ul << UUART_INTEN_TXENDIEN_Pos)               /*!< UUART_T::INTEN: TXENDIEN Mask          */
N
N#define UUART_INTEN_RXSTIEN_Pos          (3)                                               /*!< UUART_T::INTEN: RXSTIEN Position       */
N#define UUART_INTEN_RXSTIEN_Msk          (0x1ul << UUART_INTEN_RXSTIEN_Pos)                /*!< UUART_T::INTEN: RXSTIEN Mask           */
N
N#define UUART_INTEN_RXENDIEN_Pos         (4)                                               /*!< UUART_T::INTEN: RXENDIEN Position      */
N#define UUART_INTEN_RXENDIEN_Msk         (0x1ul << UUART_INTEN_RXENDIEN_Pos)               /*!< UUART_T::INTEN: RXENDIEN Mask          */
N
N#define UUART_BRGEN_RCLKSEL_Pos          (0)                                               /*!< UUART_T::BRGEN: RCLKSEL Position       */
N#define UUART_BRGEN_RCLKSEL_Msk          (0x1ul << UUART_BRGEN_RCLKSEL_Pos)                /*!< UUART_T::BRGEN: RCLKSEL Mask           */
N
N#define UUART_BRGEN_PTCLKSEL_Pos         (1)                                               /*!< UUART_T::BRGEN: PTCLKSEL Position      */
N#define UUART_BRGEN_PTCLKSEL_Msk         (0x1ul << UUART_BRGEN_PTCLKSEL_Pos)               /*!< UUART_T::BRGEN: PTCLKSEL Mask          */
N
N#define UUART_BRGEN_SPCLKSEL_Pos         (2)                                               /*!< UUART_T::BRGEN: SPCLKSEL Position      */
N#define UUART_BRGEN_SPCLKSEL_Msk         (0x3ul << UUART_BRGEN_SPCLKSEL_Pos)               /*!< UUART_T::BRGEN: SPCLKSEL Mask          */
N
N#define UUART_BRGEN_TMCNTEN_Pos          (4)                                               /*!< UUART_T::BRGEN: TMCNTEN Position       */
N#define UUART_BRGEN_TMCNTEN_Msk          (0x1ul << UUART_BRGEN_TMCNTEN_Pos)                /*!< UUART_T::BRGEN: TMCNTEN Mask           */
N
N#define UUART_BRGEN_TMCNTSRC_Pos         (5)                                               /*!< UUART_T::BRGEN: TMCNTSRC Position      */
N#define UUART_BRGEN_TMCNTSRC_Msk         (0x1ul << UUART_BRGEN_TMCNTSRC_Pos)               /*!< UUART_T::BRGEN: TMCNTSRC Mask          */
N
N#define UUART_BRGEN_PDSCNT_Pos           (8)                                               /*!< UUART_T::BRGEN: PDSCNT Position        */
N#define UUART_BRGEN_PDSCNT_Msk           (0x3ul << UUART_BRGEN_PDSCNT_Pos)                 /*!< UUART_T::BRGEN: PDSCNT Mask            */
N
N#define UUART_BRGEN_DSCNT_Pos            (10)                                              /*!< UUART_T::BRGEN: DSCNT Position         */
N#define UUART_BRGEN_DSCNT_Msk            (0x1ful << UUART_BRGEN_DSCNT_Pos)                 /*!< UUART_T::BRGEN: DSCNT Mask             */
N
N#define UUART_BRGEN_CLKDIV_Pos           (16)                                              /*!< UUART_T::BRGEN: CLKDIV Position        */
N#define UUART_BRGEN_CLKDIV_Msk           (0x3fful << UUART_BRGEN_CLKDIV_Pos)               /*!< UUART_T::BRGEN: CLKDIV Mask            */
N
N#define UUART_DATIN0_SYNCSEL_Pos         (0)                                               /*!< UUART_T::DATIN0: SYNCSEL Position      */
N#define UUART_DATIN0_SYNCSEL_Msk         (0x1ul << UUART_DATIN0_SYNCSEL_Pos)               /*!< UUART_T::DATIN0: SYNCSEL Mask          */
N
N#define UUART_DATIN0_ININV_Pos           (2)                                               /*!< UUART_T::DATIN0: ININV Position        */
N#define UUART_DATIN0_ININV_Msk           (0x1ul << UUART_DATIN0_ININV_Pos)                 /*!< UUART_T::DATIN0: ININV Mask            */
N
N#define UUART_DATIN0_EDGEDET_Pos         (3)                                               /*!< UUART_T::DATIN0: EDGEDET Position      */
N#define UUART_DATIN0_EDGEDET_Msk         (0x3ul << UUART_DATIN0_EDGEDET_Pos)               /*!< UUART_T::DATIN0: EDGEDET Mask          */
N
N#define UUART_CTLIN0_SYNCSEL_Pos         (0)                                               /*!< UUART_T::CTLIN0: SYNCSEL Position      */
N#define UUART_CTLIN0_SYNCSEL_Msk         (0x1ul << UUART_CTLIN0_SYNCSEL_Pos)               /*!< UUART_T::CTLIN0: SYNCSEL Mask          */
N
N#define UUART_CTLIN0_ININV_Pos           (2)                                               /*!< UUART_T::CTLIN0: ININV Position        */
N#define UUART_CTLIN0_ININV_Msk           (0x1ul << UUART_CTLIN0_ININV_Pos)                 /*!< UUART_T::CTLIN0: ININV Mask            */
N
N#define UUART_CLKIN_SYNCSEL_Pos          (0)                                               /*!< UUART_T::CLKIN: SYNCSEL Position       */
N#define UUART_CLKIN_SYNCSEL_Msk          (0x1ul << UUART_CLKIN_SYNCSEL_Pos)                /*!< UUART_T::CLKIN: SYNCSEL Mask           */
N
N#define UUART_LINECTL_LSB_Pos            (0)                                               /*!< UUART_T::LINECTL: LSB Position         */
N#define UUART_LINECTL_LSB_Msk            (0x1ul << UUART_LINECTL_LSB_Pos)                  /*!< UUART_T::LINECTL: LSB Mask             */
N
N#define UUART_LINECTL_DATOINV_Pos        (5)                                               /*!< UUART_T::LINECTL: DATOINV Position     */
N#define UUART_LINECTL_DATOINV_Msk        (0x1ul << UUART_LINECTL_DATOINV_Pos)              /*!< UUART_T::LINECTL: DATOINV Mask         */
N
N#define UUART_LINECTL_CTLOINV_Pos        (7)                                               /*!< UUART_T::LINECTL: CTLOINV Position     */
N#define UUART_LINECTL_CTLOINV_Msk        (0x1ul << UUART_LINECTL_CTLOINV_Pos)              /*!< UUART_T::LINECTL: CTLOINV Mask         */
N
N#define UUART_LINECTL_DWIDTH_Pos         (8)                                               /*!< UUART_T::LINECTL: DWIDTH Position      */
N#define UUART_LINECTL_DWIDTH_Msk         (0xful << UUART_LINECTL_DWIDTH_Pos)               /*!< UUART_T::LINECTL: DWIDTH Mask          */
N
N#define UUART_TXDAT_TXDAT_Pos            (0)                                               /*!< UUART_T::TXDAT: TXDAT Position         */
N#define UUART_TXDAT_TXDAT_Msk            (0xfffful << UUART_TXDAT_TXDAT_Pos)               /*!< UUART_T::TXDAT: TXDAT Mask             */
N
N#define UUART_RXDAT_RXDAT_Pos            (0)                                               /*!< UUART_T::RXDAT: RXDAT Position         */
N#define UUART_RXDAT_RXDAT_Msk            (0xfffful << UUART_RXDAT_RXDAT_Pos)               /*!< UUART_T::RXDAT: RXDAT Mask             */
N
N#define UUART_BUFCTL_TXCLR_Pos           (7)                                               /*!< UUART_T::BUFCTL: TXCLR Position        */
N#define UUART_BUFCTL_TXCLR_Msk           (0x1ul << UUART_BUFCTL_TXCLR_Pos)                 /*!< UUART_T::BUFCTL: TXCLR Mask            */
N
N#define UUART_BUFCTL_RXOVIEN_Pos         (14)                                              /*!< UUART_T::BUFCTL: RXOVIEN Position      */
N#define UUART_BUFCTL_RXOVIEN_Msk         (0x1ul << UUART_BUFCTL_RXOVIEN_Pos)               /*!< UUART_T::BUFCTL: RXOVIEN Mask          */
N
N#define UUART_BUFCTL_RXCLR_Pos           (15)                                              /*!< UUART_T::BUFCTL: RXCLR Position        */
N#define UUART_BUFCTL_RXCLR_Msk           (0x1ul << UUART_BUFCTL_RXCLR_Pos)                 /*!< UUART_T::BUFCTL: RXCLR Mask            */
N
N#define UUART_BUFCTL_TXRST_Pos           (16)                                              /*!< UUART_T::BUFCTL: TXRST Position        */
N#define UUART_BUFCTL_TXRST_Msk           (0x1ul << UUART_BUFCTL_TXRST_Pos)                 /*!< UUART_T::BUFCTL: TXRST Mask            */
N
N#define UUART_BUFCTL_RXRST_Pos           (17)                                              /*!< UUART_T::BUFCTL: RXRST Position        */
N#define UUART_BUFCTL_RXRST_Msk           (0x1ul << UUART_BUFCTL_RXRST_Pos)                 /*!< UUART_T::BUFCTL: RXRST Mask            */
N
N#define UUART_BUFSTS_RXEMPTY_Pos         (0)                                               /*!< UUART_T::BUFSTS: RXEMPTY Position      */
N#define UUART_BUFSTS_RXEMPTY_Msk         (0x1ul << UUART_BUFSTS_RXEMPTY_Pos)               /*!< UUART_T::BUFSTS: RXEMPTY Mask          */
N
N#define UUART_BUFSTS_RXFULL_Pos          (1)                                               /*!< UUART_T::BUFSTS: RXFULL Position       */
N#define UUART_BUFSTS_RXFULL_Msk          (0x1ul << UUART_BUFSTS_RXFULL_Pos)                /*!< UUART_T::BUFSTS: RXFULL Mask           */
N
N#define UUART_BUFSTS_RXOVIF_Pos          (3)                                               /*!< UUART_T::BUFSTS: RXOVIF Position       */
N#define UUART_BUFSTS_RXOVIF_Msk          (0x1ul << UUART_BUFSTS_RXOVIF_Pos)                /*!< UUART_T::BUFSTS: RXOVIF Mask           */
N
N#define UUART_BUFSTS_TXEMPTY_Pos         (8)                                               /*!< UUART_T::BUFSTS: TXEMPTY Position      */
N#define UUART_BUFSTS_TXEMPTY_Msk         (0x1ul << UUART_BUFSTS_TXEMPTY_Pos)               /*!< UUART_T::BUFSTS: TXEMPTY Mask          */
N
N#define UUART_BUFSTS_TXFULL_Pos          (9)                                               /*!< UUART_T::BUFSTS: TXFULL Position       */
N#define UUART_BUFSTS_TXFULL_Msk          (0x1ul << UUART_BUFSTS_TXFULL_Pos)                /*!< UUART_T::BUFSTS: TXFULL Mask           */
N
N#define UUART_PDMACTL_PDMARST_Pos        (0)                                               /*!< UUART_T::PDMACTL: PDMARST Position     */
N#define UUART_PDMACTL_PDMARST_Msk        (0x1ul << UUART_PDMACTL_PDMARST_Pos)              /*!< UUART_T::PDMACTL: PDMARST Mask         */
N
N#define UUART_PDMACTL_TXPDMAEN_Pos       (1)                                               /*!< UUART_T::PDMACTL: TXPDMAEN Position    */
N#define UUART_PDMACTL_TXPDMAEN_Msk       (0x1ul << UUART_PDMACTL_TXPDMAEN_Pos)             /*!< UUART_T::PDMACTL: TXPDMAEN Mask        */
N
N#define UUART_PDMACTL_RXPDMAEN_Pos       (2)                                               /*!< UUART_T::PDMACTL: RXPDMAEN Position    */
N#define UUART_PDMACTL_RXPDMAEN_Msk       (0x1ul << UUART_PDMACTL_RXPDMAEN_Pos)             /*!< UUART_T::PDMACTL: RXPDMAEN Mask        */
N
N#define UUART_PDMACTL_PDMAEN_Pos         (3)                                               /*!< UUART_T::PDMACTL: PDMAEN Position      */
N#define UUART_PDMACTL_PDMAEN_Msk         (0x1ul << UUART_PDMACTL_PDMAEN_Pos)               /*!< UUART_T::PDMACTL: PDMAEN Mask          */
N
N#define UUART_WKCTL_WKEN_Pos             (0)                                               /*!< UUART_T::WKCTL: WKEN Position          */
N#define UUART_WKCTL_WKEN_Msk             (0x1ul << UUART_WKCTL_WKEN_Pos)                   /*!< UUART_T::WKCTL: WKEN Mask              */
N
N#define UUART_WKCTL_PDBOPT_Pos           (2)                                               /*!< UUART_T::WKCTL: PDBOPT Position        */
N#define UUART_WKCTL_PDBOPT_Msk           (0x1ul << UUART_WKCTL_PDBOPT_Pos)                 /*!< UUART_T::WKCTL: PDBOPT Mask            */
N
N#define UUART_WKSTS_WKF_Pos              (0)                                               /*!< UUART_T::WKSTS: WKF Position           */
N#define UUART_WKSTS_WKF_Msk              (0x1ul << UUART_WKSTS_WKF_Pos)                    /*!< UUART_T::WKSTS: WKF Mask               */
N
N#define UUART_PROTCTL_STOPB_Pos          (0)                                               /*!< UUART_T::PROTCTL: STOPB Position       */
N#define UUART_PROTCTL_STOPB_Msk          (0x1ul << UUART_PROTCTL_STOPB_Pos)                /*!< UUART_T::PROTCTL: STOPB Mask           */
N
N#define UUART_PROTCTL_PARITYEN_Pos       (1)                                               /*!< UUART_T::PROTCTL: PARITYEN Position    */
N#define UUART_PROTCTL_PARITYEN_Msk       (0x1ul << UUART_PROTCTL_PARITYEN_Pos)             /*!< UUART_T::PROTCTL: PARITYEN Mask        */
N
N#define UUART_PROTCTL_EVENPARITY_Pos     (2)                                               /*!< UUART_T::PROTCTL: EVENPARITY Position  */
N#define UUART_PROTCTL_EVENPARITY_Msk     (0x1ul << UUART_PROTCTL_EVENPARITY_Pos)           /*!< UUART_T::PROTCTL: EVENPARITY Mask      */
N
N#define UUART_PROTCTL_RTSAUTOEN_Pos      (3)                                               /*!< UUART_T::PROTCTL: RTSAUTOEN Position   */
N#define UUART_PROTCTL_RTSAUTOEN_Msk      (0x1ul << UUART_PROTCTL_RTSAUTOEN_Pos)            /*!< UUART_T::PROTCTL: RTSAUTOEN Mask       */
N
N#define UUART_PROTCTL_CTSAUTOEN_Pos      (4)                                               /*!< UUART_T::PROTCTL: CTSAUTOEN Position   */
N#define UUART_PROTCTL_CTSAUTOEN_Msk      (0x1ul << UUART_PROTCTL_CTSAUTOEN_Pos)            /*!< UUART_T::PROTCTL: CTSAUTOEN Mask       */
N
N#define UUART_PROTCTL_RTSAUDIREN_Pos     (5)                                               /*!< UUART_T::PROTCTL: RTSAUDIREN Position  */
N#define UUART_PROTCTL_RTSAUDIREN_Msk     (0x1ul << UUART_PROTCTL_RTSAUDIREN_Pos)           /*!< UUART_T::PROTCTL: RTSAUDIREN Mask      */
N
N#define UUART_PROTCTL_ABREN_Pos          (6)                                               /*!< UUART_T::PROTCTL: ABREN Position       */
N#define UUART_PROTCTL_ABREN_Msk          (0x1ul << UUART_PROTCTL_ABREN_Pos)                /*!< UUART_T::PROTCTL: ABREN Mask           */
N
N#define UUART_PROTCTL_DATWKEN_Pos        (9)                                               /*!< UUART_T::PROTCTL: DATWKEN Position     */
N#define UUART_PROTCTL_DATWKEN_Msk        (0x1ul << UUART_PROTCTL_DATWKEN_Pos)              /*!< UUART_T::PROTCTL: DATWKEN Mask         */
N
N#define UUART_PROTCTL_CTSWKEN_Pos        (10)                                              /*!< UUART_T::PROTCTL: CTSWKEN Position     */
N#define UUART_PROTCTL_CTSWKEN_Msk        (0x1ul << UUART_PROTCTL_CTSWKEN_Pos)              /*!< UUART_T::PROTCTL: CTSWKEN Mask         */
N
N#define UUART_PROTCTL_WAKECNT_Pos        (11)                                              /*!< UUART_T::PROTCTL: WAKECNT Position     */
N#define UUART_PROTCTL_WAKECNT_Msk        (0xful << UUART_PROTCTL_WAKECNT_Pos)              /*!< UUART_T::PROTCTL: WAKECNT Mask         */
N
N#define UUART_PROTCTL_BRDETITV_Pos       (16)                                              /*!< UUART_T::PROTCTL: BRDETITV Position    */
N#define UUART_PROTCTL_BRDETITV_Msk       (0x1fful << UUART_PROTCTL_BRDETITV_Pos)           /*!< UUART_T::PROTCTL: BRDETITV Mask        */
N
N#define UUART_PROTCTL_STICKEN_Pos        (26)                                              /*!< UUART_T::PROTCTL: STICKEN Position     */
N#define UUART_PROTCTL_STICKEN_Msk        (0x1ul << UUART_PROTCTL_STICKEN_Pos)              /*!< UUART_T::PROTCTL: STICKEN Mask         */
N
N#define UUART_PROTCTL_BCEN_Pos           (29)                                              /*!< UUART_T::PROTCTL: BCEN Position        */
N#define UUART_PROTCTL_BCEN_Msk           (0x1ul << UUART_PROTCTL_BCEN_Pos)                 /*!< UUART_T::PROTCTL: BCEN Mask            */
N
N#define UUART_PROTCTL_PROTEN_Pos         (31)                                              /*!< UUART_T::PROTCTL: PROTEN Position      */
N#define UUART_PROTCTL_PROTEN_Msk         (0x1ul << UUART_PROTCTL_PROTEN_Pos)               /*!< UUART_T::PROTCTL: PROTEN Mask          */
N
N#define UUART_PROTIEN_ABRIEN_Pos         (1)                                               /*!< UUART_T::PROTIEN: ABRIEN Position      */
N#define UUART_PROTIEN_ABRIEN_Msk         (0x1ul << UUART_PROTIEN_ABRIEN_Pos)               /*!< UUART_T::PROTIEN: ABRIEN Mask          */
N
N#define UUART_PROTIEN_RLSIEN_Pos         (2)                                               /*!< UUART_T::PROTIEN: RLSIEN Position      */
N#define UUART_PROTIEN_RLSIEN_Msk         (0x1ul << UUART_PROTIEN_RLSIEN_Pos)               /*!< UUART_T::PROTIEN: RLSIEN Mask          */
N
N#define UUART_PROTSTS_TXSTIF_Pos         (1)                                               /*!< UUART_T::PROTSTS: TXSTIF Position      */
N#define UUART_PROTSTS_TXSTIF_Msk         (0x1ul << UUART_PROTSTS_TXSTIF_Pos)               /*!< UUART_T::PROTSTS: TXSTIF Mask          */
N
N#define UUART_PROTSTS_TXENDIF_Pos        (2)                                               /*!< UUART_T::PROTSTS: TXENDIF Position     */
N#define UUART_PROTSTS_TXENDIF_Msk        (0x1ul << UUART_PROTSTS_TXENDIF_Pos)              /*!< UUART_T::PROTSTS: TXENDIF Mask         */
N
N#define UUART_PROTSTS_RXSTIF_Pos         (3)                                               /*!< UUART_T::PROTSTS: RXSTIF Position      */
N#define UUART_PROTSTS_RXSTIF_Msk         (0x1ul << UUART_PROTSTS_RXSTIF_Pos)               /*!< UUART_T::PROTSTS: RXSTIF Mask          */
N
N#define UUART_PROTSTS_RXENDIF_Pos        (4)                                               /*!< UUART_T::PROTSTS: RXENDIF Position     */
N#define UUART_PROTSTS_RXENDIF_Msk        (0x1ul << UUART_PROTSTS_RXENDIF_Pos)              /*!< UUART_T::PROTSTS: RXENDIF Mask         */
N
N#define UUART_PROTSTS_PARITYERR_Pos      (5)                                               /*!< UUART_T::PROTSTS: PARITYERR Position   */
N#define UUART_PROTSTS_PARITYERR_Msk      (0x1ul << UUART_PROTSTS_PARITYERR_Pos)            /*!< UUART_T::PROTSTS: PARITYERR Mask       */
N
N#define UUART_PROTSTS_FRMERR_Pos         (6)                                               /*!< UUART_T::PROTSTS: FRMERR Position      */
N#define UUART_PROTSTS_FRMERR_Msk         (0x1ul << UUART_PROTSTS_FRMERR_Pos)               /*!< UUART_T::PROTSTS: FRMERR Mask          */
N
N#define UUART_PROTSTS_BREAK_Pos          (7)                                               /*!< UUART_T::PROTSTS: BREAK Position       */
N#define UUART_PROTSTS_BREAK_Msk          (0x1ul << UUART_PROTSTS_BREAK_Pos)                /*!< UUART_T::PROTSTS: BREAK Mask           */
N
N#define UUART_PROTSTS_ABRDETIF_Pos       (9)                                               /*!< UUART_T::PROTSTS: ABRDETIF Position    */
N#define UUART_PROTSTS_ABRDETIF_Msk       (0x1ul << UUART_PROTSTS_ABRDETIF_Pos)             /*!< UUART_T::PROTSTS: ABRDETIF Mask        */
N
N#define UUART_PROTSTS_RXBUSY_Pos         (10)                                              /*!< UUART_T::PROTSTS: RXBUSY Position      */
N#define UUART_PROTSTS_RXBUSY_Msk         (0x1ul << UUART_PROTSTS_RXBUSY_Pos)               /*!< UUART_T::PROTSTS: RXBUSY Mask          */
N
N#define UUART_PROTSTS_ABERRSTS_Pos       (11)                                              /*!< UUART_T::PROTSTS: ABERRSTS Position    */
N#define UUART_PROTSTS_ABERRSTS_Msk       (0x1ul << UUART_PROTSTS_ABERRSTS_Pos)             /*!< UUART_T::PROTSTS: ABERRSTS Mask        */
N
N#define UUART_PROTSTS_CTSSYNCLV_Pos      (16)                                              /*!< UUART_T::PROTSTS: CTSSYNCLV Position   */
N#define UUART_PROTSTS_CTSSYNCLV_Msk      (0x1ul << UUART_PROTSTS_CTSSYNCLV_Pos)            /*!< UUART_T::PROTSTS: CTSSYNCLV Mask       */
N
N#define UUART_PROTSTS_CTSLV_Pos          (17)                                              /*!< UUART_T::PROTSTS: CTSLV Position       */
N#define UUART_PROTSTS_CTSLV_Msk          (0x1ul << UUART_PROTSTS_CTSLV_Pos)                /*!< UUART_T::PROTSTS: CTSLV Mask           */
N
N/**@}*/ /* UUART_CONST */
N/**@}*/ /* end of UUART register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __UUART_REG_H__ */
L 168 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "usbd_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\usbd_reg.h" 1
N/**************************************************************************//**
N * @file     usbd_reg.h
N * @version  V1.00
N * @brief    USBD register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __USBD_REG_H__
N#define __USBD_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup USBD USB Device Controller (USBD)
N    Memory Mapped Structure for USBD Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var USBD_EP_T::BUFSEG
N     * Offset: 0x500/0x510/0x520/0x530/0x540/0x550/0x560/0x570  Endpoint 0~7 Buffer Segmentation Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:3]   |BUFSEG    |Endpoint Buffer Segmentation
N     * |        |          |It is used to indicate the offset address for each endpoint with the USB SRAM starting address
N     * |        |          |The effective starting address of the endpoint is
N     * |        |          |USBD_SRAM address + { BUFSEG[9:3], 3'b000}
N     * |        |          |Where the USBD_SRAM address = USBD_BA+0x100h.
N     * |        |          |Refer to the section 6.19.5.7 for the endpoint SRAM structure and its description.
N     * @var USBD_EP_T::MXPLD
N     * Offset: 0x504/0x514/0x524/0x534/0x544/0x554/0x564/0x574  Endpoint 0~7 Maximal Payload Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:0]   |MXPLD     |Maximal Payload
N     * |        |          |Define the data length which is transmitted to host (IN token) or the actual data length which is received from the host (OUT token)
N     * |        |          |It also used to indicate that the endpoint is ready to be transmitted in IN token or received in OUT token.
N     * |        |          |(1) When the register is written by CPU,
N     * |        |          |For IN token, the value of MXPLD is used to define the data length to be transmitted and indicate the data buffer is ready.
N     * |        |          |For OUT token, it means that the controller is ready to receive data from the host and the value of MXPLD is the maximal data length comes from host.
N     * |        |          |(2) When the register is read by CPU,
N     * |        |          |For IN token, the value of MXPLD is indicated by the data length be transmitted to host
N     * |        |          |For OUT token, the value of MXPLD is indicated the actual data length receiving from host.
N     * |        |          |Note: Once MXPLD is written, the data packets will be transmitted/received immediately after IN/OUT token arrived.
N     * @var USBD_EP_T::CFG
N     * Offset: 0x508/0x518/0x528/0x538/0x548/0x558/0x568/0x578  Endpoint 0~7 Configuration Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |EPNUM     |Endpoint Number
N     * |        |          |These bits are used to define the endpoint number of the current endpoint
N     * |[4]     |ISOCH     |Isochronous Endpoint
N     * |        |          |This bit is used to set the endpoint as Isochronous endpoint, no handshake.
N     * |        |          |0 = No Isochronous endpoint.
N     * |        |          |1 = Isochronous endpoint.
N     * |[6:5]   |STATE     |Endpoint STATE
N     * |        |          |00 = Endpoint is Disabled.
N     * |        |          |01 = Out endpoint.
N     * |        |          |10 = IN endpoint.
N     * |        |          |11 = Undefined.
N     * |[7]     |DSQSYNC   |Data Sequence Synchronization
N     * |        |          |0 = DATA0 PID.
N     * |        |          |1 = DATA1 PID.
N     * |        |          |Note: It is used to specify the DATA0 or DATA1 PID in the following IN token transaction
N     * |        |          |Hardware will toggle automatically in IN token base on the bit.
N     * |[9]     |CSTALL    |Clear STALL Response
N     * |        |          |0 = Disable the device to clear the STALL handshake in setup stage.
N     * |        |          |1 = Clear the device to response STALL handshake in setup stage.
N     * @var USBD_EP_T::CFGP
N     * Offset: 0x50C/0x51C/0x52C/0x53C/0x54C/0x55C/0x56C/0x57C  Endpoint 0~7 Set Stall and Clear In/Out Ready Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |CLRRDY    |Clear Ready
N     * |        |          |When the USBD_MXPLDn (n=0~7) register is set by user, it means that the endpoint is ready to transmit or receive data
N     * |        |          |If the user wants to disable this transaction before the transaction start, users can set this bit to 1 to disable it and it is auto clear to 0.
N     * |        |          |For IN token, write '1' to clear the IN token had ready to transmit the data to USB.
N     * |        |          |For OUT token, write '1' to clear the OUT token had ready to receive the data from USB.
N     * |        |          |This bit is write 1 only and is always 0 when it is read back.
N     * |[1]     |SSTALL    |Set STALL
N     * |        |          |0 = Disable the device to response STALL.
N     * |        |          |1 = Set the device to respond STALL automatically.
N     */
N    __IO uint32_t BUFSEG;               /*!< [0x500/0x510/0x520/0x530/0x540/0x550/0x560/0x570] Endpoint 0~7 Buffer Segmentation Register                          */
X    volatile uint32_t BUFSEG;                
N    __IO uint32_t MXPLD;                /*!< [0x504/0x514/0x524/0x534/0x544/0x554/0x564/0x574] Endpoint 0~7 Maximal Payload Register                              */
X    volatile uint32_t MXPLD;                 
N    __IO uint32_t CFG;                  /*!< [0x508/0x518/0x528/0x538/0x548/0x558/0x568/0x578] Endpoint 0~7 Configuration Register                                */
X    volatile uint32_t CFG;                   
N    __IO uint32_t CFGP;                 /*!< [0x50c/0x51c/0x52c/0x53c/0x54c/0x55c/0x56c/0x57c] Endpoint 0~7 Set Stall and Clear In/Out Ready Control Register     */
X    volatile uint32_t CFGP;                  
N} USBD_EP_T;
N
Ntypedef struct
N{
N    /**
N     * @var USBD_T::INTEN
N     * Offset: 0x00  USB Device Interrupt Enable Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BUSIEN    |Bus Event Interrupt Enable Bit
N     * |        |          |0 = BUS event interrupt Disabled.
N     * |        |          |1 = BUS event interrupt Enabled.
N     * |[1]     |USBIEN    |USB Event Interrupt Enable Bit
N     * |        |          |0 = USB event interrupt Disabled.
N     * |        |          |1 = USB event interrupt Enabled.
N     * |[2]     |VBDETIEN  |VBUS Detection Interrupt Enable Bit
N     * |        |          |0 = VBUS detection Interrupt Disabled.
N     * |        |          |1 = VBUS detection Interrupt Enabled.
N     * |[3]     |NEVWKIEN  |USB No-event-wake-up Interrupt Enable Bit
N     * |        |          |0 = No-event-wake-up Interrupt Disabled.
N     * |        |          |1 = No-event-wake-up Interrupt Enabled.
N     * |[4]     |SOFIEN    |Start of Frame Interrupt Enable Bit
N     * |        |          |0 = SOF Interrupt Disabled.
N     * |        |          |1 = SOF Interrupt Enabled.
N     * |[8]     |WKEN      |Wake-up Function Enable Bit
N     * |        |          |0 = USB wake-up function Disabled.
N     * |        |          |1 = USB wake-up function Enabled.
N     * |[15]    |INNAKEN   |Active NAK Function and Its Status in IN Token
N     * |        |          |0 = When device responds NAK after receiving IN token, IN NAK status will not be updated to USBD_EPSTS register, so that the USB interrupt event will not be asserted.
N     * |        |          |1 = IN NAK status will be updated to USBD_EPSTS register and the USB interrupt event will be asserted, when the device responds NAK after receiving IN token.
N     * @var USBD_T::INTSTS
N     * Offset: 0x04  USB Device Interrupt Event Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |BUSIF     |BUS Interrupt Status
N     * |        |          |The BUS event means that there is one of the suspense or the resume function in the bus.
N     * |        |          |0 = No BUS event occurred.
N     * |        |          |1 = Bus event occurred; check USBD_ATTR[3:0] and USBD_ATTR[13:12] to know which kind of bus event was occurred, cleared by write 1 to USBD_INTSTS[0].
N     * |[1]     |USBIF     |USB Event Interrupt Status
N     * |        |          |The USB event includes the SETUP Token, IN Token, OUT ACK, ISO IN, or ISO OUT events in the bus.
N     * |        |          |0 = No USB event occurred.
N     * |        |          |1 = USB event occurred, check EPSTS0~5[2:0] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[1] or EPSTS0~7 and SETUP (USBD_INTSTS[31]).
N     * |[2]     |VBDETIF   |VBUS Detection Interrupt Status
N     * |        |          |0 = There is not attached/detached event in the USB.
N     * |        |          |1 = There is attached/detached event in the USB bus and it is cleared by write 1 to USBD_INTSTS[2].
N     * |[3]     |NEVWKIF   |No-event-wake-up Interrupt Status
N     * |        |          |0 = NEVWK event does not occur.
N     * |        |          |1 = No-event-wake-up event occurred, cleared by write 1 to USBD_INTSTS[3].
N     * |[4]     |SOFIF     |Start of Frame Interrupt Status
N     * |        |          |0 = SOF event does not occur.
N     * |        |          |1 = SOF event occurred, cleared by write 1 to USBD_INTSTS[4].
N     * |[16]    |EPEVT0    |Endpoint 0's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 0.
N     * |        |          |1 = USB event occurred on Endpoint 0, check USBD_EPSTS[10:8] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[16] or USBD_INTSTS[1].
N     * |[17]    |EPEVT1    |Endpoint 1's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 1.
N     * |        |          |1 = USB event occurred on Endpoint 1, check USBD_EPSTS[13:11] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[17] or USBD_INTSTS[1].
N     * |[18]    |EPEVT2    |Endpoint 2's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 2.
N     * |        |          |1 = USB event occurred on Endpoint 2, check USBD_EPSTS[16:14] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[18] or USBD_INTSTS[1].
N     * |[19]    |EPEVT3    |Endpoint 3's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 3.
N     * |        |          |1 = USB event occurred on Endpoint 3, check USBD_EPSTS[19:17] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[19] or USBD_INTSTS[1].
N     * |[20]    |EPEVT4    |Endpoint 4's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 4.
N     * |        |          |1 = USB event occurred on Endpoint 4, check USBD_EPSTS[22:20] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[20] or USBD_INTSTS[1].
N     * |[21]    |EPEVT5    |Endpoint 5's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 5.
N     * |        |          |1 = USB event occurred on Endpoint 5, check USBD_EPSTS[25:23] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[21] or USBD_INTSTS[1].
N     * |[22]    |EPEVT6    |Endpoint 6's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 6.
N     * |        |          |1 = USB event occurred on Endpoint 6, check USBD_EPSTS[28:26] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[22] or USBD_INTSTS[1].
N     * |[23]    |EPEVT7    |Endpoint 7's USB Event Status
N     * |        |          |0 = No event occurred in endpoint 7.
N     * |        |          |1 = USB event occurred on Endpoint 7, check USBD_EPSTS[31:29] to know which kind of USB event was occurred, cleared by write 1 to USBD_INTSTS[23] or USBD_INTSTS[1].
N     * |[31]    |SETUP     |Setup Event Status
N     * |        |          |0 = No Setup event.
N     * |        |          |1 = Setup event occurred, cleared by write 1 to USBD_INTSTS[31].
N     * @var USBD_T::FADDR
N     * Offset: 0x08  USB Device Function Address Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[6:0]   |FADDR     |USB Device Function Address
N     * @var USBD_T::EPSTS
N     * Offset: 0x0C  USB Device Endpoint Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[7]     |OV        |Overrun
N     * |        |          |It indicates that the received data is over the maximum payload number or not.
N     * |        |          |0 = No overrun.
N     * |        |          |1 = Out Data is more than the Max Payload in MXPLD register or the Setup Data is more than 8 Bytes.
N     * |[10:8]  |EPSTS0    |Endpoint 0 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint
N     * |        |          |000 = In ACK.
N     * |        |          |001 = In NAK.
N     * |        |          |010 = Out Packet Data0 ACK.
N     * |        |          |011 = Setup ACK.
N     * |        |          |110 = Out Packet Data1 ACK.
N     * |        |          |111 = Isochronous transfer end.
N     * |[13:11] |EPSTS1    |Endpoint 1 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint
N     * |        |          |000 = In ACK.
N     * |        |          |001 = In NAK.
N     * |        |          |010 = Out Packet Data0 ACK.
N     * |        |          |011 = Setup ACK.
N     * |        |          |110 = Out Packet Data1 ACK.
N     * |        |          |111 = Isochronous transfer end.
N     * |[16:14] |EPSTS2    |Endpoint 2 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint
N     * |        |          |000 = In ACK.
N     * |        |          |001 = In NAK.
N     * |        |          |010 = Out Packet Data0 ACK.
N     * |        |          |011 = Setup ACK.
N     * |        |          |110 = Out Packet Data1 ACK.
N     * |        |          |111 = Isochronous transfer end.
N     * |[19:17] |EPSTS3    |Endpoint 3 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint
N     * |        |          |000 = In ACK.
N     * |        |          |001 = In NAK.
N     * |        |          |010 = Out Packet Data0 ACK.
N     * |        |          |011 = Setup ACK.
N     * |        |          |110 = Out Packet Data1 ACK.
N     * |        |          |111 = Isochronous transfer end.
N     * |[22:20] |EPSTS4    |Endpoint 4 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint
N     * |        |          |000 = In ACK.
N     * |        |          |001 = In NAK.
N     * |        |          |010 = Out Packet Data0 ACK.
N     * |        |          |011 = Setup ACK.
N     * |        |          |110 = Out Packet Data1 ACK.
N     * |        |          |111 = Isochronous transfer end.
N     * |[25:23] |EPSTS5    |Endpoint 5 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint
N     * |        |          |000 = In ACK.
N     * |        |          |001 = In NAK.
N     * |        |          |010 = Out Packet Data0 ACK.
N     * |        |          |011 = Setup ACK.
N     * |        |          |110 = Out Packet Data1 ACK.
N     * |        |          |111 = Isochronous transfer end.
N     * |[28:26] |EPSTS6    |Endpoint 6 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint
N     * |        |          |000 = In ACK.
N     * |        |          |001 = In NAK.
N     * |        |          |010 = Out Packet Data0 ACK.
N     * |        |          |011 = Setup ACK.
N     * |        |          |110 = Out Packet Data1 ACK.
N     * |        |          |111 = Isochronous transfer end.
N     * |[31:29] |EPSTS7    |Endpoint 7 Status
N     * |        |          |These bits are used to indicate the current status of this endpoint
N     * |        |          |000 = In ACK.
N     * |        |          |001 = In NAK.
N     * |        |          |010 = Out Packet Data0 ACK.
N     * |        |          |011 = Setup ACK.
N     * |        |          |110 = Out Packet Data1 ACK.
N     * |        |          |111 = Isochronous transfer end.
N     * @var USBD_T::ATTR
N     * Offset: 0x10  USB Device Bus Status and Attribution Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |USBRST    |USB Reset Status
N     * |        |          |0 = Bus no reset.
N     * |        |          |1 = Bus reset when SE0 (single-ended 0) more than 2.5us.
N     * |        |          |Note: This bit is read only.
N     * |[1]     |SUSPEND   |Suspend Status
N     * |        |          |0 = Bus no suspend.
N     * |        |          |1 = Bus idle more than 3ms, either cable is plugged off or host is sleeping.
N     * |        |          |Note: This bit is read only.
N     * |[2]     |RESUME    |Resume Status
N     * |        |          |0 = No bus resume.
N     * |        |          |1 = Resume from suspend.
N     * |        |          |Note: This bit is read only.
N     * |[3]     |TOUT      |Time-out Status
N     * |        |          |0 = No time-out.
N     * |        |          |1 = No Bus response more than 18 bits time.
N     * |        |          |Note: This bit is read only.
N     * |[4]     |PHYEN     |PHY Transceiver Function Enable Bit
N     * |        |          |0 = PHY transceiver function Disabled.
N     * |        |          |1 = PHY transceiver function Enabled.
N     * |[5]     |RWAKEUP   |Remote Wake-up
N     * |        |          |0 = Release the USB bus from K state.
N     * |        |          |1 = Force USB bus to K (USB_D+ low, USB_D-: high) state, used for remote wake-up.
N     * |[7]     |USBEN     |USB Controller Enable Bit
N     * |        |          |0 = USB Controller Disabled.
N     * |        |          |1 = USB Controller Enabled.
N     * |[8]     |DPPUEN    |Pull-up Resistor on USB_DP Enable Bit
N     * |        |          |0 = Pull-up resistor in USB_D+ bus Disabled.
N     * |        |          |1 = Pull-up resistor in USB_D+ bus Active.
N     * |[10]    |BYTEM     |CPU Access USB SRAM Size Mode Selection
N     * |        |          |0 = Word mode: The size of the transfer from CPU to USB SRAM can be Word only.
N     * |        |          |1 = Byte mode: The size of the transfer from CPU to USB SRAM can be Byte only.
N     * |[11]    |LPMACK    |LPM Token Acknowledge Enable Bit
N     * |        |          |The NYET/ACK will be returned only on a successful LPM transaction if no errors in both the EXT token and the LPM token and a valid bLinkState = 0001 (L1) is received, else ERROR and STALL will be returned automatically, respectively.
N     * |        |          |0= the valid LPM Token will be NYET.
N     * |        |          |1= the valid LPM Token will be ACK.
N     * |[12]    |L1SUSPEND |LPM L1 Suspend
N     * |        |          |0 = Bus no L1 state suspend.
N     * |        |          |1 = This bit is set by the hardware when LPM command to enter the L1 state is successfully received and acknowledged.
N     * |        |          |Note: This bit is read only.
N     * |[13]    |L1RESUME  |LPM L1 Resume
N     * |        |          |0 = Bus no LPM L1 state resume.
N     * |        |          |1 = LPM L1 state Resume from LPM L1 state suspend.
N     * |        |          |Note: This bit is read only.
N     * |[18:16] |SOFITH    |Start of Frame Interrupt Threshold Control Bits
N     * |        |          |Configure the number of SOF to trigger SOF interrupt if SOF interrupt is enabled (USBD_INTEN[4]=1).
N     * |        |          |000 = every SOF trigger one SOF interrupt.
N     * |        |          |001 = every 2 SOFs trigger one SOF interrupt.
N     * |        |          |010 = every 4 SOFs trigger one SOF interrupt.
N     * |        |          |011 = every 8 SOFs trigger one SOF interrupt.
N     * |        |          |100 = every 16 SOFs trigger one SOF interrupt.
N     * |        |          |101 = every 32 SOFs trigger one SOF interrupt.
N     * |        |          |110 = every 64 SOFs trigger one SOF interrupt.
N     * |        |          |111 = every 128 SOFs trigger one SOF interrupt.
N     * @var USBD_T::VBUSDET
N     * Offset: 0x14  USB Device VBUS Detection Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |VBUSDET   |Device VBUS Detection
N     * |        |          |0 = Controller is not attached to the USB host.
N     * |        |          |1 = Controller is attached to the USB host.
N     * @var USBD_T::STBUFSEG
N     * Offset: 0x18  Setup Token Buffer Segmentation Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[9:3]   |STBUFSEG  |SETUP Token Buffer Segmentation
N     * |        |          |It is used to indicate the offset address for the SETUP token with the USB Device SRAM starting address
N     * |        |          |The effective starting address is "USBD_SRAM address + offset " {offset = BUFSEG[9:3] * 8} .
N     * |        |          |Where the USBD_SRAM address = USBD_BA+0x100h.
N     * |        |          |Note: It is used for SETUP token only.
N     * @var USBD_T::LPMATTR
N     * Offset: 0x88  USB LPM Attribution Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[3:0]   |LPMLINKSTS|LPM Link State
N     * |        |          |These bits contain the bLinkState received with last ACK LPM Token
N     * |[7:4]   |LPMBESL   |LPM Best Effort Service Latency
N     * |        |          |These bits contain the BESL value received with last ACK LPM Token
N     * |[8]     |LPMRWAKUP |LPM Remote Wakeup
N     * |        |          |This bit contains the bRemoteWake value received with last ACK LPM Token
N     * @var USBD_T::FN
N     * Offset: 0x8C  USB Frame number Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[10:0]  |FN        |Frame Number
N     * |        |          |These bits contain the 11-bits frame number in the last received SOF packet.
N     * @var USBD_T::SE0
N     * Offset: 0x90  USB Device Drive SE0 Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |SE0       |Drive Single Ended Zero in USB Bus
N     * |        |          |The Single Ended Zero (SE0) is when both lines (USB_D+ and USB_D-) are being pulled low.
N     * |        |          |0 = Normal operation.
N     * |        |          |1 = Force USB PHY transceiver to drive SE0.
N     */
N    __IO uint32_t INTEN;                 /*!< [0x0000] USB Device Interrupt Enable Register                             */
X    volatile uint32_t INTEN;                  
N    __IO uint32_t INTSTS;                /*!< [0x0004] USB Device Interrupt Event Status Register                       */
X    volatile uint32_t INTSTS;                 
N    __IO uint32_t FADDR;                 /*!< [0x0008] USB Device Function Address Register                             */
X    volatile uint32_t FADDR;                  
N    __I  uint32_t EPSTS;                 /*!< [0x000c] USB Device Endpoint Status Register                              */
X    volatile const  uint32_t EPSTS;                  
N    __IO uint32_t ATTR;                  /*!< [0x0010] USB Device Bus Status and Attribution Register                   */
X    volatile uint32_t ATTR;                   
N    __I  uint32_t VBUSDET;               /*!< [0x0014] USB Device VBUS Detection Register                               */
X    volatile const  uint32_t VBUSDET;                
N    __IO uint32_t STBUFSEG;              /*!< [0x0018] Setup Token Buffer Segmentation Register                         */
X    volatile uint32_t STBUFSEG;               
N    __I  uint32_t RESERVE0[27];
X    volatile const  uint32_t RESERVE0[27];
N    __I  uint32_t LPMATTR;               /*!< [0x0088] USB LPM Attribution Register                                     */
X    volatile const  uint32_t LPMATTR;                
N    __I  uint32_t FN;                    /*!< [0x008c] USB Frame number Register                                        */
X    volatile const  uint32_t FN;                     
N    __IO uint32_t SE0;                   /*!< [0x0090] USB Device Drive SE0 Control Register                            */
X    volatile uint32_t SE0;                    
N    __I  uint32_t RESERVE1[283];
X    volatile const  uint32_t RESERVE1[283];
N    USBD_EP_T     EP[8];                 /*!< [0x0500~0x057C] USB Endpoint 0~7 Configuration Register                   */
N} USBD_T;
N
N/**
N    @addtogroup USBD_CONST USBD Bit Field Definition
N    Constant Definitions for USBD Controller
N@{ */
N
N#define USBD_INTEN_BUSIEN_Pos            (0)                                               /*!< USBD_T::INTEN: BUSIEN Position         */
N#define USBD_INTEN_BUSIEN_Msk            (0x1ul << USBD_INTEN_BUSIEN_Pos)                  /*!< USBD_T::INTEN: BUSIEN Mask             */
N
N#define USBD_INTEN_USBIEN_Pos            (1)                                               /*!< USBD_T::INTEN: USBIEN Position         */
N#define USBD_INTEN_USBIEN_Msk            (0x1ul << USBD_INTEN_USBIEN_Pos)                  /*!< USBD_T::INTEN: USBIEN Mask             */
N
N#define USBD_INTEN_VBDETIEN_Pos          (2)                                               /*!< USBD_T::INTEN: VBDETIEN Position       */
N#define USBD_INTEN_VBDETIEN_Msk          (0x1ul << USBD_INTEN_VBDETIEN_Pos)                /*!< USBD_T::INTEN: VBDETIEN Mask           */
N
N#define USBD_INTEN_NEVWKIEN_Pos          (3)                                               /*!< USBD_T::INTEN: NEVWKIEN Position       */
N#define USBD_INTEN_NEVWKIEN_Msk          (0x1ul << USBD_INTEN_NEVWKIEN_Pos)                /*!< USBD_T::INTEN: NEVWKIEN Mask           */
N
N#define USBD_INTEN_SOFIEN_Pos            (4)                                               /*!< USBD_T::INTEN: SOFIEN Position         */
N#define USBD_INTEN_SOFIEN_Msk            (0x1ul << USBD_INTEN_SOFIEN_Pos)                  /*!< USBD_T::INTEN: SOFIEN Mask             */
N
N#define USBD_INTEN_WKEN_Pos              (8)                                               /*!< USBD_T::INTEN: WKEN Position           */
N#define USBD_INTEN_WKEN_Msk              (0x1ul << USBD_INTEN_WKEN_Pos)                    /*!< USBD_T::INTEN: WKEN Mask               */
N
N#define USBD_INTEN_INNAKEN_Pos           (15)                                              /*!< USBD_T::INTEN: INNAKEN Position        */
N#define USBD_INTEN_INNAKEN_Msk           (0x1ul << USBD_INTEN_INNAKEN_Pos)                 /*!< USBD_T::INTEN: INNAKEN Mask            */
N
N#define USBD_INTSTS_BUSIF_Pos            (0)                                               /*!< USBD_T::INTSTS: BUSIF Position         */
N#define USBD_INTSTS_BUSIF_Msk            (0x1ul << USBD_INTSTS_BUSIF_Pos)                  /*!< USBD_T::INTSTS: BUSIF Mask             */
N
N#define USBD_INTSTS_USBIF_Pos            (1)                                               /*!< USBD_T::INTSTS: USBIF Position         */
N#define USBD_INTSTS_USBIF_Msk            (0x1ul << USBD_INTSTS_USBIF_Pos)                  /*!< USBD_T::INTSTS: USBIF Mask             */
N
N#define USBD_INTSTS_VBDETIF_Pos          (2)                                               /*!< USBD_T::INTSTS: VBDETIF Position       */
N#define USBD_INTSTS_VBDETIF_Msk          (0x1ul << USBD_INTSTS_VBDETIF_Pos)                /*!< USBD_T::INTSTS: VBDETIF Mask           */
N
N#define USBD_INTSTS_NEVWKIF_Pos          (3)                                               /*!< USBD_T::INTSTS: NEVWKIF Position       */
N#define USBD_INTSTS_NEVWKIF_Msk          (0x1ul << USBD_INTSTS_NEVWKIF_Pos)                /*!< USBD_T::INTSTS: NEVWKIF Mask           */
N
N#define USBD_INTSTS_SOFIF_Pos            (4)                                               /*!< USBD_T::INTSTS: SOFIF Position         */
N#define USBD_INTSTS_SOFIF_Msk            (0x1ul << USBD_INTSTS_SOFIF_Pos)                  /*!< USBD_T::INTSTS: SOFIF Mask             */
N
N#define USBD_INTSTS_EPEVT0_Pos           (16)                                              /*!< USBD_T::INTSTS: EPEVT0 Position        */
N#define USBD_INTSTS_EPEVT0_Msk           (0x1ul << USBD_INTSTS_EPEVT0_Pos)                 /*!< USBD_T::INTSTS: EPEVT0 Mask            */
N
N#define USBD_INTSTS_EPEVT1_Pos           (17)                                              /*!< USBD_T::INTSTS: EPEVT1 Position        */
N#define USBD_INTSTS_EPEVT1_Msk           (0x1ul << USBD_INTSTS_EPEVT1_Pos)                 /*!< USBD_T::INTSTS: EPEVT1 Mask            */
N
N#define USBD_INTSTS_EPEVT2_Pos           (18)                                              /*!< USBD_T::INTSTS: EPEVT2 Position        */
N#define USBD_INTSTS_EPEVT2_Msk           (0x1ul << USBD_INTSTS_EPEVT2_Pos)                 /*!< USBD_T::INTSTS: EPEVT2 Mask            */
N
N#define USBD_INTSTS_EPEVT3_Pos           (19)                                              /*!< USBD_T::INTSTS: EPEVT3 Position        */
N#define USBD_INTSTS_EPEVT3_Msk           (0x1ul << USBD_INTSTS_EPEVT3_Pos)                 /*!< USBD_T::INTSTS: EPEVT3 Mask            */
N
N#define USBD_INTSTS_EPEVT4_Pos           (20)                                              /*!< USBD_T::INTSTS: EPEVT4 Position        */
N#define USBD_INTSTS_EPEVT4_Msk           (0x1ul << USBD_INTSTS_EPEVT4_Pos)                 /*!< USBD_T::INTSTS: EPEVT4 Mask            */
N
N#define USBD_INTSTS_EPEVT5_Pos           (21)                                              /*!< USBD_T::INTSTS: EPEVT5 Position        */
N#define USBD_INTSTS_EPEVT5_Msk           (0x1ul << USBD_INTSTS_EPEVT5_Pos)                 /*!< USBD_T::INTSTS: EPEVT5 Mask            */
N
N#define USBD_INTSTS_EPEVT6_Pos           (22)                                              /*!< USBD_T::INTSTS: EPEVT6 Position        */
N#define USBD_INTSTS_EPEVT6_Msk           (0x1ul << USBD_INTSTS_EPEVT6_Pos)                 /*!< USBD_T::INTSTS: EPEVT6 Mask            */
N
N#define USBD_INTSTS_EPEVT7_Pos           (23)                                              /*!< USBD_T::INTSTS: EPEVT7 Position        */
N#define USBD_INTSTS_EPEVT7_Msk           (0x1ul << USBD_INTSTS_EPEVT7_Pos)                 /*!< USBD_T::INTSTS: EPEVT7 Mask            */
N
N#define USBD_INTSTS_SETUP_Pos            (31)                                              /*!< USBD_T::INTSTS: SETUP Position         */
N#define USBD_INTSTS_SETUP_Msk            (0x1ul << USBD_INTSTS_SETUP_Pos)                  /*!< USBD_T::INTSTS: SETUP Mask             */
N
N#define USBD_FADDR_FADDR_Pos             (0)                                               /*!< USBD_T::FADDR: FADDR Position          */
N#define USBD_FADDR_FADDR_Msk             (0x7ful << USBD_FADDR_FADDR_Pos)                  /*!< USBD_T::FADDR: FADDR Mask              */
N
N#define USBD_EPSTS_OV_Pos                (7)                                               /*!< USBD_T::EPSTS: OV Position             */
N#define USBD_EPSTS_OV_Msk                (0x1ul << USBD_EPSTS_OV_Pos)                      /*!< USBD_T::EPSTS: OV Mask                 */
N
N#define USBD_EPSTS_EPSTS0_Pos            (8)                                               /*!< USBD_T::EPSTS: EPSTS0 Position         */
N#define USBD_EPSTS_EPSTS0_Msk            (0x7ul << USBD_EPSTS_EPSTS0_Pos)                  /*!< USBD_T::EPSTS: EPSTS0 Mask             */
N
N#define USBD_EPSTS_EPSTS1_Pos            (11)                                              /*!< USBD_T::EPSTS: EPSTS1 Position         */
N#define USBD_EPSTS_EPSTS1_Msk            (0x7ul << USBD_EPSTS_EPSTS1_Pos)                  /*!< USBD_T::EPSTS: EPSTS1 Mask             */
N
N#define USBD_EPSTS_EPSTS2_Pos            (14)                                              /*!< USBD_T::EPSTS: EPSTS2 Position         */
N#define USBD_EPSTS_EPSTS2_Msk            (0x7ul << USBD_EPSTS_EPSTS2_Pos)                  /*!< USBD_T::EPSTS: EPSTS2 Mask             */
N
N#define USBD_EPSTS_EPSTS3_Pos            (17)                                              /*!< USBD_T::EPSTS: EPSTS3 Position         */
N#define USBD_EPSTS_EPSTS3_Msk            (0x7ul << USBD_EPSTS_EPSTS3_Pos)                  /*!< USBD_T::EPSTS: EPSTS3 Mask             */
N
N#define USBD_EPSTS_EPSTS4_Pos            (20)                                              /*!< USBD_T::EPSTS: EPSTS4 Position         */
N#define USBD_EPSTS_EPSTS4_Msk            (0x7ul << USBD_EPSTS_EPSTS4_Pos)                  /*!< USBD_T::EPSTS: EPSTS4 Mask             */
N
N#define USBD_EPSTS_EPSTS5_Pos            (23)                                              /*!< USBD_T::EPSTS: EPSTS5 Position         */
N#define USBD_EPSTS_EPSTS5_Msk            (0x7ul << USBD_EPSTS_EPSTS5_Pos)                  /*!< USBD_T::EPSTS: EPSTS5 Mask             */
N
N#define USBD_EPSTS_EPSTS6_Pos            (26)                                              /*!< USBD_T::EPSTS: EPSTS6 Position         */
N#define USBD_EPSTS_EPSTS6_Msk            (0x7ul << USBD_EPSTS_EPSTS6_Pos)                  /*!< USBD_T::EPSTS: EPSTS6 Mask             */
N
N#define USBD_EPSTS_EPSTS7_Pos            (29)                                              /*!< USBD_T::EPSTS: EPSTS7 Position         */
N#define USBD_EPSTS_EPSTS7_Msk            (0x7ul << USBD_EPSTS_EPSTS7_Pos)                  /*!< USBD_T::EPSTS: EPSTS7 Mask             */
N
N#define USBD_ATTR_USBRST_Pos             (0)                                               /*!< USBD_T::ATTR: USBRST Position          */
N#define USBD_ATTR_USBRST_Msk             (0x1ul << USBD_ATTR_USBRST_Pos)                   /*!< USBD_T::ATTR: USBRST Mask              */
N
N#define USBD_ATTR_SUSPEND_Pos            (1)                                               /*!< USBD_T::ATTR: SUSPEND Position         */
N#define USBD_ATTR_SUSPEND_Msk            (0x1ul << USBD_ATTR_SUSPEND_Pos)                  /*!< USBD_T::ATTR: SUSPEND Mask             */
N
N#define USBD_ATTR_RESUME_Pos             (2)                                               /*!< USBD_T::ATTR: RESUME Position          */
N#define USBD_ATTR_RESUME_Msk             (0x1ul << USBD_ATTR_RESUME_Pos)                   /*!< USBD_T::ATTR: RESUME Mask              */
N
N#define USBD_ATTR_TOUT_Pos               (3)                                               /*!< USBD_T::ATTR: TOUT Position            */
N#define USBD_ATTR_TOUT_Msk               (0x1ul << USBD_ATTR_TOUT_Pos)                     /*!< USBD_T::ATTR: TOUT Mask                */
N
N#define USBD_ATTR_PHYEN_Pos              (4)                                               /*!< USBD_T::ATTR: PHYEN Position           */
N#define USBD_ATTR_PHYEN_Msk              (0x1ul << USBD_ATTR_PHYEN_Pos)                    /*!< USBD_T::ATTR: PHYEN Mask               */
N
N#define USBD_ATTR_RWAKEUP_Pos            (5)                                               /*!< USBD_T::ATTR: RWAKEUP Position         */
N#define USBD_ATTR_RWAKEUP_Msk            (0x1ul << USBD_ATTR_RWAKEUP_Pos)                  /*!< USBD_T::ATTR: RWAKEUP Mask             */
N
N#define USBD_ATTR_USBEN_Pos              (7)                                               /*!< USBD_T::ATTR: USBEN Position           */
N#define USBD_ATTR_USBEN_Msk              (0x1ul << USBD_ATTR_USBEN_Pos)                    /*!< USBD_T::ATTR: USBEN Mask               */
N
N#define USBD_ATTR_DPPUEN_Pos             (8)                                               /*!< USBD_T::ATTR: DPPUEN Position          */
N#define USBD_ATTR_DPPUEN_Msk             (0x1ul << USBD_ATTR_DPPUEN_Pos)                   /*!< USBD_T::ATTR: DPPUEN Mask              */
N
N#define USBD_ATTR_BYTEM_Pos              (10)                                              /*!< USBD_T::ATTR: BYTEM Position           */
N#define USBD_ATTR_BYTEM_Msk              (0x1ul << USBD_ATTR_BYTEM_Pos)                    /*!< USBD_T::ATTR: BYTEM Mask               */
N
N#define USBD_ATTR_LPMACK_Pos             (11)                                              /*!< USBD_T::ATTR: LPMACK Position          */
N#define USBD_ATTR_LPMACK_Msk             (0x1ul << USBD_ATTR_LPMACK_Pos)                   /*!< USBD_T::ATTR: LPMACK Mask              */
N
N#define USBD_ATTR_L1SUSPEND_Pos          (12)                                              /*!< USBD_T::ATTR: L1SUSPEND Position       */
N#define USBD_ATTR_L1SUSPEND_Msk          (0x1ul << USBD_ATTR_L1SUSPEND_Pos)                /*!< USBD_T::ATTR: L1SUSPEND Mask           */
N
N#define USBD_ATTR_L1RESUME_Pos           (13)                                              /*!< USBD_T::ATTR: L1RESUME Position        */
N#define USBD_ATTR_L1RESUME_Msk           (0x1ul << USBD_ATTR_L1RESUME_Pos)                 /*!< USBD_T::ATTR: L1RESUME Mask            */
N
N#define USBD_ATTR_SOFITH_Pos             (16)                                              /*!< USBD_T::ATTR: SOFITH Position          */
N#define USBD_ATTR_SOFITH_Msk             (0x7ul << USBD_ATTR_SOFITH_Pos)                   /*!< USBD_T::ATTR: SOFITH Mask              */
N
N#define USBD_VBUSDET_VBUSDET_Pos         (0)                                               /*!< USBD_T::VBUSDET: VBUSDET Position      */
N#define USBD_VBUSDET_VBUSDET_Msk         (0x1ul << USBD_VBUSDET_VBUSDET_Pos)               /*!< USBD_T::VBUSDET: VBUSDET Mask          */
N
N#define USBD_STBUFSEG_STBUFSEG_Pos       (3)                                               /*!< USBD_T::STBUFSEG: STBUFSEG Position    */
N#define USBD_STBUFSEG_STBUFSEG_Msk       (0x7ful << USBD_STBUFSEG_STBUFSEG_Pos)            /*!< USBD_T::STBUFSEG: STBUFSEG Mask        */
N
N#define USBD_LPMATTR_LPMLINKSTS_Pos      (0)                                               /*!< USBD_T::LPMATTR: LPMLINKSTS Position   */
N#define USBD_LPMATTR_LPMLINKSTS_Msk      (0xful << USBD_LPMATTR_LPMLINKSTS_Pos)            /*!< USBD_T::LPMATTR: LPMLINKSTS Mask       */
N
N#define USBD_LPMATTR_LPMBESL_Pos         (4)                                               /*!< USBD_T::LPMATTR: LPMBESL Position      */
N#define USBD_LPMATTR_LPMBESL_Msk         (0xful << USBD_LPMATTR_LPMBESL_Pos)               /*!< USBD_T::LPMATTR: LPMBESL Mask          */
N
N#define USBD_LPMATTR_LPMRWAKUP_Pos       (8)                                               /*!< USBD_T::LPMATTR: LPMRWAKUP Position    */
N#define USBD_LPMATTR_LPMRWAKUP_Msk       (0x1ul << USBD_LPMATTR_LPMRWAKUP_Pos)             /*!< USBD_T::LPMATTR: LPMRWAKUP Mask        */
N
N#define USBD_FN_FN_Pos                   (0)                                               /*!< USBD_T::FN: FN Position                */
N#define USBD_FN_FN_Msk                   (0x7fful << USBD_FN_FN_Pos)                       /*!< USBD_T::FN: FN Mask                    */
N
N#define USBD_SE0_SE0_Pos                 (0)                                               /*!< USBD_T::SE0: SE0 Position              */
N#define USBD_SE0_SE0_Msk                 (0x1ul << USBD_SE0_SE0_Pos)                       /*!< USBD_T::SE0: SE0 Mask                  */
N
N#define USBD_BUFSEG_BUFSEG_Pos           (3)                                               /*!< USBD_T::BUFSEG: BUFSEG Position        */
N#define USBD_BUFSEG_BUFSEG_Msk           (0x7ful << USBD_BUFSEG_BUFSEG_Pos)                /*!< USBD_T::BUFSEG: BUFSEG Mask            */
N
N#define USBD_MXPLD_MXPLD_Pos             (0)                                               /*!< USBD_T::MXPLD: MXPLD Position          */
N#define USBD_MXPLD_MXPLD_Msk             (0x3fful << USBD_MXPLD_MXPLD_Pos)                 /*!< USBD_T::MXPLD: MXPLD Mask              */
N
N#define USBD_CFG_EPNUM_Pos               (0)                                               /*!< USBD_T::CFG: EPNUM Position            */
N#define USBD_CFG_EPNUM_Msk               (0xful << USBD_CFG_EPNUM_Pos)                     /*!< USBD_T::CFG: EPNUM Mask                */
N
N#define USBD_CFG_ISOCH_Pos               (4)                                               /*!< USBD_T::CFG: ISOCH Position            */
N#define USBD_CFG_ISOCH_Msk               (0x1ul << USBD_CFG_ISOCH_Pos)                     /*!< USBD_T::CFG: ISOCH Mask                */
N
N#define USBD_CFG_STATE_Pos               (5)                                               /*!< USBD_T::CFG: STATE Position            */
N#define USBD_CFG_STATE_Msk               (0x3ul << USBD_CFG_STATE_Pos)                     /*!< USBD_T::CFG: STATE Mask                */
N
N#define USBD_CFG_DSQSYNC_Pos             (7)                                               /*!< USBD_T::CFG: DSQSYNC Position          */
N#define USBD_CFG_DSQSYNC_Msk             (0x1ul << USBD_CFG_DSQSYNC_Pos)                   /*!< USBD_T::CFG: DSQSYNC Mask              */
N
N#define USBD_CFG_CSTALL_Pos              (9)                                               /*!< USBD_T::CFG: CSTALL Position           */
N#define USBD_CFG_CSTALL_Msk              (0x1ul << USBD_CFG_CSTALL_Pos)                    /*!< USBD_T::CFG: CSTALL Mask               */
N
N#define USBD_CFGP_CLRRDY_Pos             (0)                                               /*!< USBD_T::CFGP: CLRRDY Position          */
N#define USBD_CFGP_CLRRDY_Msk             (0x1ul << USBD_CFGP_CLRRDY_Pos)                   /*!< USBD_T::CFGP: CLRRDY Mask              */
N
N#define USBD_CFGP_SSTALL_Pos             (1)                                               /*!< USBD_T::CFGP: SSTALL Position          */
N#define USBD_CFGP_SSTALL_Msk             (0x1ul << USBD_CFGP_SSTALL_Pos)                   /*!< USBD_T::CFGP: SSTALL Mask              */
N
N/**@}*/ /* USBD_CONST */
N/**@}*/ /* end of USBD register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __USBD_REG_H__ */
L 169 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "wdt_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\wdt_reg.h" 1
N/**************************************************************************//**
N * @file     wdt_reg.h
N * @version  V1.00
N * @brief    WDT register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __WDT_REG_H__
N#define __WDT_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup WDT Watch Dog Timer Controller (WDT)
N    Memory Mapped Structure for WDT Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var WDT_T::CTL
N     * Offset: 0x00  WDT Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |RSTCNT    |Reset WDT Up Counter (Write Protect)
N     * |        |          |0 = No effect.
N     * |        |          |1 = Reset the internal 18-bit WDT up counter value.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: This bit will be automatically cleared by hardware.
N     * |[1]     |RSTEN     |WDT Time-out Reset Enable Control (Write Protect)
N     * |        |          |Setting this bit will enable the WDT time-out reset function If the WDT up counter value has not been cleared after the specific WDT reset delay period expires.
N     * |        |          |0 = WDT time-out reset function Disabled.
N     * |        |          |1 = WDT time-out reset function Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[2]     |RSTF      |WDT Time-out Reset Flag
N     * |        |          |This bit indicates the system has been reset by WDT time-out reset or not.
N     * |        |          |0 = WDT time-out reset did not occur.
N     * |        |          |1 = WDT time-out reset occurred.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[3]     |IF        |WDT Time-out Interrupt Flag
N     * |        |          |This bit will set to 1 while WDT up counter value reaches the selected WDT time-out interval
N     * |        |          |0 = WDT time-out interrupt did not occur.
N     * |        |          |1 = WDT time-out interrupt occurred.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[4]     |WKEN      |WDT Time-out Wake-up Function Control (Write Protect)
N     * |        |          |If this bit is set to 1, while WDT time-out interrupt flag IF (WDT_CTL[3]) is generated to 1 and interrupt enable bit INTEN (WDT_CTL[6]) is enabled, the WDT time-out interrupt signal will generate a wake-up trigger event to chip.
N     * |        |          |0 = Wake-up trigger event Disabled if WDT time-out interrupt signal generated.
N     * |        |          |1 = Wake-up trigger event Enabled if WDT time-out interrupt signal generated.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: Chip can be woken-up by WDT time-out interrupt signal generated only if WDT clock source is selected to 10 kHz (LIRC) or LXT.
N     * |[5]     |WKF       |WDT Time-out Wake-up Flag (Write Protect)
N     * |        |          |This bit indicates the interrupt wake-up flag status of WDT
N     * |        |          |0 = WDT does not cause chip wake-up.
N     * |        |          |1 = Chip wake-up from Idle or Power-down mode if WDT time-out interrupt signal generated.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: This bit is cleared by writing 1 to it.
N     * |[6]     |INTEN     |WDT Time-out Interrupt Enable Control (Write Protect)
N     * |        |          |If this bit is enabled, the WDT time-out interrupt signal is generated and inform to CPU.
N     * |        |          |0 = WDT time-out interrupt Disabled.
N     * |        |          |1 = WDT time-out interrupt Enabled.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[7]     |WDTEN     |WDT Enable Control (Write Protect)
N     * |        |          |0 = WDT Disabled (This action will reset the internal up counter value).
N     * |        |          |1 = WDT Enabled.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: If CWDTEN[2:0] (combined by Config0[31] and Config0[4:3]) bits is not configure to 111B, this bit is forced as 1 and user cannot change this bit to 0.
N     * |        |          |Note3: This bit disabled needs 2 * WDT_CLK.
N     * |[10:8]  |TOUTSEL   |WDT Time-out Interval Selection (Write Protect)
N     * |        |          |These three bits select the time-out interval period for the WDT.
N     * |        |          |000 = 24 * WDT_CLK.
N     * |        |          |001 = 26 * WDT_CLK.
N     * |        |          |010 = 28 * WDT_CLK.
N     * |        |          |011 = 210 * WDT_CLK.
N     * |        |          |100 = 212 * WDT_CLK.
N     * |        |          |101 = 214 * WDT_CLK.
N     * |        |          |110 = 216 * WDT_CLK.
N     * |        |          |111 = 218 * WDT_CLK.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |[30]    |WSYNC     |WDT Enable Control SYNC Flag Indicator (Read Only)
N     * |        |          |Due to synchronization, software can check this flag after enable WDTEN(WDT_CTL[7]),
N     * |        |          |SYNC delay is
N     * |        |          |0 = WDT enable control synchronizing is completion.
N     * |        |          |1 = WDT enable control is synchronizing.
N     * |        |          |Note:
N     * |        |          |This bit enabled needs 2 * WDT_CLK
N     * |[31]    |ICEDEBUG  |ICE Debug Mode Acknowledge Disable Control (Write Protect)
N     * |        |          |0 = ICE debug mode acknowledgement affects WDT counting.
N     * |        |          |WDT up counter will be held while CPU is held by ICE.
N     * |        |          |1 = ICE debug mode acknowledgement Disabled.
N     * |        |          |WDT up counter will keep going no matter CPU is held by ICE or not.
N     * |        |          |Note: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * @var WDT_T::ALTCTL
N     * Offset: 0x04  WDT Alternative Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[1:0]   |RSTDSEL   |WDT Reset Delay Selection (Write Protect)
N     * |        |          |When WDT time-out happened, user has a time named WDT Reset Delay Period to clear WDT counter by setting RSTCNT (WDT_CTL[0]) to prevent WDT time-out reset happened
N     * |        |          |User can select a suitable setting of RSTDSEL for different WDT Reset Delay Period.
N     * |        |          |00 = WDT Reset Delay Period is 1026 * WDT_CLK.
N     * |        |          |01 = WDT Reset Delay Period is 130 * WDT_CLK.
N     * |        |          |10 = WDT Reset Delay Period is 18 * WDT_CLK.
N     * |        |          |11 = WDT Reset Delay Period is 3 * WDT_CLK.
N     * |        |          |Note1: This bit is write protected. Refer to the SYS_REGLCTL register.
N     * |        |          |Note2: This register will be reset to 0 if WDT time-out reset happened.
N     * @var WDT_T::RSTCNT
N     * Offset: 0x08  WDT Reset Counter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |RSTCNT    |WDT Reset Counter Register
N     * |        |          |Writing 0x00005AA5 to this register will reset the internal 18-bit WDT up counter value to 0.
N     * |        |          |Note: Perform RSTCNT to reset counter needs 2 * WDT_CLK period to become active.
N     * @var WDT_T::VERSION
N     * Offset: 0xFFC  WDT RTL Design Version Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     */
N    __IO uint32_t CTL;                   /*!< [0x0000] WDT Control Register                                             */
X    volatile uint32_t CTL;                    
N    __IO uint32_t ALTCTL;                /*!< [0x0004] WDT Alternative Control Register                                 */
X    volatile uint32_t ALTCTL;                 
N    __O  uint32_t RSTCNT;                /*!< [0x0008] WDT Reset Counter Register                                       */
X    volatile  uint32_t RSTCNT;                 
N    __I  uint32_t RESERVE0[1020];
X    volatile const  uint32_t RESERVE0[1020];
N    __IO uint32_t VERSION;               /*!< [0x0ffc] WDT RTL Design Version Register                                  */
X    volatile uint32_t VERSION;                
N} WDT_T;
N
N/**
N    @addtogroup WDT_CONST WDT Bit Field Definition
N    Constant Definitions for WDT Controller
N@{ */
N
N#define WDT_CTL_RSTCNT_Pos               (0)                                               /*!< WDT_T::CTL: RSTCNT Position            */
N#define WDT_CTL_RSTCNT_Msk               (0x1ul << WDT_CTL_RSTCNT_Pos)                     /*!< WDT_T::CTL: RSTCNT Mask                */
N
N#define WDT_CTL_RSTEN_Pos                (1)                                               /*!< WDT_T::CTL: RSTEN Position             */
N#define WDT_CTL_RSTEN_Msk                (0x1ul << WDT_CTL_RSTEN_Pos)                      /*!< WDT_T::CTL: RSTEN Mask                 */
N
N#define WDT_CTL_RSTF_Pos                 (2)                                               /*!< WDT_T::CTL: RSTF Position              */
N#define WDT_CTL_RSTF_Msk                 (0x1ul << WDT_CTL_RSTF_Pos)                       /*!< WDT_T::CTL: RSTF Mask                  */
N
N#define WDT_CTL_IF_Pos                   (3)                                               /*!< WDT_T::CTL: IF Position                */
N#define WDT_CTL_IF_Msk                   (0x1ul << WDT_CTL_IF_Pos)                         /*!< WDT_T::CTL: IF Mask                    */
N
N#define WDT_CTL_WKEN_Pos                 (4)                                               /*!< WDT_T::CTL: WKEN Position              */
N#define WDT_CTL_WKEN_Msk                 (0x1ul << WDT_CTL_WKEN_Pos)                       /*!< WDT_T::CTL: WKEN Mask                  */
N
N#define WDT_CTL_WKF_Pos                  (5)                                               /*!< WDT_T::CTL: WKF Position               */
N#define WDT_CTL_WKF_Msk                  (0x1ul << WDT_CTL_WKF_Pos)                        /*!< WDT_T::CTL: WKF Mask                   */
N
N#define WDT_CTL_INTEN_Pos                (6)                                               /*!< WDT_T::CTL: INTEN Position             */
N#define WDT_CTL_INTEN_Msk                (0x1ul << WDT_CTL_INTEN_Pos)                      /*!< WDT_T::CTL: INTEN Mask                 */
N
N#define WDT_CTL_WDTEN_Pos                (7)                                               /*!< WDT_T::CTL: WDTEN Position             */
N#define WDT_CTL_WDTEN_Msk                (0x1ul << WDT_CTL_WDTEN_Pos)                      /*!< WDT_T::CTL: WDTEN Mask                 */
N
N#define WDT_CTL_TOUTSEL_Pos              (8)                                               /*!< WDT_T::CTL: TOUTSEL Position           */
N#define WDT_CTL_TOUTSEL_Msk              (0x7ul << WDT_CTL_TOUTSEL_Pos)                    /*!< WDT_T::CTL: TOUTSEL Mask               */
N
N#define WDT_CTL_WSYNC_Pos                (30)                                              /*!< WDT_T::CTL: WSYNC Position             */
N#define WDT_CTL_WSYNC_Msk                (0x1ul << WDT_CTL_WSYNC_Pos)                      /*!< WDT_T::CTL: WSYNC Mask                 */
N
N#define WDT_CTL_ICEDEBUG_Pos             (31)                                              /*!< WDT_T::CTL: ICEDEBUG Position          */
N#define WDT_CTL_ICEDEBUG_Msk             (0x1ul << WDT_CTL_ICEDEBUG_Pos)                   /*!< WDT_T::CTL: ICEDEBUG Mask              */
N
N#define WDT_ALTCTL_RSTDSEL_Pos           (0)                                               /*!< WDT_T::ALTCTL: RSTDSEL Position        */
N#define WDT_ALTCTL_RSTDSEL_Msk           (0x3ul << WDT_ALTCTL_RSTDSEL_Pos)                 /*!< WDT_T::ALTCTL: RSTDSEL Mask            */
N
N#define WDT_RSTCNT_RSTCNT_Pos            (0)                                               /*!< WDT_T::RSTCNT: RSTCNT Position         */
N#define WDT_RSTCNT_RSTCNT_Msk            (0xfffffffful << WDT_RSTCNT_RSTCNT_Pos)           /*!< WDT_T::RSTCNT: RSTCNT Mask             */
N
N/**@}*/ /* WDT_CONST */
N/**@}*/ /* end of WDT register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __WDT_REG_H__ */
L 170 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "wwdt_reg.h"
L 1 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\wwdt_reg.h" 1
N/**************************************************************************//**
N * @file     wwdt_reg.h
N * @version  V1.00
N * @brief    WWDT register definition header file
N *
N * @copyright (C) 2018 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __WWDT_REG_H__
N#define __WWDT_REG_H__
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma anon_unions
N#endif
N
N/**
N   @addtogroup REGISTER Control Register
N   @{
N*/
N
N/**
N    @addtogroup WWDT Window Watchdog Timer (WWDT)
N    Memory Mapped Structure for WWDT Controller
N@{ */
N
Ntypedef struct
N{
N    /**
N     * @var WWDT_T::RLDCNT
N     * Offset: 0x00  WWDT Reload Counter Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[31:0]  |RLDCNT    |WWDT Reload Counter Register
N     * |        |          |Writing 0x00005AA5 to this register will reload the WWDT counter value to 0x3F.
N     * |        |          |Note1: User can only execute the reload WWDT counter value command when current CNTDAT (WWDT_CNT[5:0]) is between 1 and CMPDAT (WWDT_CTL[21:16])
N     * |        |          |If user writes 0x00005AA5 in WWDT_RLDCNT register when current CNTDAT is larger than CMPDAT, WWDT reset system event will be generated immediately.
N     * |        |          |Note2: Execute WWDT counter relaod always needs (WWDT_CLK *3) period to reload CNTDAT to 0x3F and intrenal prescale counter will be reset also.
N     * @var WWDT_T::CTL
N     * Offset: 0x04  WWDT Control Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WWDTEN    |WWDT Enable Control Bit
N     * |        |          |Set this bit to enable WWDT counter counting.
N     * |        |          |0 = WWDT counter is stopped.
N     * |        |          |1 = WWDT counter is starting counting.
N     * |[1]     |INTEN     |WWDT Interrupt Enable Control Bit
N     * |        |          |If this bit is enabled, when WWDTIF (WWDT_STATUS[0]) is set to 1, the WWDT counter compare match interrupt signal is generated and inform to CPU.
N     * |        |          |0 = WWDT counter compare match interrupt Disabled.
N     * |        |          |1 = WWDT counter compare match interrupt Enabled.
N     * |[11:8]  |PSCSEL    |WWDT Counter Prescale Period Selection
N     * |        |          |0000 = Pre-scale is 1; Max time-out period is 1 * 64 * WWDT_CLK.
N     * |        |          |0001 = Pre-scale is 2; Max time-out period is 2 * 64 * WWDT_CLK.
N     * |        |          |0010 = Pre-scale is 4; Max time-out period is 4 * 64 * WWDT_CLK.
N     * |        |          |0011 = Pre-scale is 8; Max time-out period is 8 * 64 * WWDT_CLK.
N     * |        |          |0100 = Pre-scale is 16; Max time-out period is 16 * 64 * WWDT_CLK.
N     * |        |          |0101 = Pre-scale is 32; Max time-out period is 32 * 64 * WWDT_CLK.
N     * |        |          |0110 = Pre-scale is 64; Max time-out period is 64 * 64 * WWDT_CLK.
N     * |        |          |0111 = Pre-scale is 128; Max time-out period is 128 * 64 * WWDT_CLK.
N     * |        |          |1000 = Pre-scale is 192; Max time-out period is 192 * 64 * WWDT_CLK.
N     * |        |          |1001 = Pre-scale is 256; Max time-out period is 256 * 64 * WWDT_CLK.
N     * |        |          |1010 = Pre-scale is 384; Max time-out period is 384 * 64 * WWDT_CLK.
N     * |        |          |1011 = Pre-scale is 512; Max time-out period is 512 * 64 * WWDT_CLK.
N     * |        |          |1100 = Pre-scale is 768; Max time-out period is 768 * 64 * WWDT_CLK.
N     * |        |          |1101 = Pre-scale is 1024; Max time-out period is 1024 * 64 * WWDT_CLK.
N     * |        |          |1110 = Pre-scale is 1536; Max time-out period is 1536 * 64 * WWDT_CLK.
N     * |        |          |1111 = Pre-scale is 2048; Max time-out period is 2048 * 64 * WWDT_CLK.
N     * |[21:16] |CMPDAT    |WWDT Window Compare Value
N     * |        |          |Set this field to adjust the valid reload window interval when WWDTIF (WWDT_STATUS[0]) is generated.
N     * |        |          |Note: User can only write WWDT_RLDCNT register to reload WWDT counter value when current CNTDAT (WWDT_CNT[5:]) is between 1 and CMPDAT
N     * |        |          |If user writes 0x00005AA5 in WWDT_RLDCNT register when current CNTDAT is larger than CMPDAT, WWDT reset system event will be generated immediately.
N     * |[31]    |ICEDEBUG  |ICE Debug Mode Acknowledge Disable Control
N     * |        |          |0 = ICE debug mode acknowledgement effects WWDT counting.
N     * |        |          |WWDT down counter will be held while CPU is held by ICE.
N     * |        |          |1 = ICE debug mode acknowledgement Disabled.
N     * |        |          |WWDT down counter will keep going no matter CPU is held by ICE or not.
N     * @var WWDT_T::STATUS
N     * Offset: 0x08  WWDT Status Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[0]     |WWDTIF    |WWDT Compare Match Interrupt Flag
N     * |        |          |This bit indicates that current CNTDAT (WWDT_CNT[5:0]) matches the CMPDAT (WWDT_CTL[21:16]).
N     * |        |          |0 = No effect.
N     * |        |          |1 = WWDT counter value matches CMPDAT.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * |[1]     |WWDTRF    |WWDT Timer-out Reset Flag
N     * |        |          |If this bit is set to 1, it indicates that system has been reset by WWDT counter time-out reset system event.
N     * |        |          |0 = WWDT time-out reset system event did not occur.
N     * |        |          |1 = WWDT time-out reset system event occurred.
N     * |        |          |Note: This bit is cleared by writing 1 to it.
N     * @var WWDT_T::CNT
N     * Offset: 0x0C  WWDT Counter Value Register
N     * ---------------------------------------------------------------------------------------------------
N     * |Bits    |Field     |Descriptions
N     * | :----: | :----:   | :---- |
N     * |[5:0]   |CNTDAT    |WWDT Counter Value
N     * |        |          |CNTDAT will be updated continuously to monitor 6-bit WWDT down counter value.
N     */
N    __O  uint32_t RLDCNT;                /*!< [0x0000] WWDT Reload Counter Register                                     */
X    volatile  uint32_t RLDCNT;                 
N    __IO uint32_t CTL;                   /*!< [0x0004] WWDT Control Register                                            */
X    volatile uint32_t CTL;                    
N    __IO uint32_t STATUS;                /*!< [0x0008] WWDT Status Register                                             */
X    volatile uint32_t STATUS;                 
N    __I  uint32_t CNT;                   /*!< [0x000c] WWDT Counter Value Register                                      */
X    volatile const  uint32_t CNT;                    
N} WWDT_T;
N
N/**
N    @addtogroup WWDT_CONST WWDT Bit Field Definition
N    Constant Definitions for WWDT Controller
N@{ */
N
N#define WWDT_RLDCNT_RLDCNT_Pos           (0)                                               /*!< WWDT_T::RLDCNT: RLDCNT Position        */
N#define WWDT_RLDCNT_RLDCNT_Msk           (0xfffffffful << WWDT_RLDCNT_RLDCNT_Pos)          /*!< WWDT_T::RLDCNT: RLDCNT Mask            */
N
N#define WWDT_CTL_WWDTEN_Pos              (0)                                               /*!< WWDT_T::CTL: WWDTEN Position           */
N#define WWDT_CTL_WWDTEN_Msk              (0x1ul << WWDT_CTL_WWDTEN_Pos)                    /*!< WWDT_T::CTL: WWDTEN Mask               */
N
N#define WWDT_CTL_INTEN_Pos               (1)                                               /*!< WWDT_T::CTL: INTEN Position            */
N#define WWDT_CTL_INTEN_Msk               (0x1ul << WWDT_CTL_INTEN_Pos)                     /*!< WWDT_T::CTL: INTEN Mask                */
N
N#define WWDT_CTL_PSCSEL_Pos              (8)                                               /*!< WWDT_T::CTL: PSCSEL Position           */
N#define WWDT_CTL_PSCSEL_Msk              (0xful << WWDT_CTL_PSCSEL_Pos)                    /*!< WWDT_T::CTL: PSCSEL Mask               */
N
N#define WWDT_CTL_CMPDAT_Pos              (16)                                              /*!< WWDT_T::CTL: CMPDAT Position           */
N#define WWDT_CTL_CMPDAT_Msk              (0x3ful << WWDT_CTL_CMPDAT_Pos)                   /*!< WWDT_T::CTL: CMPDAT Mask               */
N
N#define WWDT_CTL_ICEDEBUG_Pos            (31)                                              /*!< WWDT_T::CTL: ICEDEBUG Position         */
N#define WWDT_CTL_ICEDEBUG_Msk            (0x1ul << WWDT_CTL_ICEDEBUG_Pos)                  /*!< WWDT_T::CTL: ICEDEBUG Mask             */
N
N#define WWDT_STATUS_WWDTIF_Pos           (0)                                               /*!< WWDT_T::STATUS: WWDTIF Position        */
N#define WWDT_STATUS_WWDTIF_Msk           (0x1ul << WWDT_STATUS_WWDTIF_Pos)                 /*!< WWDT_T::STATUS: WWDTIF Mask            */
N
N#define WWDT_STATUS_WWDTRF_Pos           (1)                                               /*!< WWDT_T::STATUS: WWDTRF Position        */
N#define WWDT_STATUS_WWDTRF_Msk           (0x1ul << WWDT_STATUS_WWDTRF_Pos)                 /*!< WWDT_T::STATUS: WWDTRF Mask            */
N
N#define WWDT_CNT_CNTDAT_Pos              (0)                                               /*!< WWDT_T::CNT: CNTDAT Position           */
N#define WWDT_CNT_CNTDAT_Msk              (0x3ful << WWDT_CNT_CNTDAT_Pos)                   /*!< WWDT_T::CNT: CNTDAT Mask               */
N
N/**@}*/ /* WWDT_CONST */
N/**@}*/ /* end of WWDT register group */
N/**@}*/ /* end of REGISTER group */
N
N#if defined ( __CC_ARM   )
X#if 1L
N    #pragma no_anon_unions
N#endif
N
N#endif /* __WWDT_REG_H__ */
L 171 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N
N/**@}*/ /* end of REGISTER group */
N
N
N/******************************************************************************/
N/*                         Peripheral memory map                              */
N/******************************************************************************/
N/** @addtogroup PERIPHERAL_BASE Peripheral Memory Base
N  Memory Mapped Structure for Series Peripheral
N  @{
N */
N/* Peripheral and SRAM base address */
N#define FLASH_BASE          ((uint32_t)0x00000000)
N#define SRAM_BASE           ((uint32_t)0x20000000)
N#define AHB_BASE            ((uint32_t)0x50000000)
N#define APB1_BASE           ((uint32_t)0x40000000)
N#define APB2_BASE           ((uint32_t)0x40100000)
N
N/* Peripheral memory map */
N/* AHB */
N#define SYS_BASE            (AHB_BASE       + 0x00000)                  /*!< System Global Controller Base Address            */
N#define CLK_BASE            (AHB_BASE       + 0x00200)                  /*!< System Clock Controller Base Address             */
N#define INT_BASE            (AHB_BASE       + 0x00300)                  /*!< Interrupt Source Controller Base Address         */
N#define GPIO_BASE           (AHB_BASE       + 0x04000)                  /*!< GPIO Base Address                                */
N#define PDMA_BASE           (AHB_BASE       + 0x08000)                  /*!< PDMA Base Address                                */
N#define FMC_BASE            (AHB_BASE       + 0x0C000)                  /*!< Flash Memory Controller Base Address             */
N
N#define PA_BASE             (GPIO_BASE               )                  /*!< GPIO PA Base Address                             */
N#define PB_BASE             (GPIO_BASE      + 0x00040)                  /*!< GPIO PB Base Address                             */
N#define PC_BASE             (GPIO_BASE      + 0x00080)                  /*!< GPIO PC Base Address                             */
N#define PD_BASE             (GPIO_BASE      + 0x000C0)                  /*!< GPIO PD Base Address                             */
N#define PE_BASE             (GPIO_BASE      + 0x00100)                  /*!< GPIO PE Base Address                             */
N#define PF_BASE             (GPIO_BASE      + 0x00140)                  /*!< GPIO PF Base Address                             */
N#define GPIO_DBCTL_BASE     (GPIO_BASE      + 0x00180)                  /*!< GPIO De-bounce Cycle Control Base Address        */
N#define GPIO_PIN_DATA_BASE  (GPIO_BASE      + 0x00200)                  /*!< GPIO Pin Data Input/Output Control Base Address  */
N
N/* APB1 */
N#define WDT_BASE            (APB1_BASE      + 0x04000)                  /*!< Watch Dog Timer Base Address                     */
N#define WWDT_BASE           (APB1_BASE      + 0x04100)                  /*!< Window Watch Dog Timer Base Address              */
N#define TIMER0_BASE         (APB1_BASE      + 0x10000)                  /*!< Timer0 Base Address                              */
N#define TIMER1_BASE         (APB1_BASE      + 0x10020)                  /*!< Timer1 Base Address                              */
N#define I2C0_BASE           (APB1_BASE      + 0x20000)                  /*!< I2C0 Base Address                                */
N#define SPI0_BASE           (APB1_BASE      + 0x30000)                  /*!< SPI0 Base Address                                */
N#define BPWM0_BASE          (APB1_BASE      + 0x40000)                  /*!< BPWM0 Base Address                               */
N#define PWM0_BASE           (APB1_BASE      + 0x44000)                  /*!< PWM0 Base Address                                */
N#define UART0_BASE          (APB1_BASE      + 0x50000)                  /*!< UART0 Base Address                               */
N#define USBD_BASE           (APB1_BASE      + 0x60000)                  /*!< USB Device Base Address                          */
N#define USCI0_BASE          (APB1_BASE      + 0x70000)
N#define ADC_BASE            (APB1_BASE      + 0xE0000)                  /*!< ADC Base Address                                 */
N
N/* APB2 */
N#define TIMER2_BASE         (APB2_BASE      + 0x10000)                  /*!< Timer2 Base Address                              */
N#define TIMER3_BASE         (APB2_BASE      + 0x10020)                  /*!< Timer3 Base Address                              */
N#define I2C1_BASE           (APB2_BASE      + 0x20000)                  /*!< I2C1 Base Address                                */
N#define BPWM1_BASE          (APB2_BASE      + 0x40000)                  /*!< BPWM1 Base Address                               */
N#define PWM1_BASE           (APB2_BASE      + 0x44000)                  /*!< PWM1 Base Address                                */
N
N/**@}*/ /* end of group PERIPHERAL_BASE */
N
N
N/******************************************************************************/
N/*                         Peripheral declaration                             */
N/******************************************************************************/
N
N/** @addtogroup PMODULE Peripheral Pointer
N  The Declaration of Peripheral Pointer
N  @{
N */
N#define ADC                 ((ADC_T *) ADC_BASE)                        /*!< ADC Configuration Struct                         */
N
N#define BPWM0               ((BPWM_T *) BPWM0_BASE)                     /*!< BPWM0 Configuration Struct                       */
N#define BPWM1               ((BPWM_T *) BPWM1_BASE)                     /*!< BPWM1 Configuration Struct                       */
N
N#define CLK                 ((CLK_T *) CLK_BASE)                        /*!< System Clock Controller Configuration Struct     */
N
N#define FMC                 ((FMC_T *) FMC_BASE)                        /*!< Flash Memory Controller */
N
N#define GPIO                ((GPIO_DBCTL_T *) GPIO_DBCTL_BASE)          /*!< Interrupt De-bounce Cycle Control Configuration Struct */
N#define PA                  ((GPIO_T *) PA_BASE)                        /*!< GPIO PORTA Configuration Struct                        */
N#define PB                  ((GPIO_T *) PB_BASE)                        /*!< GPIO PORTB Configuration Struct                        */
N#define PC                  ((GPIO_T *) PC_BASE)                        /*!< GPIO PORTC Configuration Struct                        */
N#define PD                  ((GPIO_T *) PD_BASE)                        /*!< GPIO PORTD Configuration Struct                        */
N#define PE                  ((GPIO_T *) PE_BASE)                        /*!< GPIO PORTE Configuration Struct                        */
N#define PF                  ((GPIO_T *) PF_BASE)                        /*!< GPIO PORTF Configuration Struct                        */
N
N#define I2C0                ((I2C_T *) I2C0_BASE)                       /*!< I2C0 Configuration Struct                        */
N#define I2C1                ((I2C_T *) I2C1_BASE)                       /*!< I2C1 Configuration Struct                        */
N
N#define INT                 ((INT_T *) INT_BASE)                        /*!< Interrupt Source Controller Configuration Struct */
N
N#define PDMA                ((PDMA_T *) PDMA_BASE)                      /*!< PDMA Configuration Struct                        */
N
N#define PWM0                ((PWM_T *)  PWM0_BASE)                      /*!< PWM0 Configuration Struct                        */
N#define PWM1                ((PWM_T *)  PWM1_BASE)                      /*!< PWM1 Configuration Struct                        */
N
N#define SPI0                ((SPI_T *) SPI0_BASE)                       /*!< SPI0 Configuration Struct                        */
N
N#define SYS                 ((SYS_T *) SYS_BASE)                        /*!< System Global Controller Configuration Struct    */
N
N#define TIMER0              ((TIMER_T *) TIMER0_BASE)                   /*!< TIMER0 Configuration Struct                      */
N#define TIMER1              ((TIMER_T *) TIMER1_BASE)                   /*!< TIMER1 Configuration Struct                      */
N#define TIMER2              ((TIMER_T *) TIMER2_BASE)                   /*!< TIMER2 Configuration Struct                      */
N#define TIMER3              ((TIMER_T *) TIMER3_BASE)                   /*!< TIMER3 Configuration Struct                      */
N
N#define UART0               ((UART_T *) UART0_BASE)                     /*!< UART0 Configuration Struct                       */
N
N#define UI2C0               ((UI2C_T *) USCI0_BASE)                     /*!< UI2C0 Configuration Struct                       */
N#define USPI0               ((USPI_T *) USCI0_BASE)                     /*!< USPI0 Configuration Struct                       */
N#define UUART0              ((UUART_T *) USCI0_BASE)                    /*!< UUART0 Configuration Struct                      */
N
N#define USBD                ((USBD_T *) USBD_BASE)                      /*!< USB Device Configuration Struct                  */
N
N#define WDT                 ((WDT_T *) WDT_BASE)                        /*!< Watch Dog Timer Configuration Struct             */
N
N#define WWDT                ((WWDT_T *) WWDT_BASE)                      /*!< Window Watch Dog Timer Configuration Struct      */
N
N/**@}*/ /* end of group PMODULE */
N/**@}*/ /* end of group REGISTER */
N
N
N//=============================================================================
Ntypedef volatile unsigned char  vu8;
Ntypedef volatile unsigned long  vu32;
Ntypedef volatile unsigned short vu16;
N
N#define M8(adr)  (*((vu8  *) (adr)))
N#define M16(adr) (*((vu16 *) (adr)))
N#define M32(adr) (*((vu32 *) (adr)))
N
N#define outpw(port,value)   (*((volatile unsigned int *)(port))=(value))
N#define inpw(port)          ((*((volatile unsigned int *)(port))))
N#define outpb(port,value)   (*((volatile unsigned char *)(port))=(value))
N#define inpb(port)          ((*((volatile unsigned char *)(port))))
N#define outps(port,value)   (*((volatile unsigned short *)(port))=(value))
N#define inps(port)          ((*((volatile unsigned short *)(port))))
N
N#define outp32(port,value)  (*((volatile unsigned int *)(port))=(value))
N#define inp32(port)         ((*((volatile unsigned int *)(port))))
N#define outp8(port,value)   (*((volatile unsigned char *)(port))=(value))
N#define inp8(port)          ((*((volatile unsigned char *)(port))))
N#define outp16(port,value)  (*((volatile unsigned short *)(port))=(value))
N#define inp16(port)         ((*((volatile unsigned short *)(port))))
N
N#define E_SUCCESS   0
N#ifndef NULL
N    #define NULL    0
N#endif
N
N#define TRUE        1
N#define FALSE       0
N
N#define ENABLE      1
N#define DISABLE     0
N
N/* Bit Mask Definitions */
N#define BIT0    0x00000001
N#define BIT1    0x00000002
N#define BIT2    0x00000004
N#define BIT3    0x00000008
N#define BIT4    0x00000010
N#define BIT5    0x00000020
N#define BIT6    0x00000040
N#define BIT7    0x00000080
N#define BIT8    0x00000100
N#define BIT9    0x00000200
N#define BIT10   0x00000400
N#define BIT11   0x00000800
N#define BIT12   0x00001000
N#define BIT13   0x00002000
N#define BIT14   0x00004000
N#define BIT15   0x00008000
N#define BIT16   0x00010000
N#define BIT17   0x00020000
N#define BIT18   0x00040000
N#define BIT19   0x00080000
N#define BIT20   0x00100000
N#define BIT21   0x00200000
N#define BIT22   0x00400000
N#define BIT23   0x00800000
N#define BIT24   0x01000000
N#define BIT25   0x02000000
N#define BIT26   0x04000000
N#define BIT27   0x08000000
N#define BIT28   0x10000000
N#define BIT29   0x20000000
N#define BIT30   0x40000000
N#define BIT31   0x80000000
N
N/* Byte Mask Definitions */
N#define BYTE0_Msk               (0x000000FF)
N#define BYTE1_Msk               (0x0000FF00)
N#define BYTE2_Msk               (0x00FF0000)
N#define BYTE3_Msk               (0xFF000000)
N
N#define _GET_BYTE0(u32Param)    (((u32Param) & BYTE0_Msk)      )  /*!< Extract Byte 0 (Bit  0~ 7) from parameter u32Param */
N#define _GET_BYTE1(u32Param)    (((u32Param) & BYTE1_Msk) >>  8)  /*!< Extract Byte 1 (Bit  8~15) from parameter u32Param */
N#define _GET_BYTE2(u32Param)    (((u32Param) & BYTE2_Msk) >> 16)  /*!< Extract Byte 2 (Bit 16~23) from parameter u32Param */
N#define _GET_BYTE3(u32Param)    (((u32Param) & BYTE3_Msk) >> 24)  /*!< Extract Byte 3 (Bit 24~31) from parameter u32Param */
N
N
N/******************************************************************************/
N/*                         Peripheral header files                            */
N/******************************************************************************/
N#include "adc.h"
L 1 "..\..\..\..\Library\StdDriver\inc\adc.h" 1
N/**************************************************************************//**
N * @file     adc.h
N * @version  V3.00
N * @brief    NUC121 series ADC driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N
N#ifndef __ADC_H__
N#define __ADC_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup ADC_Driver ADC Driver
N  @{
N*/
N
N/** @addtogroup ADC_EXPORTED_CONSTANTS ADC Exported Constants
N  @{
N*/
N/*---------------------------------------------------------------------------------------------------------*/
N/*  ADCR Constant Definitions                                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_ADCR_ADEN_CONVERTER_DISABLE   (0UL<<ADC_ADCR_ADEN_Pos)   /*!< ADC converter disable          */
N#define ADC_ADCR_ADEN_CONVERTER_ENABLE    (1UL<<ADC_ADCR_ADEN_Pos)   /*!< ADC converter enable           */
N
N#define ADC_ADCR_ADMD_SINGLE            (0UL<<ADC_ADCR_ADMD_Pos)     /*!< Single mode                */
N#define ADC_ADCR_ADMD_BURST             (1UL<<ADC_ADCR_ADMD_Pos)     /*!< Burst mode                 */
N#define ADC_ADCR_ADMD_SINGLE_CYCLE      (2UL<<ADC_ADCR_ADMD_Pos)     /*!< Single cycle scan mode     */
N#define ADC_ADCR_ADMD_CONTINUOUS        (3UL<<ADC_ADCR_ADMD_Pos)     /*!< Continuous scan mode       */
N
N#define ADC_ADCR_DIFFEN_SINGLE_END      (0UL<<ADC_ADCR_DIFFEN_Pos)   /*!< Single end input mode      */
N#define ADC_ADCR_DIFFEN_DIFFERENTIAL    (1UL<<ADC_ADCR_DIFFEN_Pos)   /*!< Differential input mode    */
N
N#define ADC_ADCR_DMOF_UNSIGNED_OUTPUT   (0UL<<ADC_ADCR_DMOF_Pos)     /*!< Select the straight binary format as the output format of the conversion result   */
N#define ADC_ADCR_DMOF_TWOS_COMPLEMENT   (1UL<<ADC_ADCR_DMOF_Pos)     /*!< Select the 2's complement format as the output format of the conversion result    */
N
N#define ADC_ADCR_TRGEN_DISABLE          (0UL<<ADC_ADCR_TRGEN_Pos)    /*!< Disable triggering of A/D conversion by external STADC pin, Timer or PWM   */
N#define ADC_ADCR_TRGEN_ENABLE           (1UL<<ADC_ADCR_TRGEN_Pos)    /*!< Enable triggering of A/D conversion by external STADC pin, Timer or PWM  */
N
N#define ADC_ADCR_TRGS_STADC             (0UL<<ADC_ADCR_TRGS_Pos)     /*!< A/D conversion is started by external STADC pin */
N#define ADC_ADCR_TRGS_TIMER             (1UL<<ADC_ADCR_TRGS_Pos)     /*!< A/D conversion is started by Timer */
N#define ADC_ADCR_TRGS_PWM               (3UL<<ADC_ADCR_TRGS_Pos)     /*!< A/D conversion is started by PWM */
N
N#define ADC_ADCR_TRGCOND_LOW_LEVEL      (0UL<<ADC_ADCR_TRGCOND_Pos)  /*!< STADC Low level active     */
N#define ADC_ADCR_TRGCOND_HIGH_LEVEL     (1UL<<ADC_ADCR_TRGCOND_Pos)  /*!< STADC High level active    */
N#define ADC_ADCR_TRGCOND_FALLING_EDGE   (2UL<<ADC_ADCR_TRGCOND_Pos)  /*!< STADC Falling edge active  */
N#define ADC_ADCR_TRGCOND_RISING_EDGE    (3UL<<ADC_ADCR_TRGCOND_Pos)  /*!< STADC Rising edge active   */
N
N#define ADC_ADCR_SMPTSEL_2_CLOCK        (0UL<<ADC_ADCR_SMPTSEL_Pos)  /*!< A/D conversion sampling time is 2 ADC peripheral clock cycles */
N#define ADC_ADCR_SMPTSEL_3_CLOCK        (1UL<<ADC_ADCR_SMPTSEL_Pos)  /*!< A/D conversion sampling time is 3 ADC peripheral clock cycles */
N#define ADC_ADCR_SMPTSEL_4_CLOCK        (2UL<<ADC_ADCR_SMPTSEL_Pos)  /*!< A/D conversion sampling time is 4 ADC peripheral clock cycles */
N#define ADC_ADCR_SMPTSEL_5_CLOCK        (3UL<<ADC_ADCR_SMPTSEL_Pos)  /*!< A/D conversion sampling time is 5 ADC peripheral clock cycles */
N#define ADC_ADCR_SMPTSEL_6_CLOCK        (4UL<<ADC_ADCR_SMPTSEL_Pos)  /*!< A/D conversion sampling time is 6 ADC peripheral clock cycles */
N#define ADC_ADCR_SMPTSEL_7_CLOCK        (5UL<<ADC_ADCR_SMPTSEL_Pos)  /*!< A/D conversion sampling time is 7 ADC peripheral clock cycles */
N#define ADC_ADCR_SMPTSEL_8_CLOCK        (6UL<<ADC_ADCR_SMPTSEL_Pos)  /*!< A/D conversion sampling time is 8 ADC peripheral clock cycles */
N#define ADC_ADCR_SMPTSEL_9_CLOCK        (7UL<<ADC_ADCR_SMPTSEL_Pos)  /*!< A/D conversion sampling time is 9 ADC peripheral clock cycles */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ADCHER Constant Definitions                                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_ADCHER_BANDGAP              (1UL<<29)   /*!< The input source of channel 29 is the internal bandgap voltage     */
N#define ADC_ADCHER_TEMPERATURE_SENSOR   (1UL<<30)   /*!< The input source of channel 30 is the internal temperature sensor  */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ADCMPR Constant Definitions                                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_ADCMPR_CMPD(x)                    ((x) << ADC_ADCMPR_CMPD_Pos)          /*!< Compare value for compare function            */
N#define ADC_ADCMPR_CMPMATCNT(x)               (((x)-1) << ADC_ADCMPR_CMPMATCNT_Pos) /*!< Match count for compare function              */
N#define ADC_ADCMPR_CMPCH(x)                   ((x) << ADC_ADCMPR_CMPCH_Pos)         /*!< Compare channel for compare function          */
N#define ADC_ADCMPR_CMPCOND_LESS_THAN          (0<<ADC_ADCMPR_CMPCOND_Pos)           /*!< The compare condition is "less than"          */
N#define ADC_ADCMPR_CMPCOND_GREATER_OR_EQUAL   (1<<ADC_ADCMPR_CMPCOND_Pos)           /*!< The compare condition is "greater than or equal to" */
N#define ADC_ADCMPR_CMPIE_INTERRUPT_ENABLE     (ADC_ADCMPR_CMPIE_Msk)                /*!< The compare function interrupt enable */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ADC Interrupt Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_ADF_INT         (ADC_ADSR0_ADF_Msk)         /*!< ADC convert complete interrupt */
N#define ADC_CMP0_INT        (ADC_ADSR0_CMPF0_Msk)       /*!< ADC comparator 0 interrupt */
N#define ADC_CMP1_INT        (ADC_ADSR0_CMPF1_Msk)       /*!< ADC comparator 1 interrupt */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ADC Operation Mode Constant Definitions                                                                 */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_SINGLE_MODE         0   /*!< ADC single mode            */
N#define ADC_BURST_MODE          1   /*!< ADC burst mode             */
N#define ADC_SINGLE_CYCLE_MODE   2   /*!< ADC single-cycle scan mode */
N#define ADC_CONTINUOUS_MODE     3   /*!< ADC continuous scan mode   */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ADC Trigger Condition Constant Definitions                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_LOW_LEVEL      0   /*!< ADC external trigger condition is low level trigger    */
N#define ADC_HIGH_LEVEL     1   /*!< ADC external trigger condition is high level trigger   */
N#define ADC_FALLING_EDGE   2   /*!< ADC external trigger condition is falling edge trigger */
N#define ADC_RISING_EDGE    3   /*!< ADC external trigger condition is rising edge trigger  */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* ADC Compare Condition Constant Definitions                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#define ADC_LESS_THAN          0   /*!< ADC compare condition is "less than the compare value"                */
N#define ADC_GREATER_OR_EQUAL   1   /*!< ADC compare condition is "greater than or equal to the compare value" */
N
N
N/*@}*/ /* end of group ADC_EXPORTED_CONSTANTS */
N
N/** @addtogroup ADC_EXPORTED_FUNCTIONS ADC Exported Functions
N  @{
N*/
N
N
N/**
N  * @brief Get conversion data of specified channel.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32ChNum ADC Channel, valid value are from 0 to 11, 29 for bandgap, and 30 for temperature sensor.
N  * @return  16-bit data.
N  * @details Read RSLT bit field to get conversion data.
N  * \hideinitializer
N  */
N#define ADC_GET_CONVERSION_DATA(adc, u32ChNum) (((adc)->ADDR[(u32ChNum)] & ADC_ADDR_RSLT_Msk)>>ADC_ADDR_RSLT_Pos)
N
N/**
N  * @brief Return the user-specified interrupt flags.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32Mask The combination of following interrupt status bits. Each bit corresponds to a interrupt status.
N  *                    Valid values are:
N  *                     - \ref ADC_ADF_INT          :Convert complete interrupt flag.
N  *                     - \ref ADC_CMP0_INT         :Comparator 0 interrupt flag.
N  *                     - \ref ADC_CMP1_INT         :Comparator 1 interrupt flag.
N  * @return  User specified interrupt flags.
N  * @details Get the status of the ADC interrupt flag.
N  * \hideinitializer
N  */
N#define ADC_GET_INT_FLAG(adc, u32Mask) ((adc)->ADSR0 & (u32Mask))
N
N/**
N  * @brief This macro clear the selected interrupt status bits.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32Mask The combination of following interrupt status bits. Each bit corresponds to a interrupt status.
N  *                    Valid values are:
N  *                     - \ref ADC_ADF_INT          :Convert complete interrupt flag.
N  *                     - \ref ADC_CMP0_INT         :Comparator 0 interrupt flag.
N  *                     - \ref ADC_CMP1_INT         :Comparator 1 interrupt flag.
N  * @return  None
N  * @details ADF (ADSR0[0])/CMPF0 (ADSR0[1])/CMPF1 (ADSR0[2]) can be cleared by writing 1 to itself.
N  * \hideinitializer
N  */
N#define ADC_CLR_INT_FLAG(adc, u32Mask) ((adc)->ADSR0 = (u32Mask))
N
N/**
N  * @brief Get the busy state of ADC.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @retval 0 ADC is not busy.
N  * @retval 1 ADC is busy.
N  * @details ADSR0[7] (BUSY) is a mirror of ADCR[11] (ADST).
N  * \hideinitializer
N  */
N#define ADC_IS_BUSY(adc) ((adc)->ADSR0 & ADC_ADSR0_BUSY_Msk ? 1 : 0)
N
N/**
N  * @brief Check if the ADC conversion data is over written or not.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32ChNum ADC Channel, valid value are from 0 to 11, 29 for bandgap, and 30 for temperature sensor.
N  * @retval 0 ADC data is not overrun.
N  * @retval 1 ADC data is overrun.
N  * @details ADSR2[31:0] (OVERRUN) is the mirror of ADDR0~31[16] OVERRUN bits.
N  * \hideinitializer
N  */
N#define ADC_IS_DATA_OVERRUN(adc, u32ChNum) (((adc)->ADSR2 & (1<<(u32ChNum))) ? 1 : 0)
N
N/**
N  * @brief Check if the ADC conversion data is valid or not.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32ChNum ADC Channel, valid value are from 0 to 11, 29 for bandgap, and 30 for temperature sensor.
N  * @retval 0 ADC data is not valid.
N  * @retval 1 ADC data is valid.
N  * @details VALID (ADDR0~31[17]) is set to 1 when corresponding channel analog input conversion is completed and cleared by hardware after ADDR register is read.
N  * \hideinitializer
N  */
N#define ADC_IS_DATA_VALID(adc, u32ChNum) ((adc)->ADSR1 & (0x1<<(u32ChNum)) ? 1 : 0)
N
N/**
N  * @brief Power down ADC module.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return None
N  * @details Disable A/D converter analog circuit for saving power consumption.
N  * \hideinitializer
N  */
N#define ADC_POWER_DOWN(adc) ((adc)->ADCR &= ~ADC_ADCR_ADEN_Msk)
N
N/**
N  * @brief Power on ADC module.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return None
N  * @details Before starting A/D conversion function, ADEN bit (ADCR[0]) should be set to 1.
N  * \hideinitializer
N  */
N#define ADC_POWER_ON(adc) ((adc)->ADCR |= ADC_ADCR_ADEN_Msk)
N
N/**
N  * @brief Configure the comparator 0 and enable it.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32ChNum  Specifies the source channel, valid value are from 0 to 11, 29 for bandgap, and 30 for temperature sensor.
N  * @param[in] u32Condition Specifies the compare condition. Valid values are:
N  *                          - \ref ADC_ADCMPR_CMPCOND_LESS_THAN            :The compare condition is "less than the compare value".
N  *                          - \ref ADC_ADCMPR_CMPCOND_GREATER_OR_EQUAL     :The compare condition is "greater than or equal to the compare value".
N  * @param[in] u32Data Specifies the compare value, valid value are between 0 ~ 0xFFF.
N  * @param[in] u32MatchCount Specifies the match count setting, valid values are between 1~16.
N  * @return None
N  * @details For example, ADC_ENABLE_CMP0(ADC, 5, ADC_ADCMPR_CMPCOND_GREATER_OR_EQUAL, 0x800, 10);
N  *          Means ADC will assert comparator 0 flag if channel 5 conversion result is greater than or
N  *          equal to 0x800 for 10 times continuously.
N  * \hideinitializer
N  */
N#define ADC_ENABLE_CMP0(adc, \
N                        u32ChNum, \
N                        u32Condition, \
N                        u32Data, \
N                        u32MatchCount) ((adc)->ADCMPR[0] = ((u32ChNum) << ADC_ADCMPR_CMPCH_Pos) \
N                                        | (u32Condition) \
N                                        | ((u32Data) << ADC_ADCMPR_CMPD_Pos) \
N                                        | (((u32MatchCount) - 1) << ADC_ADCMPR_CMPMATCNT_Pos) \
N                                        | ADC_ADCMPR_CMPEN_Msk)
X#define ADC_ENABLE_CMP0(adc,                         u32ChNum,                         u32Condition,                         u32Data,                         u32MatchCount) ((adc)->ADCMPR[0] = ((u32ChNum) << ADC_ADCMPR_CMPCH_Pos)                                         | (u32Condition)                                         | ((u32Data) << ADC_ADCMPR_CMPD_Pos)                                         | (((u32MatchCount) - 1) << ADC_ADCMPR_CMPMATCNT_Pos)                                         | ADC_ADCMPR_CMPEN_Msk)
N
N/**
N  * @brief Disable comparator 0
N  * @param[in] adc The pointer of the specified ADC module
N  * @return None
N  * @details Set CMPEN (ADCMPR0[0]) to 0 and reset comparator 0 configurations to disable ADC compare function.
N  * \hideinitializer
N  */
N#define ADC_DISABLE_CMP0(adc) ((adc)->ADCMPR[0] = 0)
N
N/**
N  * @brief Configure the comparator 1 and enable it.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32ChNum  Specifies the source channel, valid value are from 0 to 11, 29 for bandgap, and 30 for temperature sensor.
N  * @param[in] u32Condition Specifies the compare condition. Valid values are:
N  *                          - \ref ADC_ADCMPR_CMPCOND_LESS_THAN            :The compare condition is "less than the compare value".
N  *                          - \ref ADC_ADCMPR_CMPCOND_GREATER_OR_EQUAL     :The compare condition is "greater than or equal to the compare value".
N  * @param[in] u32Data Specifies the compare value, valid value are between 0 ~ 0xFFF.
N  * @param[in] u32MatchCount Specifies the match count setting, valid values are between 1~16.
N  * @return None
N  * @details For example, ADC_ENABLE_CMP1(ADC, 5, ADC_ADCMPR_CMPCOND_GREATER_OR_EQUAL, 0x800, 10);
N  *          Means ADC will assert comparator 1 flag if channel 5 conversion result is greater than or
N  *          equal to 0x800 for 10 times continuously.
N  * \hideinitializer
N  */
N#define ADC_ENABLE_CMP1(adc, \
N                        u32ChNum, \
N                        u32Condition, \
N                        u32Data, \
N                        u32MatchCount) ((adc)->ADCMPR[1] = ((u32ChNum) << ADC_ADCMPR_CMPCH_Pos) \
N                                        | (u32Condition) \
N                                        | ((u32Data) << ADC_ADCMPR_CMPD_Pos) \
N                                        | (((u32MatchCount) - 1) << ADC_ADCMPR_CMPMATCNT_Pos) \
N                                        | ADC_ADCMPR_CMPEN_Msk)
X#define ADC_ENABLE_CMP1(adc,                         u32ChNum,                         u32Condition,                         u32Data,                         u32MatchCount) ((adc)->ADCMPR[1] = ((u32ChNum) << ADC_ADCMPR_CMPCH_Pos)                                         | (u32Condition)                                         | ((u32Data) << ADC_ADCMPR_CMPD_Pos)                                         | (((u32MatchCount) - 1) << ADC_ADCMPR_CMPMATCNT_Pos)                                         | ADC_ADCMPR_CMPEN_Msk)
N
N/**
N  * @brief Disable comparator 1.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return None
N  * @details Set CMPEN (ADCMPR1[0]) to 0 and reset comparator 1 configurations to disable ADC compare function.
N  * \hideinitializer
N  */
N#define ADC_DISABLE_CMP1(adc) ((adc)->ADCMPR[1] = 0)
N
N/**
N  * @brief Set ADC input channel.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32Mask  Channel enable bit. Each bit corresponds to a input channel. Bit 0 is channel 0, bit 1 is channel 1..., bit 11 is channel 11. Other valid values are:
N  *                     - \ref ADC_ADCHER_BANDGAP             : Internal bandgap voltage.
N  *                     - \ref ADC_ADCHER_TEMPERATURE_SENSOR  : Output of internal temperature sensor.
N  * @return None
N  * @details Enabled channel will be converted while ADC starts.
N  * @note In single mode, ADC can only convert 1 channel. If more than 1 channel are enabled, only the channel with smallest number will be converted.
N  * \hideinitializer
N  */
N#define ADC_SET_INPUT_CHANNEL(adc, u32Mask) ((adc)->ADCHER = ((adc)->ADCHER & ~ADC_ADCHER_CHEN_Msk) | (u32Mask))
N
N/**
N  * @brief Set the output format mode.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @param[in] u32Format Decides the output format. Valid values are:
N  *                      - \ref ADC_ADCR_DMOF_UNSIGNED_OUTPUT      : Select the straight binary format as the output format of the conversion result.
N  *                      - \ref ADC_ADCR_DMOF_TWOS_COMPLEMENT      : Select the 2's complement format as the output format of the conversion result.
N  * @return None
N  * @details  The macro is used to set the output format of ADC differential input mode.
N  * \hideinitializer
N  */
N#define ADC_SET_DMOF(adc, u32Format) ((adc)->ADCR = ((adc)->ADCR & ~ADC_ADCR_DMOF_Msk) | (u32Format))
N
N/**
N  * @brief Start the A/D conversion.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return None
N  * @details Set ADST bit to 1 to start the A/D conversion.
N  * \hideinitializer
N  */
N#define ADC_START_CONV(adc) ((adc)->ADCR |= ADC_ADCR_ADST_Msk)
N
N/**
N  * @brief Stop the A/D conversion.
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return None
N  * @details ADST (ADCR[11]) will be cleared to 0 by hardware automatically at the ends of single mode and single-cycle scan mode.
N  *          In continuous scan mode and burst mode, A/D conversion is continuously performed until software writes 0 to this bit.
N  * @note If ADST bit is cleared to 0 when ADC is in converting, the BUSY bit will be cleared to 0 immediately, ADC will finish
N  *       the current conversion and save the result to the ADDRx register of the enabled channel.
N  * \hideinitializer
N  */
N#define ADC_STOP_CONV(adc) ((adc)->ADCR &= ~ADC_ADCR_ADST_Msk)
N
N/**
N  * @brief Enable PDMA transfer.
N  * @param[in] adc The pointer of the specified ADC module
N  * @return None
N  * @details Enable PDMA to transfer the conversion data.
N  * @note While enable PDMA transfer, software must set ADIE = 0 to disable interrupt.
N  * \hideinitializer
N  */
N#define ADC_ENABLE_PDMA(adc) ((adc)->ADCR |= ADC_ADCR_PTEN_Msk)
N
N/**
N  * @brief Disable PDMA transfer.
N  * @param[in] adc The pointer of the specified ADC module
N  * @return None
N  * @details Disable PDMA to transfer the conversion data.
N  * \hideinitializer
N  */
N#define ADC_DISABLE_PDMA(adc) ((adc)->ADCR &= ~ADC_ADCR_PTEN_Msk)
N
N/**
N  * @brief Get PDMA current transfer data
N  * @param[in] adc The pointer of the specified ADC module.
N  * @return  PDMA current transfer data
N  * \hideinitializer
N  */
N#define ADC_GET_PDMA_DATA(adc) ((adc)->ADPDMA & ADC_ADPDMA_CURDAT_Msk)
N
N
Nvoid ADC_Open(ADC_T *adc,
N              uint32_t u32InputMode,
N              uint32_t u32OpMode,
N              uint32_t u32ChMask);
Nvoid ADC_Close(ADC_T *adc);
Nvoid ADC_EnableHWTrigger(ADC_T *adc,
N                         uint32_t u32Source,
N                         uint32_t u32Param);
Nvoid ADC_DisableHWTrigger(ADC_T *adc);
Nvoid ADC_EnableTimerTrigger(ADC_T *adc,
N                            uint32_t u32Source,
N                            uint32_t u32Param);
Nvoid ADC_DisableTimerTrigger(ADC_T *adc);
Nvoid ADC_EnableInt(ADC_T *adc, uint32_t u32Mask);
Nvoid ADC_DisableInt(ADC_T *adc, uint32_t u32Mask);
N
N
N
N/*@}*/ /* end of group ADC_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group ADC_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /*__ADC_H__ */
N
N/*** (C) COPYRIGHT 2014 Nuvoton Technology Corp. ***/
L 375 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "bpwm.h"
L 1 "..\..\..\..\Library\StdDriver\inc\bpwm.h" 1
N/**************************************************************************//**
N * @file     bpwm.h
N * @version  V3.00
N * @brief    NUC121 series BPWM driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __BPWM_H__
N#define __BPWM_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup BPWM_Driver BPWM Driver
N  @{
N*/
N
N
N/** @addtogroup BPWM_EXPORTED_CONSTANTS BPWM Exported Constants
N  @{
N*/
N#define BPWM_CHANNEL_NUM                          (6)        /*!< BPWM channel number */
N#define BPWM_CH_0_MASK                            (0x1UL)    /*!< BPWM channel 0 mask */
N#define BPWM_CH_1_MASK                            (0x2UL)    /*!< BPWM channel 1 mask */
N#define BPWM_CH_2_MASK                            (0x4UL)    /*!< BPWM channel 2 mask */
N#define BPWM_CH_3_MASK                            (0x8UL)    /*!< BPWM channel 3 mask */
N#define BPWM_CH_4_MASK                            (0x10UL)   /*!< BPWM channel 4 mask */
N#define BPWM_CH_5_MASK                            (0x20UL)   /*!< BPWM channel 5 mask */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Load Mode Constant Definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_LOAD_MODE_IMMEDIATE                  (BPWM_CTL0_IMMLDEN0_Msk)    /*!< BPWM immediately load mode */
N#define BPWM_LOAD_MODE_CENTER                     (BPWM_CTL0_CTRLD0_Msk)      /*!< BPWM center load mode      */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  BPWM Counter Behavior Type                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_UP_COUNTER                           (0UL)      /*!< Up counter type */
N#define BPWM_DOWN_COUNTER                         (1UL)      /*!< Down counter type */
N#define BPWM_UP_DOWN_COUNTER                      (2UL)      /*!< Up-Down counter type */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Aligned Type Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_EDGE_ALIGNED                         (1UL)      /*!< BPWM working in edge aligned type(down count) */
N#define BPWM_CENTER_ALIGNED                       (2UL)      /*!< BPWM working in center aligned type */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Clock Source Select Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_CLKSRC_BPWM_CLK                      (0UL)    /*!< BPWM Clock source selects to BPWM0_CLK or BPWM1_CLK */
N#define BPWM_CLKSRC_TIMER0                        (1UL)    /*!< BPWM Clock source selects to TIMER0 overflow */
N#define BPWM_CLKSRC_TIMER1                        (2UL)    /*!< BPWM Clock source selects to TIMER1 overflow */
N#define BPWM_CLKSRC_TIMER2                        (3UL)    /*!< BPWM Clock source selects to TIMER2 overflow */
N#define BPWM_CLKSRC_TIMER3                        (4UL)    /*!< BPWM Clock source selects to TIMER3 overflow */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Output Level Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_OUTPUT_NOTHING                       (0UL)      /*!< BPWM output nothing */
N#define BPWM_OUTPUT_LOW                           (1UL)      /*!< BPWM output low */
N#define BPWM_OUTPUT_HIGH                          (2UL)      /*!< BPWM output high */
N#define BPWM_OUTPUT_TOGGLE                        (3UL)      /*!< BPWM output toggle */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Synchronous Start Function Control Constant Definitions                                                */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_SSCTL_SSRC_BPWM0                     (0UL<<BPWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from BPWM0 */
N#define BPWM_SSCTL_SSRC_BPWM1                     (1UL<<BPWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from BPWM1 */
N#define BPWM_SSCTL_SSRC_PWM0                      (2UL<<BPWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from PWM0 */
N#define BPWM_SSCTL_SSRC_PWM1                      (3UL<<BPWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from PWM1 */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Trigger Source Select Constant Definitions                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_TRIGGER_ADC_EVEN_ZERO_POINT                     (0UL)     /*!< BPWM trigger ADC while counter of even channel matches zero point */
N#define BPWM_TRIGGER_ADC_EVEN_PERIOD_POINT                   (1UL)     /*!< BPWM trigger ADC while counter of even channel matches period point */
N#define BPWM_TRIGGER_ADC_EVEN_ZERO_OR_PERIOD_POINT           (2UL)     /*!< BPWM trigger ADC while counter of even channel matches zero or period point */
N#define BPWM_TRIGGER_ADC_EVEN_COMPARE_UP_COUNT_POINT         (3UL)     /*!< BPWM trigger ADC while counter of even channel matches up count to comparator point */
N#define BPWM_TRIGGER_ADC_EVEN_COMPARE_DOWN_COUNT_POINT       (4UL)     /*!< BPWM trigger ADC while counter of even channel matches down count to comparator point */
N#define BPWM_TRIGGER_ADC_ODD_COMPARE_UP_COUNT_POINT          (8UL)     /*!< BPWM trigger ADC while counter of odd channel matches up count to comparator point */
N#define BPWM_TRIGGER_ADC_ODD_COMPARE_DOWN_COUNT_POINT        (9UL)     /*!< BPWM trigger ADC while counter of odd channel matches down count to comparator point */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Capture Control Constant Definitions                                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_CAPTURE_INT_RISING_LATCH             (1UL)        /*!< BPWM capture interrupt if channel has rising transition */
N#define BPWM_CAPTURE_INT_FALLING_LATCH            (0x100UL)    /*!< BPWM capture interrupt if channel has falling transition */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Duty Interrupt Type Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define BPWM_DUTY_INT_DOWN_COUNT_MATCH_CMP        (BPWM_INTEN_CMPDIEN0_Msk)   /*!< BPWM duty interrupt triggered if down count match comparator */
N#define BPWM_DUTY_INT_UP_COUNT_MATCH_CMP          (BPWM_INTEN_CMPUIEN0_Msk)   /*!< BPWM duty interrupt triggered if up down match comparator */
N
N
N
N
N
N/*@}*/ /* end of group BPWM_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup BPWM_EXPORTED_FUNCTIONS BPWM Exported Functions
N  @{
N*/
N
N/**
N * @brief Enable timer synchronous mode of specified channel(s)
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32SyncSrc Synchronous start source selection, valid values are:
N *              - \ref BPWM_SSCTL_SSRC_BPWM0
N *              - \ref BPWM_SSCTL_SSRC_BPWM1
N *              - \ref BPWM_SSCTL_SSRC_PWM0
N *              - \ref BPWM_SSCTL_SSRC_PWM1
N * @return None
N * @details This macro is used to enable timer synchronous mode of specified channel(s). All channels share the same setting.
N * \hideinitializer
N */
N#define BPWM_ENABLE_TIMER_SYNC(bpwm, u32ChannelMask, u32SyncSrc) ((bpwm)->SSCTL = ((bpwm)->SSCTL & ~BPWM_SSCTL_SSRC_Msk) | (u32SyncSrc) | BPWM_SSCTL_SSEN0_Msk)
N
N/**
N * @brief Disable timer synchronous mode of specified channel(s)
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. This parameter is not used.
N * @return None
N * @details This macro is used to disable timer synchronous mode of specified channel(s).
N * @note All channels share channel 0's setting.
N * \hideinitializer
N */
N#define BPWM_DISABLE_TIMER_SYNC(bpwm, u32ChannelMask) ((bpwm)->SSCTL &= ~BPWM_SSCTL_SSEN0_Msk)
N
N/**
N * @brief This macro enable BPWM counter synchronous start counting function.
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @return None
N * @details This macro is used to make selected BPWM0 and BPWM1 channel(s) start counting at the same time.
N *          To configure synchronous start counting channel(s) by BPWM_ENABLE_TIMER_SYNC() and BPWM_DISABLE_TIMER_SYNC().
N * \hideinitializer
N */
N#define BPWM_TRIGGER_SYNC_START(bpwm) ((bpwm)->SSTRG = BPWM_SSTRG_CNTSEN_Msk)
N
N/**
N * @brief This macro enable output inverter of specified channel(s)
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @return None
N * \hideinitializer
N */
N#define BPWM_ENABLE_OUTPUT_INVERTER(bpwm, u32ChannelMask) ((bpwm)->POLCTL |= (u32ChannelMask))
N
N/**
N * @brief This macro get captured rising data
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelNum BPWM channel number. Valid values are between 0~5
N * @return None
N * \hideinitializer
N */
N#define BPWM_GET_CAPTURE_RISING_DATA(bpwm, u32ChannelNum) (*(__IO uint32_t *) (&((bpwm)->RCAPDAT0) + 2 * (u32ChannelNum)))
N
N/**
N * @brief This macro get captured falling data
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelNum BPWM channel number. Valid values are between 0~5
N * @return None
N * \hideinitializer
N */
N#define BPWM_GET_CAPTURE_FALLING_DATA(bpwm, u32ChannelNum) (*(__IO uint32_t *) (&((bpwm)->FCAPDAT0) + 2 * (u32ChannelNum)))
N
N/**
N * @brief This macro mask output logic to high or low
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32LevelMask Output logic to high or low
N * @return None
N * \hideinitializer
N */
N#define BPWM_MASK_OUTPUT(bpwm, u32ChannelMask, u32LevelMask) \
N    do{ \
N        int i;\
N        for(i = 0; i < 6; i++) { \
N            if((u32ChannelMask) & (1 << i)){ \
N                (bpwm)->MSKEN |= (1UL << i); \
N                (bpwm)->MSK = ((bpwm)->MSK & ~(1UL << i)) | ((u32LevelMask) << i); \
N            } \
N        } \
N    }while(0)
X#define BPWM_MASK_OUTPUT(bpwm, u32ChannelMask, u32LevelMask)     do{         int i;        for(i = 0; i < 6; i++) {             if((u32ChannelMask) & (1 << i)){                 (bpwm)->MSKEN |= (1UL << i);                 (bpwm)->MSK = ((bpwm)->MSK & ~(1UL << i)) | ((u32LevelMask) << i);             }         }     }while(0)
N
N/**
N * @brief This macro set the prescaler of all channels
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelNum BPWM channel number. This parameter is not used.
N * @param[in] u32Prescaler Clock prescaler of specified channel. Valid values are between 1 ~ 0xFFF
N * @return None
N * \hideinitializer
N */
N#define BPWM_SET_PRESCALER(bpwm, u32ChannelNum, u32Prescaler) ((bpwm)->CLKPSC = (u32Prescaler))
N
N/**
N* @brief This macro get the prescaler of the selected channel
N* @param[in] bpwm The pointer of the specified BPWM module
N*                - BPWM0 : BPWM Group 0
N*                - BPWM1 : BPWM Group 1
N* @param[in] u32ChannelNum BPWM channel number. Valid values are between 0~5. This parameter is not used.
N* @return Return Clock prescaler of specified channel. Valid values are between 0 ~ 0xFFF
N* @details This macro is used to get the prescaler of specified channel.
N* @note All channels share channel 0's setting.
N*       The clock of BPWM counter is divided by (u32Prescaler + 1).
N* \hideinitializer
N*/
N#define BPWM_GET_PRESCALER(bpwm, u32ChannelNum) (*(__IO uint32_t *) (&((bpwm)->CLKPSC)))
N
N/**
N * @brief This macro set the duty of the selected channel
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelNum BPWM channel number. Valid values are between 0~5
N * @param[in] u32CMR Duty of specified channel. Valid values are between 0~0xFFFF
N * @return None
N * @note This new setting will take effect on next BPWM period
N * \hideinitializer
N */
N#define BPWM_SET_CMR(bpwm, u32ChannelNum, u32CMR) ((bpwm)->CMPDAT[(u32ChannelNum)] = (u32CMR))
N
N/**
N * @brief This macro get the comparator of the selected channel
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelNum BPWM channel number. Valid values are between 0~5
N * @return Return the comparator of specified channel. Valid values are between 0~0xFFFF
N * @details This macro is used to get the comparator of specified channel.
N * \hideinitializer
N */
N#define BPWM_GET_CMR(bpwm, u32ChannelNum) ((bpwm)->CMPDAT[(u32ChannelNum)])
N
N/**
N * @brief This macro set the period of all channels
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelNum BPWM channel number. This parameter is not used.
N * @param[in] u32CNR Period of specified channel. Valid values are between 0~0xFFFF
N * @return None
N * @note This new setting will take effect on next BPWM period
N * @note BPWM counter will stop if period length set to 0
N * \hideinitializer
N */
N#define BPWM_SET_CNR(bpwm, u32ChannelNum, u32CNR) ((bpwm)->PERIOD = (u32CNR))
N
N/**
N * @brief This macro get the period of the selected channel
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelNum BPWM channel number. Valid values are between 0~5. This parameter is not used.
N * @return Return the period of specified channel. Valid values are between 0~0xFFFF
N * @details This macro is used to get the period of specified channel.
N * \hideinitializer
N */
N#define BPWM_GET_CNR(bpwm, u32ChannelNum)  ((bpwm)->PERIOD)
N
N/**
N * @brief This macro set the BPWM aligned type
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. This parameter is not used.
N * @param[in] u32AlignedType BPWM aligned type, valid values are:
N *              - \ref BPWM_UP_COUNTER
N *              - \ref BPWM_DOWN_COUNTER
N *              - \ref BPWM_UP_DOWN_COUNTER
N * @return None
N * @note All channels share channel 0's setting.
N * \hideinitializer
N */
N#define BPWM_SET_ALIGNED_TYPE(bpwm, u32ChannelMask, u32AlignedType) ((bpwm)->CTL1 = (u32AlignedType))
N
N/**
N * @brief This macro s used to clear counter of all channels
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. This parameter is not used.
N * @return None
N * \hideinitializer
N */
N#define BPWM_CLR_COUNTER(bpwm, u32ChannelMask) ((bpwm)->CNTCLR = (BPWM_CNTCLR_CNTCLR0_Msk))
N
N/**
N * @brief Set output level at zero, compare up, period(center) and compare down of specified channel(s)
N * @param[in] bpwm The pointer of the specified BPWM module
N *                - BPWM0 : BPWM Group 0
N *                - BPWM1 : BPWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32ZeroLevel output level at zero point, valid values are:
N *              - \ref BPWM_OUTPUT_NOTHING
N *              - \ref BPWM_OUTPUT_LOW
N *              - \ref BPWM_OUTPUT_HIGH
N *              - \ref BPWM_OUTPUT_TOGGLE
N * @param[in] u32CmpUpLevel output level at compare up point, valid values are:
N *              - \ref BPWM_OUTPUT_NOTHING
N *              - \ref BPWM_OUTPUT_LOW
N *              - \ref BPWM_OUTPUT_HIGH
N *              - \ref BPWM_OUTPUT_TOGGLE
N * @param[in] u32PeriodLevel output level at period(center) point, valid values are:
N *              - \ref BPWM_OUTPUT_NOTHING
N *              - \ref BPWM_OUTPUT_LOW
N *              - \ref BPWM_OUTPUT_HIGH
N *              - \ref BPWM_OUTPUT_TOGGLE
N * @param[in] u32CmpDownLevel output level at compare down point, valid values are:
N *              - \ref BPWM_OUTPUT_NOTHING
N *              - \ref BPWM_OUTPUT_LOW
N *              - \ref BPWM_OUTPUT_HIGH
N *              - \ref BPWM_OUTPUT_TOGGLE
N * @return None
N * @details This macro is used to Set output level at zero, compare up, period(center) and compare down of specified channel(s)
N * \hideinitializer
N */
N#define BPWM_SET_OUTPUT_LEVEL(bpwm, u32ChannelMask, u32ZeroLevel, u32CmpUpLevel, u32PeriodLevel, u32CmpDownLevel) \
N    do{ \
N        int i; \
N        for(i = 0; i < 6; i++) { \
N            if((u32ChannelMask) & (1 << i)) { \
N                (bpwm)->WGCTL0 = (((bpwm)->WGCTL0 & ~(3UL << (2 * i))) | ((u32ZeroLevel) << (2 * i))); \
N                (bpwm)->WGCTL0 = (((bpwm)->WGCTL0 & ~(3UL << (BPWM_WGCTL0_PRDPCTL0_Pos + (2 * i)))) | ((u32PeriodLevel) << (BPWM_WGCTL0_PRDPCTL0_Pos + (2 * i)))); \
N                (bpwm)->WGCTL1 = (((bpwm)->WGCTL1 & ~(3UL << (2 * i))) | ((u32CmpUpLevel) << (2 * i))); \
N                (bpwm)->WGCTL1 = (((bpwm)->WGCTL1 & ~(3UL << (BPWM_WGCTL1_CMPDCTL0_Pos + (2 * i)))) | ((u32CmpDownLevel) << (BPWM_WGCTL1_CMPDCTL0_Pos + (2 * i)))); \
N            } \
N        } \
N    }while(0)
X#define BPWM_SET_OUTPUT_LEVEL(bpwm, u32ChannelMask, u32ZeroLevel, u32CmpUpLevel, u32PeriodLevel, u32CmpDownLevel)     do{         int i;         for(i = 0; i < 6; i++) {             if((u32ChannelMask) & (1 << i)) {                 (bpwm)->WGCTL0 = (((bpwm)->WGCTL0 & ~(3UL << (2 * i))) | ((u32ZeroLevel) << (2 * i)));                 (bpwm)->WGCTL0 = (((bpwm)->WGCTL0 & ~(3UL << (BPWM_WGCTL0_PRDPCTL0_Pos + (2 * i)))) | ((u32PeriodLevel) << (BPWM_WGCTL0_PRDPCTL0_Pos + (2 * i))));                 (bpwm)->WGCTL1 = (((bpwm)->WGCTL1 & ~(3UL << (2 * i))) | ((u32CmpUpLevel) << (2 * i)));                 (bpwm)->WGCTL1 = (((bpwm)->WGCTL1 & ~(3UL << (BPWM_WGCTL1_CMPDCTL0_Pos + (2 * i)))) | ((u32CmpDownLevel) << (BPWM_WGCTL1_CMPDCTL0_Pos + (2 * i))));             }         }     }while(0)
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define BPWM functions prototype                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
Nuint32_t BPWM_ConfigCaptureChannel(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32UnitTimeNsec, uint32_t u32CaptureEdge);
Nuint32_t BPWM_ConfigOutputChannel(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Frequency, uint32_t u32DutyCycle);
Nvoid BPWM_Start(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_Stop(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_ForceStop(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_EnableADCTrigger(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Condition);
Nvoid BPWM_DisableADCTrigger(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_ClearADCTriggerFlag(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Condition);
Nuint32_t BPWM_GetADCTriggerFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_EnableCapture(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_DisableCapture(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_EnableOutput(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_DisableOutput(BPWM_T *bpwm, uint32_t u32ChannelMask);
Nvoid BPWM_EnableCaptureInt(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nvoid BPWM_DisableCaptureInt(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nvoid BPWM_ClearCaptureIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nuint32_t BPWM_GetCaptureIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_EnableDutyInt(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32IntDutyType);
Nvoid BPWM_DisableDutyInt(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_ClearDutyIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nuint32_t BPWM_GetDutyIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_EnablePeriodInt(BPWM_T *bpwm, uint32_t u32ChannelNum,  uint32_t u32IntPeriodType);
Nvoid BPWM_DisablePeriodInt(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_ClearPeriodIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nuint32_t BPWM_GetPeriodIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_EnableZeroInt(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_DisableZeroInt(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_ClearZeroIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nuint32_t BPWM_GetZeroIntFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_EnableLoadMode(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
Nvoid BPWM_DisableLoadMode(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
Nvoid BPWM_SetClockSource(BPWM_T *bpwm, uint32_t u32ChannelNum, uint32_t u32ClkSrcSel);
Nuint32_t BPWM_GetWrapAroundFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
Nvoid BPWM_ClearWrapAroundFlag(BPWM_T *bpwm, uint32_t u32ChannelNum);
N
N
N/*@}*/ /* end of group BPWM_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group BPWM_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__BPWM_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 376 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "clk.h"
L 1 "..\..\..\..\Library\StdDriver\inc\clk.h" 1
N/**************************************************************************//**
N * @file     clk.h
N * @version  V3.00
N * @brief    NUC121 series CLK driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N#ifndef __CLK_H__
N#define __CLK_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup CLK_Driver CLK Driver
N  @{
N*/
N
N/** @addtogroup CLK_EXPORTED_CONSTANTS CLK Exported Constants
N  @{
N*/
N
N#define FREQ_25MHZ         25000000
N#define FREQ_48MHZ         48000000
N#define FREQ_50MHZ         50000000
N#define FREQ_72MHZ         72000000
N#define FREQ_96MHZ         96000000
N#define FREQ_125MHZ        125000000
N#define FREQ_200MHZ        200000000
N#define FREQ_250MHZ        250000000
N#define FREQ_500MHZ        500000000
N
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  PWRCTL constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_PWRCTL_DISABLE_XTL   (0x00UL<<CLK_PWRCTL_XTLEN_Pos)             /*!< Disable HXT and LXT       */
N#define CLK_PWRCTL_HXTEN         (0x01UL<<CLK_PWRCTL_XTLEN_Pos)             /*!< Enable clock source HXT   */
N#define CLK_PWRCTL_LXTEN         (0x02UL<<CLK_PWRCTL_XTLEN_Pos)             /*!< Enable clock source LXT   */
N#define CLK_PWRCTL_HIRCEN        (CLK_PWRCTL_HIRCEN_Msk)                    /*!< Enable clock source HIRC  */
N#define CLK_PWRCTL_LIRCEN        (CLK_PWRCTL_LIRCEN_Msk)                    /*!< Enable clock source LIRC  */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CLKSEL0 constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_CLKSEL0_HCLKSEL_HXT        (0x00UL<<CLK_CLKSEL0_HCLKSEL_Pos)    /*!< Setting HCLK clock source as HXT   */
N#define CLK_CLKSEL0_HCLKSEL_LXT        (0x01UL<<CLK_CLKSEL0_HCLKSEL_Pos)    /*!< Setting HCLK clock source as LXT   */
N#define CLK_CLKSEL0_HCLKSEL_PLL        (0x02UL<<CLK_CLKSEL0_HCLKSEL_Pos)    /*!< Setting HCLK clock source as PLL   */
N#define CLK_CLKSEL0_HCLKSEL_LIRC       (0x03UL<<CLK_CLKSEL0_HCLKSEL_Pos)    /*!< Setting HCLK clock source as LIRC  */
N#define CLK_CLKSEL0_HCLKSEL_HIRC       (0x04UL<<CLK_CLKSEL0_HCLKSEL_Pos)    /*!< Setting HCLK clock source as HIRC  */
N#define CLK_CLKSEL0_HCLKSEL_PLL_DIV2   (0x05UL<<CLK_CLKSEL0_HCLKSEL_Pos)    /*!< Setting HCLK clock source as PLL/2 */
N#define CLK_CLKSEL0_HCLKSEL_HIRC_DIV2  (0x07UL<<CLK_CLKSEL0_HCLKSEL_Pos)    /*!< Setting HCLK clock source as HIRC/2*/
N
N#define CLK_CLKSEL0_STCLKSEL_HXT       (0x00UL<<CLK_CLKSEL0_STCLKSEL_Pos)   /*!< Setting SysTick clock source as HXT */
N#define CLK_CLKSEL0_STCLKSEL_LXT       (0x01UL<<CLK_CLKSEL0_STCLKSEL_Pos)   /*!< Setting SysTick clock source as LXT */
N#define CLK_CLKSEL0_STCLKSEL_HXT_DIV2  (0x02UL<<CLK_CLKSEL0_STCLKSEL_Pos)   /*!< Setting SysTick clock source as HXT */
N#define CLK_CLKSEL0_STCLKSEL_HCLK_DIV2 (0x03UL<<CLK_CLKSEL0_STCLKSEL_Pos)   /*!< Setting SysTick clock source as HCLK/2 */
N#define CLK_CLKSEL0_STCLKSEL_HIRC_DIV4 (0x07UL<<CLK_CLKSEL0_STCLKSEL_Pos)   /*!< Setting SysTick clock source as HIRC/2 */
N#define CLK_CLKSEL0_STCLKSEL_HCLK      (0x01UL<<SysTick_CTRL_CLKSOURCE_Pos) /*!< Setting SysTick clock source as HCLK */
N
N#define CLK_CLKSEL0_PCLK0SEL_HCLK      (0x00UL<<CLK_CLKSEL0_PCLK0SEL_Pos)   /*!< Setting PCLK0 clock source as HCLK */
N#define CLK_CLKSEL0_PCLK0SEL_HCLK_DIV2 (0x01UL<<CLK_CLKSEL0_PCLK0SEL_Pos)   /*!< Setting PCLK0 clock source as HCLK/2 */
N
N#define CLK_CLKSEL0_PCLK1SEL_HCLK      (0x00UL<<CLK_CLKSEL0_PCLK1SEL_Pos)   /*!< Setting PCLK1 clock source as HCLK */
N#define CLK_CLKSEL0_PCLK1SEL_HCLK_DIV2 (0x01UL<<CLK_CLKSEL0_PCLK1SEL_Pos)   /*!< Setting PCLK1 clock source as HCLK/2 */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CLKSEL1 constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_CLKSEL1_WDTSEL_LXT           (0x1UL<<CLK_CLKSEL1_WDTSEL_Pos)  /*!< Setting WDT clock source as LXT */
N#define CLK_CLKSEL1_WDTSEL_HCLK_DIV2048  (0x2UL<<CLK_CLKSEL1_WDTSEL_Pos)  /*!< Setting WDT clock source as HCLK/2048 */
N#define CLK_CLKSEL1_WDTSEL_LIRC          (0x3UL<<CLK_CLKSEL1_WDTSEL_Pos)  /*!< Setting WDT clock source as LIRC */
N
N#define CLK_CLKSEL1_ADCSEL_HXT           (0x0UL<<CLK_CLKSEL1_ADCSEL_Pos)  /*!< Setting ADC clock source as HXT */
N#define CLK_CLKSEL1_ADCSEL_PLL           (0x1UL<<CLK_CLKSEL1_ADCSEL_Pos)  /*!< Setting ADC clock source as PLL */
N#define CLK_CLKSEL1_ADCSEL_PCLK0         (0x2UL<<CLK_CLKSEL1_ADCSEL_Pos)  /*!< Setting ADC clock source as PCLK0 */
N#define CLK_CLKSEL1_ADCSEL_HIRC          (0x3UL<<CLK_CLKSEL1_ADCSEL_Pos)  /*!< Setting ADC clock source as HIRC */
N
N#define CLK_CLKSEL1_TMR0SEL_HXT          (0x0UL<<CLK_CLKSEL1_TMR0SEL_Pos) /*!< Setting Timer 0 clock source as HXT */
N#define CLK_CLKSEL1_TMR0SEL_LXT          (0x1UL<<CLK_CLKSEL1_TMR0SEL_Pos) /*!< Setting Timer 0 clock source as LXT */
N#define CLK_CLKSEL1_TMR0SEL_PCLK0        (0x2UL<<CLK_CLKSEL1_TMR0SEL_Pos) /*!< Setting Timer 0 clock source as PCLK0 */
N#define CLK_CLKSEL1_TMR0SEL_EXT_TRG      (0x3UL<<CLK_CLKSEL1_TMR0SEL_Pos) /*!< Setting Timer 0 clock source as external trigger */
N#define CLK_CLKSEL1_TMR0SEL_LIRC         (0x5UL<<CLK_CLKSEL1_TMR0SEL_Pos) /*!< Setting Timer 0 clock source as LIRC */
N#define CLK_CLKSEL1_TMR0SEL_HIRC_DIV2    (0x7UL<<CLK_CLKSEL1_TMR0SEL_Pos) /*!< Setting Timer 0 clock source as HIRC_DIV2 */
N
N#define CLK_CLKSEL1_TMR1SEL_HXT          (0x0UL<<CLK_CLKSEL1_TMR1SEL_Pos) /*!< Setting Timer 1 clock source as HXT */
N#define CLK_CLKSEL1_TMR1SEL_LXT          (0x1UL<<CLK_CLKSEL1_TMR1SEL_Pos) /*!< Setting Timer 1 clock source as LXT */
N#define CLK_CLKSEL1_TMR1SEL_PCLK0        (0x2UL<<CLK_CLKSEL1_TMR1SEL_Pos) /*!< Setting Timer 1 clock source as PCLK0 */
N#define CLK_CLKSEL1_TMR1SEL_EXT_TRG      (0x3UL<<CLK_CLKSEL1_TMR1SEL_Pos) /*!< Setting Timer 1 clock source as external trigger */
N#define CLK_CLKSEL1_TMR1SEL_LIRC         (0x5UL<<CLK_CLKSEL1_TMR1SEL_Pos) /*!< Setting Timer 1 clock source as LIRC */
N#define CLK_CLKSEL1_TMR1SEL_HIRC_DIV2    (0x7UL<<CLK_CLKSEL1_TMR1SEL_Pos) /*!< Setting Timer 1 clock source as HIRC_DIV2 */
N
N#define CLK_CLKSEL1_TMR2SEL_HXT          (0x0UL<<CLK_CLKSEL1_TMR2SEL_Pos) /*!< Setting Timer 2 clock source as HXT */
N#define CLK_CLKSEL1_TMR2SEL_LXT          (0x1UL<<CLK_CLKSEL1_TMR2SEL_Pos) /*!< Setting Timer 2 clock source as LXT */
N#define CLK_CLKSEL1_TMR2SEL_PCLK1        (0x2UL<<CLK_CLKSEL1_TMR2SEL_Pos) /*!< Setting Timer 2 clock source as PCLK1 */
N#define CLK_CLKSEL1_TMR2SEL_EXT_TRG      (0x3UL<<CLK_CLKSEL1_TMR2SEL_Pos) /*!< Setting Timer 2 clock source as external trigger */
N#define CLK_CLKSEL1_TMR2SEL_LIRC         (0x5UL<<CLK_CLKSEL1_TMR2SEL_Pos) /*!< Setting Timer 2 clock source as LIRC */
N#define CLK_CLKSEL1_TMR2SEL_HIRC_DIV2    (0x7UL<<CLK_CLKSEL1_TMR2SEL_Pos) /*!< Setting Timer 2 clock source as HIRC_DIV2 */
N
N#define CLK_CLKSEL1_TMR3SEL_HXT          (0x0UL<<CLK_CLKSEL1_TMR3SEL_Pos) /*!< Setting Timer 3 clock source as HXT */
N#define CLK_CLKSEL1_TMR3SEL_LXT          (0x1UL<<CLK_CLKSEL1_TMR3SEL_Pos) /*!< Setting Timer 3 clock source as LXT */
N#define CLK_CLKSEL1_TMR3SEL_PCLK1        (0x2UL<<CLK_CLKSEL1_TMR3SEL_Pos) /*!< Setting Timer 3 clock source as PCLK1 */
N#define CLK_CLKSEL1_TMR3SEL_EXT_TRG      (0x3UL<<CLK_CLKSEL1_TMR3SEL_Pos) /*!< Setting Timer 3 clock source as external trigger */
N#define CLK_CLKSEL1_TMR3SEL_LIRC         (0x5UL<<CLK_CLKSEL1_TMR3SEL_Pos) /*!< Setting Timer 3 clock source as LIRC */
N#define CLK_CLKSEL1_TMR3SEL_HIRC_DIV2    (0x7UL<<CLK_CLKSEL1_TMR3SEL_Pos) /*!< Setting Timer 3 clock source as HIRC_DIV2 */
N
N#define CLK_CLKSEL1_UARTSEL_HXT          (0x0UL<<CLK_CLKSEL1_UARTSEL_Pos) /*!< Setting UART clock source as HXT */
N#define CLK_CLKSEL1_UARTSEL_PLL          (0x1UL<<CLK_CLKSEL1_UARTSEL_Pos) /*!< Setting UART clock source as PLL */
N#define CLK_CLKSEL1_UARTSEL_LXT          (0x2UL<<CLK_CLKSEL1_UARTSEL_Pos) /*!< Setting UART clock source as LXT */
N#define CLK_CLKSEL1_UARTSEL_HIRC_DIV2    (0x3UL<<CLK_CLKSEL1_UARTSEL_Pos) /*!< Setting UART clock source as HIRC */
N
N#define CLK_CLKSEL1_BPWM0SEL_PLL         (0x0UL<<CLK_CLKSEL1_BPWM0SEL_Pos)/*!< Setting BPWM0 clock source as PLL */
N#define CLK_CLKSEL1_BPWM0SEL_PCLK0       (0x1UL<<CLK_CLKSEL1_BPWM0SEL_Pos)/*!< Setting BPWM0 clock source as PCLK0 */
N
N#define CLK_CLKSEL1_BPWM1SEL_PLL         (0x0UL<<CLK_CLKSEL1_BPWM1SEL_Pos)/*!< Setting BPWM1 clock source as PLL */
N#define CLK_CLKSEL1_BPWM1SEL_PCLK1       (0x1UL<<CLK_CLKSEL1_BPWM1SEL_Pos)/*!< Setting BPWM1 clock source as PCLK1 */
N
N#define CLK_CLKSEL1_PWM0SEL_PLL          (0x0UL<<CLK_CLKSEL1_PWM0SEL_Pos) /*!< Setting PWM0 clock source as PLL */
N#define CLK_CLKSEL1_PWM0SEL_PCLK0        (0x1UL<<CLK_CLKSEL1_PWM0SEL_Pos) /*!< Setting PWM0 clock source as PCLK0 */
N
N#define CLK_CLKSEL1_PWM1SEL_PLL          (0x0UL<<CLK_CLKSEL1_PWM1SEL_Pos) /*!< Setting PWM1 clock source as PLL */
N#define CLK_CLKSEL1_PWM1SEL_PCLK1        (0x1UL<<CLK_CLKSEL1_PWM1SEL_Pos) /*!< Setting PWM1 clock source as PCLK1 */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CLKSEL2 constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_CLKSEL2_CLKOSEL_HXT             (0x0UL<<CLK_CLKSEL2_CLKOSEL_Pos) /*!< Setting CLKO clock source as HXT */
N#define CLK_CLKSEL2_CLKOSEL_LXT             (0x1UL<<CLK_CLKSEL2_CLKOSEL_Pos) /*!< Setting CLKO clock source as LXT */
N#define CLK_CLKSEL2_CLKOSEL_HCLK            (0x2UL<<CLK_CLKSEL2_CLKOSEL_Pos) /*!< Setting CLKO clock source as HCLK */
N#define CLK_CLKSEL2_CLKOSEL_HIRC_DIV2       (0x3UL<<CLK_CLKSEL2_CLKOSEL_Pos) /*!< Setting CLKO clock source as HIRC_DIV2 */
N#define CLK_CLKSEL2_CLKOSEL_HIRC            (0x5UL<<CLK_CLKSEL2_CLKOSEL_Pos) /*!< Setting CLKO clock source as HIRC_DIV2 */
N#define CLK_CLKSEL2_CLKOSEL_SOF             (0x7UL<<CLK_CLKSEL2_CLKOSEL_Pos) /*!< Setting CLKO clock source as HIRC_DIV2 */
N
N#define CLK_CLKSEL2_WWDTSEL_HCLK_DIV2048    (0x2UL<<CLK_CLKSEL2_WWDTSEL_Pos) /*!< Setting WWDT clock source as HCLK/2048 */
N#define CLK_CLKSEL2_WWDTSEL_LIRC            (0x3UL<<CLK_CLKSEL2_WWDTSEL_Pos) /*!< Setting WWDT clock source as LIRC */
N
N#define CLK_CLKSEL2_SPI0SEL_HXT             (0x0UL<<CLK_CLKSEL2_SPI0SEL_Pos) /*!< Setting SPI clock source as HXT */
N#define CLK_CLKSEL2_SPI0SEL_PLL             (0x1UL<<CLK_CLKSEL2_SPI0SEL_Pos) /*!< Setting SPI clock source as PLL */
N#define CLK_CLKSEL2_SPI0SEL_PCLK0           (0x2UL<<CLK_CLKSEL2_SPI0SEL_Pos) /*!< Setting SPI clock source as PCLK0 */
N#define CLK_CLKSEL2_SPI0SEL_HIRC            (0x3UL<<CLK_CLKSEL2_SPI0SEL_Pos) /*!< Setting SPI clock source as HIRC */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CLKSEL3 constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_CLKSEL3_USBDSEL_HIRC       (0x0U << CLK_CLKSEL3_USBDSEL_Pos)    /*!< Setting USBD clock source as HIRC(48MHz) */
N#define CLK_CLKSEL3_USBDSEL_PLL        (0x1U << CLK_CLKSEL3_USBDSEL_Pos)    /*!< Setting USBD clock source as PLL */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  CLKDIV0 constant definitions.                                                                           */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_CLKDIV0_HCLK(x)     (((x)-1) << CLK_CLKDIV0_HCLKDIV_Pos) /*!< CLKDIV0 Setting for HCLK clock divider. It could be 1~16 */
N#define CLK_CLKDIV0_USB(x)      (((x)-1) << CLK_CLKDIV0_USBDIV_Pos)  /*!< CLKDIV0 Setting for USB clock divider. It could be 1~16 */
N#define CLK_CLKDIV0_UART(x)     (((x)-1) << CLK_CLKDIV0_UARTDIV_Pos) /*!< CLKDIV0 Setting for UART clock divider. It could be 1~16 */
N#define CLK_CLKDIV0_ADC(x)      (((x)-1) << CLK_CLKDIV0_ADCDIV_Pos)  /*!< CLKDIV0 Setting for ADC clock divider. It could be 1~256 */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  PLLCTL constant definitions. PLL = FIN * NF / NR / NO                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
N#define CLK_PLLCTL_PLLSRC_HXT       0x00000000UL    /*!< For PLL clock source is HXT.  4~12MHz < FIN < 24MHz */
N#define CLK_PLLCTL_PLLSRC_HIRC_DIV2 0x00880000UL    /*!< For PLL clock source is HIRC/2. 24 MHz< FIN < 24MHz */
N
N#define CLK_PLLCTL_NF(x)        ((x)-2)         /*!< x must be constant and 2 <= x <= 513. 200MHz < FIN*NF/NR < 500MHz. (FIN*NF/NR > 250MHz is preferred.) */
N#define CLK_PLLCTL_NR(x)        (((x)-2)<<9)    /*!< x must be constant and 2 <= x <= 33.  1.6MHz < FIN/NR < 16MHz */
N
N#define CLK_PLLCTL_NO_1         0x0000UL        /*!< For output divider is 1 */
N#define CLK_PLLCTL_NO_2         0x4000UL        /*!< For output divider is 2 */
N#define CLK_PLLCTL_NO_4         0xC000UL        /*!< For output divider is 4 */
N
N#define CLK_PLLCTL_50MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(50)     | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 50MHz PLL output with HXT(12MHz X'tal) */
N#define CLK_PLLCTL_56MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(56)     | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 56MHz PLL output with HXT(12MHz X'tal) */
N#define CLK_PLLCTL_64MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(64)     | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 64MHz PLL output with HXT(12MHz X'tal) */
N#define CLK_PLLCTL_72MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(72)     | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 72MHz PLL output with HXT(12MHz X'tal) */
N#define CLK_PLLCTL_80MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(80)     | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 80MHz PLL output with HXT(12MHz X'tal) */
N#define CLK_PLLCTL_86MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(86)     | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 86MHz PLL output with HXT(12MHz X'tal) */
N#define CLK_PLLCTL_94MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(94)     | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 94MHz PLL output with HXT(12MHz X'tal) */
N#define CLK_PLLCTL_96MHz_HXT        (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(96)     | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 96MHz PLL output with HXT(12MHz X'tal) */
N#define CLK_PLLCTL_100MHz_HXT       (CLK_PLLCTL_PLLSRC_HXT  | CLK_PLLCTL_NR(3)  | CLK_PLLCTL_NF(100)    | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 100MHz PLL output with HXT(12MHz X'tal) */
N
N
N#define CLK_PLLCTL_50MHz_HIRC_DIV2  (CLK_PLLCTL_PLLSRC_HIRC_DIV2 | CLK_PLLCTL_NR(3) |CLK_PLLCTL_NF(25) | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 50MHz PLL output with HIRC_DIV2(24MHz IRC) */
N#define CLK_PLLCTL_56MHz_HIRC_DIV2  (CLK_PLLCTL_PLLSRC_HIRC_DIV2 | CLK_PLLCTL_NR(3) |CLK_PLLCTL_NF(28) | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 56MHz PLL output with HIRC_DIV2(24MHz IRC) */
N#define CLK_PLLCTL_64MHz_HIRC_DIV2  (CLK_PLLCTL_PLLSRC_HIRC_DIV2 | CLK_PLLCTL_NR(3) |CLK_PLLCTL_NF(32) | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 64MHz PLL output with HIRC_DIV2(24MHz IRC) */
N#define CLK_PLLCTL_72MHz_HIRC_DIV2  (CLK_PLLCTL_PLLSRC_HIRC_DIV2 | CLK_PLLCTL_NR(3) |CLK_PLLCTL_NF(36) | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 72MHz PLL output with HIRC_DIV2(24MHz IRC) */
N#define CLK_PLLCTL_80MHz_HIRC_DIV2  (CLK_PLLCTL_PLLSRC_HIRC_DIV2 | CLK_PLLCTL_NR(3) |CLK_PLLCTL_NF(40) | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 80MHz PLL output with HIRC_DIV2(24MHz IRC) */
N#define CLK_PLLCTL_86MHz_HIRC_DIV2  (CLK_PLLCTL_PLLSRC_HIRC_DIV2 | CLK_PLLCTL_NR(3) |CLK_PLLCTL_NF(43) | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 86MHz PLL output with HIRC_DIV2(24MHz IRC) */
N#define CLK_PLLCTL_94MHz_HIRC_DIV2  (CLK_PLLCTL_PLLSRC_HIRC_DIV2 | CLK_PLLCTL_NR(3) |CLK_PLLCTL_NF(47) | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 94MHz PLL output with HIRC_DIV2(24MHz IRC) */
N#define CLK_PLLCTL_96MHz_HIRC_DIV2  (CLK_PLLCTL_PLLSRC_HIRC_DIV2 | CLK_PLLCTL_NR(3) |CLK_PLLCTL_NF(48) | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 96MHz PLL output with HIRC_DIV2(24MHz IRC) */
N#define CLK_PLLCTL_100MHz_HIRC_DIV2 (CLK_PLLCTL_PLLSRC_HIRC_DIV2 | CLK_PLLCTL_NR(3) |CLK_PLLCTL_NF(50) | CLK_PLLCTL_NO_4) /*!< Predefined PLLCTL setting for 100MHz PLL output with HIRC_DIV2(24MHz IRC) */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  MODULE constant definitions.                                                                           */
N/*---------------------------------------------------------------------------------------------------------*/
N/* APBCLK(31:30)|CLKSEL(29:28)|CLKSEL_Msk(27:25) |CLKSEL_Pos(24:20)|CLKDIV(19:18)|CLKDIV_Msk(17:10)|CLKDIV_Pos(9:5)|IP_EN_Pos(4:0) */
N
N#define MODULE_APBCLK(x)        (((x) >>30) & 0x3)    /*!< Calculate AHBCLK/APBCLK offset on MODULE index, 0x0:AHBCLK, 0x1:APBCLK0, 0x2:APBCLK1 */
N#define MODULE_CLKSEL(x)        (((x) >>28) & 0x3)    /*!< Calculate CLKSEL offset on MODULE index, 0x0:CLKSEL0, 0x1:CLKSEL1, 0x2:CLKSEL2, 0x3:CLKSEL3 */
N#define MODULE_CLKSEL_Msk(x)    (((x) >>25) & 0x7)    /*!< Calculate CLKSEL mask offset on MODULE index */
N#define MODULE_CLKSEL_Pos(x)    (((x) >>20) & 0x1f)   /*!< Calculate CLKSEL position offset on MODULE index */
N#define MODULE_CLKDIV(x)        (((x) >>18) & 0x3)    /*!< Calculate APBCLK CLKDIV on MODULE index, 0x0:CLKDIV, 0x1:CLKDIV1 */
N#define MODULE_CLKDIV_Msk(x)    (((x) >>10) & 0xff)   /*!< Calculate CLKDIV mask offset on MODULE index */
N#define MODULE_CLKDIV_Pos(x)    (((x) >>5 ) & 0x1f)   /*!< Calculate CLKDIV position offset on MODULE index */
N#define MODULE_IP_EN_Pos(x)     (((x) >>0 ) & 0x1f)   /*!< Calculate APBCLK offset on MODULE index */
N#define MODULE_NoMsk            0x0                   /*!< Not mask on MODULE index */
N#define NA                      MODULE_NoMsk          /*!< Not Available */
N
N#define MODULE_APBCLK_ENC(x)        (((x) & 0x03) << 30)   /*!< MODULE index, 0x0:AHBCLK, 0x1:APBCLK0, 0x2:APBCLK1 */
N#define MODULE_CLKSEL_ENC(x)        (((x) & 0x03) << 28)   /*!< CLKSEL offset on MODULE index, 0x0:CLKSEL0, 0x1:CLKSEL1, 0x2:CLKSEL2, 0x3:CLKSEL3 */
N#define MODULE_CLKSEL_Msk_ENC(x)    (((x) & 0x07) << 25)   /*!< CLKSEL mask offset on MODULE index */
N#define MODULE_CLKSEL_Pos_ENC(x)    (((x) & 0x1f) << 20)   /*!< CLKSEL position offset on MODULE index */
N#define MODULE_CLKDIV_ENC(x)        (((x) & 0x03) << 18)   /*!< APBCLK CLKDIV on MODULE index, 0x0:CLKDIV, 0x1:CLKDIV1 */
N#define MODULE_CLKDIV_Msk_ENC(x)    (((x) & 0xff) << 10)   /*!< CLKDIV mask offset on MODULE index */
N#define MODULE_CLKDIV_Pos_ENC(x)    (((x) & 0x1f) <<  5)   /*!< CLKDIV position offset on MODULE index */
N#define MODULE_IP_EN_Pos_ENC(x)     (((x) & 0x1f) <<  0)   /*!< AHBCLK/APBCLK offset on MODULE index */
N
N
N//AHBCLK
N#define PDMA_MODULE    (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_PDMACKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))     /*!< PDMA Module */
X#define PDMA_MODULE    (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_PDMACKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      
N
N#define ISP_MODULE     (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_ISPCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))     /*!< ISP Module */
X#define ISP_MODULE     (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_ISPCKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      
N
N#define GPIOA_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIOACKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< GPIOA Module */
X#define GPIOA_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIOACKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define GPIOB_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIOBCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< GPIOB Module */
X#define GPIOB_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIOBCKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define GPIOC_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIOCCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< GPIOC Module */
X#define GPIOC_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIOCCKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define GPIOD_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIODCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< GPIOD Module */
X#define GPIOD_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIODCKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define GPIOE_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIOECKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< GPIOE Module */
X#define GPIOE_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIOECKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define GPIOF_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIOFCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< GPIOF Module */
X#define GPIOF_MODULE   (MODULE_APBCLK_ENC( 0)|MODULE_IP_EN_Pos_ENC(CLK_AHBCLK_GPIOFCKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N//APBCLK0
N#define WDT_MODULE     (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_WDTCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC( 0)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< WDT Module */
X#define WDT_MODULE     (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_WDTCKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC( 0)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define WWDT_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_WDTCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(16)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< WWDT Module */
X#define WWDT_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_WDTCKEN_Pos)|                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(16)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define TMR0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR0CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC( 8)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< TMR0 Module */
X#define TMR0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR0CKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC( 8)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define TMR1_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR1CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(12)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< TMR1 Module */
X#define TMR1_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR1CKEN_Pos) |                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(12)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define TMR2_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR2CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(16)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< TMR2 Module */
X#define TMR2_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR2CKEN_Pos) |                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(16)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define TMR3_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR3CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(20)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< TMR3 Module */
X#define TMR3_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_TMR3CKEN_Pos) |                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(20)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define CLKO_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_CLKOCKEN_Pos) |\
N                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(2)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< CLKO Module */
X#define CLKO_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_CLKOCKEN_Pos) |                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 7)|MODULE_CLKSEL_Pos_ENC(2)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define I2C0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_I2C0CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< I2C0 Module */
X#define I2C0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_I2C0CKEN_Pos) |                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define I2C1_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_I2C1CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< I2C1 Module */
X#define I2C1_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_I2C1CKEN_Pos) |                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define SPI0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_SPI0CKEN_Pos) |\
N                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(24)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< SPI0 Module */
X#define SPI0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_SPI0CKEN_Pos) |                        MODULE_CLKSEL_ENC( 2)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(24)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define UART0_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART0CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(24)|\
N                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0x0F)|MODULE_CLKDIV_Pos_ENC( 8))    /*!< UART0 Module */
X#define UART0_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_UART0CKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(24)|                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0x0F)|MODULE_CLKDIV_Pos_ENC( 8))     
N
N#define BPWM0_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_BPWM0CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(28)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< BPWM0 Module */
X#define BPWM0_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_BPWM0CKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(28)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define BPWM1_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_BPWM1CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(29)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< BPWM1 Module */
X#define BPWM1_MODULE   (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_BPWM1CKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(29)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define PWM0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_PWM0CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(30)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< PWM0 Module */
X#define PWM0_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_PWM0CKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(30)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define PWM1_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_PWM1CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(31)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< PWM1 Module */
X#define PWM1_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_PWM1CKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 1)|MODULE_CLKSEL_Pos_ENC(31)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N#define USBD_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_USBDCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(3UL)|MODULE_CLKSEL_Msk_ENC(1)|MODULE_CLKSEL_Pos_ENC(8)|\
N                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0x0F)|MODULE_CLKDIV_Pos_ENC(4))     /*!< USBD Module */
X#define USBD_MODULE    (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_USBDCKEN_Pos)|                        MODULE_CLKSEL_ENC(3UL)|MODULE_CLKSEL_Msk_ENC(1)|MODULE_CLKSEL_Pos_ENC(8)|                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0x0F)|MODULE_CLKDIV_Pos_ENC(4))      
N
N#define ADC_MODULE     (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_ADCCKEN_Pos)|\
N                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(2)|\
N                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0xFF)|MODULE_CLKDIV_Pos_ENC(16))    /*!< ADC Module */
X#define ADC_MODULE     (MODULE_APBCLK_ENC( 1)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK0_ADCCKEN_Pos)|                        MODULE_CLKSEL_ENC( 1)|MODULE_CLKSEL_Msk_ENC( 3)|MODULE_CLKSEL_Pos_ENC(2)|                        MODULE_CLKDIV_ENC( 0)|MODULE_CLKDIV_Msk_ENC(0xFF)|MODULE_CLKDIV_Pos_ENC(16))     
N
N//APBCLK1
N#define USCI0_MODULE   (MODULE_APBCLK_ENC( 2UL)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_USCI0CKEN_Pos)|\
N                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|\
N                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))      /*!< USCI0 Module */
X#define USCI0_MODULE   (MODULE_APBCLK_ENC( 2UL)|MODULE_IP_EN_Pos_ENC(CLK_APBCLK1_USCI0CKEN_Pos)|                        MODULE_CLKSEL_ENC(NA)|MODULE_CLKSEL_Msk_ENC(NA)|MODULE_CLKSEL_Pos_ENC(NA)|                        MODULE_CLKDIV_ENC(NA)|MODULE_CLKDIV_Msk_ENC(NA)|MODULE_CLKDIV_Pos_ENC(NA))       
N
N/*@}*/ /* end of group CLK_EXPORTED_CONSTANTS */
N
N/** @addtogroup CLK_EXPORTED_FUNCTIONS CLK Exported Functions
N  @{
N*/
N
N
N/**
N  * @brief      Get PLL clock frequency
N  * @param      None
N  * @return     PLL frequency
N  * @details    This function get PLL frequency. The frequency unit is Hz.
N  */
N__STATIC_INLINE uint32_t CLK_GetPLLClockFreq(void)
Xstatic __inline uint32_t CLK_GetPLLClockFreq(void)
N{
N    uint32_t u32PllFreq = 0, u32PllReg;
N    uint32_t u32FIN, u32NF, u32NR, u32NO;
N    uint8_t au8NoTbl[4] = {1, 2, 2, 4};
N
N    u32PllReg = CLK->PLLCTL;
X    u32PllReg = ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PLLCTL;
N
N    if (u32PllReg & (CLK_PLLCTL_PD_Msk | CLK_PLLCTL_OE_Msk))
X    if (u32PllReg & ((0x1ul << (16)) | (0x1ul << (18))))
N        return 0;           /* PLL is in power down mode or fix low */
N
N    if (u32PllReg & CLK_PLLCTL_PLLSRC_HIRC_DIV2)
X    if (u32PllReg & 0x00880000UL)
N        u32FIN = __HIRC_DIV2;    /* PLL source clock from HIRC_DIV2 */
X        u32FIN = ((48000000UL)/2);     
N    else
N        u32FIN = __HXT;     /* PLL source clock from HXT */
X        u32FIN = (12000000UL);      
N
N    if (u32PllReg & CLK_PLLCTL_BP_Msk)
X    if (u32PllReg & (0x1ul << (17)))
N        return u32FIN;      /* PLL is in bypass mode */
N
N    /* PLL is output enabled in normal work mode */
N    u32NO = au8NoTbl[((u32PllReg & CLK_PLLCTL_OUTDIV_Msk) >> CLK_PLLCTL_OUTDIV_Pos)];
X    u32NO = au8NoTbl[((u32PllReg & (0x3ul << (14))) >> (14))];
N    u32NF = ((u32PllReg & CLK_PLLCTL_FBDIV_Msk) >> CLK_PLLCTL_FBDIV_Pos) + 2;
X    u32NF = ((u32PllReg & (0x1fful << (0))) >> (0)) + 2;
N    u32NR = ((u32PllReg & CLK_PLLCTL_INDIV_Msk) >> CLK_PLLCTL_INDIV_Pos) + 2;
X    u32NR = ((u32PllReg & (0x1ful << (9))) >> (9)) + 2;
N
N    /* u32FIN is shifted 2 bits to avoid overflow */
N    u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);
N
N    return u32PllFreq;
N}
N
N/**
N  * @brief      This function execute delay function.
N  * @param[in]  us  Delay time. The Max value is 2^24 / CPU Clock(MHz). Ex:
N  *                             50MHz => 335544us, 48MHz => 349525us, 28MHz => 699050us ...
N  * @return     None
N  * @details    Use the SysTick to generate the delay time and the UNIT is in us.
N  *             The SysTick clock source is from HCLK, i.e the same as system core clock.
N  *             User can use SystemCoreClockUpdate() to calculate CyclesPerUs automatically before using this function.
N  */
N__STATIC_INLINE void CLK_SysTickDelay(uint32_t us)
Xstatic __inline void CLK_SysTickDelay(uint32_t us)
N{
N    SysTick->LOAD = us * CyclesPerUs;
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = us * CyclesPerUs;
N    SysTick->VAL  = (0x00);
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL  = (0x00);
N    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = (1UL << 2U) | (1UL );
N
N    /* Waiting for down-count to zero */
N    while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
X    while ((((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL & (1UL << 16U)) == 0);
N
N    /* Disable SysTick counter */
N    SysTick->CTRL = 0;
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = 0;
N}
N
Nvoid CLK_DisableCKO(void);
Nvoid CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En);
Nvoid CLK_PowerDown(void);
Nvoid CLK_Idle(void);
Nuint32_t CLK_GetHXTFreq(void);
Nuint32_t CLK_GetLXTFreq(void);
Nuint32_t CLK_GetHCLKFreq(void);
Nuint32_t CLK_GetPCLK0Freq(void);
Nuint32_t CLK_GetPCLK1Freq(void);
Nuint32_t CLK_GetCPUFreq(void);
Nuint32_t CLK_SetCoreClock(uint32_t u32Hclk);
Nvoid CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv);
Nvoid CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv);
Nvoid CLK_SetSysTickClockSrc(uint32_t u32ClkSrc);
Nvoid CLK_EnableXtalRC(uint32_t u32ClkMask);
Nvoid CLK_DisableXtalRC(uint32_t u32ClkMask);
Nvoid CLK_EnableModuleClock(uint32_t u32ModuleIdx);
Nvoid CLK_DisableModuleClock(uint32_t u32ModuleIdx);
Nuint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq);
Nvoid CLK_DisablePLL(void);
Nuint32_t CLK_WaitClockReady(uint32_t u32ClkMask);
Nvoid CLK_EnableSysTick(uint32_t u32ClkSrc, uint32_t u32Count);
Nvoid CLK_DisableSysTick(void);
N
N
N
N
N/*@}*/ /* end of group CLK_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group CLK_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N
N#ifdef __cplusplus
S}
N#endif
N
N
N#endif //__CLK_H__
N
N
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 377 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "fmc.h"
L 1 "..\..\..\..\Library\StdDriver\inc\fmc.h" 1
N/**************************************************************************//**
N * @file     FMC.h
N * @version  V3.00
N * @brief    NUC121 series FMC driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N#ifndef __FMC_H__
N#define __FMC_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup FMC_Driver FMC Driver
N  @{
N*/
N
N/** @addtogroup FMC_EXPORTED_CONSTANTS FMC Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define Base Address                                                                                     */
N/*---------------------------------------------------------------------------------------------------------*/
N#define FMC_APROM_BASE          0x00000000UL    /*!< APROM  Base Address         */
N#define FMC_LDROM_BASE          0x00100000UL    /*!< LDROM  Base Address         */
N#define FMC_SPROM_BASE          0x00200000UL    /*!< SPROM  Base Address         */
N#define FMC_CONFIG_BASE         0x00300000UL    /*!< CONFIG Base Address         */
N
N#define FMC_CONFIG0_ADDR        (FMC_CONFIG_BASE)       /*!< CONFIG 0 Address */
N#define FMC_CONFIG1_ADDR        (FMC_CONFIG_BASE + 4)   /*!< CONFIG 1 Address */
N
N
N#define FMC_FLASH_PAGE_SIZE     0x200           /*!< Flash Page Size (512 Bytes) */
N#define FMC_LDROM_SIZE          0x1200          /*!< LDROM Size (4.5 kBytes)       */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  ISPCTL constant definitions                                                                            */
N/*---------------------------------------------------------------------------------------------------------*/
N#define FMC_ISPCTL_BS_LDROM     0x2     /*!< ISPCTL setting to select to boot from LDROM */
N#define FMC_ISPCTL_BS_APROM     0x0     /*!< ISPCTL setting to select to boot from APROM */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  ISPCMD constant definitions                                                                            */
N/*---------------------------------------------------------------------------------------------------------*/
N#define FMC_ISPCMD_READ         0x00     /*!< ISP Command: Read Flash               */
N#define FMC_ISPCMD_PROGRAM      0x21     /*!< ISP Command: 32-bit Program Flash     */
N#define FMC_ISPCMD_WRITE_8      0x61     /*!< ISP Command: 64-bit program Flash     */
N#define FMC_ISPCMD_PAGE_ERASE   0x22     /*!< ISP Command: Page Erase Flash         */
N#define FMC_ISPCMD_READ_CID     0x0B     /*!< ISP Command: Read Company ID          */
N#define FMC_ISPCMD_READ_UID     0x04     /*!< ISP Command: Read Unique ID           */
N#define FMC_ISPCMD_READ_DID     0x0C     /*!< ISP Command: Read Device ID           */
N#define FMC_ISPCMD_VECMAP       0x2E     /*!< ISP Command: Set vector mapping       */
N#define FMC_ISPCMD_CHECKSUM     0x0D     /*!< ISP Command: Read Checksum            */
N#define FMC_ISPCMD_CAL_CHECKSUM 0x2D     /*!< ISP Command: Run Check Calculation    */
N
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  FTCTL constant definitions                                                                            */
N/*---------------------------------------------------------------------------------------------------------*/
N#define FMC_FTCTL_OPTIMIZE_24MHZ        0x01       /*!< Frequency Optimize Mode <= 24Mhz */
N#define FMC_FTCTL_OPTIMIZE_50MHZ        0x02       /*!< Frequency Optimize Mode <= 50Mhz */
N
N/*@}*/ /* end of group FMC_EXPORTED_CONSTANTS */
N
N/** @addtogroup FMC_EXPORTED_FUNCTIONS FMC Exported Functions
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  FMC Macro Definitions                                                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
N/**
N * @brief      Enable ISP Function
N *
N * @param      None
N *
N * @return     None
N *
N * @details    This function will set ISPEN bit of ISPCTL control register to enable ISP function.
N *
N * \hideinitializer
N */
N#define FMC_ENABLE_ISP()          (FMC->ISPCTL |=  FMC_ISPCTL_ISPEN_Msk)  /*!< Enable ISP Function  */
N
N/**
N * @brief      Disable ISP Function
N *
N * @param      None
N *
N * @return     None
N *
N * @details    This function will clear ISPEN bit of ISPCTL control register to disable ISP function.
N *
N * \hideinitializer
N */
N#define FMC_DISABLE_ISP()         (FMC->ISPCTL &= ~FMC_ISPCTL_ISPEN_Msk)  /*!< Disable ISP Function */
N
N/**
N * @brief      Enable LDROM Update Function
N *
N * @param      None
N *
N * @return     None
N *
N * @details    This function will set LDUEN bit of ISPCTL control register to enable LDROM update function.
N *             User needs to set LDUEN bit before they can update LDROM.
N *
N * \hideinitializer
N */
N#define FMC_ENABLE_LD_UPDATE()    (FMC->ISPCTL |=  FMC_ISPCTL_LDUEN_Msk)  /*!< Enable LDROM Update Function   */
N
N/**
N * @brief      Disable LDROM Update Function
N *
N * @param      None
N *
N * @return     None
N *
N * @details    This function will set ISPEN bit of ISPCTL control register to disable LDROM update function.
N *
N * \hideinitializer
N */
N#define FMC_DISABLE_LD_UPDATE()   (FMC->ISPCTL &= ~FMC_ISPCTL_LDUEN_Msk)  /*!< Disable LDROM Update Function  */
N
N/**
N * @brief      Enable User Configuration Update Function
N *
N * @param      None
N *
N * @return     None
N *
N * @details    This function will set CFGUEN bit of ISPCTL control register to enable User Configuration update function.
N *             User needs to set CFGUEN bit before they can update User Configuration area.
N *
N * \hideinitializer
N */
N#define FMC_ENABLE_CFG_UPDATE()   (FMC->ISPCTL |=  FMC_ISPCTL_CFGUEN_Msk) /*!< Enable CONFIG Update Function  */
N
N/**
N * @brief      Disable User Configuration Update Function
N *
N * @param      None
N *
N * @return     None
N *
N * @details    This function will clear CFGUEN bit of ISPCTL control register to disable User Configuration update function.
N *
N * \hideinitializer
N */
N#define FMC_DISABLE_CFG_UPDATE()  (FMC->ISPCTL &= ~FMC_ISPCTL_CFGUEN_Msk) /*!< Disable CONFIG Update Function */
N
N
N/**
N * @brief      Enable APROM Update Function
N *
N * @param      None
N *
N * @return     None
N *
N * @details    This function will set APUEN bit of ISPCTL control register to enable APROM update function.
N *             User needs to set APUEN bit before they can update APROM in APROM boot mode.
N *
N * \hideinitializer
N */
N#define FMC_ENABLE_AP_UPDATE()    (FMC->ISPCTL |=  FMC_ISPCTL_APUEN_Msk)  /*!< Enable APROM Update Function   */
N
N/**
N * @brief      Disable APROM Update Function
N *
N * @param      None
N *
N * @return     None
N *
N * @details    This function will clear APUEN bit of ISPCTL control register to disable APROM update function.
N *
N * \hideinitializer
N */
N#define FMC_DISABLE_AP_UPDATE()   (FMC->ISPCTL &= ~FMC_ISPCTL_APUEN_Msk)  /*!< Disable APROM Update Function  */
N
N/**
N * @brief      Get ISP fail flag
N *
N * @param      None
N *
N * @retval     0 Previous ISP command execution result is successful
N * @retval     1 Previous ISP command execution result is fail
N *
N * @details    ISPFF flag of ISPCTL is used to indicate ISP command success or fail.
N *             This function will return the ISPFF flag to identify ISP command OK or fail.
N *
N * \hideinitializer
N */
N#define FMC_GET_FAIL_FLAG()       ((FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk) ? 1 : 0)
N
N
N/**
N * @brief      Select booting from APROM
N *
N * @param      None
N *
N * @return     None
N *
N * @details    If MCU is working without IAP, user need to set BS bit of ISPCTL and reset CPU to execute the code of LDROM/APROM.
N *             This function is used to set BS bit of ISPCTL to boot to APROM.
N *
N * @note       To valid new BS bit setting, user also need to trigger CPU reset or System Reset Request after setting BS bit.
N *
N * \hideinitializer
N */
N#define FMC_SET_APROM_BOOT()      (FMC->ISPCTL &= ~FMC_ISPCTL_BS_Msk)
N
N/**
N * @brief      Select booting from APROM
N *
N * @param      None
N *
N * @return     None
N *
N * @details    If MCU is working without IAP, user need to set/clear BS bit of ISPCON and reset CPU to execute the code of APROM/LDROM.
N *             This function is used to clear BS bit of ISPCTL to boot to LDROM.
N *
N * @note       To valid new BS bit setting, user also need to trigger CPU reset or System Reset Request after clear BS bit.
N *
N * \hideinitializer
N */
N#define FMC_SET_LDROM_BOOT()      (FMC->ISPCTL |= FMC_ISPCTL_BS_Msk)
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* inline functions                                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N/**
N * @brief      Program 32-bit data into specified address of flash
N *
N * @param[in]  u32Addr  Flash address include APROM, LDROM, Data Flash, and CONFIG
N * @param[in]  u32Data  32-bit Data to program
N *
N * @return     None
N *
N * @details    To program word data into Flash include APROM, LDROM, Data Flash, and CONFIG.
N *             The corresponding functions in CONFIG are listed in FMC section of Technical Reference Manual.
N *
N */
Nstatic __INLINE void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
Xstatic __inline void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
N{
N    FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCMD = 0x21;
N    FMC->ISPADDR = u32Addr;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPADDR = u32Addr;
N    FMC->ISPDAT = u32Data;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT = u32Data;
N    FMC->ISPTRG = 0x1;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG = 0x1;
N    __ISB();
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);
N
N    while (FMC->ISPTRG);
X    while (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG);
N}
N
N/**
N * @brief       Read 32-bit Data from specified address of flash
N *
N * @param[in]   u32Addr  Flash address include APROM, LDROM, Data Flash, and CONFIG
N *
N * @return      The data of specified address
N *
N * @details     To read word data from Flash include APROM, LDROM, Data Flash, and CONFIG.
N *
N */
Nstatic __INLINE uint32_t FMC_Read(uint32_t u32Addr)
Xstatic __inline uint32_t FMC_Read(uint32_t u32Addr)
N{
N    FMC->ISPCMD = FMC_ISPCMD_READ;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCMD = 0x00;
N    FMC->ISPADDR = u32Addr;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPADDR = u32Addr;
N    FMC->ISPDAT = 0;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT = 0;
N    FMC->ISPTRG = 0x1;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG = 0x1;
N    __ISB();
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);
N
N    while (FMC->ISPTRG);
X    while (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG);
N
N    return FMC->ISPDAT;
X    return ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT;
N}
N
N/**
N * @brief      Flash page erase
N *
N * @param[in]  u32Addr  Flash address including APROM, LDROM, Data Flash, and CONFIG
N *
N * @details    To do flash page erase. The target address could be APROM, LDROM, Data Flash, or CONFIG.
N *             The page size is 2048 bytes.
N *
N * @retval      0 Success
N * @retval     -1 Erase failed
N *
N */
Nstatic __INLINE int32_t FMC_Erase(uint32_t u32Addr)
Xstatic __inline int32_t FMC_Erase(uint32_t u32Addr)
N{
N    FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCMD = 0x22;
N    FMC->ISPADDR = u32Addr;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPADDR = u32Addr;
N
N    if (u32Addr == FMC_SPROM_BASE)
X    if (u32Addr == 0x00200000UL)
N        FMC->ISPDAT = 0x0055AA03;
X        ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT = 0x0055AA03;
N
N    FMC->ISPTRG = 0x1;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG = 0x1;
N    __ISB();
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);
N
N    while (FMC->ISPTRG);
X    while (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG);
N
N    /* Check ISPFF flag to know whether erase OK or fail. */
N    if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
X    if (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCTL & (0x1ul << (6)))
N    {
N        // comment For FMC FPGA
N        //FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
N
N        return -1;
N    }
N
N    return 0;
N}
N
N/**
N * @brief       Read Unique ID
N *
N * @param[in]   u8Index  UID index. 0 = UID[31:0], 1 = UID[63:32], 2 = UID[95:64]
N *
N * @return      The 32-bit unique ID data of specified UID index.
N *
N * @details     To read out 96-bit Unique ID.
N *
N */
Nstatic __INLINE uint32_t FMC_ReadUID(uint8_t u8Index)
Xstatic __inline uint32_t FMC_ReadUID(uint8_t u8Index)
N{
N    FMC->ISPCMD = FMC_ISPCMD_READ_UID;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCMD = 0x04;
N    FMC->ISPADDR = (u8Index << 2);
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPADDR = (u8Index << 2);
N    FMC->ISPDAT = 0;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT = 0;
N    FMC->ISPTRG = 0x1;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG = 0x1;
N    __ISB();
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);
N
N    while (FMC->ISPTRG);
X    while (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG);
N
N    return FMC->ISPDAT;
X    return ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT;
N}
N
N/**
N  * @brief    Read company ID
N  *
N  * @param    None
N  *
N  * @return   The company ID (32-bit)
N  *
N  * @details  The company ID of Nuvoton is fixed to be 0xDA
N  *
N  */
Nstatic __INLINE uint32_t FMC_ReadCID(void)
Xstatic __inline uint32_t FMC_ReadCID(void)
N{
N    FMC->ISPCMD = FMC_ISPCMD_READ_CID;           /* Set ISP Command Code */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCMD = 0x0B;            
N    FMC->ISPADDR = 0x0;                          /* Must keep 0x0 when read CID */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPADDR = 0x0;                           
N    FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;          /* Trigger to start ISP procedure */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG = (0x1ul << (0));           
N    __ISB();                                     /* To make sure ISP/CPU be Synchronized */
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);                                      
N
N    while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) ; /* Waiting for ISP Done */
X    while (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG & (0x1ul << (0))) ;  
N
N    return FMC->ISPDAT;
X    return ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT;
N}
N
N/**
N  * @brief    Read device ID
N  *
N  * @param    None
N  *
N  * @return   The device ID (32-bit)
N  *
N  * @details  This function is used to read device ID.
N  *
N  */
Nstatic __INLINE uint32_t FMC_ReadDID(void)
Xstatic __inline uint32_t FMC_ReadDID(void)
N{
N    FMC->ISPCMD = FMC_ISPCMD_READ_DID;          /* Set ISP Command Code */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCMD = 0x0C;           
N    FMC->ISPADDR = 0;                           /* Must keep 0x0 when read DID */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPADDR = 0;                            
N    FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;         /* Trigger to start ISP procedure */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG = (0x1ul << (0));          
N    __ISB();                                    /* To make sure ISP/CPU be Synchronized */
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);                                     
N
N    while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk); /* Waiting for ISP Done */
X    while (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG & (0x1ul << (0)));  
N
N    return FMC->ISPDAT;
X    return ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT;
N}
N
N/**
N  * @brief    Read product ID
N  *
N  * @param    None
N  *
N  * @return   The product ID (32-bit)
N  *
N  * @details  This function is used to read product ID.
N  *
N  */
Nstatic __INLINE uint32_t FMC_ReadPID(void)
Xstatic __inline uint32_t FMC_ReadPID(void)
N{
N    FMC->ISPCMD = FMC_ISPCMD_READ_DID;          /* Set ISP Command Code */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCMD = 0x0C;           
N    FMC->ISPADDR = 0x04;                        /* Must keep 0x4 when read PID */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPADDR = 0x04;                         
N    FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;         /* Trigger to start ISP procedure */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG = (0x1ul << (0));          
N    __ISB();                                    /* To make sure ISP/CPU be Synchronized */
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);                                     
N
N    while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk); /* Waiting for ISP Done */
X    while (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG & (0x1ul << (0)));  
N
N    return FMC->ISPDAT;
X    return ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT;
N}
N
N/**
N  * @brief      To read UCID
N  *
N  * @param[in]  u32Index    Index of the UCID to read. u32Index must be 0, 1, 2, or 3.
N  *
N  * @return     The UCID of specified index
N  *
N  * @details    This function is used to read unique chip ID (UCID).
N  *
N  */
Nstatic __INLINE uint32_t FMC_ReadUCID(uint32_t u32Index)
Xstatic __inline uint32_t FMC_ReadUCID(uint32_t u32Index)
N{
N    FMC->ISPCMD = FMC_ISPCMD_READ_UID;          /* Set ISP Command Code */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCMD = 0x04;           
N    FMC->ISPADDR = (0x04 * u32Index) + 0x10;    /* The UCID is at offset 0x10 with word alignment. */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPADDR = (0x04 * u32Index) + 0x10;     
N    FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;         /* Trigger to start ISP procedure */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG = (0x1ul << (0));          
N    __ISB();                                    /* To make sure ISP/CPU be Synchronized */
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);                                     
N
N    while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk); /* Waiting for ISP Done */
X    while (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG & (0x1ul << (0)));  
N
N    return FMC->ISPDAT;
X    return ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT;
N}
N
N/**
N * @brief       Set vector mapping address
N *
N * @param[in]   u32PageAddr  The page address to remap to address 0x0. The address must be page alignment.
N *
N * @return      To set VECMAP to remap specified page address to 0x0.
N *
N * @details     This function is used to set VECMAP to map specified page to vector page (0x0).
N *
N * @note
N *              VECMAP only valid when new IAP function is enabled. (CBS = 10'b or 00'b)
N *
N */
Nstatic __INLINE void FMC_SetVectorPageAddr(uint32_t u32PageAddr)
Xstatic __inline void FMC_SetVectorPageAddr(uint32_t u32PageAddr)
N{
N    FMC->ISPCMD = FMC_ISPCMD_VECMAP; /* Set ISP Command Code */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCMD = 0x2E;  
N    FMC->ISPADDR = u32PageAddr;      /* The address of specified page which will be map to address 0x0. It must be page alignment. */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPADDR = u32PageAddr;       
N    FMC->ISPTRG = 0x1;               /* Trigger to start ISP procedure */
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG = 0x1;                
N    __ISB();                         /* To make sure ISP/CPU be Synchronized */
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);                          
N
N    while (FMC->ISPTRG);             /* Waiting for ISP Done */
X    while (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG);              
N}
N
N/**
N * @brief       Get current vector mapping address.
N *
N * @param       None
N *
N * @return      The current vector mapping address.
N *
N * @details     To get VECMAP value which is the page address for remapping to vector page (0x0).
N *
N * @note
N *              VECMAP only valid when new IAP function is enabled. (CBS = 10'b or 00'b)
N *
N */
Nstatic __INLINE uint32_t FMC_GetVECMAP(void)
Xstatic __inline uint32_t FMC_GetVECMAP(void)
N{
N    return (FMC->ISPSTS & FMC_ISPSTS_VECMAP_Msk);
X    return (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPSTS & (0x1ffffful << (9)));
N}
N
N/**
N * @brief       Get Flash Checksum
N *
N * @param[in]   u32Addr    Specific flash start address
N * @param[in]   i32Size    Specific a size of Flash area
N *
N * @return      A checksum value of a flash block.
N *
N * @details     To get VECMAP value which is the page address for remapping to vector page (0x0).
N *
N */
Nstatic __INLINE uint32_t FMC_GetCheckSum(uint32_t u32Addr, int32_t i32Size)
Xstatic __inline uint32_t FMC_GetCheckSum(uint32_t u32Addr, int32_t i32Size)
N{
N    FMC->ISPCMD = FMC_ISPCMD_CAL_CHECKSUM;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCMD = 0x2D;
N    FMC->ISPADDR = u32Addr;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPADDR = u32Addr;
N    FMC->ISPDAT = i32Size;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT = i32Size;
N    FMC->ISPTRG = 0x1;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG = 0x1;
N    __ISB();
X    do { __schedule_barrier(); __isb(0xF); __schedule_barrier(); } while (0U);
N
N    while (FMC->ISPTRG);
X    while (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG);
N
N    FMC->ISPCMD = FMC_ISPCMD_CHECKSUM;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPCMD = 0x0D;
N    FMC->ISPTRG = 0x1;
X    ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG = 0x1;
N
N    while (FMC->ISPTRG);
X    while (((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPTRG);
N
N    return FMC->ISPDAT;
X    return ((FMC_T *) (((uint32_t)0x50000000) + 0x0C000))->ISPDAT;
N}
N
Nvoid FMC_Open(void);
Nvoid FMC_Close(void);
Nvoid FMC_EnableAPUpdate(void);
Nvoid FMC_DisableAPUpdate(void);
Nvoid FMC_EnableConfigUpdate(void);
Nvoid FMC_DisableConfigUpdate(void);
Nvoid FMC_EnableLDUpdate(void);
Nvoid FMC_DisableLDUpdate(void);
Nvoid FMC_EnableSPUpdate(void);
Nvoid FMC_DisableSPUpdate(void);
Nint32_t FMC_ReadConfig(uint32_t *u32Config, uint32_t u32Count);
Nint32_t FMC_WriteConfig(uint32_t *u32Config, uint32_t u32Count);
Nvoid FMC_SetBootSource(int32_t i32BootSrc);
Nint32_t FMC_GetBootSource(void);
Nuint32_t FMC_ReadDataFlashBaseAddr(void);
Nvoid FMC_EnableFreqOptimizeMode(uint32_t u32Mode);
N
N
N/*@}*/ /* end of group FMC_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group FMC_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N
N#endif
N
L 378 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "gpio.h"
L 1 "..\..\..\..\Library\StdDriver\inc\gpio.h" 1
N/**************************************************************************//**
N * @file     GPIO.h
N * @version  V3.00
N * @brief    NUC121 series GPIO driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N#ifndef __GPIO_H__
N#define __GPIO_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup GPIO_Driver GPIO Driver
N  @{
N*/
N
N/** @addtogroup GPIO_EXPORTED_CONSTANTS GPIO Exported Constants
N  @{
N*/
N
N#define GPIO_PIN_MAX            16 /*!< Specify Maximum Pins of Each GPIO Port */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  GPIO_MODE Constant Definitions                                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define GPIO_MODE_INPUT          0x0UL /*!< Input Mode */
N#define GPIO_MODE_OUTPUT         0x1UL /*!< Output Mode */
N#define GPIO_MODE_OPEN_DRAIN     0x2UL /*!< Open-Drain Mode */
N#define GPIO_MODE_QUASI          0x3UL /*!< Quasi-bidirectional Mode */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  GPIO Interrupt Type Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define GPIO_INT_RISING         0x00010000UL /*!< Interrupt enable by Input Rising Edge */
N#define GPIO_INT_FALLING        0x00000001UL /*!< Interrupt enable by Input Falling Edge */
N#define GPIO_INT_BOTH_EDGE      0x00010001UL /*!< Interrupt enable by both Rising Edge and Falling Edge */
N#define GPIO_INT_HIGH           0x01010000UL /*!< Interrupt enable by Level-High */
N#define GPIO_INT_LOW            0x01000001UL /*!< Interrupt enable by Level-Level */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  GPIO_INTTYPE Constant Definitions                                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define GPIO_INTTYPE_EDGE           0UL /*!< GPIO_INTTYPE Setting for Edge Trigger Mode */
N#define GPIO_INTTYPE_LEVEL          1UL /*!< GPIO_INTTYPE Setting for Edge Level Mode */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  GPIO_DBCTL Constant Definitions                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define GPIO_DBCTL_ICLK_ON            0x00000020UL /*!< GPIO_DBCTL setting for all IO pins edge detection circuit is always active after reset */
N#define GPIO_DBCTL_ICLK_OFF           0x00000000UL /*!< GPIO_DBCTL setting for edge detection circuit is active only if IO pin corresponding GPIOx_IEN bit is set to 1 */
N
N#define GPIO_DBCTL_DBCLKSRC_LIRC      0x00000010UL /*!< GPIO_DBCTL setting for de-bounce counter clock source is the internal 10 kHz */
N#define GPIO_DBCTL_DBCLKSRC_HCLK      0x00000000UL /*!< GPIO_DBCTL setting for de-bounce counter clock source is the HCLK */
N
N#define GPIO_DBCTL_DBCLKSEL_1         0x00000000UL /*!< GPIO_DBCTL setting for sampling cycle = 1 clocks */
N#define GPIO_DBCTL_DBCLKSEL_2         0x00000001UL /*!< GPIO_DBCTL setting for sampling cycle = 2 clocks */
N#define GPIO_DBCTL_DBCLKSEL_4         0x00000002UL /*!< GPIO_DBCTL setting for sampling cycle = 4 clocks */
N#define GPIO_DBCTL_DBCLKSEL_8         0x00000003UL /*!< GPIO_DBCTL setting for sampling cycle = 8 clocks */
N#define GPIO_DBCTL_DBCLKSEL_16        0x00000004UL /*!< GPIO_DBCTL setting for sampling cycle = 16 clocks */
N#define GPIO_DBCTL_DBCLKSEL_32        0x00000005UL /*!< GPIO_DBCTL setting for sampling cycle = 32 clocks */
N#define GPIO_DBCTL_DBCLKSEL_64        0x00000006UL /*!< GPIO_DBCTL setting for sampling cycle = 64 clocks */
N#define GPIO_DBCTL_DBCLKSEL_128       0x00000007UL /*!< GPIO_DBCTL setting for sampling cycle = 128 clocks */
N#define GPIO_DBCTL_DBCLKSEL_256       0x00000008UL /*!< GPIO_DBCTL setting for sampling cycle = 256 clocks */
N#define GPIO_DBCTL_DBCLKSEL_512       0x00000009UL /*!< GPIO_DBCTL setting for sampling cycle = 512 clocks */
N#define GPIO_DBCTL_DBCLKSEL_1024      0x0000000AUL /*!< GPIO_DBCTL setting for sampling cycle = 1024 clocks */
N#define GPIO_DBCTL_DBCLKSEL_2048      0x0000000BUL /*!< GPIO_DBCTL setting for sampling cycle = 2048 clocks */
N#define GPIO_DBCTL_DBCLKSEL_4096      0x0000000CUL /*!< GPIO_DBCTL setting for sampling cycle = 4096 clocks */
N#define GPIO_DBCTL_DBCLKSEL_8192      0x0000000DUL /*!< GPIO_DBCTL setting for sampling cycle = 8192 clocks */
N#define GPIO_DBCTL_DBCLKSEL_16384     0x0000000EUL /*!< GPIO_DBCTL setting for sampling cycle = 16384 clocks */
N#define GPIO_DBCTL_DBCLKSEL_32768     0x0000000FUL /*!< GPIO_DBCTL setting for sampling cycle = 32768 clocks */
N
N
N/** Define GPIO Pin Data Input/Output. It could be used to control each I/O pin by pin address mapping.
N *  Example 1:
N *
N *      PA0 = 1;
N *
N *  It is used to set PA.0 to high;
N *
N *  Example 2:
N *
N *      if (PA0)
N *          PA0 = 0;
N *
N *  If PA.0 pin status is high, then set PA.0 data output to low.
N */
N#define GPIO_PIN_DATA(port, pin)    (*((volatile uint32_t *)((GPIO_PIN_DATA_BASE+(0x40*(port))) + ((pin)<<2))))
N#define PA10            GPIO_PIN_DATA(0, 10) /*!< Specify PA.10 Pin Data Input/Output */
N#define PA11            GPIO_PIN_DATA(0, 11) /*!< Specify PA.11 Pin Data Input/Output */
N#define PA12            GPIO_PIN_DATA(0, 12) /*!< Specify PA.12 Pin Data Input/Output */
N#define PA13            GPIO_PIN_DATA(0, 13) /*!< Specify PA.13 Pin Data Input/Output */
N#define PA14            GPIO_PIN_DATA(0, 14) /*!< Specify PA.14 Pin Data Input/Output */
N#define PA15            GPIO_PIN_DATA(0, 15) /*!< Specify PA.15 Pin Data Input/Output */
N#define PB0             GPIO_PIN_DATA(1, 0 ) /*!< Specify PB.0 Pin Data Input/Output */
N#define PB1             GPIO_PIN_DATA(1, 1 ) /*!< Specify PB.1 Pin Data Input/Output */
N#define PB2             GPIO_PIN_DATA(1, 2 ) /*!< Specify PB.2 Pin Data Input/Output */
N#define PB3             GPIO_PIN_DATA(1, 3 ) /*!< Specify PB.3 Pin Data Input/Output */
N#define PB4             GPIO_PIN_DATA(1, 4 ) /*!< Specify PB.4 Pin Data Input/Output */
N#define PB5             GPIO_PIN_DATA(1, 5 ) /*!< Specify PB.5 Pin Data Input/Output */
N#define PB6             GPIO_PIN_DATA(1, 6 ) /*!< Specify PB.6 Pin Data Input/Output */
N#define PB7             GPIO_PIN_DATA(1, 7 ) /*!< Specify PB.7 Pin Data Input/Output */
N#define PB8             GPIO_PIN_DATA(1, 8 ) /*!< Specify PB.8 Pin Data Input/Output */
N#define PB9             GPIO_PIN_DATA(1, 9 ) /*!< Specify PB.9 Pin Data Input/Output */
N#define PB10            GPIO_PIN_DATA(1, 10) /*!< Specify PB.10 Pin Data Input/Output */
N#define PB12            GPIO_PIN_DATA(1, 12) /*!< Specify PB.12 Pin Data Input/Output */
N#define PB13            GPIO_PIN_DATA(1, 13) /*!< Specify PB.13 Pin Data Input/Output */
N#define PB14            GPIO_PIN_DATA(1, 14) /*!< Specify PB.14 Pin Data Input/Output */
N#define PB15            GPIO_PIN_DATA(1, 15) /*!< Specify PB.15 Pin Data Input/Output */
N#define PC0             GPIO_PIN_DATA(2, 0 ) /*!< Specify PC.0 Pin Data Input/Output */
N#define PC1             GPIO_PIN_DATA(2, 1 ) /*!< Specify PC.1 Pin Data Input/Output */
N#define PC2             GPIO_PIN_DATA(2, 2 ) /*!< Specify PC.2 Pin Data Input/Output */
N#define PC3             GPIO_PIN_DATA(2, 3 ) /*!< Specify PC.3 Pin Data Input/Output */
N#define PC4             GPIO_PIN_DATA(2, 4 ) /*!< Specify PC.4 Pin Data Input/Output */
N#define PC5             GPIO_PIN_DATA(2, 5 ) /*!< Specify PC.5 Pin Data Input/Output */
N#define PC8             GPIO_PIN_DATA(2, 8 ) /*!< Specify PC.8 Pin Data Input/Output */
N#define PC9             GPIO_PIN_DATA(2, 9 ) /*!< Specify PC.9 Pin Data Input/Output */
N#define PC10            GPIO_PIN_DATA(2, 10) /*!< Specify PC.10 Pin Data Input/Output */
N#define PC11            GPIO_PIN_DATA(2, 11) /*!< Specify PC.11 Pin Data Input/Output */
N#define PC12            GPIO_PIN_DATA(2, 12) /*!< Specify PC.12 Pin Data Input/Output */
N#define PC13            GPIO_PIN_DATA(2, 13) /*!< Specify PC.13 Pin Data Input/Output */
N#define PD0             GPIO_PIN_DATA(3, 0 ) /*!< Specify PD.0 Pin Data Input/Output */
N#define PD1             GPIO_PIN_DATA(3, 1 ) /*!< Specify PD.1 Pin Data Input/Output */
N#define PD2             GPIO_PIN_DATA(3, 2 ) /*!< Specify PD.2 Pin Data Input/Output */
N#define PD3             GPIO_PIN_DATA(3, 3 ) /*!< Specify PD.3 Pin Data Input/Output */
N#define PD4             GPIO_PIN_DATA(3, 4 ) /*!< Specify PD.4 Pin Data Input/Output */
N#define PD5             GPIO_PIN_DATA(3, 5 ) /*!< Specify PD.5 Pin Data Input/Output */
N#define PD8             GPIO_PIN_DATA(3, 8 ) /*!< Specify PD.8 Pin Data Input/Output */
N#define PD9             GPIO_PIN_DATA(3, 9 ) /*!< Specify PD.9 Pin Data Input/Output */
N#define PD10            GPIO_PIN_DATA(3, 10) /*!< Specify PD.10 Pin Data Input/Output */
N#define PD11            GPIO_PIN_DATA(3, 11) /*!< Specify PD.11 Pin Data Input/Output */
N#define PE0             GPIO_PIN_DATA(4, 0 ) /*!< Specify PE.0 Pin Data Input/Output */
N#define PE1             GPIO_PIN_DATA(4, 1 ) /*!< Specify PE.1 Pin Data Input/Output */
N#define PE2             GPIO_PIN_DATA(4, 2 ) /*!< Specify PE.2 Pin Data Input/Output */
N#define PF0             GPIO_PIN_DATA(5, 0 ) /*!< Specify PF.0 Pin Data Input/Output */
N#define PF1             GPIO_PIN_DATA(5, 1 ) /*!< Specify PF.1 Pin Data Input/Output */
N#define PF2             GPIO_PIN_DATA(5, 2 ) /*!< Specify PF.2 Pin Data Input/Output */
N#define PF3             GPIO_PIN_DATA(5, 3 ) /*!< Specify PF.3 Pin Data Input/Output */
N#define PF4             GPIO_PIN_DATA(5, 4 ) /*!< Specify PF.4 Pin Data Input/Output */
N#define PF5             GPIO_PIN_DATA(5, 5 ) /*!< Specify PF.5 Pin Data Input/Output */
N
N/*@}*/ /* end of group GPIO_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup GPIO_EXPORTED_FUNCTIONS GPIO Exported Functions
N  @{
N*/
N
N/**
N * @brief       Clear GPIO Pin Interrupt Flag
N *
N * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE or PF.
N * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port. \n
N *                          It could be BIT11 ~ BIT15 for PA. \n
N *                          It could be BIT0 ~ BIT15(exclude BIT11) for PB. \n
N *                          It could be BIT0 ~ BIT13(exclude BIT6、BIT7) for PC. \n
N *                          It could be BIT0 ~ BIT11(exclude BIT6、BIT7) for PD. \n
N *                          It could be BIT0 ~ BIT2 for PE. \n
N *                          It could be BIT0 ~ BIT5 for PF.
N *
N * @return      None
N *
N * @details     Clear the interrupt status of specified GPIO pin.
N *
N * \hideinitializer
N */
N#define GPIO_CLR_INT_FLAG(port, u32PinMask)         ((port)->INTSRC = (u32PinMask))
N
N/**
N * @brief       Disable Pin De-bounce Function
N *
N * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE or PF.
N * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port. \n
N *                          It could be BIT11 ~ BIT15 for PA. \n
N *                          It could be BIT0 ~ BIT15(exclude BIT11) for PB. \n
N *                          It could be BIT0 ~ BIT13(exclude BIT6、BIT7) for PC. \n
N *                          It could be BIT0 ~ BIT11(exclude BIT6、BIT7) for PD. \n
N *                          It could be BIT0 ~ BIT2 for PE. \n
N *                          It could be BIT0 ~ BIT5 for PF.
N *
N * @return      None
N *
N * @details     Disable the interrupt de-bounce function of specified GPIO pin.
N *
N * \hideinitializer
N */
N#define GPIO_DISABLE_DEBOUNCE(port, u32PinMask)     ((port)->DBEN &= ~(u32PinMask))
N
N/**
N * @brief       Enable Pin De-bounce Function
N *
N * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE or PF.
N * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port. \n
N *                          It could be BIT11 ~ BIT15 for PA. \n
N *                          It could be BIT0 ~ BIT15(exclude BIT11) for PB. \n
N *                          It could be BIT0 ~ BIT13(exclude BIT6、BIT7) for PC. \n
N *                          It could be BIT0 ~ BIT11(exclude BIT6、BIT7) for PD. \n
N *                          It could be BIT0 ~ BIT2 for PE. \n
N *                          It could be BIT0 ~ BIT5 for PF.
N * @return      None
N *
N * @details     Enable the interrupt de-bounce function of specified GPIO pin.
N *
N * \hideinitializer
N */
N#define GPIO_ENABLE_DEBOUNCE(port, u32PinMask)      ((port)->DBEN |= (u32PinMask))
N
N/**
N * @brief       Disable I/O Digital Input Path
N *
N * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE or PF.
N * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port. \n
N *                          It could be BIT11 ~ BIT15 for PA. \n
N *                          It could be BIT0 ~ BIT15(exclude BIT11) for PB. \n
N *                          It could be BIT0 ~ BIT13(exclude BIT6、BIT7) for PC. \n
N *                          It could be BIT0 ~ BIT11(exclude BIT6、BIT7) for PD. \n
N *                          It could be BIT0 ~ BIT2 for PE. \n
N *                          It could be BIT0 ~ BIT5 for PF.
N *
N * @return      None
N *
N * @details     Disable I/O digital input path of specified GPIO pin.
N *
N * \hideinitializer
N */
N#define GPIO_DISABLE_DIGITAL_PATH(port, u32PinMask) ((port)->DINOFF |= ((u32PinMask)<<16))
N
N/**
N * @brief       Enable I/O Digital Input Path
N *
N * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE or PF.
N * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port. \n
N *                          It could be BIT11 ~ BIT15 for PA. \n
N *                          It could be BIT0 ~ BIT15(exclude BIT11) for PB. \n
N *                          It could be BIT0 ~ BIT13(exclude BIT6、BIT7) for PC. \n
N *                          It could be BIT0 ~ BIT11(exclude BIT6、BIT7) for PD. \n
N *                          It could be BIT0 ~ BIT2 for PE. \n
N *                          It could be BIT0 ~ BIT5 for PF.
N *
N * @return      None
N *
N * @details     Enable I/O digital input path of specified GPIO pin.
N *
N * \hideinitializer
N */
N#define GPIO_ENABLE_DIGITAL_PATH(port, u32PinMask)  ((port)->DINOFF &= ~((u32PinMask)<<16))
N
N/**
N * @brief       Disable I/O DOUT mask
N *
N * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE or PF.
N * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port. \n
N *                          It could be BIT11 ~ BIT15 for PA. \n
N *                          It could be BIT0 ~ BIT15(exclude BIT11) for PB. \n
N *                          It could be BIT0 ~ BIT13(exclude BIT6、BIT7) for PC. \n
N *                          It could be BIT0 ~ BIT11(exclude BIT6、BIT7) for PD. \n
N *                          It could be BIT0 ~ BIT2 for PE. \n
N *                          It could be BIT0 ~ BIT5 for PF.
N *
N * @return      None
N *
N * @details     Disable I/O DOUT mask of specified GPIO pin.
N *
N * \hideinitializer
N */
N#define GPIO_DISABLE_DOUT_MASK(port, u32PinMask)    ((port)->DATMSK &= ~(u32PinMask))
N
N/**
N * @brief       Enable I/O DOUT mask
N *
N * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE or PF.
N * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port. \n
N *                          It could be BIT11 ~ BIT15 for PA. \n
N *                          It could be BIT0 ~ BIT15(exclude BIT11) for PB. \n
N *                          It could be BIT0 ~ BIT13(exclude BIT6、BIT7) for PC. \n
N *                          It could be BIT0 ~ BIT11(exclude BIT6、BIT7) for PD. \n
N *                          It could be BIT0 ~ BIT2 for PE. \n
N *                          It could be BIT0 ~ BIT5 for PF.
N *
N * @return      None
N *
N * @details     Enable I/O DOUT mask of specified GPIO pin.
N *
N * \hideinitializer
N */
N#define GPIO_ENABLE_DOUT_MASK(port, u32PinMask) ((port)->DATMSK |= (u32PinMask))
N
N/**
N * @brief       Get GPIO Pin Interrupt Flag
N *
N * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE or PF.
N * @param[in]   u32PinMask  The single or multiple pins of specified GPIO port. \n
N *                          It could be BIT11 ~ BIT15 for PA. \n
N *                          It could be BIT0 ~ BIT15(exclude BIT11) for PB. \n
N *                          It could be BIT0 ~ BIT13(exclude BIT6、BIT7) for PC. \n
N *                          It could be BIT0 ~ BIT11(exclude BIT6、BIT7) for PD. \n
N *                          It could be BIT0 ~ BIT2 for PE. \n
N *                          It could be BIT0 ~ BIT5 for PF.
N *
N * @retval      0           No interrupt at specified GPIO pin
N * @retval      1           The specified GPIO pin generate an interrupt
N *
N * @details     Get the interrupt status of specified GPIO pin.
N *
N * \hideinitializer
N */
N#define GPIO_GET_INT_FLAG(port, u32PinMask)     ((port)->INTSRC & (u32PinMask))
N
N/**
N * @brief       Set De-bounce Sampling Cycle Time
N *
N * @param[in]   u32ClkSrc   The de-bounce counter clock source. It could be GPIO_DBCTL_DBCLKSRC_HCLK or GPIO_DBCTL_DBCLKSRC_LIRC.
N * @param[in]   u32ClkSel   The de-bounce sampling cycle selection. It could be \n
N *                              GPIO_DBCTL_DBCLKSEL_1, GPIO_DBCTL_DBCLKSEL_2, GPIO_DBCTL_DBCLKSEL_4, GPIO_DBCTL_DBCLKSEL_8, \n
N *                              GPIO_DBCTL_DBCLKSEL_16, GPIO_DBCTL_DBCLKSEL_32, GPIO_DBCTL_DBCLKSEL_64, GPIO_DBCTL_DBCLKSEL_128, \n
N *                              GPIO_DBCTL_DBCLKSEL_256, GPIO_DBCTL_DBCLKSEL_512, GPIO_DBCTL_DBCLKSEL_1024, GPIO_DBCTL_DBCLKSEL_2048, \n
N *                              GPIO_DBCTL_DBCLKSEL_4096, GPIO_DBCTL_DBCLKSEL_8192, GPIO_DBCTL_DBCLKSEL_16384, GPIO_DBCTL_DBCLKSEL_32768.
N *
N * @return      None
N *
N * @details     Set the interrupt de-bounce sampling cycle time based on the debounce counter clock source. \n
N *              Example: _GPIO_SET_DEBOUNCE_TIME(GPIO_DBCTL_DBCLKSRC_LIRC, GPIO_DBCTL_DBCLKSEL_4). \n
N *              It's meaning the De-debounce counter clock source is internal 10 KHz and sampling cycle selection is 4. \n
N *              Then the target de-bounce sampling cycle time is (4)*(1/(10*1000)) s = 4*0.0001 s = 400 us,
N *              and system will sampling interrupt input once per 00 us.
N *
N * \hideinitializer
N */
N#define GPIO_SET_DEBOUNCE_TIME(u32ClkSrc, u32ClkSel)    (GPIO->DBCTL = (GPIO_DBCTL_ICLKON_Msk | (u32ClkSrc) | (u32ClkSel)))
N
N/**
N * @brief       Get GPIO Port IN Data
N *
N * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE or PF.
N *
N * @return      The specified port data
N *
N * @details     Get the PIN register of specified GPIO port.
N *
N * \hideinitializer
N */
N#define GPIO_GET_IN_DATA(port)  ((port)->PIN)
N
N/**
N * @brief       Set GPIO Port OUT Data
N *
N * @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE or PF.
N * @param[in]   u32Data     GPIO port data.
N *
N * @return      None
N *
N * @details     Set the Data into specified GPIO port.
N *
N * \hideinitializer
N */
N#define GPIO_SET_OUT_DATA(port, u32Data)    ((port)->DOUT = (u32Data))
N
N/**
N * @brief       Toggle Specified GPIO pin
N *
N * @param[in]   u32Pin      Pxy
N *
N * @return      None
N *
N * @details     Toggle the specified GPIO pint.
N *
N * \hideinitializer
N */
N#define GPIO_TOGGLE(u32Pin) ((u32Pin) ^= 1)
N
N
N/**
N* @brief       Enable External GPIO interrupt
N*
N* @param[in]   port            GPIO port. It could be PA, PB, PC, PD, PE or PF.
N* @param[in]   u32Pin          The pin of specified GPIO port. \n
N*                              It could be 11 ~ 15 for PA. \n
N*                              It could be 0 ~ 15(exclude 11) for PB. \n
N*                              It could be 0 ~ 13(exclude 6、7) for PC. \n
N*                              It could be 0 ~ 11(exclude 6、7) for PD. \n
N*                              It could be 0 ~ 2 for PE. \n
N*                              It could be 0 ~ 5 for PF.
N*
N* @param[in]   u32IntAttribs   The interrupt attribute of specified GPIO pin. It could be \n
N*                              GPIO_INT_RISING, GPIO_INT_FALLING, GPIO_INT_BOTH_EDGE, GPIO_INT_HIGH, GPIO_INT_LOW.
N*
N* @return      None
N*
N* @details     This function is used to enable specified GPIO pin interrupt.
N*
N* \hideinitializer
N*/
N#define GPIO_EnableEINT     GPIO_EnableInt
N
N/**
N* @brief       Disable External GPIO interrupt
N*
N* @param[in]   port        GPIO port. It could be PA, PB, PC, PD, PE or PF.
N* @param[in]   u32Pin      The pin of specified GPIO port. \n
N*                              It could be 11 ~ 15 for PA. \n
N*                              It could be 0 ~ 15(exclude 11) for PB. \n
N*                              It could be 0 ~ 13(exclude 6、7) for PC. \n
N*                              It could be 0 ~ 11(exclude 6、7) for PD. \n
N*                              It could be 0 ~ 2 for PE. \n
N*                              It could be 0 ~ 5 for PF.
N*
N* @return      None
N*
N* @details     This function is used to enable specified GPIO pin interrupt.
N*
N* \hideinitializer
N*/
N#define GPIO_DisableEINT    GPIO_DisableInt
N
N
Nvoid GPIO_SetMode(GPIO_T *port, uint32_t u32PinMask, uint32_t u32Mode);
Nvoid GPIO_EnableInt(GPIO_T *port, uint32_t u32Pin, uint32_t u32IntAttribs);
Nvoid GPIO_DisableInt(GPIO_T *port, uint32_t u32Pin);
N
N
N/*@}*/ /* end of group GPIO_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group GPIO_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__GPIO_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 379 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "i2c.h"
L 1 "..\..\..\..\Library\StdDriver\inc\i2c.h" 1
N/**************************************************************************//**
N * @file     I2C.h
N * @version  V3.00
N * @brief    NUC121 series I2C driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N#ifndef __I2C_H__
N#define __I2C_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup I2C_Driver I2C Driver
N  @{
N*/
N
N/** @addtogroup I2C_EXPORTED_CONSTANTS I2C Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  I2C_CTL constant definitions.                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define I2C_CTL_STA_STO_SI        0x38UL /*!< I2C_CTL setting for I2C control bits. It would set STA, STO and SI bits     */
N#define I2C_CTL_STA_STO_SI_AA     0x3CUL /*!< I2C_CTL setting for I2C control bits. It would set STA, STO, SI and AA bits */
N#define I2C_CTL_STA_SI            0x28UL /*!< I2C_CTL setting for I2C control bits. It would set STA and SI bits          */
N#define I2C_CTL_STA_SI_AA         0x2CUL /*!< I2C_CTL setting for I2C control bits. It would set STA, SI and AA bits      */
N#define I2C_CTL_STO_SI            0x18UL /*!< I2C_CTL setting for I2C control bits. It would set STO and SI bits          */
N#define I2C_CTL_STO_SI_AA         0x1CUL /*!< I2C_CTL setting for I2C control bits. It would set STO, SI and AA bits      */
N#define I2C_CTL_SI                0x08UL /*!< I2C_CTL setting for I2C control bits. It would set SI bit                   */
N#define I2C_CTL_SI_AA             0x0CUL /*!< I2C_CTL setting for I2C control bits. It would set SI and AA bits           */
N#define I2C_CTL_STA               0x20UL /*!< I2C_CTL setting for I2C control bits. It would set STA bit                  */
N#define I2C_CTL_STO               0x10UL /*!< I2C_CTL setting for I2C control bits. It would set STO bit                  */
N#define I2C_CTL_AA                0x04UL /*!< I2C_CTL setting for I2C control bits. It would set AA bit                   */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  I2C GCMode constant definitions.                                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
N#define I2C_GCMODE_ENABLE           1    /*!< Enable  I2C GC Mode                                                         */
N#define I2C_GCMODE_DISABLE          0    /*!< Disable I2C GC Mode                                                         */
N
N/*@}*/ /* end of group I2C_EXPORTED_CONSTANTS */
N
N/** @addtogroup I2C_EXPORTED_FUNCTIONS I2C Exported Functions
N  @{
N*/
N/**
N *    @brief        The macro is used to set I2C bus condition at One Time
N *
N *    @param[in]    i2c        Specify I2C port
N *    @param[in]    u8Ctrl     A byte writes to I2C control register
N *
N *    @return       None
N *
N *    @details      Set I2C_CTL register to control I2C bus conditions of START, STOP, SI, ACK.
N *
N *    \hideinitializer
N */
N#define I2C_SET_CONTROL_REG(i2c, u8Ctrl) ((i2c)->CTL = ((i2c)->CTL & ~0x3c) | (u8Ctrl))
N
N/**
N *    @brief        The macro is used to set START condition of I2C Bus
N *
N *    @param[in]    i2c        Specify I2C port
N *
N *    @return       None
N *
N *    @details      Set the I2C bus START condition in I2C_CTL register.
N *
N *    \hideinitializer
N */
N#define I2C_START(i2c)  ((i2c)->CTL = ((i2c)->CTL | I2C_CTL_SI_Msk) | I2C_CTL_STA_Msk)
N
N/**
N *    @brief        The macro is used to set STOP condition of I2C Bus
N *
N *    @param[in]    i2c        Specify I2C port
N *
N *    @return       None
N *
N *    @details      Set the I2C bus STOP condition in I2C_CTL register.
N *
N *    \hideinitializer
N */
N#define I2C_STOP(i2c)   ((i2c)->CTL = ((i2c)->CTL | I2C_CTL_SI_Msk) | I2C_CTL_STO_Msk)
N
N/**
N *    @brief        The macro is used to wait I2C bus status get ready
N *
N *    @param[in]    i2c        Specify I2C port
N *
N *    @return       None
N *
N *    @details      When a new status is presented of I2C bus, the SI flag will be set in I2C_CTL register.
N *
N *    \hideinitializer
N */
N#define I2C_WAIT_READY(i2c)     while(!((i2c)->CTL & I2C_CTL_SI_Msk))
N
N/**
N *    @brief        The macro is used to Read I2C Bus Data Register
N *
N *    @param[in]    i2c        Specify I2C port
N *
N *    @return       A byte of I2C data register
N *
N *    @details      I2C controller read data from bus and save it in I2CDAT register.
N *
N *    \hideinitializer
N */
N#define I2C_GET_DATA(i2c)   ((i2c)->DAT)
N
N/**
N *    @brief        Write a Data to I2C Data Register
N *
N *    @param[in]    i2c         Specify I2C port
N *    @param[in]    u8Data      A byte that writes to data register
N *
N *    @return       None
N *
N *    @details      When write a data to I2C_DAT register, the I2C controller will shift it to I2C bus.
N *
N *    \hideinitializer
N */
N#define I2C_SET_DATA(i2c, u8Data) ((i2c)->DAT = (u8Data))
N
N/**
N *    @brief        Get I2C Bus status code
N *
N *    @param[in]    i2c        Specify I2C port
N *
N *    @return       I2C status code
N *
N *    @details      To get this status code to monitor I2C bus event.
N *
N *    \hideinitializer
N */
N#define I2C_GET_STATUS(i2c) ((i2c)->STATUS)
N
N/**
N *    @brief        Get Time-out flag from I2C Bus
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @retval       0       I2C Bus time-out is not happened
N *    @retval       1       I2C Bus time-out is happened
N *
N *    @details      When I2C bus occurs time-out event, the time-out flag will be set.
N *
N *    \hideinitializer
N */
N#define I2C_GET_TIMEOUT_FLAG(i2c)   ( ((i2c)->TOCTL & I2C_TOCTL_TOIF_Msk) == I2C_TOCTL_TOIF_Msk ? 1:0 )
N
N/**
N *    @brief        To get wake-up flag from I2C Bus
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @retval       0       Chip is not woken-up from power-down mode
N *    @retval       1       Chip is woken-up from power-down mode
N *
N *    @details      I2C bus occurs wake-up event, wake-up flag will be set.
N *
N *    \hideinitializer
N */
N#define I2C_GET_WAKEUP_FLAG(i2c) ( ((i2c)->WKSTS & I2C_WKSTS_WKIF_Msk) == I2C_WKSTS_WKIF_Msk ? 1:0  )
N
N/**
N *    @brief        To clear wake-up flag
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @return       None
N *
N *    @details      If wake-up flag is set, use this macro to clear it.
N *
N *    \hideinitializer
N */
N#define I2C_CLEAR_WAKEUP_FLAG(i2c)  ((i2c)->WKSTS = I2C_WKSTS_WKIF_Msk)
N
N/**
N *    @brief        To get wake-up address frame ACK done flag from I2C Bus
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @retval       0       The ACK bit cycle of address match frame is not done
N *    @retval       1       The ACK bit cycle of address match frame is done in power-down
N *
N *    @details      I2C bus occurs wake-up event and address frame ACK is done, this flag will be set.
N *
N *    \hideinitializer
N */
N#define I2C_GET_WAKEUP_DONE(i2c) ( ((i2c)->WKSTS & I2C_WKSTS_WKAKDONE_Msk) == I2C_WKSTS_WKAKDONE_Msk ? 1:0  )
N
N/**
N *    @brief        To clear address frame ACK done flag
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @return       None
N *
N *    @details      If wake-up done is set, use this macro to clear it.
N *
N *    \hideinitializer
N */
N#define I2C_CLEAR_WAKEUP_DONE(i2c)  ((i2c)->WKSTS = I2C_WKSTS_WKAKDONE_Msk)
N
N/**
N *    @brief        To get read/write status bit in address wakeup frame
N *
N *    @param[in]    i2c     Specify I2C port
N *
N *    @retval       0       Write command be record on the address match wakeup frame
N *    @retval       1       Read command be record on the address match wakeup frame.
N *
N *    @details      I2C bus occurs wake-up event and address frame is received, this bit will record read/write status.
N *
N *    \hideinitializer
N*/
N#define I2C_GET_WAKEUP_WR_STATUS(i2c) ( ((i2c)->WKSTS & I2C_WKSTS_WRSTSWK_Msk) == I2C_WKSTS_WRSTSWK_Msk ? 1:0  )
N
Nvoid I2C_ClearTimeoutFlag(I2C_T *i2c);
Nvoid I2C_Close(I2C_T *i2c);
Nvoid I2C_Trigger(I2C_T *i2c, uint8_t u8Start, uint8_t u8Stop, uint8_t u8Si, uint8_t u8Ack);
Nvoid I2C_DisableInt(I2C_T *i2c);
Nvoid I2C_EnableInt(I2C_T *i2c);
Nuint32_t I2C_GetBusClockFreq(I2C_T *i2c);
Nuint32_t I2C_SetBusClockFreq(I2C_T *i2c, uint32_t u32BusClock);
Nuint32_t I2C_GetIntFlag(I2C_T *i2c);
Nuint32_t I2C_GetStatus(I2C_T *i2c);
Nuint32_t I2C_Open(I2C_T *i2c, uint32_t u32BusClock);
Nuint8_t I2C_GetData(I2C_T *i2c);
Nvoid I2C_SetSlaveAddr(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddr, uint8_t u8GCMode);
Nvoid I2C_SetSlaveAddrMask(I2C_T *i2c, uint8_t u8SlaveNo, uint8_t u8SlaveAddrMask);
Nvoid I2C_EnableTimeout(I2C_T *i2c, uint8_t u8LongTimeout);
Nvoid I2C_DisableTimeout(I2C_T *i2c);
Nvoid I2C_EnableWakeup(I2C_T *i2c);
Nvoid I2C_DisableWakeup(I2C_T *i2c);
Nvoid I2C_SetData(I2C_T *i2c, uint8_t u8Data);
Nuint8_t I2C_WriteByte(I2C_T *i2c, uint8_t u8SlaveAddr, const uint8_t data);
Nuint32_t I2C_WriteMultiBytes(I2C_T *i2c, uint8_t u8SlaveAddr, const uint8_t *data, uint32_t u32wLen);
Nuint8_t I2C_WriteByteOneReg(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t data);
Nuint32_t I2C_WriteMultiBytesOneReg(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t *data, uint32_t u32wLen);
Nuint8_t I2C_WriteByteTwoRegs(I2C_T *i2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t data);
Nuint32_t I2C_WriteMultiBytesTwoRegs(I2C_T *i2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t *data, uint32_t u32wLen);
Nuint8_t I2C_ReadByte(I2C_T *i2c, uint8_t u8SlaveAddr);
Nuint32_t I2C_ReadMultiBytes(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t *rdata, uint32_t u32rLen);
Nuint8_t I2C_ReadByteOneReg(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr);
Nuint32_t I2C_ReadMultiBytesOneReg(I2C_T *i2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, uint8_t *rdata, uint32_t u32rLen);
Nuint8_t I2C_ReadByteTwoRegs(I2C_T *i2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr);
Nuint32_t I2C_ReadMultiBytesTwoRegs(I2C_T *i2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, uint8_t *rdata, uint32_t u32rLen);
N
N/*@}*/ /* end of group I2C_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group I2C_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N#endif //__I2C_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 380 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "pdma.h"
L 1 "..\..\..\..\Library\StdDriver\inc\pdma.h" 1
N/**************************************************************************//**
N * @file     pdma.h
N * @version  V3.00
N * @brief    NUC121 series PDMA driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __PDMA_H__
N#define __PDMA_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup PDMA_Driver PDMA Driver
N  @{
N*/
N
N/** @addtogroup PDMA_EXPORTED_CONSTANTS PDMA Exported Constants
N  @{
N*/
N#define PDMA_CH_MAX    5   /*!< Specify Maximum Channels of PDMA */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Operation Mode Constant Definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_OP_IDLE        0x00000000UL            /*!<DMA Idle Mode           */
N#define PDMA_OP_BASIC       0x00000001UL            /*!<DMA Basic Mode          */
N#define PDMA_OP_SCATTER     0x00000002UL            /*!<DMA Scatter-gather Mode */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Data Width Constant Definitions                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_WIDTH_8        0x00000000UL            /*!<DMA Transfer Width 8-bit    */
N#define PDMA_WIDTH_16       0x00001000UL            /*!<DMA Transfer Width 16-bit   */
N#define PDMA_WIDTH_32       0x00002000UL            /*!<DMA Transfer Width 32-bit   */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Address Attribute Constant Definitions                                                                 */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_SAR_INC        0x00000000UL            /*!<DMA SAR increment   */
N#define PDMA_SAR_FIX        0x00000300UL            /*!<DMA SAR fix address */
N#define PDMA_DAR_INC        0x00000000UL            /*!<DMA DAR increment   */
N#define PDMA_DAR_FIX        0x00000C00UL            /*!<DMA DAR fix address */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Burst Mode Constant Definitions                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_REQ_SINGLE     0x00000004UL            /*!<DMA Single Request      */
N#define PDMA_REQ_BURST      0x00000000UL            /*!<DMA Burst Request       */
N
N#define PDMA_BURST_128      0x00000000UL            /*!<DMA Burst 128 Transfers */
N#define PDMA_BURST_64       0x00000010UL            /*!<DMA Burst 64 Transfers  */
N#define PDMA_BURST_32       0x00000020UL            /*!<DMA Burst 32 Transfers  */
N#define PDMA_BURST_16       0x00000030UL            /*!<DMA Burst 16 Transfers  */
N#define PDMA_BURST_8        0x00000040UL            /*!<DMA Burst 8 Transfers   */
N#define PDMA_BURST_4        0x00000050UL            /*!<DMA Burst 4 Transfers   */
N#define PDMA_BURST_2        0x00000060UL            /*!<DMA Burst 2 Transfers   */
N#define PDMA_BURST_1        0x00000070UL            /*!<DMA Burst 1 Transfers   */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Peripheral Transfer Mode Constant Definitions                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_MEM            0x00000000UL            /*!<DMA Connect to Memory       */
N#define PDMA_UART0_TX       0x00000004UL            /*!<DMA Connect to UART0 TX     */
N#define PDMA_UART0_RX       0x00000005UL            /*!<DMA Connect to UART0 RX     */
N#define PDMA_USCI0_TX       0x0000000AUL            /*!<DMA Connect to USCI0 TX     */
N#define PDMA_USCI0_RX       0x0000000BUL            /*!<DMA Connect to USCI0 RX     */
N#define PDMA_SPI0_TX        0x00000010UL            /*!<DMA Connect to SPI0 TX      */
N#define PDMA_SPI0_RX        0x00000011UL            /*!<DMA Connect to SPI0 RX      */
N#define PDMA_ADC_RX         0x00000014UL            /*!<DMA Connect to ADC RX       */
N#define PDMA_PWM0_P0_RX     0x00000015UL            /*!<DMA Connect to PWM0 P1 RX   */
N#define PDMA_PWM0_P1_RX     0x00000016UL            /*!<DMA Connect to PWM0 P2 RX   */
N#define PDMA_PWM0_P2_RX     0x00000017UL            /*!<DMA Connect to PWM0 P3 RX   */
N#define PDMA_PWM1_P0_RX     0x00000018UL            /*!<DMA Connect to PWM1 P1 RX   */
N#define PDMA_PWM1_P1_RX     0x00000019UL            /*!<DMA Connect to PWM1 P2 RX   */
N#define PDMA_PWM1_P2_RX     0x0000001AUL            /*!<DMA Connect to PWM1 P3 RX   */
N#define PDMA_I2C0_TX        0x0000001CUL            /*!<DMA Connect to I2C0 TX      */
N#define PDMA_I2C0_RX        0x0000001DUL            /*!<DMA Connect to I2C0 RX      */
N#define PDMA_I2C1_TX        0x0000001EUL            /*!<DMA Connect to I2C1 TX      */
N#define PDMA_I2C1_RX        0x0000001FUL            /*!<DMA Connect to I2C1 RX      */
N#define PDMA_TMR0           0x00000020UL            /*!<DMA Connect to TMR0 RX      */
N#define PDMA_TMR1           0x00000021UL            /*!<DMA Connect to TMR1 RX      */
N#define PDMA_TMR2           0x00000022UL            /*!<DMA Connect to TMR2 RX      */
N#define PDMA_TMR3           0x00000023UL            /*!<DMA Connect to TMR3 RX      */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Interrupt Type Constant Definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_INT_TRANS_DONE 0x00000000UL            /*!<Transfer Done Interrupt */
N#define PDMA_INT_TEMPTY     0x00000001UL            /*!<Table Empty Interrupt   */
N#define PDMA_INT_TIMEOUT    0x00000002UL            /*!<Timeout Interrupt       */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Interrupt Type Constant Definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_SCATSTS_TEMPTYF0_Pos        (0)                                               /*!< PDMA_T::SCATSTS: TEMPTYFn Position     */
N#define PDMA_SCATSTS_TEMPTYFn_Msk        (0x1ful << PDMA_SCATSTS_TEMPTYFn_Pos)             /*!< PDMA_T::SCATSTS: TEMPTYFn Mask         */
N
N/*@}*/ /* end of group PDMA_EXPORTED_CONSTANTS */
N
N/** @addtogroup PDMA_EXPORTED_FUNCTIONS PDMA Exported Functions
N  @{
N*/
N
N/**
N * @brief       Get PDMA Interrupt Status
N *
N * @param[in]   None
N *
N * @return      None
N *
N * @details     This macro gets the interrupt status.
N *
N * \hideinitializer
N */
N#define PDMA_GET_INT_STATUS() ((uint32_t)(PDMA->INTSTS))
N
N/**
N * @brief       Get Transfer Done Interrupt Status
N *
N * @param[in]   None
N *
N * @return      None
N *
N * @details     Get the transfer done Interrupt status.
N *
N * \hideinitializer
N */
N#define PDMA_GET_TD_STS() ((uint32_t)(PDMA->TDSTS))
N
N/**
N * @brief       Clear Transfer Done Interrupt Status
N *
N * @param[in]   u32Mask     The channel mask
N *
N * @return      None
N *
N * @details     Clear the transfer done Interrupt status.
N *
N * \hideinitializer
N */
N#define PDMA_CLR_TD_FLAG(u32Mask) ((uint32_t)(PDMA->TDSTS = (u32Mask)))
N
N/**
N * @brief       Get Target Abort Interrupt Status
N *
N * @param[in]   None
N *
N * @return      None
N *
N * @details     Get the target abort Interrupt status.
N *
N * \hideinitializer
N */
N#define PDMA_GET_ABORT_STS() ((uint32_t)(PDMA->ABTSTS))
N
N/**
N * @brief       Clear Target Abort Interrupt Status
N *
N * @param[in]   u32Mask     The channel mask
N *
N * @return      None
N *
N * @details     Clear the target abort Interrupt status.
N *
N * \hideinitializer
N */
N#define PDMA_CLR_ABORT_FLAG(u32Mask) ((uint32_t)(PDMA->ABTSTS = (u32Mask)))
N
N/**
N * @brief       Get Scatter-Gather Table Empty Interrupt Status
N *
N * @param[in]   None
N *
N * @return      None
N *
N * @details     Get the scatter-gather table empty Interrupt status.
N *
N * \hideinitializer
N */
N#define PDMA_GET_EMPTY_STS() ((uint32_t)(PDMA->SCATSTS))
N
N/**
N * @brief       Clear Scatter-Gather Table Empty Interrupt Status
N *
N * @param[in]   u32Mask     The channel mask
N *
N * @return      None
N *
N * @details     Clear the scatter-gather table empty Interrupt status.
N *
N * \hideinitializer
N */
N#define PDMA_CLR_EMPTY_FLAG(u32Mask) ((uint32_t)(PDMA->SCATSTS = (u32Mask)))
N
N/**
N * @brief       Clear Timeout Interrupt Status
N *
N * @param[in]   u32Ch     The selected channel
N *
N * @return      None
N *
N * @details     Clear the selected channel timeout interrupt status.
N * @note        This function is only supported in channel 0 and channel 1.
N *
N * \hideinitializer
N */
N#define PDMA_CLR_TMOUT_FLAG(u32Ch) ((uint32_t)(PDMA->INTSTS = (1 << ((u32Ch) + 8))))
N
N/**
N * @brief       Check Channel Status
N *
N * @param[in]   u32Ch     The selected channel
N *
N * @retval      0 Idle state
N * @retval      1 Busy state
N *
N * @details     Check the selected channel is busy or not.
N *
N * \hideinitializer
N */
N#define PDMA_IS_CH_BUSY(u32Ch) ((uint32_t)(PDMA->TRGSTS & (1 << (u32Ch)))? 1 : 0)
N
N/**
N * @brief       Set Source Address
N *
N * @param[in]   u32Ch     The selected channel
N * @param[in]   u32Addr   The selected address
N *
N * @return      None
N *
N * @details     This macro set the selected channel source address.
N *
N * \hideinitializer
N */
N#define PDMA_SET_SRC_ADDR(u32Ch, u32Addr) ((uint32_t)(PDMA->DSCT[(u32Ch)].SA = (u32Addr)))
N
N/**
N * @brief       Set Destination Address
N *
N * @param[in]   u32Ch     The selected channel
N * @param[in]   u32Addr   The selected address
N *
N * @return      None
N *
N * @details     This macro set the selected channel destination address.
N *
N * \hideinitializer
N */
N#define PDMA_SET_DST_ADDR(u32Ch, u32Addr) ((uint32_t)(PDMA->DSCT[(u32Ch)].DA = (u32Addr)))
N
N/**
N * @brief       Set Transfer Count
N *
N * @param[in]   u32Ch          The selected channel
N * @param[in]   u32TransCount  Transfer Count
N *
N * @return      None
N *
N * @details     This macro set the selected channel transfer count.
N *
N * \hideinitializer
N */
N#define PDMA_SET_TRANS_CNT(u32Ch, u32TransCount) ((uint32_t)(PDMA->DSCT[(u32Ch)].CTL=(PDMA->DSCT[(u32Ch)].CTL&~PDMA_DSCT_CTL_TXCNT_Msk)|((u32TransCount-1) << PDMA_DSCT_CTL_TXCNT_Pos)))
N
N/**
N * @brief       Set Scatter-gather descriptor Address
N *
N * @param[in]   u32Ch     The selected channel
N * @param[in]   u32Addr   The descriptor address
N *
N * @return      None
N *
N * @details     This macro set the selected channel scatter-gather descriptor address.
N *
N * \hideinitializer
N */
N#define PDMA_SET_SCATTER_DESC(u32Ch, u32Addr) ((uint32_t)(PDMA->DSCT[(u32Ch)].FIRST = (u32Addr) - (PDMA->SCATBA)))
N/**
N * @brief       Pause the channel
N *
N * @param[in]   u32Ch     The selected channel
N *
N * @return      None
N *
N * @details     This macro pause the selected channel.
N *
N * \hideinitializer
N */
N#define PDMA_PAUSE(u32Ch) ((uint32_t)(PDMA->PAUSE = (1 << (u32Ch))))
N
N/**
N * @brief       Reset the channel
N *
N * @param[in]   u32Ch     The selected channel
N *
N * @return      None
N *
N * @details     This macro reset the selected channel.
N *
N * \hideinitializer
N */
N#define PDMA_RESET(u32Ch) ((uint32_t)(PDMA->RESET = (1 << (u32Ch))))
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define PWM functions prototype                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
Nvoid PDMA_Open(uint32_t u32Mask);
Nvoid PDMA_Close(void);
Nvoid PDMA_SetTransferCnt(uint32_t u32Ch, uint32_t u32Width, uint32_t u32TransCount);
Nvoid PDMA_SetTransferAddr(uint32_t u32Ch, uint32_t u32SrcAddr, uint32_t u32SrcCtrl, uint32_t u32DstAddr, uint32_t u32DstCtrl);
Nvoid PDMA_SetTransferMode(uint32_t u32Ch, uint32_t u32Peripheral, uint32_t u32ScatterEn, uint32_t u32DescAddr);
Nvoid PDMA_SetBurstType(uint32_t u32Ch, uint32_t u32BurstType, uint32_t u32BurstSize);
Nvoid PDMA_EnableTimeout(uint32_t u32Mask);
Nvoid PDMA_DisableTimeout(uint32_t u32Mask);
Nvoid PDMA_SetTimeOut(uint32_t u32Ch, uint32_t u32OnOff, uint32_t u32TimeOutCnt);
Nvoid PDMA_Trigger(uint32_t u32Ch);
Nvoid PDMA_EnableInt(uint32_t u32Ch, uint32_t u32Mask);
Nvoid PDMA_DisableInt(uint32_t u32Ch, uint32_t u32Mask);
N
N
N/*@}*/ /* end of group PDMA_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group PDMA_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__PDMA_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 381 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "pwm.h"
L 1 "..\..\..\..\Library\StdDriver\inc\pwm.h" 1
N/**************************************************************************//**
N * @file     pwm.h
N * @version  V3.00
N * @brief    NUC121 series PWM driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __PWM_H__
N#define __PWM_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup PWM_Driver PWM Driver
N  @{
N*/
N
N/** @addtogroup PWM_EXPORTED_CONSTANTS PWM Exported Constants
N  @{
N*/
N#define PWM_CHANNEL_NUM                          (6)        /*!< PWM channel number */
N#define PWM_CH_0_MASK                            (0x1UL)    /*!< PWM channel 0 mask */
N#define PWM_CH_1_MASK                            (0x2UL)    /*!< PWM channel 1 mask */
N#define PWM_CH_2_MASK                            (0x4UL)    /*!< PWM channel 2 mask */
N#define PWM_CH_3_MASK                            (0x8UL)    /*!< PWM channel 3 mask */
N#define PWM_CH_4_MASK                            (0x10UL)   /*!< PWM channel 4 mask */
N#define PWM_CH_5_MASK                            (0x20UL)   /*!< PWM channel 5 mask */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Counter Type Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_UP_COUNTER                           (0UL)      /*!< Up counter type */
N#define PWM_DOWN_COUNTER                         (1UL)      /*!< Down counter type */
N#define PWM_UP_DOWN_COUNTER                      (2UL)      /*!< Up-Down counter type */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Aligned Type Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_EDGE_ALIGNED                         (1UL)      /*!< PWM working in edge aligned type(down count) */
N#define PWM_CENTER_ALIGNED                       (2UL)      /*!< PWM working in center aligned type */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Output Level Constant Definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_OUTPUT_NOTHING                       (0UL)      /*!< PWM output nothing */
N#define PWM_OUTPUT_LOW                           (1UL)      /*!< PWM output low */
N#define PWM_OUTPUT_HIGH                          (2UL)      /*!< PWM output high */
N#define PWM_OUTPUT_TOGGLE                        (3UL)      /*!< PWM output toggle */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Synchronous Start Function Control Constant Definitions                                                */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_SSCTL_SSRC_PWM0                      (0UL<<PWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from PWM0 */
N#define PWM_SSCTL_SSRC_PWM1                      (1UL<<PWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from PWM1 */
N#define PWM_SSCTL_SSRC_BPWM0                     (2UL<<PWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from BPWM0 */
N#define PWM_SSCTL_SSRC_BPWM1                     (3UL<<PWM_SSCTL_SSRC_Pos)    /*!< Synchronous start source comes from BPWM1 */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Trigger Source Select Constant Definitions                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_TRIGGER_ADC_EVEN_ZERO_POINT                     (0UL)     /*!< PWM trigger ADC while counter of even channel matches zero point */
N#define PWM_TRIGGER_ADC_EVEN_PERIOD_POINT                   (1UL)     /*!< PWM trigger ADC while counter of even channel matches period point */
N#define PWM_TRIGGER_ADC_EVEN_ZERO_OR_PERIOD_POINT           (2UL)     /*!< PWM trigger ADC while counter of even channel matches zero or period point */
N#define PWM_TRIGGER_ADC_EVEN_COMPARE_UP_COUNT_POINT         (3UL)     /*!< PWM trigger ADC while counter of even channel matches up count to comparator point */
N#define PWM_TRIGGER_ADC_EVEN_COMPARE_DOWN_COUNT_POINT       (4UL)     /*!< PWM trigger ADC while counter of even channel matches down count to comparator point */
N#define PWM_TRIGGER_ADC_ODD_COMPARE_UP_COUNT_POINT          (8UL)     /*!< PWM trigger ADC while counter of odd channel matches up count to comparator point */
N#define PWM_TRIGGER_ADC_ODD_COMPARE_DOWN_COUNT_POINT        (9UL)     /*!< PWM trigger ADC while counter of odd channel matches down count to comparator point */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Fail brake Control Constant Definitions                                                                */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_FB_EDGE_BKP0                         (PWM_BRKCTL0_1_BRKP0EEN_Msk)    /*!< BKP0 pin as edge-detect fault brake source */
N#define PWM_FB_EDGE_BKP1                         (PWM_BRKCTL0_1_BRKP1EEN_Msk)    /*!< BKP1 pin as edge-detect fault brake source */
N#define PWM_FB_EDGE_SYS_CSS                      (PWM_BRKCTL0_1_SYSEEN_Msk | PWM_FAILBRK_CSSBRKEN_Msk)    /*!< System fail condition: clock security system detection as edge-detect fault brake source */
N#define PWM_FB_EDGE_SYS_BOD                      (PWM_BRKCTL0_1_SYSEEN_Msk | PWM_FAILBRK_BODBRKEN_Msk)    /*!< System fail condition: brown-out detection as edge-detect fault brake source */
N#define PWM_FB_EDGE_SYS_COR                      (PWM_BRKCTL0_1_SYSEEN_Msk | PWM_FAILBRK_CORBRKEN_Msk)    /*!< System fail condition: core lockup detection as edge-detect fault brake source */
N
N#define PWM_FB_LEVEL_BKP0                        (PWM_BRKCTL0_1_BRKP0LEN_Msk)    /*!< BKP0 pin as level-detect fault brake source */
N#define PWM_FB_LEVEL_BKP1                        (PWM_BRKCTL0_1_BRKP1LEN_Msk)    /*!< BKP1 pin as level-detect fault brake source */
N#define PWM_FB_LEVEL_SYS_CSS                     (PWM_BRKCTL0_1_SYSLEN_Msk | PWM_FAILBRK_CSSBRKEN_Msk)    /*!< System fail condition: clock security system detection as level-detect fault brake source */
N#define PWM_FB_LEVEL_SYS_BOD                     (PWM_BRKCTL0_1_SYSLEN_Msk | PWM_FAILBRK_BODBRKEN_Msk)    /*!< System fail condition: brown-out detection as level-detect fault brake source */
N#define PWM_FB_LEVEL_SYS_COR                     (PWM_BRKCTL0_1_SYSLEN_Msk | PWM_FAILBRK_CORBRKEN_Msk)    /*!< System fail condition: core lockup detection as level-detect fault brake source */
N
N#define PWM_FB_EDGE                              (0UL)    /*!< edge-detect fault brake */
N#define PWM_FB_LEVEL                             (8UL)    /*!< level-detect fault brake */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Capture Control Constant Definitions                                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_CAPTURE_INT_RISING_LATCH             (1UL)        /*!< PWM capture interrupt if channel has rising transition */
N#define PWM_CAPTURE_INT_FALLING_LATCH            (0x100UL)    /*!< PWM capture interrupt if channel has falling transition */
N
N#define PWM_CAPTURE_PDMA_RISING_LATCH            (0x2UL)      /*!< PWM capture rising latched data transfer by PDMA */
N#define PWM_CAPTURE_PDMA_FALLING_LATCH           (0x4UL)      /*!< PWM capture falling latched data transfer by PDMA */
N#define PWM_CAPTURE_PDMA_RISING_FALLING_LATCH    (0x6UL)      /*!< PWM capture rising and falling latched data transfer by PDMA */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Duty Interrupt Type Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_DUTY_INT_DOWN_COUNT_MATCH_CMP        (PWM_INTEN0_CMPDIEN0_Msk)   /*!< PWM duty interrupt triggered if down count match comparator */
N#define PWM_DUTY_INT_UP_COUNT_MATCH_CMP          (PWM_INTEN0_CMPUIEN0_Msk)   /*!< PWM duty interrupt triggered if up down match comparator */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Load Mode Constant Definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_LOAD_MODE_IMMEDIATE                  (PWM_CTL0_IMMLDEN0_Msk)    /*!< PWM immediately load mode */
N#define PWM_LOAD_MODE_CENTER                     (PWM_CTL0_CTRLD0_Msk)      /*!< PWM center load mode */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Noise Filter Clock Divide Select Constant Definitions                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_NF_CLK_DIV_1                         (0UL)    /*!< Noise filter clock is HCLK divide by 1 */
N#define PWM_NF_CLK_DIV_2                         (1UL)    /*!< Noise filter clock is HCLK divide by 2 */
N#define PWM_NF_CLK_DIV_4                         (2UL)    /*!< Noise filter clock is HCLK divide by 4 */
N#define PWM_NF_CLK_DIV_8                         (3UL)    /*!< Noise filter clock is HCLK divide by 8 */
N#define PWM_NF_CLK_DIV_16                        (4UL)    /*!< Noise filter clock is HCLK divide by 16 */
N#define PWM_NF_CLK_DIV_32                        (5UL)    /*!< Noise filter clock is HCLK divide by 32 */
N#define PWM_NF_CLK_DIV_64                        (6UL)    /*!< Noise filter clock is HCLK divide by 64 */
N#define PWM_NF_CLK_DIV_128                       (7UL)    /*!< Noise filter clock is HCLK divide by 128 */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Clock Source Select Constant Definitions                                                               */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PWM_CLKSRC_PWM_CLK                       (0UL)    /*!< PWM Clock source selects to PWM0_CLK or PWM1_CLK */
N#define PWM_CLKSRC_TIMER0                        (1UL)    /*!< PWM Clock source selects to TIMER0 overflow */
N#define PWM_CLKSRC_TIMER1                        (2UL)    /*!< PWM Clock source selects to TIMER1 overflow */
N#define PWM_CLKSRC_TIMER2                        (3UL)    /*!< PWM Clock source selects to TIMER2 overflow */
N#define PWM_CLKSRC_TIMER3                        (4UL)    /*!< PWM Clock source selects to TIMER3 overflow */
N
N/*@}*/ /* end of group PWM_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup PWM_EXPORTED_FUNCTIONS PWM Exported Functions
N  @{
N*/
N
N/**
N * @brief This macro enable complementary mode
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @return None
N * @details This macro is used to enable complementary mode of PWM module.
N * \hideinitializer
N */
N#define PWM_ENABLE_COMPLEMENTARY_MODE(pwm) ((pwm)->CTL1 = (pwm)->CTL1 | PWM_CTL1_PWMMODE0_Msk | PWM_CTL1_PWMMODE2_Msk | PWM_CTL1_PWMMODE4_Msk)
N
N/**
N * @brief This macro disable complementary mode, and enable independent mode.
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @return None
N * @details This macro is used to disable complementary mode of PWM module.
N * \hideinitializer
N */
N#define PWM_DISABLE_COMPLEMENTARY_MODE(pwm) ((pwm)->CTL1 = (pwm)->CTL1 & ~PWM_CTL1_PWMMODE0_Msk & ~PWM_CTL1_PWMMODE2_Msk & ~PWM_CTL1_PWMMODE4_Msk)
N
N/**
N * @brief Enable timer synchronous mode of specified channel(s)
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32SyncSrc Synchronous start source selection, valid values are:
N *              - \ref PWM_SSCTL_SSRC_PWM0
N *              - \ref PWM_SSCTL_SSRC_PWM1
N *              - \ref PWM_SSCTL_SSRC_BPWM0
N *              - \ref PWM_SSCTL_SSRC_BPWM1
N * @return None
N * @details This macro is used to enable timer synchronous mode of specified channel(s). Every two channels share the same setting.
N * \hideinitializer
N */
N#define PWM_ENABLE_TIMER_SYNC(pwm, u32ChannelMask, u32SyncSrc) \
N    do{ \
N        int i;\
N        (pwm)->SSCTL = ((pwm)->SSCTL & ~PWM_SSCTL_SSRC_Msk) | (u32SyncSrc) ; \
N        for(i = 0; i < 6; i++) { \
N            if((u32ChannelMask) & (1 << i)) \
N                (pwm)->SSCTL |= (1UL << ((i >> 1) << 1)); \
N        } \
N    }while(0)
X#define PWM_ENABLE_TIMER_SYNC(pwm, u32ChannelMask, u32SyncSrc)     do{         int i;        (pwm)->SSCTL = ((pwm)->SSCTL & ~PWM_SSCTL_SSRC_Msk) | (u32SyncSrc) ;         for(i = 0; i < 6; i++) {             if((u32ChannelMask) & (1 << i))                 (pwm)->SSCTL |= (1UL << ((i >> 1) << 1));         }     }while(0)
N
N/**
N * @brief Disable timer synchronous mode of specified channel(s)
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @return None
N * @details This macro is used to disable timer synchronous mode of specified channel(s). Every two channels share the same setting.
N * \hideinitializer
N */
N#define PWM_DISABLE_TIMER_SYNC(pwm, u32ChannelMask) \
N    do{ \
N        int i;\
N        for(i = 0; i < 6; i++) { \
N            if((u32ChannelMask) & (1 << i)) \
N                (pwm)->SSCTL &= ~(1UL << ((i >> 1) << 1)); \
N        } \
N    }while(0)
X#define PWM_DISABLE_TIMER_SYNC(pwm, u32ChannelMask)     do{         int i;        for(i = 0; i < 6; i++) {             if((u32ChannelMask) & (1 << i))                 (pwm)->SSCTL &= ~(1UL << ((i >> 1) << 1));         }     }while(0)
N
N/**
N * @brief This macro enable PWM counter synchronous start counting function.
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @return None
N * @details This macro is used to make selected PWM0 and PWM1 channel(s) start counting at the same time.
N *          To configure synchronous start counting channel(s) by PWM_ENABLE_TIMER_SYNC() and PWM_DISABLE_TIMER_SYNC().
N * \hideinitializer
N */
N#define PWM_TRIGGER_SYNC_START(pwm) ((pwm)->SSTRG = PWM_SSTRG_CNTSEN_Msk)
N
N/**
N * @brief This macro enable output inverter of specified channel(s)
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @return None
N * @details This macro is used to enable output inverter of specified channel(s).
N * \hideinitializer
N */
N#define PWM_ENABLE_OUTPUT_INVERTER(pwm, u32ChannelMask) ((pwm)->POLCTL |= (u32ChannelMask))
N
N/**
N * @brief This macro get captured rising data
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @return None
N * @details This macro is used to get captured rising data of specified channel.
N * \hideinitializer
N */
N#define PWM_GET_CAPTURE_RISING_DATA(pwm, u32ChannelNum) (*(__IO uint32_t *) (&((pwm)->RCAPDAT0) + 2 * (u32ChannelNum)))
N
N/**
N * @brief This macro get captured falling data
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @return None
N * @details This macro is used to get captured falling data of specified channel.
N * \hideinitializer
N */
N#define PWM_GET_CAPTURE_FALLING_DATA(pwm, u32ChannelNum) (*(__IO uint32_t *) (&((pwm)->FCAPDAT0) + 2 * (u32ChannelNum)))
N
N/**
N * @brief This macro mask output logic to high or low
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32LevelMask Output logic to high or low
N * @return None
N * @details This macro is used to mask output logic to high or low of specified channel(s).
N * \hideinitializer
N */
N#define PWM_MASK_OUTPUT(pwm, u32ChannelMask, u32LevelMask) \
N    do{ \
N        int i;\
N        for(i = 0; i < 6; i++) { \
N            if((u32ChannelMask) & (1 << i)){ \
N                (pwm)->MSKEN |= (1UL << i); \
N                (pwm)->MSK = ((pwm)->MSK & ~(1UL << i)) | ((u32LevelMask) << i); \
N            } \
N        } \
N    }while(0)
X#define PWM_MASK_OUTPUT(pwm, u32ChannelMask, u32LevelMask)     do{         int i;        for(i = 0; i < 6; i++) {             if((u32ChannelMask) & (1 << i)){                 (pwm)->MSKEN |= (1UL << i);                 (pwm)->MSK = ((pwm)->MSK & ~(1UL << i)) | ((u32LevelMask) << i);             }         }     }while(0)
N
N/**
N * @brief This macro set the prescaler of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @param[in] u32Prescaler Clock prescaler of specified channel. Valid values are between 1 ~ 0xFFF
N * @return None
N * @details This macro is used to set the prescaler of specified channel.
N * @note Every even channel N, and channel (N + 1) share a prescaler. So if channel 0 prescaler changed,
N *       channel 1 will also be affected.
N * \hideinitializer
N */
N#define PWM_SET_PRESCALER(pwm, u32ChannelNum, u32Prescaler) (*(__IO uint32_t *) (&((pwm)->CLKPSC0_1) + ((u32ChannelNum) >> 1)) = (u32Prescaler))
N
N/**
N * @brief This macro get the prescaler of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @return Return Clock prescaler of specified channel. Valid values are between 0 ~ 0xFFF
N * @details This macro is used to get the prescaler of specified channel.
N * @note Every even channel N, and channel (N + 1) share a prescaler. So if channel 0 prescaler changed, channel 1 will also be affected.
N *       The clock of PWM counter is divided by (u32Prescaler + 1).
N * \hideinitializer
N */
N#define PWM_GET_PRESCALER(pwm, u32ChannelNum) (*(__IO uint32_t *) (&((pwm)->CLKPSC0_1) + ((u32ChannelNum) >> 1)))
N
N/**
N * @brief This macro set the comparator of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @param[in] u32CMR Comparator of specified channel. Valid values are between 0~0xFFFF
N * @return None
N * @details This macro is used to set the comparator of specified channel.
N * @note This new setting will take effect on next PWM period in period loading mode.
N * \hideinitializer
N */
N#define PWM_SET_CMR(pwm, u32ChannelNum, u32CMR) ((pwm)->CMPDAT[(u32ChannelNum)] = (u32CMR))
N
N/**
N * @brief This macro get the comparator of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @return Return the comparator of specified channel. Valid values are between 0~0xFFFF
N * @details This macro is used to get the comparator of specified channel.
N * \hideinitializer
N */
N#define PWM_GET_CMR(pwm, u32ChannelNum) ((pwm)->CMPDAT[(u32ChannelNum)])
N
N/**
N * @brief This macro set the period of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0, 2, 4. Every two channels share the same setting.
N * @param[in] u32CNR Period of specified channel. Valid values are between 0~0xFFFF
N * @return None
N * @details This macro is used to set the period of specified channel.
N * @note This new setting will take effect on next PWM period.
N * @note PWM counter will stop if period length set to 0.
N * \hideinitializer
N */
N#define PWM_SET_CNR(pwm, u32ChannelNum, u32CNR)  ((pwm)->PERIOD[(((u32ChannelNum) >> 1) << 1)] = (u32CNR))
N
N/**
N * @brief This macro get the period of the selected channel
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @return Return the period of specified channel. Valid values are between 0~0xFFFF
N * @details This macro is used to get the period of specified channel.
N * \hideinitializer
N */
N#define PWM_GET_CNR(pwm, u32ChannelNum)  ((pwm)->PERIOD[(((u32ChannelNum) >> 1) << 1)])
N
N/**
N * @brief This macro set the PWM aligned type
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel. Every two channels share the same setting.
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32AlignedType PWM aligned type, valid values are:
N *              - \ref PWM_UP_COUNTER
N *              - \ref PWM_DOWN_COUNTER
N *              - \ref PWM_UP_DOWN_COUNTER
N * @return None
N * @details This macro is used to set the PWM aligned type of specified channel(s).
N * \hideinitializer
N */
N#define PWM_SET_ALIGNED_TYPE(pwm, u32ChannelMask, u32AlignedType) \
N    do{ \
N        int i; \
N        for(i = 0; i < 6; i++) { \
N            if((u32ChannelMask) & (1 << i)) \
N                (pwm)->CTL1 = (((pwm)->CTL1 & ~(3UL << ((i >> 1) << 2))) | ((u32AlignedType) << ((i >> 1) << 2))); \
N        } \
N    }while(0)
X#define PWM_SET_ALIGNED_TYPE(pwm, u32ChannelMask, u32AlignedType)     do{         int i;         for(i = 0; i < 6; i++) {             if((u32ChannelMask) & (1 << i))                 (pwm)->CTL1 = (((pwm)->CTL1 & ~(3UL << ((i >> 1) << 2))) | ((u32AlignedType) << ((i >> 1) << 2)));         }     }while(0)
N
N/**
N * @brief Clear counter of specified channel(s)
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel. Every two channels share the same setting.
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @return None
N * @details This macro is used to clear counter of specified channel(s).
N * \hideinitializer
N */
N#define PWM_CLR_COUNTER(pwm, u32ChannelMask) \
N    do{ \
N        int i; \
N        for(i = 0; i < 6; i++) { \
N            if((u32ChannelMask) & (1 << i)) \
N                ((pwm)->CNTCLR |= (1UL << ((i >> 1) << 1))); \
N        } \
N    }while(0)
X#define PWM_CLR_COUNTER(pwm, u32ChannelMask)     do{         int i;         for(i = 0; i < 6; i++) {             if((u32ChannelMask) & (1 << i))                 ((pwm)->CNTCLR |= (1UL << ((i >> 1) << 1)));         }     }while(0)
N
N/**
N * @brief Set output level at zero, compare up, period(center) and compare down of specified channel(s)
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 1...
N * @param[in] u32ZeroLevel output level at zero point, valid values are:
N *              - \ref PWM_OUTPUT_NOTHING
N *              - \ref PWM_OUTPUT_LOW
N *              - \ref PWM_OUTPUT_HIGH
N *              - \ref PWM_OUTPUT_TOGGLE
N * @param[in] u32CmpUpLevel output level at compare up point, valid values are:
N *              - \ref PWM_OUTPUT_NOTHING
N *              - \ref PWM_OUTPUT_LOW
N *              - \ref PWM_OUTPUT_HIGH
N *              - \ref PWM_OUTPUT_TOGGLE
N * @param[in] u32PeriodLevel output level at period(center) point, valid values are:
N *              - \ref PWM_OUTPUT_NOTHING
N *              - \ref PWM_OUTPUT_LOW
N *              - \ref PWM_OUTPUT_HIGH
N *              - \ref PWM_OUTPUT_TOGGLE
N * @param[in] u32CmpDownLevel output level at compare down point, valid values are:
N *              - \ref PWM_OUTPUT_NOTHING
N *              - \ref PWM_OUTPUT_LOW
N *              - \ref PWM_OUTPUT_HIGH
N *              - \ref PWM_OUTPUT_TOGGLE
N * @return None
N * @details This macro is used to Set output level at zero, compare up, period(center) and compare down of specified channel(s).
N * \hideinitializer
N */
N#define PWM_SET_OUTPUT_LEVEL(pwm, u32ChannelMask, u32ZeroLevel, u32CmpUpLevel, u32PeriodLevel, u32CmpDownLevel) \
N    do{ \
N        int i; \
N        for(i = 0; i < 6; i++) { \
N            if((u32ChannelMask) & (1 << i)) { \
N                (pwm)->WGCTL0 = (((pwm)->WGCTL0 & ~(3UL << (2 * i))) | ((u32ZeroLevel) << (2 * i))); \
N                (pwm)->WGCTL0 = (((pwm)->WGCTL0 & ~(3UL << (PWM_WGCTL0_PRDPCTL0_Pos + (2 * i)))) | ((u32PeriodLevel) << (PWM_WGCTL0_PRDPCTL0_Pos + (2 * i)))); \
N                (pwm)->WGCTL1 = (((pwm)->WGCTL1 & ~(3UL << (2 * i))) | ((u32CmpUpLevel) << (2 * i))); \
N                (pwm)->WGCTL1 = (((pwm)->WGCTL1 & ~(3UL << (PWM_WGCTL1_CMPDCTL0_Pos + (2 * i)))) | ((u32CmpDownLevel) << (PWM_WGCTL1_CMPDCTL0_Pos + (2 * i)))); \
N            } \
N        } \
N    }while(0)
X#define PWM_SET_OUTPUT_LEVEL(pwm, u32ChannelMask, u32ZeroLevel, u32CmpUpLevel, u32PeriodLevel, u32CmpDownLevel)     do{         int i;         for(i = 0; i < 6; i++) {             if((u32ChannelMask) & (1 << i)) {                 (pwm)->WGCTL0 = (((pwm)->WGCTL0 & ~(3UL << (2 * i))) | ((u32ZeroLevel) << (2 * i)));                 (pwm)->WGCTL0 = (((pwm)->WGCTL0 & ~(3UL << (PWM_WGCTL0_PRDPCTL0_Pos + (2 * i)))) | ((u32PeriodLevel) << (PWM_WGCTL0_PRDPCTL0_Pos + (2 * i))));                 (pwm)->WGCTL1 = (((pwm)->WGCTL1 & ~(3UL << (2 * i))) | ((u32CmpUpLevel) << (2 * i)));                 (pwm)->WGCTL1 = (((pwm)->WGCTL1 & ~(3UL << (PWM_WGCTL1_CMPDCTL0_Pos + (2 * i)))) | ((u32CmpDownLevel) << (PWM_WGCTL1_CMPDCTL0_Pos + (2 * i))));             }         }     }while(0)
N
N/**
N * @brief Trigger brake event from specified channel(s) by using sw trigger
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelMask Combination of enabled channels. Each bit corresponds to a channel
N *                           Bit 0 represents channel 0, bit 1 represents channel 2 and bit 2 represents channel 4
N * @param[in] u32BrakeType Type of brake trigger. It supports PWM_FB_EDGE and PWM_FB_LEVEL.
N *              - \ref PWM_FB_EDGE
N *              - \ref PWM_FB_LEVEL
N * @return None
N * @details This macro is used to trigger brake event from specified channel(s) by using sw trigger.
N * \hideinitializer
N */
N#define PWM_TRIGGER_BRAKE(pwm, u32ChannelMask, u32BrakeType) ((pwm)->SWBRK |= ((u32ChannelMask) << (u32BrakeType)))
N
N/**
N * @brief Set Dead zone clock source
N * @param[in] pwm The pointer of the specified PWM module
N *                - PWM0 : PWM Group 0
N *                - PWM1 : PWM Group 1
N * @param[in] u32ChannelNum PWM channel number. Valid values are between 0~5
N * @param[in] u32AfterPrescaler Dead zone clock source is from prescaler output. Valid values are TRUE (after prescaler) or FALSE (before prescaler).
N * @return None
N * @details This macro is used to set Dead zone clock source. Every two channels share the same setting.
N * @note The write-protection function should be disabled before using this function.
N * \hideinitializer
N */
N#define PWM_SET_DEADZONE_CLK_SRC(pwm, u32ChannelNum, u32AfterPrescaler) \
N    (*(__IO uint32_t *) (&((pwm)->DTCTL0_1) + ((u32ChannelNum) >> 1)) = (*(__IO uint32_t *) (&((pwm)->DTCTL0_1) + ((u32ChannelNum) >> 1)) & ~PWM_DTCTL0_1_DTCKSEL_Msk) | \
N            ((u32AfterPrescaler) << PWM_DTCTL0_1_DTCKSEL_Pos))
X#define PWM_SET_DEADZONE_CLK_SRC(pwm, u32ChannelNum, u32AfterPrescaler)     (*(__IO uint32_t *) (&((pwm)->DTCTL0_1) + ((u32ChannelNum) >> 1)) = (*(__IO uint32_t *) (&((pwm)->DTCTL0_1) + ((u32ChannelNum) >> 1)) & ~PWM_DTCTL0_1_DTCKSEL_Msk) |             ((u32AfterPrescaler) << PWM_DTCTL0_1_DTCKSEL_Pos))
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Define PWM functions prototype                                                                          */
N/*---------------------------------------------------------------------------------------------------------*/
Nuint32_t PWM_ConfigCaptureChannel(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32UnitTimeNsec, uint32_t u32CaptureEdge);
Nuint32_t PWM_ConfigOutputChannel(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Frequency, uint32_t u32DutyCycle);
Nvoid PWM_Start(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_Stop(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_ForceStop(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_EnableADCTrigger(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
Nvoid PWM_DisableADCTrigger(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_ClearADCTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Condition);
Nuint32_t PWM_GetADCTriggerFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableFaultBrake(PWM_T *pwm, uint32_t u32ChannelMask, uint32_t u32LevelMask, uint32_t u32BrakeSource);
Nvoid PWM_EnableCapture(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_DisableCapture(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_EnableOutput(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_DisableOutput(PWM_T *pwm, uint32_t u32ChannelMask);
Nvoid PWM_EnableDeadZone(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Duration);
Nvoid PWM_DisableDeadZone(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableCaptureInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nvoid PWM_DisableCaptureInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nvoid PWM_ClearCaptureIntFlag(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32Edge);
Nuint32_t PWM_GetCaptureIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableDutyInt(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32IntDutyType);
Nvoid PWM_DisableDutyInt(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_ClearDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nuint32_t PWM_GetDutyIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableLoadMode(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
Nvoid PWM_DisableLoadMode(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32LoadMode);
Nvoid PWM_EnableFaultBrakeInt(PWM_T *pwm, uint32_t u32BrakeSource);
Nvoid PWM_DisableFaultBrakeInt(PWM_T *pwm, uint32_t u32BrakeSource);
Nvoid PWM_ClearFaultBrakeIntFlag(PWM_T *pwm, uint32_t u32BrakeSource);
Nuint32_t PWM_GetFaultBrakeIntFlag(PWM_T *pwm, uint32_t u32BrakeSource);
Nvoid PWM_EnablePeriodInt(PWM_T *pwm, uint32_t u32ChannelNum,  uint32_t u32IntPeriodType);
Nvoid PWM_DisablePeriodInt(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_ClearPeriodIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nuint32_t PWM_GetPeriodIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnableZeroInt(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_DisableZeroInt(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_ClearZeroIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nuint32_t PWM_GetZeroIntFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_SetClockSource(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32ClkSrcSel);
Nvoid PWM_EnableBrakeNoiseFilter(PWM_T *pwm, uint32_t u32BrakePinNum, uint32_t u32ClkCnt, uint32_t u32ClkDivSel);
Nvoid PWM_DisableBrakeNoiseFilter(PWM_T *pwm, uint32_t u32BrakePinNum);
Nvoid PWM_EnableBrakePinInverse(PWM_T *pwm, uint32_t u32BrakePinNum);
Nvoid PWM_DisableBrakePinInverse(PWM_T *pwm, uint32_t u32BrakePinNum);
Nvoid PWM_SetBrakePinSource(PWM_T *pwm, uint32_t u32BrakePinNum, uint32_t u32SelAnotherModule);
Nuint32_t PWM_GetWrapAroundFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_ClearWrapAroundFlag(PWM_T *pwm, uint32_t u32ChannelNum);
Nvoid PWM_EnablePDMA(PWM_T *pwm, uint32_t u32ChannelNum, uint32_t u32RisingFirst, uint32_t u32Mode);
Nvoid PWM_DisablePDMA(PWM_T *pwm, uint32_t u32ChannelNum);
N
N/*@}*/ /* end of group PWM_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group PWM_Driver */
N
N/*@}*/ /* end of group Standard_Driver*/
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__PWM_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 382 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "spi_i2s.h"
L 1 "..\..\..\..\Library\StdDriver\inc\spi_i2s.h" 1
N/**************************************************************************//**
N * @file     spi_i2s.h
N * @version  V3.00
N * @brief    NUC121 series SPI driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N*****************************************************************************/
N#ifndef __SPI_H__
N#define __SPI_H__
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* Include related headers                                                                                 */
N/*---------------------------------------------------------------------------------------------------------*/
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup SPI_Driver SPI Driver
N  @{
N*/
N
N/** @addtogroup SPI_EXPORTED_CONSTANTS SPI Exported Constants
N  @{
N*/
N
N#define SPI_MODE_0        (SPI_CTL_TXNEG_Msk)                             /*!< CLKPOL=0; RXNEG=0; TXNEG=1 */
N#define SPI_MODE_1        (SPI_CTL_RXNEG_Msk)                             /*!< CLKPOL=0; RXNEG=1; TXNEG=0 */
N#define SPI_MODE_2        (SPI_CTL_CLKPOL_Msk | SPI_CTL_RXNEG_Msk)        /*!< CLKPOL=1; RXNEG=1; TXNEG=0 */
N#define SPI_MODE_3        (SPI_CTL_CLKPOL_Msk | SPI_CTL_TXNEG_Msk)        /*!< CLKPOL=1; RXNEG=0; TXNEG=1 */
N
N#define SPI_SLAVE         (SPI_CTL_SLAVE_Msk)                             /*!< Set as slave */
N#define SPI_MASTER        (0x0)                                           /*!< Set as master */
N
N#define SPI_SS                (SPI_SSCTL_SS_Msk)                          /*!< Set SS */
N#define SPI_SS_ACTIVE_HIGH    (SPI_SSCTL_SSACTPOL_Msk)                    /*!< SS active high */
N#define SPI_SS_ACTIVE_LOW     (0x0)                                       /*!< SS active low */
N
N/* SPI Interrupt Mask */
N#define SPI_UNIT_INT_MASK                (0x001)                          /*!< Unit transfer interrupt mask */
N#define SPI_SSACT_INT_MASK               (0x002)                          /*!< Slave selection signal active interrupt mask */
N#define SPI_SSINACT_INT_MASK             (0x004)                          /*!< Slave selection signal inactive interrupt mask */
N#define SPI_SLVUR_INT_MASK               (0x008)                          /*!< Slave under run interrupt mask */
N#define SPI_SLVBE_INT_MASK               (0x010)                          /*!< Slave bit count error interrupt mask */
N#define SPI_TXUF_INT_MASK                (0x040)                          /*!< Slave TX underflow interrupt mask */
N#define SPI_FIFO_TXTH_INT_MASK           (0x080)                          /*!< FIFO TX threshold interrupt mask */
N#define SPI_FIFO_RXTH_INT_MASK           (0x100)                          /*!< FIFO RX threshold interrupt mask */
N#define SPI_FIFO_RXOV_INT_MASK           (0x200)                          /*!< FIFO RX overrun interrupt mask */
N#define SPI_FIFO_RXTO_INT_MASK           (0x400)                          /*!< FIFO RX time-out interrupt mask */
N
N/* SPI Status Mask */
N#define SPI_BUSY_MASK                    (0x01)                           /*!< Busy status mask */
N#define SPI_RX_EMPTY_MASK                (0x02)                           /*!< RX empty status mask */
N#define SPI_RX_FULL_MASK                 (0x04)                           /*!< RX full status mask */
N#define SPI_TX_EMPTY_MASK                (0x08)                           /*!< TX empty status mask */
N#define SPI_TX_FULL_MASK                 (0x10)                           /*!< TX full status mask */
N#define SPI_TXRX_RESET_MASK              (0x20)                           /*!< TX or RX reset status mask */
N#define SPI_SPIEN_STS_MASK               (0x40)                           /*!< SPIEN status mask */
N#define SPI_SSLINE_STS_MASK              (0x80)                           /*!< SPIn_SS line status mask */
N
N
N/* I2S Data Width */
N#define I2S_DATABIT_8           (0 << SPI_I2SCTL_WDWIDTH_Pos)      /*!< I2S data width is 8-bit */
N#define I2S_DATABIT_16          (1 << SPI_I2SCTL_WDWIDTH_Pos)      /*!< I2S data width is 16-bit */
N#define I2S_DATABIT_24          (2 << SPI_I2SCTL_WDWIDTH_Pos)      /*!< I2S data width is 24-bit */
N#define I2S_DATABIT_32          (3 << SPI_I2SCTL_WDWIDTH_Pos)      /*!< I2S data width is 32-bit */
N
N/* I2S Audio Format */
N#define I2S_MONO                SPI_I2SCTL_MONO_Msk                /*!< Monaural channel */
N#define I2S_STEREO              0                                  /*!< Stereo channel */
N
N/* I2S Data Format */
N#define I2S_FORMAT_I2S          (0<<SPI_I2SCTL_FORMAT_Pos)         /*!< I2S data format */
N#define I2S_FORMAT_MSB          (1<<SPI_I2SCTL_FORMAT_Pos)         /*!< MSB justified data format */
N#define I2S_FORMAT_PCMA         (2<<SPI_I2SCTL_FORMAT_Pos)         /*!< PCM mode A data format */
N#define I2S_FORMAT_PCMB         (3<<SPI_I2SCTL_FORMAT_Pos)         /*!< PCM mode B data format */
N
N/* I2S Operation mode */
N#define I2S_MODE_SLAVE          SPI_I2SCTL_SLAVE_Msk               /*!< As slave mode */
N#define I2S_MODE_MASTER         0                                  /*!< As master mode */
N
N/* I2S TX FIFO Threshold */
N#define I2S_FIFO_TX_LEVEL_WORD_0    0                              /*!< TX threshold is 0 word */
N#define I2S_FIFO_TX_LEVEL_WORD_1    (1 << SPI_FIFOCTL_TXTH_Pos)    /*!< TX threshold is 1 word */
N#define I2S_FIFO_TX_LEVEL_WORD_2    (2 << SPI_FIFOCTL_TXTH_Pos)    /*!< TX threshold is 2 words */
N#define I2S_FIFO_TX_LEVEL_WORD_3    (3 << SPI_FIFOCTL_TXTH_Pos)    /*!< TX threshold is 3 words */
N/* I2S RX FIFO Threshold */
N#define I2S_FIFO_RX_LEVEL_WORD_1    0                              /*!< RX threshold is 1 word */
N#define I2S_FIFO_RX_LEVEL_WORD_2    (1 << SPI_FIFOCTL_RXTH_Pos)    /*!< RX threshold is 2 words */
N#define I2S_FIFO_RX_LEVEL_WORD_3    (2 << SPI_FIFOCTL_RXTH_Pos)    /*!< RX threshold is 3 words */
N#define I2S_FIFO_RX_LEVEL_WORD_4    (3 << SPI_FIFOCTL_RXTH_Pos)    /*!< RX threshold is 4 words */
N
N/* I2S Record Channel */
N#define I2S_MONO_RIGHT          0                                  /*!< Record mono right channel */
N#define I2S_MONO_LEFT           SPI_I2SCTL_RXLCH_Msk               /*!< Record mono left channel */
N
N/* I2S Channel */
N#define I2S_RIGHT               0                                  /*!< Select right channel */
N#define I2S_LEFT                1                                  /*!< Select left channel */
N
N/* I2S Interrupt Mask */
N#define I2S_FIFO_TXTH_INT_MASK           (0x01)                          /*!< TX FIFO threshold interrupt mask */
N#define I2S_FIFO_RXTH_INT_MASK           (0x02)                          /*!< RX FIFO threshold interrupt mask */
N#define I2S_FIFO_RXOV_INT_MASK           (0x04)                          /*!< RX FIFO overrun interrupt mask */
N#define I2S_FIFO_RXTO_INT_MASK           (0x08)                          /*!< RX FIFO time-out interrupt mask */
N#define I2S_TXUF_INT_MASK                (0x10)                          /*!< TX FIFO underflow interrupt mask */
N#define I2S_RIGHT_ZC_INT_MASK            (0x20)                          /*!< Right channel zero cross interrupt mask */
N#define I2S_LEFT_ZC_INT_MASK             (0x40)                          /*!< Left channel zero cross interrupt mask */
N
N/*@}*/ /* end of group SPI_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup SPI_EXPORTED_FUNCTIONS SPI Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Clear the unit transfer interrupt flag.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Write 1 to UNITIF bit of SPI_STATUS register to clear the unit transfer interrupt flag.
N  * \hideinitializer
N  */
N#define SPI_CLR_UNIT_TRANS_INT_FLAG(spi)   ((spi)->STATUS = SPI_STATUS_UNITIF_Msk)
N
N/**
N  * @brief      Trigger RX PDMA function.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Set RXPDMAEN bit of SPI_PDMACTL register to enable RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define SPI_TRIGGER_RX_PDMA(spi)   ((spi)->PDMACTL |= SPI_PDMACTL_RXPDMAEN_Msk)
N
N/**
N  * @brief      Trigger TX PDMA function.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Set TXPDMAEN bit of SPI_PDMACTL register to enable TX PDMA transfer function.
N  * \hideinitializer
N  */
N#define SPI_TRIGGER_TX_PDMA(spi)   ((spi)->PDMACTL |= SPI_PDMACTL_TXPDMAEN_Msk)
N
N/**
N  * @brief      Disable RX PDMA transfer.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Clear RXPDMAEN bit of SPI_PDMACTL register to disable RX PDMA transfer function.
N  * \hideinitializer
N  */
N#define SPI_DISABLE_RX_PDMA(spi) ( (spi)->PDMACTL &= ~SPI_PDMACTL_RXPDMAEN_Msk )
N
N/**
N  * @brief      Disable TX PDMA transfer.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Clear TXPDMAEN bit of SPI_PDMACTL register to disable TX PDMA transfer function.
N  * \hideinitializer
N  */
N#define SPI_DISABLE_TX_PDMA(spi) ( (spi)->PDMACTL &= ~SPI_PDMACTL_TXPDMAEN_Msk )
N
N/**
N  * @brief      Get the count of available data in RX FIFO.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     The count of available data in RX FIFO.
N  * @details    Read RXCNT (SPI_STATUS[27:24]) to get the count of available data in RX FIFO.
N  * \hideinitializer
N  */
N#define SPI_GET_RX_FIFO_COUNT(spi)   (((spi)->STATUS & SPI_STATUS_RXCNT_Msk) >> SPI_STATUS_RXCNT_Pos)
N
N/**
N  * @brief      Get the RX FIFO empty flag.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @retval     0 RX FIFO is not empty.
N  * @retval     1 RX FIFO is empty.
N  * @details    Read RXEMPTY bit of SPI_STATUS register to get the RX FIFO empty flag.
N  * \hideinitializer
N  */
N#define SPI_GET_RX_FIFO_EMPTY_FLAG(spi)   (((spi)->STATUS & SPI_STATUS_RXEMPTY_Msk)>>SPI_STATUS_RXEMPTY_Pos)
N
N/**
N  * @brief      Get the TX FIFO empty flag.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @retval     0 TX FIFO is not empty.
N  * @retval     1 TX FIFO is empty.
N  * @details    Read TXEMPTY bit of SPI_STATUS register to get the TX FIFO empty flag.
N  * \hideinitializer
N  */
N#define SPI_GET_TX_FIFO_EMPTY_FLAG(spi)   (((spi)->STATUS & SPI_STATUS_TXEMPTY_Msk)>>SPI_STATUS_TXEMPTY_Pos)
N
N/**
N  * @brief      Get the TX FIFO full flag.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @retval     0 TX FIFO is not full.
N  * @retval     1 TX FIFO is full.
N  * @details    Read TXFULL bit of SPI_STATUS register to get the TX FIFO full flag.
N  * \hideinitializer
N  */
N#define SPI_GET_TX_FIFO_FULL_FLAG(spi)   (((spi)->STATUS & SPI_STATUS_TXFULL_Msk)>>SPI_STATUS_TXFULL_Pos)
N
N/**
N  * @brief      Get the datum read from RX register.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     Data in RX register.
N  * @details    Read SPI_RX register to get the received datum.
N  * \hideinitializer
N  */
N#define SPI_READ_RX(spi)   ((spi)->RX)
N
N/**
N  * @brief      Write datum to TX register.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @param[in]  u32TxData The datum which user attempt to transfer through SPI bus.
N  * @return     None.
N  * @details    Write u32TxData to SPI_TX register.
N  * \hideinitializer
N  */
N#define SPI_WRITE_TX(spi, u32TxData)   ((spi)->TX = (u32TxData))
N
N/**
N  * @brief      Set SPIn_SS pin to high state.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Disable automatic slave selection function and set SPIn_SS pin to high state.
N  * \hideinitializer
N  */
N#define SPI_SET_SS_HIGH(spi)   ((spi)->SSCTL = ((spi)->SSCTL & (~SPI_SSCTL_AUTOSS_Msk)) | (SPI_SSCTL_SSACTPOL_Msk | SPI_SSCTL_SS_Msk))
N
N/**
N  * @brief      Set SPIn_SS pin to low state.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Disable automatic slave selection function and set SPIn_SS pin to low state.
N  * \hideinitializer
N  */
N#define SPI_SET_SS_LOW(spi)   ((spi)->SSCTL = ((spi)->SSCTL & (~(SPI_SSCTL_AUTOSS_Msk | SPI_SSCTL_SSACTPOL_Msk))) | SPI_SSCTL_SS_Msk)
N
N/**
N  * @brief      Enable Byte Reorder function.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Enable Byte Reorder function. The suspend interval depends on the setting of SUSPITV (SPI_CTL[7:4]).
N  * \hideinitializer
N  */
N#define SPI_ENABLE_BYTE_REORDER(spi)   ((spi)->CTL |=  SPI_CTL_REORDER_Msk)
N
N/**
N  * @brief      Disable Byte Reorder function.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Clear REORDER bit field of SPI_CTL register to disable Byte Reorder function.
N  * \hideinitializer
N  */
N#define SPI_DISABLE_BYTE_REORDER(spi)   ((spi)->CTL &= ~SPI_CTL_REORDER_Msk)
N
N/**
N  * @brief      Set the length of suspend interval.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @param[in]  u32SuspCycle Decides the length of suspend interval. It could be 0 ~ 15.
N  * @return     None.
N  * @details    Set the length of suspend interval according to u32SuspCycle.
N  *             The length of suspend interval is ((u32SuspCycle + 0.5) * the length of one SPI bus clock cycle).
N  * \hideinitializer
N  */
N#define SPI_SET_SUSPEND_CYCLE(spi, u32SuspCycle)   ((spi)->CTL = ((spi)->CTL & ~SPI_CTL_SUSPITV_Msk) | ((u32SuspCycle) << SPI_CTL_SUSPITV_Pos))
N
N/**
N  * @brief      Set the SPI transfer sequence with LSB first.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Set LSB bit of SPI_CTL register to set the SPI transfer sequence with LSB first.
N  * \hideinitializer
N  */
N#define SPI_SET_LSB_FIRST(spi)   ((spi)->CTL |= SPI_CTL_LSB_Msk)
N
N/**
N  * @brief      Set the SPI transfer sequence with MSB first.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Clear LSB bit of SPI_CTL register to set the SPI transfer sequence with MSB first.
N  * \hideinitializer
N  */
N#define SPI_SET_MSB_FIRST(spi)   ((spi)->CTL &= ~SPI_CTL_LSB_Msk)
N
N/**
N  * @brief      Set the data width of a SPI transaction.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @param[in]  u32Width The bit width of one transaction.
N  * @return     None.
N  * @details    The data width can be 8 ~ 32 bits.
N  * \hideinitializer
N  */
N#define SPI_SET_DATA_WIDTH(spi, u32Width)   ((spi)->CTL = ((spi)->CTL & ~SPI_CTL_DWIDTH_Msk) | (((u32Width)&0x1F) << SPI_CTL_DWIDTH_Pos))
N
N/**
N  * @brief      Get the SPI busy state.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @retval     0 SPI controller is not busy.
N  * @retval     1 SPI controller is busy.
N  * @details    This macro will return the busy state of SPI controller.
N  * \hideinitializer
N  */
N#define SPI_IS_BUSY(spi)   ( ((spi)->STATUS & SPI_STATUS_BUSY_Msk)>>SPI_STATUS_BUSY_Pos )
N
N/**
N  * @brief      Enable SPI controller.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Set SPIEN (SPI_CTL[0]) to enable SPI controller.
N  * \hideinitializer
N  */
N#define SPI_ENABLE(spi)   ((spi)->CTL |= SPI_CTL_SPIEN_Msk)
N
N/**
N  * @brief      Disable SPI controller.
N  * @param[in]  spi The pointer of the specified SPI module.
N  * @return     None.
N  * @details    Clear SPIEN (SPI_CTL[0]) to disable SPI controller.
N  * \hideinitializer
N  */
N#define SPI_DISABLE(spi)   ((spi)->CTL &= ~SPI_CTL_SPIEN_Msk)
N
N
N/**
N  * @brief  Enable I2S TX DMA function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will set TXPDMAEN bit of SPI_PDMACTL register to transmit data with PDMA.
N  * \hideinitializer
N  */
N#define I2S_ENABLE_TXDMA(i2s)  ( (i2s)->PDMACTL |= SPI_PDMACTL_TXPDMAEN_Msk )
N
N/**
N  * @brief  Disable I2S TX DMA function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will clear TXPDMAEN bit of SPI_PDMACTL register to disable TX DMA function.
N  * \hideinitializer
N  */
N#define I2S_DISABLE_TXDMA(i2s) ( (i2s)->PDMACTL &= ~SPI_PDMACTL_TXPDMAEN_Msk )
N
N/**
N  * @brief  Enable I2S RX DMA function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will set RXPDMAEN bit of SPI_PDMACTL register to receive data with PDMA.
N  * \hideinitializer
N  */
N#define I2S_ENABLE_RXDMA(i2s) ( (i2s)->PDMACTL |= SPI_PDMACTL_RXPDMAEN_Msk )
N
N/**
N  * @brief  Disable I2S RX DMA function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will clear RXPDMAEN bit of SPI_PDMACTL register to disable RX DMA function.
N  * \hideinitializer
N  */
N#define I2S_DISABLE_RXDMA(i2s) ( (i2s)->PDMACTL &= ~SPI_PDMACTL_RXPDMAEN_Msk )
N
N/**
N  * @brief  Enable I2S TX function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will set TXEN bit of SPI_I2SCTL register to enable I2S TX function.
N  * \hideinitializer
N  */
N#define I2S_ENABLE_TX(i2s) ( (i2s)->I2SCTL |= SPI_I2SCTL_TXEN_Msk )
N
N/**
N  * @brief  Disable I2S TX function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will clear TXEN bit of SPI_I2SCTL register to disable I2S TX function.
N  * \hideinitializer
N  */
N#define I2S_DISABLE_TX(i2s) ( (i2s)->I2SCTL &= ~SPI_I2SCTL_TXEN_Msk )
N
N/**
N  * @brief  Enable I2S RX function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will set RXEN bit of SPI_I2SCTL register to enable I2S RX function.
N  * \hideinitializer
N  */
N#define I2S_ENABLE_RX(i2s) ( (i2s)->I2SCTL |= SPI_I2SCTL_RXEN_Msk )
N
N/**
N  * @brief  Disable I2S RX function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will clear RXEN bit of SPI_I2SCTL register to disable I2S RX function.
N  * \hideinitializer
N  */
N#define I2S_DISABLE_RX(i2s) ( (i2s)->I2SCTL &= ~SPI_I2SCTL_RXEN_Msk )
N
N/**
N  * @brief  Enable TX Mute function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will set MUTE bit of SPI_I2SCTL register to enable I2S TX mute function.
N  * \hideinitializer
N  */
N#define I2S_ENABLE_TX_MUTE(i2s)  ( (i2s)->I2SCTL |= SPI_I2SCTL_MUTE_Msk )
N
N/**
N  * @brief  Disable TX Mute function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will clear MUTE bit of SPI_I2SCTL register to disable I2S TX mute function.
N  * \hideinitializer
N  */
N#define I2S_DISABLE_TX_MUTE(i2s) ( (i2s)->I2SCTL &= ~SPI_I2SCTL_MUTE_Msk )
N
N/**
N  * @brief  Clear TX FIFO.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will clear TX FIFO. The internal TX FIFO pointer will be reset to FIFO start point.
N  * \hideinitializer
N  */
N#define I2S_CLR_TX_FIFO(i2s) ( (i2s)->FIFOCTL |= SPI_FIFOCTL_TXFBCLR_Msk )
N
N/**
N  * @brief  Clear RX FIFO.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return None
N  * @details This macro will clear RX FIFO. The internal RX FIFO pointer will be reset to FIFO start point.
N  * \hideinitializer
N  */
N#define I2S_CLR_RX_FIFO(i2s) ( (i2s)->FIFOCTL |= SPI_FIFOCTL_RXFBCLR_Msk )
N
N/**
N  * @brief  Write data to I2S TX FIFO.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @param[in] u32Data The value written to TX FIFO.
N  * @return None
N  * @details This macro will write a value to TX FIFO.
N  * \hideinitializer
N  */
N#define I2S_WRITE_TX_FIFO(i2s, u32Data)  ( (i2s)->TX = (u32Data) )
N
N/**
N  * @brief  Read RX FIFO.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return The value read from RX FIFO.
N  * @details This function will return a value read from RX FIFO.
N  * \hideinitializer
N  */
N#define I2S_READ_RX_FIFO(i2s) ( (i2s)->RX )
N
N/**
N  * @brief  Get the interrupt flag.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @param[in] u32Mask The mask value for all interrupt flags.
N  * @return The interrupt flags specified by the u32mask parameter.
N  * @details This macro will return the combination interrupt flags of SPI_I2SSTS register. The flags are specified by the u32mask parameter.
N  * \hideinitializer
N  */
N#define I2S_GET_INT_FLAG(i2s, u32Mask) ( (i2s)->I2SSTS & (u32Mask) )
N
N/**
N  * @brief  Clear the interrupt flag.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @param[in] u32Mask The mask value for all interrupt flags.
N  * @return None
N  * @details This macro will clear the interrupt flags specified by the u32mask parameter.
N  * @note Except TX and RX FIFO threshold interrupt flags, the other interrupt flags can be cleared by writing 1 to itself.
N  * \hideinitializer
N  */
N#define I2S_CLR_INT_FLAG(i2s, u32Mask) ( (i2s)->I2SSTS = (u32Mask) )
N
N/**
N  * @brief  Get transmit FIFO level
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return TX FIFO level
N  * @details This macro will return the number of available words in TX FIFO.
N  * \hideinitializer
N  */
N#define I2S_GET_TX_FIFO_LEVEL(i2s) ( ((i2s)->I2SSTS & SPI_I2SSTS_TXCNT_Msk) >> SPI_I2SSTS_TXCNT_Pos  )
N
N/**
N  * @brief  Get receive FIFO level
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @return RX FIFO level
N  * @details This macro will return the number of available words in RX FIFO.
N  * \hideinitializer
N  */
N#define I2S_GET_RX_FIFO_LEVEL(i2s) ( ((i2s)->I2SSTS & SPI_I2SSTS_RXCNT_Msk) >> SPI_I2SSTS_RXCNT_Pos )
N
N
N/**
N  * @brief  Enable zero cross detection function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @param[in] u32ChMask The mask for left or right channel. Valid values are:
N  *                    - \ref I2S_RIGHT
N  *                    - \ref I2S_LEFT
N  * @return None
N  * @details This function will set RZCEN or LZCEN bit of SPI_I2SCTL register to enable zero cross detection function.
N  */
Nstatic __INLINE void I2S_ENABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
Xstatic __inline void I2S_ENABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
N{
N    if (u32ChMask == I2S_RIGHT)
X    if (u32ChMask == 0)
N        i2s->I2SCTL |= SPI_I2SCTL_RZCEN_Msk;
X        i2s->I2SCTL |= (0x1ul << (16));
N    else
N        i2s->I2SCTL |= SPI_I2SCTL_LZCEN_Msk;
X        i2s->I2SCTL |= (0x1ul << (17));
N}
N
N/**
N  * @brief  Disable zero cross detection function.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @param[in] u32ChMask The mask for left or right channel. Valid values are:
N  *                    - \ref I2S_RIGHT
N  *                    - \ref I2S_LEFT
N  * @return None
N  * @details This function will clear RZCEN or LZCEN bit of SPI_I2SCTL register to disable zero cross detection function.
N  */
Nstatic __INLINE void I2S_DISABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
Xstatic __inline void I2S_DISABLE_TX_ZCD(SPI_T *i2s, uint32_t u32ChMask)
N{
N    if (u32ChMask == I2S_RIGHT)
X    if (u32ChMask == 0)
N        i2s->I2SCTL &= ~SPI_I2SCTL_RZCEN_Msk;
X        i2s->I2SCTL &= ~(0x1ul << (16));
N    else
N        i2s->I2SCTL &= ~SPI_I2SCTL_LZCEN_Msk;
X        i2s->I2SCTL &= ~(0x1ul << (17));
N}
N
N/**
N  * @brief  This function sets the recording source channel when mono mode is used.
N  * @param[in] i2s The pointer of the specified I2S module.
N  * @param[in] u32Ch left or right channel. Valid values are:
N  *                - \ref I2S_MONO_LEFT
N  *                - \ref I2S_MONO_RIGHT
N  * @return None
N  * @details This function selects the recording source channel of monaural mode.
N  */
Nstatic __INLINE void I2S_SET_MONO_RX_CHANNEL(SPI_T *i2s, uint32_t u32Ch)
Xstatic __inline void I2S_SET_MONO_RX_CHANNEL(SPI_T *i2s, uint32_t u32Ch)
N{
N    u32Ch == I2S_MONO_LEFT ?
X    u32Ch == (0x1ul << (23)) ?
N    (i2s->I2SCTL |= SPI_I2SCTL_RXLCH_Msk) :
X    (i2s->I2SCTL |= (0x1ul << (23))) :
N    (i2s->I2SCTL &= ~SPI_I2SCTL_RXLCH_Msk);
X    (i2s->I2SCTL &= ~(0x1ul << (23)));
N}
N
N
N/* Function prototype declaration */
Nuint32_t SPI_Open(SPI_T *spi, uint32_t u32MasterSlave, uint32_t u32SPIMode, uint32_t u32DataWidth, uint32_t u32BusClock);
Nvoid SPI_Close(SPI_T *spi);
Nvoid SPI_ClearRxFIFO(SPI_T *spi);
Nvoid SPI_ClearTxFIFO(SPI_T *spi);
Nvoid SPI_DisableAutoSS(SPI_T *spi);
Nvoid SPI_EnableAutoSS(SPI_T *spi, uint32_t u32SSPinMask, uint32_t u32ActiveLevel);
Nuint32_t SPI_SetBusClock(SPI_T *spi, uint32_t u32BusClock);
Nvoid SPI_SetFIFO(SPI_T *spi, uint32_t u32TxThreshold, uint32_t u32RxThreshold);
Nuint32_t SPI_GetBusClock(SPI_T *spi);
Nvoid SPI_EnableInt(SPI_T *spi, uint32_t u32Mask);
Nvoid SPI_DisableInt(SPI_T *spi, uint32_t u32Mask);
Nuint32_t SPI_GetIntFlag(SPI_T *spi, uint32_t u32Mask);
Nvoid SPI_ClearIntFlag(SPI_T *spi, uint32_t u32Mask);
Nuint32_t SPI_GetStatus(SPI_T *spi, uint32_t u32Mask);
N
Nuint32_t I2S_Open(SPI_T *i2s, uint32_t u32MasterSlave, uint32_t u32SampleRate, uint32_t u32WordWidth, uint32_t u32Channels, uint32_t u32DataFormat);
Nvoid I2S_Close(SPI_T *i2s);
Nvoid I2S_EnableInt(SPI_T *i2s, uint32_t u32Mask);
Nvoid I2S_DisableInt(SPI_T *i2s, uint32_t u32Mask);
Nuint32_t I2S_EnableMCLK(SPI_T *i2s, uint32_t u32BusClock);
Nvoid I2S_DisableMCLK(SPI_T *i2s);
Nvoid I2S_SetFIFO(SPI_T *i2s, uint32_t u32TxThreshold, uint32_t u32RxThreshold);
N
N
N/*@}*/ /* end of group SPI_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group SPI_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__SPI_H__
N
N/*** (C) COPYRIGHT 2014~2015 Nuvoton Technology Corp. ***/
L 383 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "sys.h"
L 1 "..\..\..\..\Library\StdDriver\inc\sys.h" 1
N/**************************************************************************//**
N * @file     SYS.h
N * @version  V3.00
N * @brief    NUC121 series SYS driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N#ifndef __SYS_H__
N#define __SYS_H__
N
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup SYS_Driver SYS Driver
N  @{
N*/
N
N/** @addtogroup SYS_EXPORTED_CONSTANTS SYS Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Module Reset Control Resister constant definitions.                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define PDMA_RST    ((0x0<<24)|SYS_IPRST0_PDMARST_Pos)      /*!< PDMA reset is one of the SYS_ResetModule parameter */
N
N#define GPIO_RST    ((0x4<<24)|SYS_IPRST1_GPIORST_Pos)      /*!< GPIO reset is one of the SYS_ResetModule parameter */
N#define TMR0_RST    ((0x4<<24)|SYS_IPRST1_TMR0RST_Pos)      /*!< TMR0 reset is one of the SYS_ResetModule parameter */
N#define TMR1_RST    ((0x4<<24)|SYS_IPRST1_TMR1RST_Pos)      /*!< TMR1 reset is one of the SYS_ResetModule parameter */
N#define TMR2_RST    ((0x4<<24)|SYS_IPRST1_TMR2RST_Pos)      /*!< TMR2 reset is one of the SYS_ResetModule parameter */
N#define TMR3_RST    ((0x4<<24)|SYS_IPRST1_TMR3RST_Pos)      /*!< TMR3 reset is one of the SYS_ResetModule parameter */
N#define I2C0_RST    ((0x4<<24)|SYS_IPRST1_I2C0RST_Pos)      /*!< I2C0 reset is one of the SYS_ResetModule parameter */
N#define I2C1_RST    ((0x4<<24)|SYS_IPRST1_I2C1RST_Pos)      /*!< I2C1 reset is one of the SYS_ResetModule parameter */
N#define SPI0_RST    ((0x4<<24)|SYS_IPRST1_SPI0RST_Pos)      /*!< SPI0 reset is one of the SYS_ResetModule parameter */
N#define UART0_RST   ((0x4<<24)|SYS_IPRST1_UART0RST_Pos)     /*!< UART0 reset is one of the SYS_ResetModule parameter */
N#define BPWM0_RST   ((0x4<<24)|SYS_IPRST1_BPWM0RST_Pos)     /*!< BPWM0 reset is one of the SYS_ResetModule parameter */
N#define BPWM1_RST   ((0x4<<24)|SYS_IPRST1_BPWM1RST_Pos)     /*!< BPWM1 reset is one of the SYS_ResetModule parameter */
N#define PWM0_RST    ((0x4<<24)|SYS_IPRST1_PWM0RST_Pos)      /*!< PWM0 reset is one of the SYS_ResetModule parameter */
N#define PWM1_RST    ((0x4<<24)|SYS_IPRST1_PWM1RST_Pos)      /*!< PWM1 reset is one of the SYS_ResetModule parameter */
N#define USBD_RST    ((0x4<<24)|SYS_IPRST1_USBDRST_Pos)      /*!< USBD reset is one of the SYS_ResetModule parameter */
N#define ADC_RST     ((0x4<<24)|SYS_IPRST1_ADCRST_Pos)       /*!< ADC reset is one of the SYS_ResetModule parameter */
N
N#define USCI0_RST   ((0x8<<24)|SYS_IPRST2_USCI0RST_Pos)     /*!< USCI0 reset is one of the SYS_ResetModule parameter */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Brown Out Detector Threshold Voltage Selection constant definitions.                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N#define SYS_BODCTL_BOD_RST_EN           (1UL<<SYS_BODCTL_BODRSTEN_Pos)    /*!< Brown-out Reset Enable */
N#define SYS_BODCTL_BOD_INTERRUPT_EN     (0UL<<SYS_BODCTL_BODRSTEN_Pos)    /*!< Brown-out Interrupt Enable */
N#define SYS_BODCTL_BODVL_4_5V           (3UL<<SYS_BODCTL_BODVL_Pos)       /*!< Setting Brown Out Detector Threshold Voltage as 4.5V */
N#define SYS_BODCTL_BODVL_3_7V           (2UL<<SYS_BODCTL_BODVL_Pos)       /*!< Setting Brown Out Detector Threshold Voltage as 3.7V */
N#define SYS_BODCTL_BODVL_2_7V           (1UL<<SYS_BODCTL_BODVL_Pos)       /*!< Setting Brown Out Detector Threshold Voltage as 2.7V */
N#define SYS_BODCTL_BODVL_2_2V           (0UL<<SYS_BODCTL_BODVL_Pos)       /*!< Setting Brown Out Detector Threshold Voltage as 2.2V */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  Multi-Function constant definitions.                                                                   */
N/*---------------------------------------------------------------------------------------------------------*/
N
N/* How to use below #define?
N
NExample: If user want to set PB.1 as UART0_TXD and PB.0 as UART0_RXD in initial function,
N         user can issue following command to achieve it.
N
N         SYS->GPB_MFPL = (SYS->GPB_MFPL & (~SYS_GPB_MFPL_PB1MFP_Msk)) | SYS_GP0_MFPL_PB1MFP_UART0_TXD;
N         SYS->GPB_MFPL = (SYS->GPB_MFPL & (~SYS_GPB_MFPL_PB0MFP_Msk)) | SYS_GP0_MFPL_PB0MFP_UART0_RXD;
N*/
N
N//PA.10 MFP
N#define SYS_GPA_MFPH_PA10MFP_GPIO            (0x0UL<<SYS_GPA_MFPH_PA10MFP_Pos)   /*!< GPA_MFPH PA10 setting for GPIO          */
N#define SYS_GPA_MFPH_PA10MFP_I2C1_SDA        (0x1UL<<SYS_GPA_MFPH_PA10MFP_Pos)   /*!< GPA_MFPH PA10 setting for I2C1_SDA      */
N#define SYS_GPA_MFPH_PA10MFP_BPWM0_CH4       (0x4UL<<SYS_GPA_MFPH_PA10MFP_Pos)   /*!< GPA_MFPH PA10 setting for BPWM0_CH4     */
N#define SYS_GPA_MFPH_PA10MFP_PWM0_BRAKE0     (0x5UL<<SYS_GPA_MFPH_PA10MFP_Pos)   /*!< GPA_MFPH PA10 setting for PWM0_BRAKE0   */
N#define SYS_GPA_MFPH_PA10MFP_USCI0_DAT1      (0x6UL<<SYS_GPA_MFPH_PA10MFP_Pos)   /*!< GPA_MFPH PA10 setting for USCI0_DAT1    */
N
N//PA.11 MFP
N#define SYS_GPA_MFPH_PA11MFP_GPIO            (0x0UL<<SYS_GPA_MFPH_PA11MFP_Pos)   /*!< GPA_MFPH PA11 setting for GPIO          */
N#define SYS_GPA_MFPH_PA11MFP_I2C1_SCL        (0x1UL<<SYS_GPA_MFPH_PA11MFP_Pos)   /*!< GPA_MFPH PA11 setting for I2C1_SCL      */
N#define SYS_GPA_MFPH_PA11MFP_BPWM0_CH5       (0x4UL<<SYS_GPA_MFPH_PA11MFP_Pos)   /*!< GPA_MFPH PA11 setting for BPWM0_CH5     */
N#define SYS_GPA_MFPH_PA11MFP_TM0             (0x5UL<<SYS_GPA_MFPH_PA11MFP_Pos)   /*!< GPA_MFPH PA11 setting for TM0           */
N#define SYS_GPA_MFPH_PA11MFP_USCI0_CLK       (0x6UL<<SYS_GPA_MFPH_PA11MFP_Pos)   /*!< GPA_MFPH PA11 setting for USCI0_CLK     */
N#define SYS_GPA_MFPH_PA11MFP_USCI0_DAT0      (0x7UL<<SYS_GPA_MFPH_PA11MFP_Pos)   /*!< GPA_MFPH PA11 setting for USCI0_DAT0    */
N
N//PA.12 MFP
N#define SYS_GPA_MFPH_PA12MFP_GPIO            (0x0UL<<SYS_GPA_MFPH_PA12MFP_Pos)   /*!< GPA_MFPH PA12 setting for GPIO          */
N#define SYS_GPA_MFPH_PA12MFP_PWM0_CH0        (0x1UL<<SYS_GPA_MFPH_PA12MFP_Pos)   /*!< GPA_MFPH PA12 setting for PWM0_CH0      */
N#define SYS_GPA_MFPH_PA12MFP_I2C1_SCL        (0x2UL<<SYS_GPA_MFPH_PA12MFP_Pos)   /*!< GPA_MFPH PA12 setting for I2C1_SCL      */
N#define SYS_GPA_MFPH_PA12MFP_UART0_RXD       (0x3UL<<SYS_GPA_MFPH_PA12MFP_Pos)   /*!< GPA_MFPH PA12 setting for UART0_RXD     */
N
N//PA.13 MFP
N#define SYS_GPA_MFPH_PA13MFP_GPIO            (0x0UL<<SYS_GPA_MFPH_PA13MFP_Pos)   /*!< GPA_MFPH PA13 setting for GPIO          */
N#define SYS_GPA_MFPH_PA13MFP_PWM0_CH1        (0x1UL<<SYS_GPA_MFPH_PA13MFP_Pos)   /*!< GPA_MFPH PA13 setting for PWM0_CH1      */
N#define SYS_GPA_MFPH_PA13MFP_I2C1_SDA        (0x2UL<<SYS_GPA_MFPH_PA13MFP_Pos)   /*!< GPA_MFPH PA13 setting for I2C1_SDA      */
N#define SYS_GPA_MFPH_PA13MFP_UART0_TXD       (0x3UL<<SYS_GPA_MFPH_PA13MFP_Pos)   /*!< GPA_MFPH PA13 setting for UART0_TXD     */
N
N//PA.14 MFP
N#define SYS_GPA_MFPH_PA14MFP_GPIO            (0x0UL<<SYS_GPA_MFPH_PA14MFP_Pos)   /*!< GPA_MFPH PA14 setting for GPIO          */
N#define SYS_GPA_MFPH_PA14MFP_PWM0_CH2        (0x1UL<<SYS_GPA_MFPH_PA14MFP_Pos)   /*!< GPA_MFPH PA14 setting for PWM0_CH2      */
N#define SYS_GPA_MFPH_PA14MFP_UART0_nCTS      (0x3UL<<SYS_GPA_MFPH_PA14MFP_Pos)   /*!< GPA_MFPH PA14 setting for UART0_nCTS    */
N#define SYS_GPA_MFPH_PA14MFP_PWM0_BRAKE0     (0x4UL<<SYS_GPA_MFPH_PA14MFP_Pos)   /*!< GPA_MFPH PA14 setting for PWM0_BRAKE0   */
N
N//PA.15 MFP
N#define SYS_GPA_MFPH_PA15MFP_GPIO            (0x0UL<<SYS_GPA_MFPH_PA15MFP_Pos)   /*!< GPA_MFPH PA15 setting for GPIO          */
N#define SYS_GPA_MFPH_PA15MFP_PWM0_CH3        (0x1UL<<SYS_GPA_MFPH_PA15MFP_Pos)   /*!< GPA_MFPH PA15 setting for PWM0_CH3      */
N#define SYS_GPA_MFPH_PA15MFP_SPI_I2SMCLK     (0x2UL<<SYS_GPA_MFPH_PA15MFP_Pos)   /*!< GPA_MFPH PA15 setting for SPI_I2SMCLK   */
N#define SYS_GPA_MFPH_PA15MFP_CLKO            (0x3UL<<SYS_GPA_MFPH_PA15MFP_Pos)   /*!< GPA_MFPH PA15 setting for CLKO          */
N#define SYS_GPA_MFPH_PA15MFP_PWM1_BRAKE1     (0x4UL<<SYS_GPA_MFPH_PA15MFP_Pos)   /*!< GPA_MFPH PA15 setting for PWM1_BRAKE1   */
N#define SYS_GPA_MFPH_PA15MFP_UART0_nRTS      (0x5UL<<SYS_GPA_MFPH_PA15MFP_Pos)   /*!< GPA_MFPH PA15 setting for UART0_nRTS    */
N
N//PB.0 MFP
N#define SYS_GPB_MFPL_PB0MFP_GPIO             (0x0UL<<SYS_GPB_MFPL_PB0MFP_Pos)    /*!< GPB_MFPL PB0 setting for GPIO           */
N#define SYS_GPB_MFPL_PB0MFP_UART0_RXD        (0x1UL<<SYS_GPB_MFPL_PB0MFP_Pos)    /*!< GPB_MFPL PB0 setting for UART0_RXD      */
N#define SYS_GPB_MFPL_PB0MFP_PWM1_CH0         (0x4UL<<SYS_GPB_MFPL_PB0MFP_Pos)    /*!< GPB_MFPL PB0 setting for PWM1_CH0       */
N
N//PB.1 MFP
N#define SYS_GPB_MFPL_PB1MFP_GPIO             (0x0UL<<SYS_GPB_MFPL_PB1MFP_Pos)    /*!< GPB_MFPL PB1 setting for GPIO          */
N#define SYS_GPB_MFPL_PB1MFP_UART0_TXD        (0x1UL<<SYS_GPB_MFPL_PB1MFP_Pos)    /*!< GPB_MFPL PB1 setting for UART0_TXD     */
N#define SYS_GPB_MFPL_PB1MFP_PWM1_CH1         (0x4UL<<SYS_GPB_MFPL_PB1MFP_Pos)    /*!< GPB_MFPL PB1 setting for PWM1_CH1      */
N
N//PB.2 MFP
N#define SYS_GPB_MFPL_PB2MFP_GPIO             (0x0UL<<SYS_GPB_MFPL_PB2MFP_Pos)    /*!< GPB_MFPL PB2 setting for GPIO          */
N#define SYS_GPB_MFPL_PB2MFP_UART0_nRTS       (0x1UL<<SYS_GPB_MFPL_PB2MFP_Pos)    /*!< GPB_MFPL PB2 setting for UART0_nRTS    */
N#define SYS_GPB_MFPL_PB2MFP_TM2_EXT          (0x2UL<<SYS_GPB_MFPL_PB2MFP_Pos)    /*!< GPB_MFPL PB2 setting for TM2_EXT       */
N#define SYS_GPB_MFPL_PB2MFP_PWM1_CH2         (0x4UL<<SYS_GPB_MFPL_PB2MFP_Pos)    /*!< GPB_MFPL PB2 setting for PWM1_CH2      */
N
N//PB.3 MFP
N#define SYS_GPB_MFPL_PB3MFP_GPIO             (0x0UL<<SYS_GPB_MFPL_PB3MFP_Pos)    /*!< GPB_MFPL PB3 setting for GPIO          */
N#define SYS_GPB_MFPL_PB3MFP_UART0_nCTS       (0x1UL<<SYS_GPB_MFPL_PB3MFP_Pos)    /*!< GPB_MFPL PB3 setting for UART0_nCTS    */
N#define SYS_GPB_MFPL_PB3MFP_TM3_EXT          (0x2UL<<SYS_GPB_MFPL_PB3MFP_Pos)    /*!< GPB_MFPL PB3 setting for TM3_EXT       */
N#define SYS_GPB_MFPL_PB3MFP_PWM1_CH3         (0x4UL<<SYS_GPB_MFPL_PB3MFP_Pos)    /*!< GPB_MFPL PB3 setting for PWM1_CH3      */
N
N//PB.4 MFP
N#define SYS_GPB_MFPL_PB4MFP_GPIO             (0x0UL<<SYS_GPB_MFPL_PB4MFP_Pos)    /*!< GPB_MFPL PB4 setting for GPIO          */
N#define SYS_GPB_MFPL_PB4MFP_BPWM0_CH3        (0x4UL<<SYS_GPB_MFPL_PB4MFP_Pos)    /*!< GPB_MFPL PB4 setting for BPWM0_CH3     */
N#define SYS_GPB_MFPL_PB4MFP_TM2_EXT          (0x5UL<<SYS_GPB_MFPL_PB4MFP_Pos)    /*!< GPB_MFPL PB4 setting for TM2_EXT       */
N#define SYS_GPB_MFPL_PB4MFP_USCI0_CTL0       (0x6UL<<SYS_GPB_MFPL_PB4MFP_Pos)    /*!< GPB_MFPL PB4 setting for USCI0_CTL0    */
N#define SYS_GPB_MFPL_PB4MFP_USCI0_DAT0       (0x7UL<<SYS_GPB_MFPL_PB4MFP_Pos)    /*!< GPB_MFPL PB4 setting for USCI0_DAT0    */
N
N//PB.5 MFP
N#define SYS_GPB_MFPL_PB5MFP_GPIO             (0x0UL<<SYS_GPB_MFPL_PB5MFP_Pos)    /*!< GPB_MFPL PB5 setting for GPIO          */
N#define SYS_GPB_MFPL_PB5MFP_BPWM0_CH2        (0x4UL<<SYS_GPB_MFPL_PB5MFP_Pos)    /*!< GPB_MFPL PB5 setting for BPWM0_CH2     */
N#define SYS_GPB_MFPL_PB5MFP_TM3              (0x5UL<<SYS_GPB_MFPL_PB5MFP_Pos)    /*!< GPB_MFPL PB5 setting for TM3           */
N#define SYS_GPB_MFPL_PB5MFP_USCI0_CLK        (0x6UL<<SYS_GPB_MFPL_PB5MFP_Pos)    /*!< GPB_MFPL PB5 setting for USCI0_CLK     */
N#define SYS_GPB_MFPL_PB5MFP_USCI0_DAT1       (0x7UL<<SYS_GPB_MFPL_PB5MFP_Pos)    /*!< GPB_MFPL PB5 setting for USCI0_DAT1    */
N
N//PB.6 MFP
N#define SYS_GPB_MFPL_PB6MFP_GPIO             (0x0UL<<SYS_GPB_MFPL_PB6MFP_Pos)    /*!< GPB_MFPL PB6 setting for GPIO          */
N#define SYS_GPB_MFPL_PB6MFP_BPWM0_CH1        (0x4UL<<SYS_GPB_MFPL_PB6MFP_Pos)    /*!< GPB_MFPL PB6 setting for BPWM0_CH1     */
N#define SYS_GPB_MFPL_PB6MFP_USCI0_DAT0       (0x6UL<<SYS_GPB_MFPL_PB6MFP_Pos)    /*!< GPB_MFPL PB6 setting for USCI0_DAT0    */
N#define SYS_GPB_MFPL_PB6MFP_USCI0_CTL1       (0x7UL<<SYS_GPB_MFPL_PB6MFP_Pos)    /*!< GPB_MFPL PB6 setting for USCI0_CTL1    */
N
N//PB.7 MFP
N#define SYS_GPB_MFPL_PB7MFP_GPIO             (0x0UL<<SYS_GPB_MFPL_PB7MFP_Pos)    /*!< GPB_MFPL PB7 setting for GPIO          */
N#define SYS_GPB_MFPL_PB7MFP_BPWM0_CH0        (0x4UL<<SYS_GPB_MFPL_PB7MFP_Pos)    /*!< GPB_MFPL PB7 setting for BPWM0_CH0     */
N#define SYS_GPB_MFPL_PB7MFP_USCI0_DAT1       (0x6UL<<SYS_GPB_MFPL_PB7MFP_Pos)    /*!< GPB_MFPL PB7 setting for USCI0_DAT1    */
N#define SYS_GPB_MFPL_PB7MFP_USCI0_CTL0       (0x7UL<<SYS_GPB_MFPL_PB7MFP_Pos)    /*!< GPB_MFPL PB7 setting for USCI0_CTL0    */
N
N//PB.8 MFP
N#define SYS_GPB_MFPH_PB8MFP_GPIO             (0x0UL<<SYS_GPB_MFPH_PB8MFP_Pos)    /*!< GPB_MFPH PB8 setting for GPIO           */
N#define SYS_GPB_MFPH_PB8MFP_TM0              (0x1UL<<SYS_GPB_MFPH_PB8MFP_Pos)    /*!< GPB_MFPH PB8 setting for TM0            */
N#define SYS_GPB_MFPH_PB8MFP_ADC_CH8          (0x3UL<<SYS_GPB_MFPH_PB8MFP_Pos)    /*!< GPB_MFPH PB8 setting for ADC_CH8        */
N#define SYS_GPB_MFPH_PB8MFP_BPWM1_CH1        (0x4UL<<SYS_GPB_MFPH_PB8MFP_Pos)    /*!< GPB_MFPH PB8 setting for BPWM1_CH1      */
N
N//PB.9 MFP
N#define SYS_GPB_MFPH_PB9MFP_GPIO             (0x0UL<<SYS_GPB_MFPH_PB9MFP_Pos)    /*!< GPB_MFPH PB9 setting for GPIO           */
N#define SYS_GPB_MFPH_PB9MFP_TM1              (0x1UL<<SYS_GPB_MFPH_PB9MFP_Pos)    /*!< GPB_MFPH PB9 setting for TM1            */
N#define SYS_GPB_MFPH_PB9MFP_SPI0_I2SMCLK     (0x3UL<<SYS_GPB_MFPH_PB9MFP_Pos)    /*!< GPB_MFPH PB9 setting for SPI0_I2SMCLK   */
N#define SYS_GPB_MFPH_PB9MFP_PWM0_CH4         (0x4UL<<SYS_GPB_MFPH_PB9MFP_Pos)    /*!< GPB_MFPH PB9 setting for PWM0_CH4       */
N
N//PB.10 MFP
N#define SYS_GPB_MFPH_PB10MFP_GPIO            (0x0UL<<SYS_GPB_MFPH_PB10MFP_Pos)   /*!< GPB_MFPH PB10 setting for GPIO          */
N#define SYS_GPB_MFPH_PB10MFP_TM2             (0x1UL<<SYS_GPB_MFPH_PB10MFP_Pos)   /*!< GPB_MFPH PB10 setting for TM2           */
N#define SYS_GPB_MFPH_PB10MFP_SPI0_I2SMCLK    (0x3UL<<SYS_GPB_MFPH_PB10MFP_Pos)   /*!< GPB_MFPH PB10 setting for SPI0_I2SMCLK  */
N#define SYS_GPB_MFPH_PB10MFP_PWM0_CH5        (0x4UL<<SYS_GPB_MFPH_PB10MFP_Pos)   /*!< GPB_MFPH PB10 setting for PWM0_CH5      */
N
N//PB.12 MFP
N#define SYS_GPB_MFPH_PB12MFP_GPIO            (0x0UL<<SYS_GPB_MFPH_PB12MFP_Pos)   /*!< GPB_MFPH PB12 setting for GPIO          */
N#define SYS_GPB_MFPH_PB12MFP_CLKO            (0x2UL<<SYS_GPB_MFPH_PB12MFP_Pos)   /*!< GPB_MFPH PB12 setting for CLKO          */
N#define SYS_GPB_MFPH_PB12MFP_ADC_CH11        (0x3UL<<SYS_GPB_MFPH_PB12MFP_Pos)   /*!< GPB_MFPH PB12 setting for ADC_CH11      */
N#define SYS_GPB_MFPH_PB12MFP_USCI0_CTL0      (0x6UL<<SYS_GPB_MFPH_PB12MFP_Pos)   /*!< GPB_MFPH PB12 setting for USCI0_CTL0    */
N
N//PB.13 MFP
N#define SYS_GPB_MFPH_PB13MFP_GPIO            (0x0UL<<SYS_GPB_MFPH_PB13MFP_Pos)   /*!< GPB_MFPH PB13 setting for GPIO          */
N#define SYS_GPB_MFPH_PB13MFP_ADC_CH10        (0x3UL<<SYS_GPB_MFPH_PB13MFP_Pos)   /*!< GPB_MFPH PB13 setting for ADC_CH10      */
N#define SYS_GPB_MFPH_PB13MFP_USCI0_CTL1      (0x6UL<<SYS_GPB_MFPH_PB13MFP_Pos)   /*!< GPB_MFPH PB13 setting for USCI0_CTL1    */
N
N//PB.14 MFP
N#define SYS_GPB_MFPH_PB14MFP_GPIO            (0x0UL<<SYS_GPB_MFPH_PB14MFP_Pos)   /*!< GPB_MFPH PB14 setting for GPIO          */
N#define SYS_GPB_MFPH_PB14MFP_INT0            (0x1UL<<SYS_GPB_MFPH_PB14MFP_Pos)   /*!< GPB_MFPH PB14 setting for INT0          */
N#define SYS_GPB_MFPH_PB14MFP_UART0_nRTS      (0x2UL<<SYS_GPB_MFPH_PB14MFP_Pos)   /*!< GPB_MFPH PB14 setting for UART0_nRTS    */
N#define SYS_GPB_MFPH_PB14MFP_ADC_CH9         (0x3UL<<SYS_GPB_MFPH_PB14MFP_Pos)   /*!< GPB_MFPH PB14 setting for ADC_CH9       */
N#define SYS_GPB_MFPH_PB14MFP_BPWM1_CH0       (0x4UL<<SYS_GPB_MFPH_PB14MFP_Pos)   /*!< GPB_MFPH PB14 setting for BPWM1_CH0     */
N#define SYS_GPB_MFPH_PB14MFP_SPI0_SS         (0x7UL<<SYS_GPB_MFPH_PB14MFP_Pos)   /*!< GPB_MFPH PB14 setting for SPI0_SS       */
N
N//PB.15 MFP
N#define SYS_GPB_MFPH_PB15MFP_GPIO            (0x0UL<<SYS_GPB_MFPH_PB15MFP_Pos)   /*!< GPB_MFPH PB15 setting for GPIO          */
N#define SYS_GPB_MFPH_PB15MFP_INT1            (0x1UL<<SYS_GPB_MFPH_PB15MFP_Pos)   /*!< GPB_MFPH PB15 setting for INT1          */
N#define SYS_GPB_MFPH_PB15MFP_TM0_EXT         (0x2UL<<SYS_GPB_MFPH_PB15MFP_Pos)   /*!< GPB_MFPH PB15 setting for TM0_EXT       */
N#define SYS_GPB_MFPH_PB15MFP_BPWM1_CH5       (0x4UL<<SYS_GPB_MFPH_PB15MFP_Pos)   /*!< GPB_MFPH PB15 setting for BPWM1_CH5     */
N
N//PC.0 MFP
N#define SYS_GPC_MFPL_PC0MFP_GPIO             (0x0UL<<SYS_GPC_MFPL_PC0MFP_Pos)    /*!< GPC_MFPL PC0 setting for GPIO            */
N#define SYS_GPC_MFPL_PC0MFP_SPI0_SS          (0x1UL<<SYS_GPC_MFPL_PC0MFP_Pos)    /*!< GPC_MFPL PC0 setting for SPI0_SS         */
N#define SYS_GPC_MFPL_PC0MFP_PWM1_CH0         (0x4UL<<SYS_GPC_MFPL_PC0MFP_Pos)    /*!< GPC_MFPL PC0 setting for PWM1_CH0        */
N#define SYS_GPC_MFPL_PC0MFP_TM2              (0x5UL<<SYS_GPC_MFPL_PC0MFP_Pos)    /*!< GPC_MFPL PC0 setting for TM2             */
N#define SYS_GPC_MFPL_PC0MFP_UART0_RXD        (0x6UL<<SYS_GPC_MFPL_PC0MFP_Pos)    /*!< GPC_MFPL PC0 setting for UART0_RXD       */
N#define SYS_GPC_MFPL_PC0MFP_USCI0_CLK        (0x7UL<<SYS_GPC_MFPL_PC0MFP_Pos)    /*!< GPC_MFPL PC0 setting for USCI0_CLK       */
N
N//PC.1 MFP
N#define SYS_GPC_MFPL_PC1MFP_GPIO             (0x0UL<<SYS_GPC_MFPL_PC1MFP_Pos)   /*!< GPC_MFPL PC1 setting for GPIO           */
N#define SYS_GPC_MFPL_PC1MFP_SPI0_CLK         (0x1UL<<SYS_GPC_MFPL_PC1MFP_Pos)   /*!< GPC_MFPL PC1 setting for SPI0_CLK       */
N#define SYS_GPC_MFPL_PC1MFP_PWM1_CH1         (0x4UL<<SYS_GPC_MFPL_PC1MFP_Pos)   /*!< GPC_MFPL PC1 setting for PWM1_CH1       */
N#define SYS_GPC_MFPL_PC1MFP_UART0_TXD        (0x6UL<<SYS_GPC_MFPL_PC1MFP_Pos)   /*!< GPC_MFPL PC1 setting for UART0_TXD      */
N#define SYS_GPC_MFPL_PC1MFP_USCI0_CTL0       (0x7UL<<SYS_GPC_MFPL_PC1MFP_Pos)   /*!< GPC_MFPL PC1 setting for USCI0_CTL0     */
N
N//PC.2 MFP
N#define SYS_GPC_MFPL_PC2MFP_GPIO             (0x0UL<<SYS_GPC_MFPL_PC2MFP_Pos)   /*!< GPC_MFPL PC2 setting for GPIO           */
N#define SYS_GPC_MFPL_PC2MFP_SPI0_MISO        (0x1UL<<SYS_GPC_MFPL_PC2MFP_Pos)   /*!< GPC_MFPL PC2 setting for SPI0_MISO      */
N#define SYS_GPC_MFPL_PC2MFP_I2C1_SCL         (0x3UL<<SYS_GPC_MFPL_PC2MFP_Pos)   /*!< GPC_MFPL PC2 setting for I2C1_SCL       */
N#define SYS_GPC_MFPL_PC2MFP_PWM1_CH2         (0x4UL<<SYS_GPC_MFPL_PC2MFP_Pos)   /*!< GPC_MFPL PC2 setting for PWM1_CH2       */
N#define SYS_GPC_MFPL_PC2MFP_UART0_nCTS       (0x6UL<<SYS_GPC_MFPL_PC2MFP_Pos)   /*!< GPC_MFPL PC2 setting for UART0_nCTS     */
N#define SYS_GPC_MFPL_PC2MFP_USCI0_DAT1       (0x7UL<<SYS_GPC_MFPL_PC2MFP_Pos)   /*!< GPC_MFPL PC2 setting for USCI0_DAT1     */
N
N//PC.3 MFP
N#define SYS_GPC_MFPL_PC3MFP_GPIO             (0x0UL<<SYS_GPC_MFPL_PC3MFP_Pos)   /*!< GPC_MFPL PC3 setting for GPIO           */
N#define SYS_GPC_MFPL_PC3MFP_SPI0_MOSI        (0x1UL<<SYS_GPC_MFPL_PC3MFP_Pos)   /*!< GPC_MFPL PC3 setting for SPI0_MOSI      */
N#define SYS_GPC_MFPL_PC3MFP_I2C1_SDA         (0x3UL<<SYS_GPC_MFPL_PC3MFP_Pos)   /*!< GPC_MFPL PC3 setting for I2C1_SDA       */
N#define SYS_GPC_MFPL_PC3MFP_PWM1_CH3         (0x4UL<<SYS_GPC_MFPL_PC3MFP_Pos)   /*!< GPC_MFPL PC3 setting for PWM1_CH3       */
N#define SYS_GPC_MFPL_PC3MFP_UART0_nRTS       (0x6UL<<SYS_GPC_MFPL_PC3MFP_Pos)   /*!< GPC_MFPL PC3 setting for UART0_nRTS     */
N#define SYS_GPC_MFPL_PC3MFP_USCI0_DAT0       (0x7UL<<SYS_GPC_MFPL_PC3MFP_Pos)   /*!< GPC_MFPL PC3 setting for USCI0_DAT0     */
N
N//PC.4 MFP
N#define SYS_GPC_MFPL_PC4MFP_GPIO             (0x0UL<<SYS_GPC_MFPL_PC4MFP_Pos)   /*!< GPC_MFPL PC4 setting for GPIO           */
N#define SYS_GPC_MFPL_PC4MFP_UART0_RXD        (0x2UL<<SYS_GPC_MFPL_PC4MFP_Pos)   /*!< GPC_MFPL PC4 setting for UART0_RXD      */
N#define SYS_GPC_MFPL_PC4MFP_SPI0_I2SMCLK     (0x3UL<<SYS_GPC_MFPL_PC4MFP_Pos)   /*!< GPC_MFPL PC4 setting for SPI0_I2SMCLK   */
N#define SYS_GPC_MFPL_PC4MFP_PWM1_CH4         (0x4UL<<SYS_GPC_MFPL_PC4MFP_Pos)   /*!< GPC_MFPL PC4 setting for PWM1_CH4       */
N#define SYS_GPC_MFPL_PC4MFP_USCI0_DAT1       (0x7UL<<SYS_GPC_MFPL_PC4MFP_Pos)   /*!< GPC_MFPL PC4 setting for USCI0_DAT1     */
N
N//PC.5 MFP
N#define SYS_GPC_MFPL_PC5MFP_GPIO             (0x0UL<<SYS_GPC_MFPL_PC5MFP_Pos)   /*!< GPC_MFPL PC5 setting for GPIO           */
N#define SYS_GPC_MFPL_PC5MFP_UART0_TXD        (0x2UL<<SYS_GPC_MFPL_PC5MFP_Pos)   /*!< GPC_MFPL PC5 setting for UART0_TXD      */
N#define SYS_GPC_MFPL_PC5MFP_PWM1_CH5         (0x4UL<<SYS_GPC_MFPL_PC5MFP_Pos)   /*!< GPC_MFPL PC5 setting for PWM1_CH5       */
N#define SYS_GPC_MFPL_PC5MFP_USCI0_DAT0       (0x7UL<<SYS_GPC_MFPL_PC5MFP_Pos)   /*!< GPC_MFPL PC5 setting for USCI0_DAT0     */
N
N//PC.8 MFP
N#define SYS_GPC_MFPH_PC8MFP_GPIO             (0x0UL<<SYS_GPC_MFPH_PC8MFP_Pos)   /*!< GPC_MFPH PC8 setting for GPIO           */
N#define SYS_GPC_MFPH_PC8MFP_STADC            (0x2UL<<SYS_GPC_MFPH_PC8MFP_Pos)   /*!< GPC_MFPH PC8 setting for STADC          */
N#define SYS_GPC_MFPH_PC8MFP_SPI0_SS          (0x3UL<<SYS_GPC_MFPH_PC8MFP_Pos)   /*!< GPC_MFPH PC8 setting for SPI0_SS        */
N#define SYS_GPC_MFPH_PC8MFP_PWM0_CH4         (0x4UL<<SYS_GPC_MFPH_PC8MFP_Pos)   /*!< GPC_MFPH PC8 setting for PWM0_CH4       */
N#define SYS_GPC_MFPH_PC8MFP_PWM1_BRAKE0      (0x5UL<<SYS_GPC_MFPH_PC8MFP_Pos)   /*!< GPC_MFPH PC8 setting for PWM1_BRAKE0    */
N#define SYS_GPC_MFPH_PC8MFP_USCI0_CTL0       (0x7UL<<SYS_GPC_MFPH_PC8MFP_Pos)   /*!< GPC_MFPH PC8 setting for USCI0_CTL0     */
N
N//PC.9 MFP
N#define SYS_GPC_MFPH_PC9MFP_GPIO             (0x0UL<<SYS_GPC_MFPH_PC9MFP_Pos)   /*!< GPC_MFPH PC9 setting for GPIO           */
N#define SYS_GPC_MFPH_PC9MFP_SPI0_CLK         (0x3UL<<SYS_GPC_MFPH_PC9MFP_Pos)   /*!< GPC_MFPH PC9 setting for SPI0_CLK       */
N#define SYS_GPC_MFPH_PC9MFP_PWM0_CH5         (0x4UL<<SYS_GPC_MFPH_PC9MFP_Pos)   /*!< GPC_MFPH PC9 setting for PWM0_CH5       */
N#define SYS_GPC_MFPH_PC9MFP_PWM0_BRAKE1      (0x5UL<<SYS_GPC_MFPH_PC9MFP_Pos)   /*!< GPC_MFPH PC9 setting for PWM0_BRAKE1    */
N#define SYS_GPC_MFPH_PC9MFP_USCI0_CLK        (0x7UL<<SYS_GPC_MFPH_PC9MFP_Pos)   /*!< GPC_MFPH PC9 setting for USCI0_CLK      */
N
N//PC.10 MFP
N#define SYS_GPC_MFPH_PC10MFP_GPIO            (0x0UL<<SYS_GPC_MFPH_PC10MFP_Pos)   /*!< GPC_MFPH PC10 setting for GPIO          */
N#define SYS_GPC_MFPH_PC10MFP_SPI0_MISO       (0x3UL<<SYS_GPC_MFPH_PC10MFP_Pos)   /*!< GPC_MFPH PC10 setting for SPI0_MISO     */
N#define SYS_GPC_MFPH_PC10MFP_PWM0_CH0        (0x4UL<<SYS_GPC_MFPH_PC10MFP_Pos)   /*!< GPC_MFPH PC10 setting for PWM0_CH0      */
N#define SYS_GPC_MFPH_PC10MFP_USCI0_DAT1      (0x7UL<<SYS_GPC_MFPH_PC10MFP_Pos)   /*!< GPC_MFPH PC10 setting for USCI0_DAT1    */
N
N//PC.11 MFP
N#define SYS_GPC_MFPH_PC11MFP_GPIO            (0x0UL<<SYS_GPC_MFPH_PC11MFP_Pos)   /*!< GPC_MFPH PC11 setting for GPIO          */
N#define SYS_GPC_MFPH_PC11MFP_SPI0_MOSI       (0x3UL<<SYS_GPC_MFPH_PC11MFP_Pos)   /*!< GPC_MFPH PC11 setting for SPI0_MOSI     */
N#define SYS_GPC_MFPH_PC11MFP_PWM0_CH1        (0x4UL<<SYS_GPC_MFPH_PC11MFP_Pos)   /*!< GPC_MFPH PC11 setting for PWM0_CH1      */
N#define SYS_GPC_MFPH_PC11MFP_TM1             (0x5UL<<SYS_GPC_MFPH_PC11MFP_Pos)   /*!< GPC_MFPH PC11 setting for TM1           */
N#define SYS_GPC_MFPH_PC11MFP_I2C0_SDA        (0x6UL<<SYS_GPC_MFPH_PC11MFP_Pos)   /*!< GPC_MFPH PC11 setting for I2C0_SDA      */
N#define SYS_GPC_MFPH_PC11MFP_USCI0_DAT0      (0x7UL<<SYS_GPC_MFPH_PC11MFP_Pos)   /*!< GPC_MFPH PC11 setting for USCI0_DAT0    */
N
N//PC.12 MFP
N#define SYS_GPC_MFPH_PC12MFP_GPIO            (0x0UL<<SYS_GPC_MFPH_PC12MFP_Pos)   /*!< GPC_MFPH PC12 setting for GPIO          */
N#define SYS_GPC_MFPH_PC12MFP_PWM0_CH2        (0x2UL<<SYS_GPC_MFPH_PC12MFP_Pos)   /*!< GPC_MFPH PC12 setting for PWM0_CH2      */
N#define SYS_GPC_MFPH_PC12MFP_SPI0_I2SMCLK    (0x3UL<<SYS_GPC_MFPH_PC12MFP_Pos)   /*!< GPC_MFPH PC12 setting for SPI0_I2SMCLK  */
N#define SYS_GPC_MFPH_PC12MFP_CLKO            (0x4UL<<SYS_GPC_MFPH_PC12MFP_Pos)   /*!< GPC_MFPH PC12 setting for CLKO          */
N#define SYS_GPC_MFPH_PC12MFP_INT0            (0x5UL<<SYS_GPC_MFPH_PC12MFP_Pos)   /*!< GPC_MFPH PC12 setting for INT0          */
N#define SYS_GPC_MFPH_PC12MFP_I2C0_SCL        (0x6UL<<SYS_GPC_MFPH_PC12MFP_Pos)   /*!< GPC_MFPH PC12 setting for I2C0_SCL      */
N#define SYS_GPC_MFPH_PC12MFP_USCI0_CTL1      (0x7UL<<SYS_GPC_MFPH_PC12MFP_Pos)   /*!< GPC_MFPH PC12 setting for USCI0_CTL1    */
N
N//PC.13 MFP
N#define SYS_GPC_MFPH_PC13MFP_GPIO            (0x0UL<<SYS_GPC_MFPH_PC13MFP_Pos)   /*!< GPC_MFPH PC13 setting for GPIO          */
N#define SYS_GPC_MFPH_PC13MFP_PWM0_CH3        (0x2UL<<SYS_GPC_MFPH_PC13MFP_Pos)   /*!< GPC_MFPH PC13 setting for PWM0_CH3      */
N#define SYS_GPC_MFPH_PC13MFP_CLKO            (0x3UL<<SYS_GPC_MFPH_PC13MFP_Pos)   /*!< GPC_MFPH PC13 setting for CLKO          */
N#define SYS_GPC_MFPH_PC13MFP_INT0            (0x5UL<<SYS_GPC_MFPH_PC13MFP_Pos)   /*!< GPC_MFPH PC13 setting for INT0          */
N#define SYS_GPC_MFPH_PC13MFP_I2C0_SDA        (0x6UL<<SYS_GPC_MFPH_PC13MFP_Pos)   /*!< GPC_MFPH PC13 setting for I2C0_SDA      */
N
N//PD.0 MFP
N#define SYS_GPD_MFPL_PD0MFP_GPIO              (0x0UL<<SYS_GPD_MFPL_PD0MFP_Pos)    /*!< GPD_MFPL PD0 setting for GPIO            */
N#define SYS_GPD_MFPL_PD0MFP_ADC_CH0           (0x3UL<<SYS_GPD_MFPL_PD0MFP_Pos)    /*!< GPD_MFPL PD0 setting for ADC_CH0         */
N#define SYS_GPD_MFPL_PD0MFP_UART0_nRTS        (0x5UL<<SYS_GPD_MFPL_PD0MFP_Pos)    /*!< GPD_MFPL PD0 setting for UART0_nRTS      */
N#define SYS_GPD_MFPL_PD0MFP_USCI0_CTL0        (0x6UL<<SYS_GPD_MFPL_PD0MFP_Pos)    /*!< GPD_MFPL PD0 setting for USCI0_CTL0      */
N#define SYS_GPD_MFPL_PD0MFP_SPI0_SS           (0x7UL<<SYS_GPD_MFPL_PD0MFP_Pos)    /*!< GPD_MFPL PD0 setting for SPI0_SS         */
N
N//PD.1 MFP
N#define SYS_GPD_MFPL_PD1MFP_GPIO             (0x0UL<<SYS_GPD_MFPL_PD1MFP_Pos)   /*!< GPD_MFPL PD1 setting for GPIO           */
N#define SYS_GPD_MFPL_PD1MFP_ADC_CH1          (0x3UL<<SYS_GPD_MFPL_PD1MFP_Pos)   /*!< GPD_MFPL PD1 setting for ADC_CH1        */
N#define SYS_GPD_MFPL_PD1MFP_TM0_EXT          (0x4UL<<SYS_GPD_MFPL_PD1MFP_Pos)   /*!< GPD_MFPL PD1 setting for TM0_EXT        */
N#define SYS_GPD_MFPL_PD1MFP_UART0_RXD        (0x5UL<<SYS_GPD_MFPL_PD1MFP_Pos)   /*!< GPD_MFPL PD1 setting for UART0_RXD      */
N#define SYS_GPD_MFPL_PD1MFP_USCI0_CLK        (0x6UL<<SYS_GPD_MFPL_PD1MFP_Pos)   /*!< GPD_MFPL PD1 setting for USCI0_CLK      */
N#define SYS_GPD_MFPL_PD1MFP_SPI0_CLK         (0x7UL<<SYS_GPD_MFPL_PD1MFP_Pos)   /*!< GPD_MFPL PD1 setting for SPI0_CLK       */
N
N//PD.2 MFP
N#define SYS_GPD_MFPL_PD2MFP_GPIO             (0x0UL<<SYS_GPD_MFPL_PD2MFP_Pos)   /*!< GPD_MFPL PD2 setting for GPIO           */
N#define SYS_GPD_MFPL_PD2MFP_ADC_CH2          (0x3UL<<SYS_GPD_MFPL_PD2MFP_Pos)   /*!< GPD_MFPL PD2 setting for ADC_CH2        */
N#define SYS_GPD_MFPL_PD2MFP_TM3              (0x4UL<<SYS_GPD_MFPL_PD2MFP_Pos)   /*!< GPD_MFPL PD2 setting for TM3            */
N#define SYS_GPD_MFPL_PD2MFP_UART0_TXD        (0x5UL<<SYS_GPD_MFPL_PD2MFP_Pos)   /*!< GPD_MFPL PD2 setting for UART0_TXD      */
N#define SYS_GPD_MFPL_PD2MFP_USCI0_DAT1       (0x6UL<<SYS_GPD_MFPL_PD2MFP_Pos)   /*!< GPD_MFPL PD2 setting for USCI0_DAT1     */
N#define SYS_GPD_MFPL_PD2MFP_SPI0_MISO        (0x7UL<<SYS_GPD_MFPL_PD2MFP_Pos)   /*!< GPD_MFPL PD2 setting for SPI0_MISO      */
N
N//PD.3 MFP
N#define SYS_GPD_MFPL_PD3MFP_GPIO             (0x0UL<<SYS_GPD_MFPL_PD3MFP_Pos)   /*!< GPD_MFPL PD3 setting for GPIO           */
N#define SYS_GPD_MFPL_PD3MFP_ADC_CH3          (0x3UL<<SYS_GPD_MFPL_PD3MFP_Pos)   /*!< GPD_MFPL PD3 setting for ADC_CH3        */
N#define SYS_GPD_MFPL_PD3MFP_TM1_EXT          (0x4UL<<SYS_GPD_MFPL_PD3MFP_Pos)   /*!< GPD_MFPL PD3 setting for TM1_EXT        */
N#define SYS_GPD_MFPL_PD3MFP_UART0_nCTS       (0x5UL<<SYS_GPD_MFPL_PD3MFP_Pos)   /*!< GPD_MFPL PD3 setting for UART0_nCTS     */
N#define SYS_GPD_MFPL_PD3MFP_USCI0_DAT0       (0x6UL<<SYS_GPD_MFPL_PD3MFP_Pos)   /*!< GPD_MFPL PD3 setting for USCI0_DAT0     */
N#define SYS_GPD_MFPL_PD3MFP_SPI0_MOSI        (0x7UL<<SYS_GPD_MFPL_PD3MFP_Pos)   /*!< GPD_MFPL PD3 setting for SPI0_MOSI      */
N
N//PD.4 MFP
N#define SYS_GPD_MFPL_PD4MFP_GPIO             (0x0UL<<SYS_GPD_MFPL_PD4MFP_Pos)   /*!< GPD_MFPL PD4 setting for GPIO           */
N#define SYS_GPD_MFPL_PD4MFP_ADC_CH4          (0x2UL<<SYS_GPD_MFPL_PD4MFP_Pos)   /*!< GPD_MFPL PD4 setting for ADC_CH4        */
N#define SYS_GPD_MFPL_PD4MFP_BPWM1_CH5        (0x4UL<<SYS_GPD_MFPL_PD4MFP_Pos)   /*!< GPD_MFPL PD4 setting for BPWM1_CH5      */
N#define SYS_GPD_MFPL_PD4MFP_UART0_nRTS       (0x5UL<<SYS_GPD_MFPL_PD4MFP_Pos)   /*!< GPD_MFPL PD4 setting for UART0_nRTS     */
N#define SYS_GPD_MFPL_PD4MFP_USCI0_CTL0       (0x6UL<<SYS_GPD_MFPL_PD4MFP_Pos)   /*!< GPD_MFPL PD4 setting for USCI0_CTL0     */
N#define SYS_GPD_MFPL_PD4MFP_SPI0_SS          (0x7UL<<SYS_GPD_MFPL_PD4MFP_Pos)   /*!< GPD_MFPL PD4 setting for SPI0_SS        */
N
N//PD.5 MFP
N#define SYS_GPD_MFPL_PD5MFP_GPIO             (0x0UL<<SYS_GPD_MFPL_PD5MFP_Pos)   /*!< GPD_MFPL PD5 setting for GPIO           */
N#define SYS_GPD_MFPL_PD5MFP_ADC_CH5          (0x2UL<<SYS_GPD_MFPL_PD5MFP_Pos)   /*!< GPD_MFPL PD5 setting for ADC_CH5        */
N#define SYS_GPD_MFPL_PD5MFP_BPWM1_CH4        (0x4UL<<SYS_GPD_MFPL_PD5MFP_Pos)   /*!< GPD_MFPL PD5 setting for BPWM1_CH4      */
N
N//PD.8 MFP
N#define SYS_GPD_MFPH_PD8MFP_GPIO             (0x0UL<<SYS_GPD_MFPH_PD8MFP_Pos)   /*!< GPD_MFPH PD8 setting for GPIO           */
N#define SYS_GPD_MFPH_PD8MFP_USCI0_DAT0       (0x6UL<<SYS_GPD_MFPH_PD8MFP_Pos)   /*!< GPD_MFPH PD8 setting for USCI0_DAT0     */
N
N//PD.9 MFP
N#define SYS_GPD_MFPH_PD9MFP_GPIO             (0x0UL<<SYS_GPD_MFPH_PD9MFP_Pos)   /*!< GPD_MFPH PD9 setting for GPIO           */
N#define SYS_GPD_MFPH_PD9MFP_PWM0_BRAKE1      (0x5UL<<SYS_GPD_MFPH_PD9MFP_Pos)   /*!< GPD_MFPH PD9 setting for PWM0_BRAKE1    */
N
N//PD.10 MFP
N#define SYS_GPD_MFPH_PD10MFP_GPIO            (0x0UL<<SYS_GPD_MFPH_PD10MFP_Pos)   /*!< GPD_MFPH PD10 setting for GPIO          */
N#define SYS_GPD_MFPH_PD10MFP_CLKO            (0x1UL<<SYS_GPD_MFPH_PD10MFP_Pos)   /*!< GPD_MFPH PD10 setting for CLKO          */
N#define SYS_GPD_MFPH_PD10MFP_BPWM0_CH5       (0x4UL<<SYS_GPD_MFPH_PD10MFP_Pos)   /*!< GPD_MFPH PD10 setting for BPWM0_CH5     */
N
N//PD.11 MFP
N#define SYS_GPD_MFPH_PD11MFP_GPIO            (0x0UL<<SYS_GPD_MFPH_PD11MFP_Pos)   /*!< GPD_MFPH PD11 setting for GPIO          */
N#define SYS_GPD_MFPH_PD11MFP_INT1            (0x1UL<<SYS_GPD_MFPH_PD11MFP_Pos)   /*!< GPD_MFPH PD11 setting for INT1          */
N#define SYS_GPD_MFPH_PD11MFP_BPWM0_CH4       (0x4UL<<SYS_GPD_MFPH_PD11MFP_Pos)   /*!< GPD_MFPH PD11 setting for BPWM0_CH4     */
N
N//PE.0 MFP
N#define SYS_GPE_MFPL_PE0MFP_GPIO              (0x0UL<<SYS_GPE_MFPL_PE0MFP_Pos)    /*!< GPE_MFPL PE0 setting for GPIO            */
N#define SYS_GPE_MFPL_PE0MFP_INT0              (0x1UL<<SYS_GPE_MFPL_PE0MFP_Pos)    /*!< GPE_MFPL PE0 setting for INT0            */
N#define SYS_GPE_MFPL_PE0MFP_CLKO              (0x3UL<<SYS_GPE_MFPL_PE0MFP_Pos)    /*!< GPE_MFPL PE0 setting for CLKO            */
N#define SYS_GPE_MFPL_PE0MFP_PWM0_CH3          (0x4UL<<SYS_GPE_MFPL_PE0MFP_Pos)    /*!< GPE_MFPL PE0 setting for PWM0_CH3        */
N#define SYS_GPE_MFPL_PE0MFP_TM1_EXT           (0x5UL<<SYS_GPE_MFPL_PE0MFP_Pos)    /*!< GPE_MFPL PE0 setting for TM1_EXT         */
N#define SYS_GPE_MFPL_PE0MFP_USCI0_DAT0        (0x7UL<<SYS_GPE_MFPL_PE0MFP_Pos)    /*!< GPE_MFPL PE0 setting for USCI0_DAT0      */
N
N//PE.1 MFP
N#define SYS_GPE_MFPL_PE1MFP_GPIO             (0x0UL<<SYS_GPE_MFPL_PE1MFP_Pos)   /*!< GPE_MFPL PE1 setting for GPIO           */
N#define SYS_GPE_MFPL_PE1MFP_STADC            (0x2UL<<SYS_GPE_MFPL_PE1MFP_Pos)   /*!< GPE_MFPL PE1 setting for STADC          */
N#define SYS_GPE_MFPL_PE1MFP_CLKO             (0x3UL<<SYS_GPE_MFPL_PE1MFP_Pos)   /*!< GPE_MFPL PE1 setting for CLKO           */
N#define SYS_GPE_MFPL_PE1MFP_TM3              (0x5UL<<SYS_GPE_MFPL_PE1MFP_Pos)   /*!< GPE_MFPL PE1 setting for TM3            */
N#define SYS_GPE_MFPL_PE1MFP_USCI0_DAT1       (0x7UL<<SYS_GPE_MFPL_PE1MFP_Pos)   /*!< GPE_MFPL PE1 setting for USCI0_DAT1     */
N
N//PE.2 MFP
N#define SYS_GPE_MFPL_PE2MFP_GPIO             (0x0UL<<SYS_GPE_MFPL_PE2MFP_Pos)   /*!< GPE_MFPL PE2 setting for GPIO           */
N#define SYS_GPE_MFPL_PE2MFP_INT1             (0x1UL<<SYS_GPE_MFPL_PE2MFP_Pos)   /*!< GPE_MFPL PE2 setting for INT1           */
N#define SYS_GPE_MFPL_PE2MFP_TM0_EXT          (0x5UL<<SYS_GPE_MFPL_PE2MFP_Pos)   /*!< GPE_MFPL PE2 setting for TM0_EXT        */
N#define SYS_GPE_MFPL_PE2MFP_I2C0_SCL         (0x6UL<<SYS_GPE_MFPL_PE2MFP_Pos)   /*!< GPE_MFPL PE2 setting for I2C0_SCL       */
N#define SYS_GPE_MFPL_PE2MFP_USCI0_CTL1       (0x7UL<<SYS_GPE_MFPL_PE2MFP_Pos)   /*!< GPE_MFPL PE2 setting for USCI0_CTL1     */
N
N//PF.0 MFP
N#define SYS_GPF_MFPL_PF0MFP_GPIO              (0x0UL<<SYS_GPF_MFPL_PF0MFP_Pos)    /*!< GPF_MFPL PF0 setting for GPIO            */
N#define SYS_GPF_MFPL_PF0MFP_XT_OUT            (0x1UL<<SYS_GPF_MFPL_PF0MFP_Pos)    /*!< GPF_MFPL PF0 setting for XT_OUT          */
N#define SYS_GPF_MFPL_PF0MFP_XT1_OUT           (0x1UL<<SYS_GPF_MFPL_PF0MFP_Pos)    /*!< GPF_MFPL PF0 setting for XT1_OUT         */
N#define SYS_GPF_MFPL_PF0MFP_X32_OUT           (0x1UL<<SYS_GPF_MFPL_PF0MFP_Pos)    /*!< GPF_MFPL PF0 setting for X32_OUT         */
N#define SYS_GPF_MFPL_PF0MFP_BPWM1_CH3         (0x4UL<<SYS_GPF_MFPL_PF0MFP_Pos)    /*!< GPF_MFPL PF0 setting for BPWM1_CH3       */
N#define SYS_GPF_MFPL_PF0MFP_TM3               (0x5UL<<SYS_GPF_MFPL_PF0MFP_Pos)    /*!< GPF_MFPL PF0 setting for TM3             */
N
N//PF.1 MFP
N#define SYS_GPF_MFPL_PF1MFP_GPIO             (0x0UL<<SYS_GPF_MFPL_PF1MFP_Pos)   /*!< GPF_MFPL PF1 setting for GPIO           */
N#define SYS_GPF_MFPL_PF1MFP_XT_IN            (0x1UL<<SYS_GPF_MFPL_PF1MFP_Pos)   /*!< GPF_MFPL PF1 setting for XT_IN          */
N#define SYS_GPF_MFPL_PF1MFP_XT1_IN           (0x1UL<<SYS_GPF_MFPL_PF1MFP_Pos)   /*!< GPF_MFPL PF1 setting for XT1_IN         */
N#define SYS_GPF_MFPL_PF1MFP_X32_IN           (0x1UL<<SYS_GPF_MFPL_PF1MFP_Pos)   /*!< GPF_MFPL PF1 setting for X32_IN         */
N#define SYS_GPF_MFPL_PF1MFP_BPWM1_CH2        (0x4UL<<SYS_GPF_MFPL_PF1MFP_Pos)   /*!< GPF_MFPL PF1 setting for BPWM1_CH2      */
N#define SYS_GPF_MFPL_PF1MFP_TM1_EXT          (0x5UL<<SYS_GPF_MFPL_PF1MFP_Pos)   /*!< GPF_MFPL PF1 setting for TM1_EXT        */
N
N//PF.2 MFP
N#define SYS_GPF_MFPL_PF2MFP_GPIO             (0x0UL<<SYS_GPF_MFPL_PF2MFP_Pos)   /*!< GPF_MFPL PF2 setting for GPIO           */
N#define SYS_GPF_MFPL_PF2MFP_ICE_DAT          (0x1UL<<SYS_GPF_MFPL_PF2MFP_Pos)   /*!< GPF_MFPL PF2 setting for ICE_DAT        */
N#define SYS_GPF_MFPL_PF2MFP_I2C0_SDA         (0x2UL<<SYS_GPF_MFPL_PF2MFP_Pos)   /*!< GPF_MFPL PF2 setting for I2C0_SDA       */
N#define SYS_GPF_MFPL_PF2MFP_ADC_CH6          (0x3UL<<SYS_GPF_MFPL_PF2MFP_Pos)   /*!< GPF_MFPL PF2 setting for ADC_CH6        */
N#define SYS_GPF_MFPL_PF2MFP_BPWM1_CH3        (0x4UL<<SYS_GPF_MFPL_PF2MFP_Pos)   /*!< GPF_MFPL PF2 setting for BPWM1_CH3      */
N
N//PF.3 MFP
N#define SYS_GPF_MFPL_PF3MFP_GPIO             (0x0UL<<SYS_GPF_MFPL_PF3MFP_Pos)   /*!< GPF_MFPL PF3 setting for GPIO           */
N#define SYS_GPF_MFPL_PF3MFP_ICE_CLK          (0x1UL<<SYS_GPF_MFPL_PF3MFP_Pos)   /*!< GPF_MFPL PF3 setting for ICE_CLK        */
N#define SYS_GPF_MFPL_PF3MFP_I2C0_SCL         (0x2UL<<SYS_GPF_MFPL_PF3MFP_Pos)   /*!< GPF_MFPL PF3 setting for I2C0_SCL       */
N#define SYS_GPF_MFPL_PF3MFP_ADC_CH7          (0x3UL<<SYS_GPF_MFPL_PF3MFP_Pos)   /*!< GPF_MFPL PF3 setting for ADC_CH7        */
N#define SYS_GPF_MFPL_PF3MFP_BPWM1_CH2        (0x4UL<<SYS_GPF_MFPL_PF3MFP_Pos)   /*!< GPF_MFPL PF3 setting for BPWM1_CH2      */
N
N//PF.4 MFP
N#define SYS_GPF_MFPL_PF4MFP_GPIO             (0x0UL<<SYS_GPF_MFPL_PF4MFP_Pos)   /*!< GPF_MFPL PF4 setting for GPIO           */
N#define SYS_GPF_MFPL_PF4MFP_ICE_DAT          (0x1UL<<SYS_GPF_MFPL_PF4MFP_Pos)   /*!< GPF_MFPL PF4 setting for ICE_DAT        */
N#define SYS_GPF_MFPL_PF4MFP_I2C0_SDA         (0x2UL<<SYS_GPF_MFPL_PF4MFP_Pos)   /*!< GPF_MFPL PF4 setting for I2C0_SDA       */
N#define SYS_GPF_MFPL_PF4MFP_UART0_TXD        (0x3UL<<SYS_GPF_MFPL_PF4MFP_Pos)   /*!< GPF_MFPL PF4 setting for UART0_TXD      */
N#define SYS_GPF_MFPL_PF4MFP_PWM0_CH3         (0x4UL<<SYS_GPF_MFPL_PF4MFP_Pos)   /*!< GPF_MFPL PF4 setting for PWM0_CH3       */
N
N//PF.5 MFP
N#define SYS_GPF_MFPL_PF5MFP_GPIO             (0x0UL<<SYS_GPF_MFPL_PF5MFP_Pos)   /*!< GPF_MFPL PF5 setting for GPIO           */
N#define SYS_GPF_MFPL_PF5MFP_ICE_CLK          (0x1UL<<SYS_GPF_MFPL_PF5MFP_Pos)   /*!< GPF_MFPL PF5 setting for ICE_CLK        */
N#define SYS_GPF_MFPL_PF5MFP_I2C0_SCL         (0x2UL<<SYS_GPF_MFPL_PF5MFP_Pos)   /*!< GPF_MFPL PF5 setting for I2C0_SCL       */
N#define SYS_GPF_MFPL_PF5MFP_UART0_RXD        (0x3UL<<SYS_GPF_MFPL_PF5MFP_Pos)   /*!< GPF_MFPL PF5 setting for UART0_RXD      */
N
N
N/*@}*/ /* end of group SYS_EXPORTED_CONSTANTS */
N
N/** @addtogroup SYS_EXPORTED_FUNCTIONS SYS Exported Functions
N  @{
N*/
N
N
N/**
N  * @brief      Clear Brown-out detector interrupt flag
N  * @param      None
N  * @return     None
N  * @details    This macro clear Brown-out detector interrupt flag.
N  * \hideinitializer
N  */
N#define SYS_CLEAR_BOD_INT_FLAG()        (SYS->BODCTL |= SYS_BODCTL_BODIF_Msk)
N
N/**
N  * @brief      Set Brown-out detector function to normal mode
N  * @param      None
N  * @return     None
N  * @details    This macro set Brown-out detector to normal mode.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_CLEAR_BOD_LPM()             (SYS->BODCTL &= ~SYS_BODCTL_BODLPM_Msk)
N
N/**
N  * @brief      Disable Brown-out detector function
N  * @param      None
N  * @return     None
N  * @details    This macro disable Brown-out detector function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_DISABLE_BOD()               (SYS->BODCTL &= ~SYS_BODCTL_BODEN_Msk)
N
N/**
N  * @brief      Enable Brown-out detector function
N  * @param      None
N  * @return     None
N  * @details    This macro enable Brown-out detector function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_ENABLE_BOD()                (SYS->BODCTL |= SYS_BODCTL_BODEN_Msk)
N
N/**
N  * @brief      Get Brown-out detector interrupt flag
N  * @param      None
N  * @retval     0   Brown-out detect interrupt flag is not set.
N  * @retval     >=1 Brown-out detect interrupt flag is set.
N  * @details    This macro get Brown-out detector interrupt flag.
N  * \hideinitializer
N  */
N#define SYS_GET_BOD_INT_FLAG()          (SYS->BODCTL & SYS_BODCTL_BODIF_Msk)
N
N/**
N  * @brief      Get Brown-out detector status
N  * @param      None
N  * @retval     0   System voltage is higher than BOD threshold voltage setting or BOD function is disabled.
N  * @retval     >=1 System voltage is lower than BOD threshold voltage setting.
N  * @details    This macro get Brown-out detector output status.
N  *             If the BOD function is disabled, this function always return 0.
N  * \hideinitializer
N  */
N#define SYS_GET_BOD_OUTPUT()            (SYS->BODCTL & SYS_BODCTL_BODOUT_Msk)
N
N/**
N  * @brief      Enable Brown-out detector interrupt function
N  * @param      None
N  * @return     None
N  * @details    This macro enable Brown-out detector interrupt function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_DISABLE_BOD_RST()           (SYS->BODCTL &= ~SYS_BODCTL_BODRSTEN_Msk)
N
N/**
N  * @brief      Enable Brown-out detector reset function
N  * @param      None
N  * @return     None
N  * @details    This macro enable Brown-out detect reset function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_ENABLE_BOD_RST()            (SYS->BODCTL |= SYS_BODCTL_BODRSTEN_Msk)
N
N/**
N  * @brief      Set Brown-out detector function low power mode
N  * @param      None
N  * @return     None
N  * @details    This macro set Brown-out detector to low power mode.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_SET_BOD_LPM()               (SYS->BODCTL |= SYS_BODCTL_BODLPM_Msk)
N
N/**
N  * @brief      Set Brown-out detector voltage level
N  * @param[in]  u32Level is Brown-out voltage level. Including :
N  *             - \ref SYS_BODCTL_BODVL_4_5V
N  *             - \ref SYS_BODCTL_BODVL_3_7V
N  *             - \ref SYS_BODCTL_BODVL_2_7V
N  *             - \ref SYS_BODCTL_BODVL_2_2V
N  * @return     None
N  * @details    This macro set Brown-out detector voltage level.
N  *             The write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_SET_BOD_LEVEL(u32Level)     (SYS->BODCTL = (SYS->BODCTL & ~SYS_BODCTL_BODVL_Msk) | (u32Level))
N
N/**
N  * @brief      Get reset source is from Brown-out detector reset
N  * @param      None
N  * @retval     0   Previous reset source is not from Brown-out detector reset
N  * @retval     >=1 Previous reset source is from Brown-out detector reset
N  * @details    This macro get previous reset source is from Brown-out detect reset or not.
N  * \hideinitializer
N  */
N#define SYS_IS_BOD_RST()                (SYS->RSTSTS & SYS_RSTSTS_BODRF_Msk)
N
N/**
N  * @brief      Get reset source is from CPU reset
N  * @param      None
N  * @retval     0   Previous reset source is not from CPU reset
N  * @retval     >=1 Previous reset source is from CPU reset
N  * @details    This macro get previous reset source is from CPU reset.
N  * \hideinitializer
N  */
N#define SYS_IS_CPU_RST()                (SYS->RSTSTS & SYS_RSTSTS_CPURF_Msk)
N
N/**
N  * @brief      Get reset source is from LVR Reset
N  * @param      None
N  * @retval     0   Previous reset source is not from Low-Voltage-Reset
N  * @retval     >=1 Previous reset source is from Low-Voltage-Reset
N  * @details    This macro get previous reset source is from Low-Voltage-Reset.
N  * \hideinitializer
N  */
N#define SYS_IS_LVR_RST()                (SYS->RSTSTS & SYS_RSTSTS_LVRF_Msk)
N
N/**
N  * @brief      Get reset source is from Power-on Reset
N  * @param      None
N  * @retval     0   Previous reset source is not from Power-on Reset
N  * @retval     >=1 Previous reset source is from Power-on Reset
N  * @details    This macro get previous reset source is from Power-on Reset.
N  * \hideinitializer
N  */
N#define SYS_IS_POR_RST()                (SYS->RSTSTS & SYS_RSTSTS_PORF_Msk)
N
N/**
N  * @brief      Get reset source is from reset pin reset
N  * @param      None
N  * @retval     0   Previous reset source is not from reset pin reset
N  * @retval     >=1 Previous reset source is from reset pin reset
N  * @details    This macro get previous reset source is from reset pin reset.
N  * \hideinitializer
N  */
N#define SYS_IS_RSTPIN_RST()             (SYS->RSTSTS & SYS_RSTSTS_PINRF_Msk)
N
N/**
N  * @brief      Get reset source is from system reset
N  * @param      None
N  * @retval     0   Previous reset source is not from system reset
N  * @retval     >=1 Previous reset source is from system reset
N  * @details    This macro get previous reset source is from system reset.
N  * \hideinitializer
N  */
N#define SYS_IS_SYSTEM_RST()             (SYS->RSTSTS & SYS_RSTSTS_MCURF_Msk)
N
N/**
N  * @brief      Get reset source is from window watch dog reset
N  * @param      None
N  * @retval     0   Previous reset source is not from window watch dog reset
N  * @retval     >=1 Previous reset source is from window watch dog reset
N  * @details    This macro get previous reset source is from window watch dog reset.
N  * \hideinitializer
N  */
N#define SYS_IS_WDT_RST()                (SYS->RSTSTS & SYS_RSTSTS_WDTRF_Msk)
N
N/**
N  * @brief      Disable Low-Voltage-Reset function
N  * @param      None
N  * @return     None
N  * @details    This macro disable Low-Voltage-Reset function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_DISABLE_LVR()               (SYS->BODCTL &= ~SYS_BODCTL_LVREN_Msk)
N
N/**
N  * @brief      Enable Low-Voltage-Reset function
N  * @param      None
N  * @return     None
N  * @details    This macro enable Low-Voltage-Reset function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_ENABLE_LVR()                (SYS->BODCTL |= SYS_BODCTL_LVREN_Msk)
N
N/**
N  * @brief      Disable Power-on Reset function
N  * @param      None
N  * @return     None
N  * @details    This macro disable Power-on Reset function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_DISABLE_POR()               (SYS->PORCTL = 0x5AA5)
N
N/**
N  * @brief      Enable Power-on Reset function
N  * @param      None
N  * @return     None
N  * @details    This macro enable Power-on Reset function.
N  *             The register write-protection function should be disabled before using this macro.
N  * \hideinitializer
N  */
N#define SYS_ENABLE_POR()                (SYS->PORCTL = 0)
N
N/**
N  * @brief      Clear reset source flag
N  * @param[in]  u32RstSrc is reset source. Including :
N  *             - \ref SYS_RSTSTS_PORF_Msk
N  *             - \ref SYS_RSTSTS_PINRF_Msk
N  *             - \ref SYS_RSTSTS_WDTRF_Msk
N  *             - \ref SYS_RSTSTS_LVRF_Msk
N  *             - \ref SYS_RSTSTS_BODRF_Msk
N  *             - \ref SYS_RSTSTS_MCURF_Msk
N  *             - \ref SYS_RSTSTS_CPURF_Msk
N  * @return     None
N  * @details    This macro clear reset source flag.
N  * \hideinitializer
N  */
N#define SYS_CLEAR_RST_SOURCE(u32RstSrc) ((SYS->RSTSTS) = (u32RstSrc) )
N
N
N/**
N  * @brief      Disable register write-protection function
N  * @param      None
N  * @return     None
N  * @details    This function disable register write-protection function.
N  *             To unlock the protected register to allow write access.
N  */
N__STATIC_INLINE void SYS_UnlockReg(void)
Xstatic __inline void SYS_UnlockReg(void)
N{
N    do
N    {
N        SYS->REGLCTL = 0x59;
X        ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->REGLCTL = 0x59;
N        SYS->REGLCTL = 0x16;
X        ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->REGLCTL = 0x16;
N        SYS->REGLCTL = 0x88;
X        ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->REGLCTL = 0x88;
N    }
N    while (SYS->REGLCTL == 0);
X    while (((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->REGLCTL == 0);
N}
N
N/**
N  * @brief      Enable register write-protection function
N  * @param      None
N  * @return     None
N  * @details    This function is used to enable register write-protection function.
N  *             To lock the protected register to forbid write access.
N  */
N__STATIC_INLINE void SYS_LockReg(void)
Xstatic __inline void SYS_LockReg(void)
N{
N    SYS->REGLCTL = 0;
X    ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->REGLCTL = 0;
N}
N
N
Nvoid SYS_ClearResetSrc(uint32_t u32Src);
Nuint32_t SYS_GetBODStatus(void);
Nuint32_t SYS_GetResetSrc(void);
Nuint32_t SYS_IsRegLocked(void);
Nuint32_t SYS_ReadPDID(void);
Nvoid SYS_ResetChip(void);
Nvoid SYS_ResetCPU(void);
Nvoid SYS_ResetModule(uint32_t u32ModuleIndex);
Nvoid SYS_EnableBOD(int32_t i32Mode, uint32_t u32BODLevel);
Nvoid SYS_DisableBOD(void);
N
N
N/*@}*/ /* end of group SYS_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group SYS_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__SYS_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 384 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "timer.h"
L 1 "..\..\..\..\Library\StdDriver\inc\timer.h" 1
N/**************************************************************************//**
N * @file     timer.h
N * @version  V3.00
N * @brief    NUC121 series Timer driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __TIMER_H__
N#define __TIMER_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup TIMER_Driver TIMER Driver
N  @{
N*/
N
N/** @addtogroup TIMER_EXPORTED_CONSTANTS TIMER Exported Constants
N  @{
N*/
N/*---------------------------------------------------------------------------------------------------------*/
N/*  TIMER Operation Mode, External Counter and Capture Mode Constant Definitions                           */
N/*---------------------------------------------------------------------------------------------------------*/
N#define TIMER_ONESHOT_MODE                      (0UL << TIMER_CTL_OPMODE_Pos)      /*!< Timer working in one-shot mode */
N#define TIMER_PERIODIC_MODE                     (1UL << TIMER_CTL_OPMODE_Pos)      /*!< Timer working in periodic mode */
N#define TIMER_TOGGLE_MODE                       (2UL << TIMER_CTL_OPMODE_Pos)      /*!< Timer working in toggle-output mode */
N#define TIMER_CONTINUOUS_MODE                   (3UL << TIMER_CTL_OPMODE_Pos)      /*!< Timer working in continuous counting mode */
N#define TIMER_TOUT_PIN_FROM_TX                  (0UL << TIMER_CTL_TGLPINSEL_Pos)   /*!< Timer toggle-output pin is from Tx pin */
N#define TIMER_TOUT_PIN_FROM_TX_EXT              (1UL << TIMER_CTL_TGLPINSEL_Pos)   /*!< Timer toggle-output pin is from Tx_EXT pin */
N#define TIMER_CAPTURE_FREE_COUNTING_MODE        (0UL << TIMER_EXTCTL_CAPFUNCS_Pos) /*!< Timer capture event to get timer counter value */
N#define TIMER_CAPTURE_COUNTER_RESET_MODE        (1UL << TIMER_EXTCTL_CAPFUNCS_Pos) /*!< Timer capture event to reset timer counter */
N#define TIMER_CAPTURE_FALLING_EDGE              (0UL << TIMER_EXTCTL_CAPEDGE_Pos)  /*!< Falling edge detection to trigger timer capture */
N#define TIMER_CAPTURE_RISING_EDGE               (1UL << TIMER_EXTCTL_CAPEDGE_Pos)  /*!< Rising edge detection to trigger timer capture */
N#define TIMER_CAPTURE_FALLING_AND_RISING_EDGE   (2UL << TIMER_EXTCTL_CAPEDGE_Pos)  /*!< Both falling and rising edge detection to trigger timer capture */
N#define TIMER_COUNTER_FALLING_EDGE              (0UL << TIMER_EXTCTL_CNTPHASE_Pos) /*!< Counter increase on falling edge detection */
N#define TIMER_COUNTER_RISING_EDGE               (1UL << TIMER_EXTCTL_CNTPHASE_Pos) /*!< Counter increase on rising edge detection */
N
N/* For new Trigger Source Selection */
N#define TIMER_TRGSRC_TIMEOUT_EVENT      (0UL << TIMER_CTL_TRGSSEL_Pos)      /*!< Trigger source from Timeout event */
N#define TIMER_TRGSRC_CAPTURE_EVENT      (1UL << TIMER_CTL_TRGSSEL_Pos)      /*!< Trigger source from Capture event */
N
N#define TIMER_TRG_TO_BPWM               (TIMER_CTL_TRGBPWM_Msk)             /*!< Timer trigger BPWM */
N#define TIMER_TRG_TO_PWM                (TIMER_CTL_TRGPWM_Msk)              /*!< Timer trigger PWM */
N#define TIMER_TRG_TO_ADC               (TIMER_CTL_TRGADC_Msk)             /*!< Timer trigger ADC */
N#define TIMER_TRG_TO_PDMA               (TIMER_CTL_TRGPDMA_Msk)             /*!< Timer trigger PDMA */
N
N/*@}*/ /* end of group TIMER_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup TIMER_EXPORTED_FUNCTIONS TIMER Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Set Timer Compared Value
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  * @param[in]  u32Value    Timer compare value. Valid values are between 2 to 0xFFFFFF.
N  *
N  * @return     None
N  *
N  * @details    This macro is used to set timer compared value to adjust timer time-out interval.
N  * @note       1. Never write 0x0 or 0x1 in this field, or the core will run into unknown state. \n
N  *             2. If update timer compared value in continuous counting mode, timer counter value will keep counting continuously. \n
N  *                But if timer is operating at other modes, the timer up counter will restart counting and start from 0.
N  *
N  * \hideinitializer
N  */
N#define TIMER_SET_CMP_VALUE(timer, u32Value)        ((timer)->CMP = (u32Value))
N
N/**
N  * @brief      Set Timer Prescale Value
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  * @param[in]  u32Value    Timer prescale value. Valid values are between 0 to 0xFF.
N  *
N  * @return     None
N  *
N  * @details    This macro is used to set timer prescale value and timer source clock will be divided by (prescale + 1) \n
N  *             before it is fed into timer.
N  *
N  * \hideinitializer
N  */
N#define TIMER_SET_PRESCALE_VALUE(timer, u32Value)   ((timer)->CTL = ((timer)->CTL & ~TIMER_CTL_PSC_Msk) | (u32Value))
N
N/**
N  * @brief      Check specify Timer Status
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @retval     0   Timer 24-bit up counter is inactive
N  * @retval     1   Timer 24-bit up counter is active
N  *
N  * @details    This macro is used to check if specify Timer counter is inactive or active.
N  *
N  * \hideinitializer
N  */
N#define TIMER_IS_ACTIVE(timer)                      (((timer)->CTL & TIMER_CTL_ACTSTS_Msk)? 1 : 0)
N
N/**
N  * @brief      Select Toggle-output Pin
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  * @param[in]  u32ToutSel  Toggle-output pin selection, valid values are:
N  *                         - \ref TIMER_TOUT_PIN_FROM_TX
N  *                         - \ref TIMER_TOUT_PIN_FROM_TX_EXT
N  *
N  * @return     None
N  *
N  * @details    This macro is used to select timer toggle-output pin is output on Tx or Tx_EXT pin.
N  *
N  * \hideinitializer
N  */
N#define TIMER_SELECT_TOUT_PIN(timer, u32ToutSel)    ((timer)->CTL = ((timer)->CTL & ~TIMER_CTL_TGLPINSEL_Msk) | (u32ToutSel))
N
N/**
N  * @brief      Start Timer Counting
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to start Timer counting.
N  */
Nstatic __INLINE void TIMER_Start(TIMER_T *timer)
Xstatic __inline void TIMER_Start(TIMER_T *timer)
N{
N    timer->CTL |= TIMER_CTL_CNTEN_Msk;
X    timer->CTL |= (0x1ul << (30));
N}
N
N/**
N  * @brief      Stop Timer Counting
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to stop/suspend Timer counting.
N  */
Nstatic __INLINE void TIMER_Stop(TIMER_T *timer)
Xstatic __inline void TIMER_Stop(TIMER_T *timer)
N{
N    timer->CTL &= ~TIMER_CTL_CNTEN_Msk;
X    timer->CTL &= ~(0x1ul << (30));
N}
N
N/**
N  * @brief      Enable Timer Interrupt Wake-up Function
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to enable the timer interrupt wake-up function and interrupt source could be time-out interrupt, \n
N  *             counter event interrupt or capture trigger interrupt.
N  * @note       To wake the system from Power-down mode, timer clock source must be ether LXT or LIRC.
N  */
Nstatic __INLINE void TIMER_EnableWakeup(TIMER_T *timer)
Xstatic __inline void TIMER_EnableWakeup(TIMER_T *timer)
N{
N    timer->CTL |= TIMER_CTL_WKEN_Msk;
X    timer->CTL |= (0x1ul << (23));
N}
N
N/**
N  * @brief      Disable Timer Wake-up Function
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to disable the timer interrupt wake-up function.
N  */
Nstatic __INLINE void TIMER_DisableWakeup(TIMER_T *timer)
Xstatic __inline void TIMER_DisableWakeup(TIMER_T *timer)
N{
N    timer->CTL &= ~TIMER_CTL_WKEN_Msk;
X    timer->CTL &= ~(0x1ul << (23));
N}
N
N/**
N  * @brief      Enable Capture Pin De-bounce
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to enable the detect de-bounce function of capture pin.
N  */
Nstatic __INLINE void TIMER_EnableCaptureDebounce(TIMER_T *timer)
Xstatic __inline void TIMER_EnableCaptureDebounce(TIMER_T *timer)
N{
N    timer->EXTCTL |= TIMER_EXTCTL_CAPDBEN_Msk;
X    timer->EXTCTL |= (0x1ul << (6));
N}
N
N/**
N  * @brief      Disable Capture Pin De-bounce
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to disable the detect de-bounce function of capture pin.
N  */
Nstatic __INLINE void TIMER_DisableCaptureDebounce(TIMER_T *timer)
Xstatic __inline void TIMER_DisableCaptureDebounce(TIMER_T *timer)
N{
N    timer->EXTCTL &= ~TIMER_EXTCTL_CAPDBEN_Msk;
X    timer->EXTCTL &= ~(0x1ul << (6));
N}
N
N/**
N  * @brief      Enable Counter Pin De-bounce
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to enable the detect de-bounce function of counter pin.
N  */
Nstatic __INLINE void TIMER_EnableEventCounterDebounce(TIMER_T *timer)
Xstatic __inline void TIMER_EnableEventCounterDebounce(TIMER_T *timer)
N{
N    timer->EXTCTL |= TIMER_EXTCTL_CNTDBEN_Msk;
X    timer->EXTCTL |= (0x1ul << (7));
N}
N
N/**
N  * @brief      Disable Counter Pin De-bounce
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to disable the detect de-bounce function of counter pin.
N  */
Nstatic __INLINE void TIMER_DisableEventCounterDebounce(TIMER_T *timer)
Xstatic __inline void TIMER_DisableEventCounterDebounce(TIMER_T *timer)
N{
N    timer->EXTCTL &= ~TIMER_EXTCTL_CNTDBEN_Msk;
X    timer->EXTCTL &= ~(0x1ul << (7));
N}
N
N/**
N  * @brief      Enable Timer Time-out Interrupt
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to enable the timer time-out interrupt function.
N  */
Nstatic __INLINE void TIMER_EnableInt(TIMER_T *timer)
Xstatic __inline void TIMER_EnableInt(TIMER_T *timer)
N{
N    timer->CTL |= TIMER_CTL_INTEN_Msk;
X    timer->CTL |= (0x1ul << (29));
N}
N
N/**
N  * @brief      Disable Timer Time-out Interrupt
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to disable the timer time-out interrupt function.
N  */
Nstatic __INLINE void TIMER_DisableInt(TIMER_T *timer)
Xstatic __inline void TIMER_DisableInt(TIMER_T *timer)
N{
N    timer->CTL &= ~TIMER_CTL_INTEN_Msk;
X    timer->CTL &= ~(0x1ul << (29));
N}
N
N/**
N  * @brief      Enable Capture Trigger Interrupt
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to enable the timer capture trigger interrupt function.
N  */
Nstatic __INLINE void TIMER_EnableCaptureInt(TIMER_T *timer)
Xstatic __inline void TIMER_EnableCaptureInt(TIMER_T *timer)
N{
N    timer->EXTCTL |= TIMER_EXTCTL_CAPIEN_Msk;
X    timer->EXTCTL |= (0x1ul << (5));
N}
N
N/**
N  * @brief      Disable Capture Trigger Interrupt
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function is used to disable the timer capture trigger interrupt function.
N  */
Nstatic __INLINE void TIMER_DisableCaptureInt(TIMER_T *timer)
Xstatic __inline void TIMER_DisableCaptureInt(TIMER_T *timer)
N{
N    timer->EXTCTL &= ~TIMER_EXTCTL_CAPIEN_Msk;
X    timer->EXTCTL &= ~(0x1ul << (5));
N}
N
N/**
N  * @brief      Get Timer Time-out Interrupt Flag
N  *
N  * @param[in]  timer   The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @retval     0   Timer time-out interrupt did not occur
N  * @retval     1   Timer time-out interrupt occurred
N  *
N  * @details    This function indicates timer time-out interrupt occurred or not.
N  */
Nstatic __INLINE uint32_t TIMER_GetIntFlag(TIMER_T *timer)
Xstatic __inline uint32_t TIMER_GetIntFlag(TIMER_T *timer)
N{
N    return ((timer->INTSTS & TIMER_INTSTS_TIF_Msk) ? 1 : 0);
X    return ((timer->INTSTS & (0x1ul << (0))) ? 1 : 0);
N}
N
N/**
N  * @brief      Clear Timer Time-out Interrupt Flag
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function clears timer time-out interrupt flag to 0.
N  */
Nstatic __INLINE void TIMER_ClearIntFlag(TIMER_T *timer)
Xstatic __inline void TIMER_ClearIntFlag(TIMER_T *timer)
N{
N    timer->INTSTS = TIMER_INTSTS_TIF_Msk;
X    timer->INTSTS = (0x1ul << (0));
N}
N
N/**
N  * @brief      Get Timer Capture Interrupt Flag
N  *
N  * @param[in]  timer   The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @retval     0   Timer capture interrupt did not occur
N  * @retval     1   Timer capture interrupt occurred
N  *
N  * @details    This function indicates timer capture trigger interrupt occurred or not.
N  */
Nstatic __INLINE uint32_t TIMER_GetCaptureIntFlag(TIMER_T *timer)
Xstatic __inline uint32_t TIMER_GetCaptureIntFlag(TIMER_T *timer)
N{
N    return timer->EINTSTS;
N}
N
N/**
N  * @brief      Clear Timer Capture Interrupt Flag
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function clears timer capture trigger interrupt flag to 0.
N  */
Nstatic __INLINE void TIMER_ClearCaptureIntFlag(TIMER_T *timer)
Xstatic __inline void TIMER_ClearCaptureIntFlag(TIMER_T *timer)
N{
N    timer->EINTSTS = TIMER_EINTSTS_CAPIF_Msk;
X    timer->EINTSTS = (0x1ul << (0));
N}
N
N/**
N  * @brief      Get Timer Wake-up Flag
N  *
N  * @param[in]  timer   The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @retval     0   Timer does not cause CPU wake-up
N  * @retval     1   Timer interrupt event cause CPU wake-up
N  *
N  * @details    This function indicates timer interrupt event has waked up system or not.
N  */
Nstatic __INLINE uint32_t TIMER_GetWakeupFlag(TIMER_T *timer)
Xstatic __inline uint32_t TIMER_GetWakeupFlag(TIMER_T *timer)
N{
N    return (timer->INTSTS & TIMER_INTSTS_TWKF_Msk ? 1 : 0);
X    return (timer->INTSTS & (0x1ul << (1)) ? 1 : 0);
N}
N
N/**
N  * @brief      Clear Timer Wake-up Flag
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     None
N  *
N  * @details    This function clears the timer wake-up system flag to 0.
N  */
Nstatic __INLINE void TIMER_ClearWakeupFlag(TIMER_T *timer)
Xstatic __inline void TIMER_ClearWakeupFlag(TIMER_T *timer)
N{
N    timer->INTSTS = TIMER_INTSTS_TWKF_Msk;
X    timer->INTSTS = (0x1ul << (1));
N}
N
N/**
N  * @brief      Get Capture value
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     24-bit Capture Value
N  *
N  * @details    This function reports the current 24-bit timer capture value.
N  */
Nstatic __INLINE uint32_t TIMER_GetCaptureData(TIMER_T *timer)
Xstatic __inline uint32_t TIMER_GetCaptureData(TIMER_T *timer)
N{
N    return timer->CAP;
N}
N
N/**
N  * @brief      Get Counter value
N  *
N  * @param[in]  timer       The pointer of the specified Timer module. It could be TIMER0, TIMER1, TIMER2, TIMER3.
N  *
N  * @return     24-bit Counter Value
N  *
N  * @details    This function reports the current 24-bit timer counter value.
N  */
Nstatic __INLINE uint32_t TIMER_GetCounter(TIMER_T *timer)
Xstatic __inline uint32_t TIMER_GetCounter(TIMER_T *timer)
N{
N    return timer->CNT;
N}
N
Nuint32_t TIMER_Open(TIMER_T *timer, uint32_t u32Mode, uint32_t u32Freq);
Nvoid TIMER_Close(TIMER_T *timer);
Nvoid TIMER_Delay(TIMER_T *timer, uint32_t u32Usec);
Nvoid TIMER_EnableCapture(TIMER_T *timer, uint32_t u32CapMode, uint32_t u32Edge);
Nvoid TIMER_DisableCapture(TIMER_T *timer);
Nvoid TIMER_EnableEventCounter(TIMER_T *timer, uint32_t u32Edge);
Nvoid TIMER_DisableEventCounter(TIMER_T *timer);
Nuint32_t TIMER_GetModuleClock(TIMER_T *timer);
N
N/*@}*/ /* end of group TIMER_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group TIMER_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__TIMER_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 385 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "uart.h"
L 1 "..\..\..\..\Library\StdDriver\inc\uart.h" 1
N/**************************************************************************//**
N * @file     UART.h
N * @version  V3.00
N * @brief    NUC121 series UART driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __UART_H__
N#define __UART_H__
N
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup UART_Driver UART Driver
N  @{
N*/
N
N/** @addtogroup UART_EXPORTED_CONSTANTS UART Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART FIFO size constants definitions                                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART0_FIFO_SIZE 16 /*!< UART0 supports separated receive/transmit 16/16 bytes entry FIFO */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART_FIFO constants definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_FIFO_RFITL_1BYTE      (0x0 << UART_FIFO_RFITL_Pos)   /*!< UART_FIFO setting to set RX FIFO Trigger Level to 1 byte */
N#define UART_FIFO_RFITL_4BYTES     (0x1 << UART_FIFO_RFITL_Pos)   /*!< UART_FIFO setting to set RX FIFO Trigger Level to 4 bytes */
N#define UART_FIFO_RFITL_8BYTES     (0x2 << UART_FIFO_RFITL_Pos)   /*!< UART_FIFO setting to set RX FIFO Trigger Level to 8 bytes */
N#define UART_FIFO_RFITL_14BYTES    (0x3 << UART_FIFO_RFITL_Pos)   /*!< UART_FIFO setting to set RX FIFO Trigger Level to 14 bytes */
N
N#define UART_FIFO_RTSTRGLV_1BYTE      (0x0 << UART_FIFO_RTSTRGLV_Pos)  /*!< UART_FIFO setting to set RTS Trigger Level to 1 byte */
N#define UART_FIFO_RTSTRGLV_4BYTES     (0x1 << UART_FIFO_RTSTRGLV_Pos)  /*!< UART_FIFO setting to set RTS Trigger Level to 4 bytes */
N#define UART_FIFO_RTSTRGLV_8BYTES     (0x2 << UART_FIFO_RTSTRGLV_Pos)  /*!< UART_FIFO setting to set RTS Trigger Level to 8 bytes */
N#define UART_FIFO_RTSTRGLV_14BYTES    (0x3 << UART_FIFO_RTSTRGLV_Pos)  /*!< UART_FIFO setting to set RTS Trigger Level to 14 bytes */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART_LINE constants definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_WORD_LEN_5     (0) /*!< UART_LINE setting to set UART word length to 5 bits */
N#define UART_WORD_LEN_6     (1) /*!< UART_LINE setting to set UART word length to 6 bits */
N#define UART_WORD_LEN_7     (2) /*!< UART_LINE setting to set UART word length to 7 bits */
N#define UART_WORD_LEN_8     (3) /*!< UART_LINE setting to set UART word length to 8 bits */
N
N#define UART_PARITY_NONE    (0x0 << UART_LINE_PBE_Pos) /*!< UART_LINE setting to set UART as no parity   */
N#define UART_PARITY_ODD     (0x1 << UART_LINE_PBE_Pos) /*!< UART_LINE setting to set UART as odd parity  */
N#define UART_PARITY_EVEN    (0x3 << UART_LINE_PBE_Pos) /*!< UART_LINE setting to set UART as even parity */
N#define UART_PARITY_MARK    (0x5 << UART_LINE_PBE_Pos) /*!< UART_LINE setting to keep parity bit as '1'  */
N#define UART_PARITY_SPACE   (0x7 << UART_LINE_PBE_Pos) /*!< UART_LINE setting to keep parity bit as '0'  */
N
N#define UART_STOP_BIT_1     (0x0 << UART_LINE_NSB_Pos) /*!< UART_LINE setting for one stop bit  */
N#define UART_STOP_BIT_1_5   (0x1 << UART_LINE_NSB_Pos) /*!< UART_LINE setting for 1.5 stop bit when 5-bit word length  */
N#define UART_STOP_BIT_2     (0x1 << UART_LINE_NSB_Pos) /*!< UART_LINE setting for two stop bit when 6, 7, 8-bit word length */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART RTS ACTIVE LEVEL constants definitions                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_RTS_IS_LOW_LEV_ACTIVE   (0x1 << UART_MODEM_RTSACTLV_Pos) /*!< Set RTS is Low Level Active */
N#define UART_RTS_IS_HIGH_LEV_ACTIVE  (0x0 << UART_MODEM_RTSACTLV_Pos) /*!< Set RTS is High Level Active */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART_IRDA constants definitions                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_IRDA_TXEN      (0x1 << UART_IRDA_TXEN_Pos) /*!< Set IrDA function Tx mode */
N#define UART_IRDA_RXEN      (0x0 << UART_IRDA_TXEN_Pos) /*!< Set IrDA function Rx mode */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART_FUNCSEL constants definitions                                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_FUNCSEL_UART  (0x0 << UART_FUNCSEL_FUNCSEL_Pos) /*!< UART_FUNCSEL setting to set UART Function  (Default) */
N#define UART_FUNCSEL_LIN   (0x1 << UART_FUNCSEL_FUNCSEL_Pos) /*!< UART_FUNCSEL setting to set LIN Function             */
N#define UART_FUNCSEL_IrDA  (0x2 << UART_FUNCSEL_FUNCSEL_Pos) /*!< UART_FUNCSEL setting to set IrDA Function            */
N#define UART_FUNCSEL_RS485 (0x3 << UART_FUNCSEL_FUNCSEL_Pos) /*!< UART_FUNCSEL setting to set RS485 Function           */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART_LINCTL constants definitions                                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_LINCTL_BRKFL(x)    (((x)-1) << UART_LINCTL_BRKFL_Pos)  /*!< UART_LINCTL setting to set LIN Break Field Length, x = 10 ~ 15, default value is 12 */
N#define UART_LINCTL_BSL(x)      (((x)-1) << UART_LINCTL_BSL_Pos)    /*!< UART_LINCTL setting to set LIN Break/Sync Delimiter Length, x = 1 ~ 4 */
N#define UART_LINCTL_HSEL_BREAK             (0x0UL << UART_LINCTL_HSEL_Pos)    /*!< UART_LINCTL setting to set LIN Header Select to break field */
N#define UART_LINCTL_HSEL_BREAK_SYNC        (0x1UL << UART_LINCTL_HSEL_Pos)    /*!< UART_LINCTL setting to set LIN Header Select to break field and sync field */
N#define UART_LINCTL_HSEL_BREAK_SYNC_ID     (0x2UL << UART_LINCTL_HSEL_Pos)    /*!< UART_LINCTL setting to set LIN Header Select to break field, sync field and ID field*/
N#define UART_LINCTL_PID(x)      ((x) << UART_LINCTL_PID_Pos)       /*!< UART_LINCTL setting to set LIN PID value */
N
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UART BAUDRATE MODE constants definitions                                                                */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UART_BAUD_MODE0     (0) /*!< Set UART Baudrate Mode is Mode0 */
N#define UART_BAUD_MODE2     (UART_BAUD_BAUDM1_Msk | UART_BAUD_BAUDM0_Msk) /*!< Set UART Baudrate Mode is Mode2 */
N
N
N
N/*@}*/ /* end of group UART_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup UART_EXPORTED_FUNCTIONS UART Exported Functions
N  @{
N*/
N
N
N/**
N *    @brief        Calculate UART baudrate mode0 divider
N *
N *    @param[in]    u32SrcFreq      UART clock frequency
N *    @param[in]    u32BaudRate     Baudrate of UART module
N *
N *    @return       UART baudrate mode0 divider
N *
N *    @details      This macro calculate UART baudrate mode0 divider.
N *
N *    \hideinitializer
N */
N#define UART_BAUD_MODE0_DIVIDER(u32SrcFreq, u32BaudRate)    ((((u32SrcFreq) + ((u32BaudRate)*8)) / (u32BaudRate) >> 4)-2)
N
N
N/**
N *    @brief        Calculate UART baudrate mode2 divider
N *
N *    @param[in]    u32SrcFreq      UART clock frequency
N *    @param[in]    u32BaudRate     Baudrate of UART module
N *
N *    @return       UART baudrate mode2 divider
N *
N *    @details      This macro calculate UART baudrate mode2 divider.
N *
N *    \hideinitializer
N */
N#define UART_BAUD_MODE2_DIVIDER(u32SrcFreq, u32BaudRate)    ((((u32SrcFreq) + ((u32BaudRate)/2)) / (u32BaudRate))-2)
N
N
N/**
N *    @brief        Write UART data
N *
N *    @param[in]    psUART  The pointer of the specified UART module
N *    @param[in]    u8Data  Data byte to transmit.
N *
N *    @return       None
N *
N *    @details      This macro write Data to Tx data register.
N *
N *    \hideinitializer
N */
N#define UART_WRITE(psUART, u8Data)    ((psUART)->DAT = (u8Data))
N
N
N/**
N *    @brief        Read UART data
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @return       The oldest data byte in RX FIFO.
N *
N *    @details      This macro read Rx data register.
N *
N *    \hideinitializer
N */
N#define UART_READ(psUART)    ((psUART)->DAT)
N
N
N/**
N *    @brief        Get Tx empty
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @retval       0   Tx FIFO is not empty
N *    @retval       >=1 Tx FIFO is empty
N *
N *    @details      This macro get Transmitter FIFO empty register value.
N *
N *    \hideinitializer
N */
N#define UART_GET_TX_EMPTY(psUART)    ((psUART)->FIFOSTS & UART_FIFOSTS_TXEMPTY_Msk)
N
N
N/**
N *    @brief        Get Rx empty
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @retval       0   Rx FIFO is not empty
N *    @retval       >=1 Rx FIFO is empty
N *
N *    @details      This macro get Receiver FIFO empty register value.
N *
N *    \hideinitializer
N */
N#define UART_GET_RX_EMPTY(psUART)    ((psUART)->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk)
N
N
N/**
N *    @brief        Check specified uart port transmission is over.
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @retval       0 Tx transmission is not over
N *    @retval       1 Tx transmission is over
N *
N *    @details      This macro return Transmitter Empty Flag register bit value.
N *                  It indicates if specified uart port transmission is over nor not.
N *
N *    \hideinitializer
N */
N#define UART_IS_TX_EMPTY(psUART)    (((psUART)->FIFOSTS & UART_FIFOSTS_TXEMPTYF_Msk) >> UART_FIFOSTS_TXEMPTYF_Pos)
N
N
N/**
N *    @brief        Wait specified uart port transmission is over
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @return       None
N *
N *    @details      This macro wait specified uart port transmission is over.
N *
N *    \hideinitializer
N */
N#define UART_WAIT_TX_EMPTY(psUART)    while(!((((psUART)->FIFOSTS) & UART_FIFOSTS_TXEMPTYF_Msk) >> UART_FIFOSTS_TXEMPTYF_Pos))
N
N
N/**
N *    @brief        Check RX is ready or not
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @retval       0 The number of bytes in the RX FIFO is less than the RFITL
N *    @retval       1 The number of bytes in the RX FIFO equals or larger than RFITL
N *
N *    @details      This macro check receive data available interrupt flag is set or not.
N *
N *    \hideinitializer
N */
N#define UART_IS_RX_READY(psUART)    (((psUART)->INTSTS & UART_INTSTS_RDAIF_Msk)>>UART_INTSTS_RDAIF_Pos)
N
N
N/**
N *    @brief        Check TX FIFO is full or not
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @retval       1 TX FIFO is full
N *    @retval       0 TX FIFO is not full
N *
N *    @details      This macro check TX FIFO is full or not.
N *
N *    \hideinitializer
N */
N#define UART_IS_TX_FULL(psUART)    (((psUART)->FIFOSTS & UART_FIFOSTS_TXFULL_Msk)>>UART_FIFOSTS_TXFULL_Pos)
N
N
N/**
N *    @brief        Check RX FIFO is full or not
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @retval       1 RX FIFO is full
N *    @retval       0 RX FIFO is not full
N *
N *    @details      This macro check RX FIFO is full or not.
N *
N *    \hideinitializer
N */
N#define UART_IS_RX_FULL(psUART)    (((psUART)->FIFOSTS & UART_FIFOSTS_RXFULL_Msk)>>UART_FIFOSTS_RXFULL_Pos)
N
N
N/**
N *    @brief        Get Tx full register value
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @retval       0   Tx FIFO is not full.
N *    @retval       >=1 Tx FIFO is full.
N *
N *    @details      This macro get Tx full register value.
N *
N *    \hideinitializer
N */
N#define UART_GET_TX_FULL(psUART)    ((psUART)->FIFOSTS & UART_FIFOSTS_TXFULL_Msk)
N
N
N/**
N *    @brief        Get Rx full register value
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @retval       0   Rx FIFO is not full.
N *    @retval       >=1 Rx FIFO is full.
N *
N *    @details      This macro get Rx full register value.
N *
N *    \hideinitializer
N */
N#define UART_GET_RX_FULL(psUART)    ((psUART)->FIFOSTS & UART_FIFOSTS_RXFULL_Msk)
N
N
N/**
N *    @brief        Enable specified UART interrupt
N *
N *    @param[in]    psUART      The pointer of the specified UART module
N *    @param[in]    u32eIntSel  Interrupt type select
N *                              - \ref UART_INTEN_TXENDIEN_Msk   : Transmitter empty interrupt
N *                              - \ref UART_INTEN_ABRIEN_Msk     : Auto baud rate interrupt
N *                              - \ref UART_INTEN_LINIEN_Msk     : Lin bus interrupt
N *                              - \ref UART_INTEN_WKIEN_Msk      : Wake-up interrupt
N *                              - \ref UART_INTEN_BUFERRIEN_Msk  : Buffer Error interrupt
N *                              - \ref UART_INTEN_RXTOIEN_Msk    : Rx time-out interrupt
N *                              - \ref UART_INTEN_MODEMIEN_Msk   : Modem interrupt
N *                              - \ref UART_INTEN_RLSIEN_Msk     : Rx Line status interrupt
N *                              - \ref UART_INTEN_THREIEN_Msk    : Tx empty interrupt
N *                              - \ref UART_INTEN_RDAIEN_Msk     : Rx ready interrupt
N *
N *    @return       None
N *
N *    @details      This macro enable specified UART interrupt.
N *
N *    \hideinitializer
N */
N#define UART_ENABLE_INT(psUART, u32eIntSel)    ((psUART)->INTEN |= (u32eIntSel))
N
N
N/**
N *    @brief        Disable specified UART interrupt
N *
N *    @param[in]    psUART      The pointer of the specified UART module
N *    @param[in]    u32eIntSel  Interrupt type select
N *                              - \ref UART_INTEN_TXENDIEN_Msk   : Transmitter Empty Interrupt
N *                              - \ref UART_INTEN_ABRIEN_Msk     : Auto-baud Rate Interrupt
N *                              - \ref UART_INTEN_LINIEN_Msk     : Lin Bus interrupt
N *                              - \ref UART_INTEN_WKIEN_Msk      : Wake-up interrupt
N *                              - \ref UART_INTEN_BUFERRIEN_Msk  : Buffer Error interrupt
N *                              - \ref UART_INTEN_RXTOIEN_Msk    : Rx Time-out Interrupt
N *                              - \ref UART_INTEN_MODEMIEN_Msk   : MODEM Status Interrupt
N *                              - \ref UART_INTEN_RLSIEN_Msk     : Receive Line Status Interrupt
N *                              - \ref UART_INTEN_THREIEN_Msk    : Transmit Holding Register Empty Interrupt
N *                              - \ref UART_INTEN_RDAIEN_Msk     : Receive Data Available Interrupt
N *
N *    @return       None
N *
N *    @details      This macro enable specified UART interrupt.
N *
N *    \hideinitializer
N */
N#define UART_DISABLE_INT(psUART, u32eIntSel)    ((psUART)->INTEN &= ~ (u32eIntSel))
N
N
N/**
N *    @brief        Get specified interrupt flag/status
N *
N *    @param[in]    psUART          The pointer of the specified UART module
N *    @param[in]    u32eIntTypeFlag Interrupt Type Flag, should be
N *                                  - \ref UART_INTSTS_HWBUFEINT_Msk : PDMA Mode Buffer Error Interrupt Indicator
N *                                  - \ref UART_INTSTS_HWTOINT_Msk   : PDMA Mode Rx Time-out Interrupt Indicator
N *                                  - \ref UART_INTSTS_HWMODINT_Msk  : PDMA Mode MODEM Status Interrupt Indicator
N *                                  - \ref UART_INTSTS_HWRLSINT_Msk  : PDMA Mode Receive Line Status Interrupt Indicator
N *                                  - \ref UART_INTSTS_HWBUFEIF_Msk  : PDMA Mode Buffer Error Interrupt Flag
N *                                  - \ref UART_INTSTS_HWTOIF_Msk    : PDMA Mode Time-out Interrupt Flag
N *                                  - \ref UART_INTSTS_HWMODIF_Msk   : PDMA Mode MODEM Status Interrupt Flag
N *                                  - \ref UART_INTSTS_HWRLSIF_Msk   : PDMA Mode Receive Line Status Flag
N *                                  - \ref UART_INTSTS_ABRINT_Msk    : Auto-baud Rate Interrupt Indicator
N *                                  - \ref UART_INTSTS_TXENDINT_Msk  : Transmitter Empty Interrupt Indicator
N *                                  - \ref UART_INTSTS_LININT_Msk    : LIN Bus Interrupt Indicator
N *                                  - \ref UART_INTSTS_WKINT_Msk     : Wake-up Interrupt Indicator
N *                                  - \ref UART_INTSTS_BUFERRINT_Msk : Buffer Error Interrupt Indicator
N *                                  - \ref UART_INTSTS_RXTOINT_Msk   : Rx Time-out Interrupt Indicator
N *                                  - \ref UART_INTSTS_MODEMINT_Msk  : Modem Status Interrupt Indicator
N *                                  - \ref UART_INTSTS_RLSINT_Msk    : Receive Line Status Interrupt Indicator
N *                                  - \ref UART_INTSTS_THREINT_Msk   : Transmit Holding Register Empty Interrupt Indicator
N *                                  - \ref UART_INTSTS_RDAINT_Msk    : Receive Data Available Interrupt Indicator
N *                                  - \ref UART_INTSTS_TXENDIF_Msk   : Transmitter Empty Interrupt Flag
N *                                  - \ref UART_INTSTS_LINIF_Msk     : LIN Bus Interrupt Flag
N *                                  - \ref UART_INTSTS_WKIF_Msk      : Wake-up Interrupt Flag
N *                                  - \ref UART_INTSTS_BUFERRIF_Msk  : Buffer Error Interrupt Flag
N *                                  - \ref UART_INTSTS_RXTOIF_Msk    : Rx Time-out Interrupt Flag
N *                                  - \ref UART_INTSTS_MODEMIF_Msk   : MODEM Status Interrupt Flag
N *                                  - \ref UART_INTSTS_RLSIF_Msk     : Receive Line Status Interrupt Flag
N *                                  - \ref UART_INTSTS_THREIF_Msk    : Transmit Holding Register Empty Interrupt Flag
N *                                  - \ref UART_INTSTS_RDAIF_Msk     : Receive Data Available Interrupt Flag
N *
N *    @retval       0 The specified interrupt is not happened.
N *                  1 The specified interrupt is happened.
N *
N *    @details      This macro get specified interrupt flag or interrupt indicator status.
N *
N *    \hideinitializer
N */
N#define UART_GET_INT_FLAG(psUART, u32eIntTypeFlag)    (((psUART)->INTSTS & (u32eIntTypeFlag))?1:0)
N
N
N/**
N *    @brief        Set RTS pin to low
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @return       None
N *
N *    @details      This macro set RTS pin to low.
N *
N *    \hideinitializer
N */
N__STATIC_INLINE void UART_CLEAR_RTS(UART_T *psUART)
Xstatic __inline void UART_CLEAR_RTS(UART_T *psUART)
N{
N    psUART->MODEM |= UART_MODEM_RTSACTLV_Msk;
X    psUART->MODEM |= (0x1ul << (9));
N    psUART->MODEM &= ~UART_MODEM_RTS_Msk;
X    psUART->MODEM &= ~(0x1ul << (1));
N}
N
N
N/**
N *    @brief        Set RTS pin to high
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @return       None
N *
N *    @details      This macro set RTS pin to high.
N *
N *    \hideinitializer
N */
N__STATIC_INLINE void UART_SET_RTS(UART_T *psUART)
Xstatic __inline void UART_SET_RTS(UART_T *psUART)
N{
N    psUART->MODEM |= UART_MODEM_RTSACTLV_Msk | UART_MODEM_RTS_Msk;
X    psUART->MODEM |= (0x1ul << (9)) | (0x1ul << (1));
N}
N
N
N/**
N *    @brief        Clear RS-485 Address Byte Detection Flag
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @return       None
N *
N *    @details      This macro clear RS-485 address byte detection flag.
N *
N *    \hideinitializer
N */
N#define UART_RS485_CLEAR_ADDR_FLAG(psUART)    ((psUART)->FIFOSTS = UART_FIFOSTS_ADDRDETF_Msk)
N
N
N/**
N *    @brief        Get RS-485 Address Byte Detection Flag
N *
N *    @param[in]    psUART    The pointer of the specified UART module
N *
N *    @retval       0 Receiver detects a data that is not an address bit.
N *    @retval       1 Receiver detects a data that is an address bit.
N *
N *    @details      This macro get RS-485 address byte detection flag.
N *
N *    \hideinitializer
N */
N#define UART_RS485_GET_ADDR_FLAG(psUART)    (((psUART)->FIFOSTS  & UART_FIFOSTS_ADDRDETF_Msk) >> UART_FIFOSTS_ADDRDETF_Pos)
N
N
N
Nvoid UART_ClearIntFlag(UART_T *psUART, uint32_t u32InterruptFlag);
Nvoid UART_Close(UART_T *psUART);
Nvoid UART_DisableFlowCtrl(UART_T *psUART);
Nvoid UART_DisableInt(UART_T *psUART, uint32_t u32InterruptFlag);
Nvoid UART_EnableFlowCtrl(UART_T *psUART);
Nvoid UART_EnableInt(UART_T *psUART, uint32_t u32InterruptFlag);
Nvoid UART_Open(UART_T *psUART, uint32_t u32Baudrate);
Nuint32_t UART_Read(UART_T *psUART, uint8_t *pu8RxBuf, uint32_t u32ReadBytes);
Nvoid UART_SetLine_Config(UART_T *psUART, uint32_t u32Baudrate, uint32_t u32DataWidth, uint32_t u32Parity, uint32_t u32StopBits);
Nvoid UART_SetTimeoutCnt(UART_T *psUART, uint32_t u32TOC);
Nvoid UART_SelectIrDAMode(UART_T *psUART, uint32_t u32Buadrate, uint32_t u32Direction);
Nvoid UART_SelectRS485Mode(UART_T *psUART, uint32_t u32Mode, uint32_t u32Addr);
Nvoid UART_SelectLINMode(UART_T *psUART, uint32_t u32Mode, uint32_t u32BreakLength);
Nuint32_t UART_Write(UART_T *psUART, uint8_t *pu8TxBuf, uint32_t u32WriteBytes);
N
N
N/*@}*/ /* end of group UART_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group UART_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__UART_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
N
L 386 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "usbd.h"
L 1 "..\..\..\..\Library\StdDriver\inc\usbd.h" 1
N/**************************************************************************//**
N * @file     usbd.h
N * @version  V3.00
N * @brief    NUC121 series USBD driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __USBD_H__
N#define __USBD_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/*!<    Define it to enable Link Power Management(LPM) function.
N        LPM related handler will raise after LPM event happen.
N        if bcdUSB >= 0x0201, USB version is equal or higher than 2.1,
N        OS(Windows) will issue "get BOS descriptor" request.
N        WIN8 ~ WIN10 will not recognize the device if device stalls the request.
N        The device can be recognized on WIN7 even though the "get BOS request" been stalled.  */
N//#define SUPPORT_LPM
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup USBD_Driver USBD Driver
N  @{
N*/
N
N/** @addtogroup USBD_EXPORTED_STRUCTS USBD Exported Structs
N  @{
N*/
Ntypedef struct s_usbd_info
N{
N    const uint8_t *gu8DevDesc;            /*!< Pointer for USB Device Descriptor          */
N    const uint8_t *gu8ConfigDesc;         /*!< Pointer for USB Configuration Descriptor   */
N    const uint8_t **gu8StringDesc;        /*!< Pointer for USB String Descriptor pointers */
N    const uint8_t **gu8HidReportDesc;     /*!< Pointer for USB HID Report Descriptor      */
N    const uint32_t *gu32HidReportSize;    /*!< Pointer for HID Report descriptor Size     */
N    const uint32_t *gu32ConfigHidDescIdx; /*!< Pointer for HID Descriptor start index     */
N    const uint8_t *gu8BosDesc;            /*!< Pointer for BOS Descriptor start index     */
N} S_USBD_INFO_T;
N
Nextern const S_USBD_INFO_T gsInfo;
N
N/*@}*/ /* end of group USBD_EXPORTED_STRUCTS */
N
N
N
N
N/** @addtogroup USBD_EXPORTED_CONSTANTS USBD Exported Constants
N  @{
N*/
N#define USBD_BUF_BASE   (USBD_BASE+0x100)
N#define USBD_MAX_EP                     8
N
N#define EP0     0       /*!< Endpoint 0 */
N#define EP1     1       /*!< Endpoint 1 */
N#define EP2     2       /*!< Endpoint 2 */
N#define EP3     3       /*!< Endpoint 3 */
N#define EP4     4       /*!< Endpoint 4 */
N#define EP5     5       /*!< Endpoint 5 */
N#define EP6     6       /*!< Endpoint 6 */
N#define EP7     7       /*!< Endpoint 7 */
N
N
N/*!<USB Request Type */
N#define REQ_STANDARD        0x00
N#define REQ_CLASS           0x20
N#define REQ_VENDOR          0x40
N
N/*!<USB Standard Request */
N#define GET_STATUS          0x00
N#define CLEAR_FEATURE       0x01
N#define SET_FEATURE         0x03
N#define SET_ADDRESS         0x05
N#define GET_DESCRIPTOR      0x06
N#define SET_DESCRIPTOR      0x07
N#define GET_CONFIGURATION   0x08
N#define SET_CONFIGURATION   0x09
N#define GET_INTERFACE       0x0A
N#define SET_INTERFACE       0x0B
N#define SYNC_FRAME          0x0C
N
N/*!<USB Descriptor Type */
N#define DESC_DEVICE         0x01
N#define DESC_CONFIG         0x02
N#define DESC_STRING         0x03
N#define DESC_INTERFACE      0x04
N#define DESC_ENDPOINT       0x05
N#define DESC_QUALIFIER      0x06
N#define DESC_OTHERSPEED     0x07
N#define DESC_BOS            0x0F
N#define DESC_DEVCAP         0x10
N
N/*!<USB HID Descriptor Type */
N#define DESC_HID            0x21
N#define DESC_HID_RPT        0x22
N
N/*!<USB Descriptor Length */
N#define LEN_DEVICE          18
N#define LEN_CONFIG          9
N#define LEN_INTERFACE       9
N#define LEN_ENDPOINT        7
N#define LEN_HID             9
N#define LEN_CCID            0x36
N#define LEN_BOS             5
N#define LEN_DEVCAP          7
N
N/*!<USB Endpoint Type */
N#define EP_ISO              0x01
N#define EP_BULK             0x02
N#define EP_INT              0x03
N
N#define EP_INPUT            0x80
N#define EP_OUTPUT           0x00
N
N/*!<USB Feature Selector */
N#define FEATURE_DEVICE_REMOTE_WAKEUP    0x01
N#define FEATURE_ENDPOINT_HALT           0x00
N
N/******************************************************************************/
N/*                USB Specific Macros                                         */
N/******************************************************************************/
N
N#define USBD_WAKEUP_EN          USBD_INTEN_WKEN_Msk         /*!< USB Wake-up Enable */
N#define USBD_DRVSE0             USBD_SE0_SE0_Msk            /*!< Drive SE0 */
N
N#define USBD_LPMACK             USBD_ATTR_LPMACK_Msk        /*!< LPM Enable */
N#define USBD_BYTEM              USBD_ATTR_BYTEM_Msk
N#define USBD_DPPU_EN            USBD_ATTR_DPPUEN_Msk        /*!< USB D+ Pull-up Enable */
N#define USBD_USB_EN             USBD_ATTR_USBEN_Msk         /*!< USB Enable */
N#define USBD_RWAKEUP            USBD_ATTR_RWAKEUP_Msk
N#define USBD_PHY_EN             USBD_ATTR_PHYEN_Msk         /*!< PHY Enable */
N
N#define USBD_INT_BUS            USBD_INTEN_BUSIEN_Msk       /*!< USB Bus Event Interrupt */
N#define USBD_INT_USB            USBD_INTEN_USBIEN_Msk       /*!< USB Event Interrupt */
N#define USBD_INT_FLDET          USBD_INTEN_VBDETIEN_Msk     /*!< USB VBUS Detection Interrupt */
N#define USBD_INT_VBDET          USBD_INTEN_VBDETIEN_Msk     /*!< USB VBUS Detection Interrupt */
N#define USBD_INT_WAKEUP_IDLE    USBD_INTEN_NEVWKIEN_Msk     /*!< USB No-Event-Wake-Up Interrupt */
N#define USBD_INT_SOFIEN         USBD_INTEN_SOFIEN_Msk       /*!< USB Start of Frame Interrput Enable Bit*/
N
N#define USBD_INTSTS_WAKEUP      USBD_INTSTS_NEVWKIF_Msk     /*!< USB No-Event-Wake-Up Interrupt Status */
N#define USBD_INTSTS_FLDET       USBD_INTSTS_VBDETIF_Msk     /*!< USB Float Detect Interrupt Status */
N#define USBD_INTSTS_VBDET       USBD_INTSTS_VBDETIF_Msk     /*!< USB Float Detect Interrupt Status */
N#define USBD_INTSTS_BUS         USBD_INTSTS_BUSIF_Msk       /*!< USB Bus Event Interrupt Status */
N#define USBD_INTSTS_USB         USBD_INTSTS_USBIF_Msk       /*!< USB Event Interrupt Status */
N#define USBD_INTSTS_SETUP       USBD_INTSTS_SETUP_Msk       /*!< USB Setup Event */
N#define USBD_INTSTS_EP0         USBD_INTSTS_EPEVT0_Msk      /*!< USB Endpoint 0 Event */
N#define USBD_INTSTS_EP1         USBD_INTSTS_EPEVT1_Msk      /*!< USB Endpoint 1 Event */
N#define USBD_INTSTS_EP2         USBD_INTSTS_EPEVT2_Msk      /*!< USB Endpoint 2 Event */
N#define USBD_INTSTS_EP3         USBD_INTSTS_EPEVT3_Msk      /*!< USB Endpoint 3 Event */
N#define USBD_INTSTS_EP4         USBD_INTSTS_EPEVT4_Msk      /*!< USB Endpoint 4 Event */
N#define USBD_INTSTS_EP5         USBD_INTSTS_EPEVT5_Msk      /*!< USB Endpoint 5 Event */
N#define USBD_INTSTS_EP6         USBD_INTSTS_EPEVT6_Msk      /*!< USB Endpoint 6 Event */
N#define USBD_INTSTS_EP7         USBD_INTSTS_EPEVT7_Msk      /*!< USB Endpoint 7 Event */
N
N#define USBD_STATE_USBRST       USBD_ATTR_USBRST_Msk        /*!< USB Bus Reset      */
N#define USBD_STATE_SUSPEND      USBD_ATTR_SUSPEND_Msk       /*!< USB Bus Suspend    */
N#define USBD_STATE_RESUME       USBD_ATTR_RESUME_Msk        /*!< USB Bus Resume     */
N#define USBD_STATE_TIMEOUT      USBD_ATTR_TOUT_Msk          /*!< USB Bus Timeout    */
N#define USBD_STATE_L1RESUME     USBD_ATTR_L1RESUME_Msk      /*!< USB Bus L1RESUME   */
N#define USBD_STATE_L1SUSPEND    USBD_ATTR_L1SUSPEND_Msk     /*!< USB BUS L1SUSPEND  */
N
N
N#define USBD_1SOF_1INT          (0ul << USBD_ATTR_SOFITH_Pos) /*!<every   1SOF trigger one SOF interrupt*/
N#define USBD_2SOF_1INT          (1ul << USBD_ATTR_SOFITH_Pos) /*!<every   2SOF trigger one SOF interrupt*/
N#define USBD_4SOF_1INT          (2ul << USBD_ATTR_SOFITH_Pos) /*!<every   4SOF trigger one SOF interrupt*/
N#define USBD_8SOF_1INT          (3ul << USBD_ATTR_SOFITH_Pos) /*!<every   8SOF trigger one SOF interrupt*/
N#define USBD_16SOF_1INT         (4ul << USBD_ATTR_SOFITH_Pos) /*!<every  16SOF trigger one SOF interrupt*/
N#define USBD_32SOF_1INT         (5ul << USBD_ATTR_SOFITH_Pos) /*!<every  32SOF trigger one SOF interrupt*/
N#define USBD_64SOF_1INT         (6ul << USBD_ATTR_SOFITH_Pos) /*!<every  64SOF trigger one SOF interrupt*/
N#define USBD_128SOF_1INT        (7ul << USBD_ATTR_SOFITH_Pos) /*!<every 128SOF trigger one SOF interrupt*/
N
N#define USBD_CFGP_SSTALL        USBD_CFGP_SSTALL_Msk        /*!< Set Stall */
N#define USBD_CFGP_CLRRDY        USBD_CFGP_CLRRDY_Msk
N
N#define USBD_CFG_CSTALL         USBD_CFG_CSTALL_Msk         /*!< Clear Stall */
N#define USBD_CFG_EPMODE_DISABLE (0ul << USBD_CFG_STATE_Pos) /*!< Endpoint Disable */
N#define USBD_CFG_EPMODE_OUT     (1ul << USBD_CFG_STATE_Pos) /*!< Out Endpoint */
N#define USBD_CFG_EPMODE_IN      (2ul << USBD_CFG_STATE_Pos) /*!< In Endpoint */
N#define USBD_CFG_TYPE_ISO       (1ul << USBD_CFG_ISOCH_Pos) /*!< Isochronous */
N
N
N
N/*@}*/ /* end of group USBD_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup USBD_EXPORTED_FUNCTIONS USBD Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Compare two input numbers and return maximum one.
N  *
N  * @param[in]  a   First number to be compared.
N  * @param[in]  b   Second number to be compared.
N  *
N  * @return     Maximum value between a and b.
N  *
N  * @details    If a > b, then return a. Otherwise, return b.
N  *
N  * \hideinitializer
N  */
N#define Maximum(a,b)        ((a)>(b) ? (a) : (b))
N
N
N/**
N  * @brief      Compare two input numbers and return minimum one
N  *
N  * @param[in]  a   First number to be compared
N  * @param[in]  b   Second number to be compared
N  *
N  * @return     Minimum value between a and b
N  *
N  * @details    If a < b, then return a. Otherwise, return b.
N  *
N  * \hideinitializer
N  */
N#define Minimum(a,b)        ((a)<(b) ? (a) : (b))
N
N
N/**
N  * @brief    Enable USB
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  To set USB ATTR control register to enable USB and PHY.
N  *
N  * \hideinitializer
N  */
N#define USBD_ENABLE_USB()           ((uint32_t)(USBD->ATTR |= (USBD_USB_EN|USBD_PHY_EN)))
N
N/**
N  * @brief    Disable USB
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  To set USB ATTR control register to disable USB.
N  *
N  * \hideinitializer
N  */
N#define USBD_DISABLE_USB()          ((uint32_t)(USBD->ATTR &= ~USBD_USB_EN))
N
N/**
N  * @brief    Enable USB PHY
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  To set USB ATTR control register to enable USB PHY.
N  *
N  * \hideinitializer
N  */
N#define USBD_ENABLE_PHY()           ((uint32_t)(USBD->ATTR |= USBD_PHY_EN))
N
N/**
N  * @brief    Disable USB PHY
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  To set USB ATTR control register to disable USB PHY.
N  *
N  * \hideinitializer
N  */
N#define USBD_DISABLE_PHY()          ((uint32_t)(USBD->ATTR &= ~USBD_PHY_EN))
N
N/**
N  * @brief    Enable SE0. Force USB PHY transceiver to drive SE0.
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  Set DRVSE0 bit of USB_DRVSE0 register to enable software-disconnect function. Force USB PHY transceiver to drive SE0 to bus.
N  *
N  * \hideinitializer
N  */
N#define USBD_SET_SE0()              ((uint32_t)(USBD->SE0 |= USBD_DRVSE0))
N
N/**
N  * @brief    Disable SE0
N  *
N  * @param    None
N  *
N  * @return   None
N  *
N  * @details  Clear DRVSE0 bit of USB_DRVSE0 register to disable software-disconnect function.
N  *
N  * \hideinitializer
N  */
N#define USBD_CLR_SE0()              ((uint32_t)(USBD->SE0 &= ~USBD_DRVSE0))
N
N/**
N  * @brief       Set USB device address
N  *
N  * @param[in]   addr The USB device address.
N  *
N  * @return      None
N  *
N  * @details     Write USB device address to USB_FADDR register.
N  *
N  * \hideinitializer
N  */
N#define USBD_SET_ADDR(addr)         (USBD->FADDR = (addr))
N
N/**
N  * @brief    Get USB device address
N  *
N  * @param    None
N  *
N  * @return   USB device address
N  *
N  * @details  Read USB_FADDR register to get USB device address.
N  *
N  * \hideinitializer
N  */
N#define USBD_GET_ADDR()             ((uint32_t)(USBD->FADDR))
N
N/**
N  * @brief      Enable USB interrupt function
N  *
N  * @param[in]  intr The combination of the specified interrupt enable bits.
N  *             Each bit corresponds to a interrupt enable bit.
N  *             This parameter decides which interrupts will be enabled.
N  *             (USBD_INT_WAKEUP, USBD_INT_FLDET, USBD_INT_USB, USBD_INT_BUS)
N  *
N  * @return     None
N  *
N  * @details    Enable USB related interrupt functions specified by intr parameter.
N  *
N  * \hideinitializer
N  */
N#define USBD_ENABLE_INT(intr)       (USBD->INTEN |= (intr))
N
N/**
N  * @brief    Get interrupt status
N  *
N  * @param    None
N  *
N  * @return   The value of USB_INTSTS register
N  *
N  * @details  Return all interrupt flags of USB_INTSTS register.
N  *
N  * \hideinitializer
N  */
N#define USBD_GET_INT_FLAG()         ((uint32_t)(USBD->INTSTS))
N
N/**
N  * @brief      Clear USB interrupt flag
N  *
N  * @param[in]  flag The combination of the specified interrupt flags.
N  *             Each bit corresponds to a interrupt source.
N  *             This parameter decides which interrupt flags will be cleared.
N  *             (USBD_INTSTS_WAKEUP, USBD_INTSTS_FLDET, USBD_INTSTS_BUS, USBD_INTSTS_USB)
N  *
N  * @return     None
N  *
N  * @details    Clear USB related interrupt flags specified by flag parameter.
N  *
N  * \hideinitializer
N  */
N#define USBD_CLR_INT_FLAG(flag)     (USBD->INTSTS = (flag))
N
N/**
N  * @brief    Get endpoint status
N  *
N  * @param    None
N  *
N  * @return   The value of USB_EPSTS register.
N  *
N  * @details  Return all endpoint status.
N  *
N  * \hideinitializer
N  */
N#define USBD_GET_EP_FLAG()          ((uint32_t)(USBD->EPSTS))
N
N/**
N  * @brief    Get USB bus state
N  *
N  * @param    None
N  *
N  * @return   The value of USB_ATTR[3:0] and USB_ATTR[13:12].
N  *           Bit  0 indicates USB bus reset status.
N  *           Bit  1 indicates USB bus suspend status.
N  *           Bit  2 indicates USB bus resume status.
N  *           Bit  3 indicates USB bus time-out status.
N  *           Bit 12 indicates USB bus LPM L1 suspend status.
N  *           Bit 13 indicates USB bus LPM L1 resume status.
N  *
N  * @details  Return USB_ATTR[3:0] and USB_ATTR[13:12] for USB bus events.
N  *
N  * \hideinitializer
N  */
N#ifdef SUPPORT_LPM
S#define USBD_GET_BUS_STATE()        ((uint32_t)(USBD->ATTR & 0x300f))
N#else
N#define USBD_GET_BUS_STATE()        ((uint32_t)(USBD->ATTR & 0xf))
N#endif
N/**
N  * @brief    Check cable connection state
N  *
N  * @param    None
N  *
N  * @retval   0 USB cable is not attached.
N  * @retval   1 USB cable is attached.
N  *
N  * @details  Check the connection state by FLDET bit of USB_FLDET register.
N  *
N  * \hideinitializer
N  */
N#define USBD_IS_ATTACHED()          ((uint32_t)(USBD->VBUSDET & USBD_VBUSDET_VBUSDET_Msk))
N
N/**
N  * @brief      Stop USB transaction of the specified endpoint ID
N  *
N  * @param[in]  ep The USB endpoint ID. NUC121 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return     None
N  *
N  * @details    Write 1 to CLRRDY bit of USB_CFGPx register to stop USB transaction of the specified endpoint ID.
N  *
N  * \hideinitializer
N  */
N#define USBD_STOP_TRANSACTION(ep)   (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFGP + (uint32_t)((ep) << 4))) |= USBD_CFGP_CLRRDY_Msk)
N
N/**
N  * @brief      Set USB DATA1 PID for the specified endpoint ID
N  *
N  * @param[in]  ep The USB endpoint ID. NUC121 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return     None
N  *
N  * @details    Set DSQ_SYNC bit of USB_CFGx register to specify the DATA1 PID for the following IN token transaction.
N  *             Base on this setting, hardware will toggle PID between DATA0 and DATA1 automatically for IN token transactions.
N  *
N  * \hideinitializer
N  */
N#define USBD_SET_DATA1(ep)          (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFG + (uint32_t)((ep) << 4))) |= USBD_CFG_DSQSYNC_Msk)
N
N/**
N  * @brief      Set USB DATA0 PID for the specified endpoint ID
N  *
N  * @param[in]  ep The USB endpoint ID. NUC121 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return     None
N  *
N  * @details    Clear DSQ_SYNC bit of USB_CFGx register to specify the DATA0 PID for the following IN token transaction.
N  *             Base on this setting, hardware will toggle PID between DATA0 and DATA1 automatically for IN token transactions.
N  *
N  * \hideinitializer
N  */
N#define USBD_SET_DATA0(ep)          (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFG + (uint32_t)((ep) << 4))) &= (~USBD_CFG_DSQSYNC_Msk))
N
N/**
N  * @brief      Set USB payload size (IN data)
N  *
N  * @param[in]  ep The USB endpoint ID. NUC121 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @param[in]  size The transfer length.
N  *
N  * @return     None
N  *
N  * @details    This macro will write the transfer length to USB_MXPLDx register for IN data transaction.
N  *
N  * \hideinitializer
N  */
N#define USBD_SET_PAYLOAD_LEN(ep, size)  (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].MXPLD + (uint32_t)((ep) << 4))) = (size))
N
N/**
N  * @brief      Get USB payload size (OUT data)
N  *
N  * @param[in]  ep The USB endpoint ID. NUC121 Series supports 8 endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return     The value of USB_MXPLDx register.
N  *
N  * @details    Get the data length of OUT data transaction by reading USB_MXPLDx register.
N  *
N  * \hideinitializer
N  */
N#define USBD_GET_PAYLOAD_LEN(ep)        ((uint32_t)*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].MXPLD + (uint32_t)((ep) << 4))))
N
N/**
N  * @brief      Configure endpoint
N  *
N  * @param[in]  ep The USB endpoint ID. NUC121 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @param[in]  config The USB configuration.
N  *
N  * @return     None
N  *
N  * @details    This macro will write config parameter to USB_CFGx register of specified endpoint ID.
N  *
N  * \hideinitializer
N  */
N#define USBD_CONFIG_EP(ep, config)      (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFG + (uint32_t)((ep) << 4))) = (config))
N
N/**
N  * @brief      Set USB endpoint buffer
N  *
N  * @param[in]  ep The USB endpoint ID. NUC121 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @param[in]  offset The SRAM offset.
N  *
N  * @return     None
N  *
N  * @details    This macro will set the SRAM offset for the specified endpoint ID.
N  *
N  * \hideinitializer
N  */
N#define USBD_SET_EP_BUF_ADDR(ep, offset)    (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].BUFSEG + (uint32_t)((ep) << 4))) = (offset))
N
N/**
N  * @brief      Get the offset of the specified USB endpoint buffer
N  *
N  * @param[in]  ep The USB endpoint ID. NUC121 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return     The offset of the specified endpoint buffer.
N  *
N  * @details    This macro will return the SRAM offset of the specified endpoint ID.
N  *
N  * \hideinitializer
N  */
N#define USBD_GET_EP_BUF_ADDR(ep)        ((uint32_t)*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].BUFSEG + (uint32_t)((ep) << 4))))
N
N/**
N  * @brief       Set USB endpoint stall state
N  *
N  * @param[in]   ep  The USB endpoint ID. NUC121 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return      None
N  *
N  * @details     Set USB endpoint stall state for the specified endpoint ID. Endpoint will respond STALL token automatically.
N  *
N  * \hideinitializer
N  */
N#define USBD_SET_EP_STALL(ep)        (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFGP + (uint32_t)((ep) << 4))) |= USBD_CFGP_SSTALL_Msk)
N
N/**
N  * @brief       Clear USB endpoint stall state
N  *
N  * @param[in]   ep  The USB endpoint ID. NUC121 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @return      None
N  *
N  * @details     Clear USB endpoint stall state for the specified endpoint ID. Endpoint will respond ACK/NAK token.
N  *
N  * \hideinitializer
N  */
N#define USBD_CLR_EP_STALL(ep)        (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFGP + (uint32_t)((ep) << 4))) &= ~USBD_CFGP_SSTALL_Msk)
N
N/**
N  * @brief       Get USB endpoint stall state
N  *
N  * @param[in]   ep  The USB endpoint ID. NUC121 Series supports 8 hardware endpoint ID. This parameter could be 0 ~ 7.
N  *
N  * @retval      0      USB endpoint is not stalled.
N  * @retval      Others USB endpoint is stalled.
N  *
N  * @details     Get USB endpoint stall state of the specified endpoint ID.
N  *
N  * \hideinitializer
N  */
N#define USBD_GET_EP_STALL(ep)        (*((__IO uint32_t *) ((uint32_t)&USBD->EP[0].CFGP + (uint32_t)((ep) << 4))) & USBD_CFGP_SSTALL_Msk)
N
N/**
N  * @brief      To support byte access between USB SRAM and system SRAM
N  *
N  * @param[in]  dest Destination pointer.
N  *
N  * @param[in]  src  Source pointer.
N  *
N  * @param[in]  size Byte count.
N  *
N  * @return     None
N  *
N  * @details    This function will copy the number of data specified by size and src parameters to the address specified by dest parameter.
N  *
N  */
Nstatic __INLINE void USBD_MemCopy(uint8_t *dest, uint8_t *src, int32_t size)
Xstatic __inline void USBD_MemCopy(uint8_t *dest, uint8_t *src, int32_t size)
N{
N    while (size--) *dest++ = *src++;
N}
N
N
N/**
N  * @brief       Set USB endpoint stall state
N  *
N  * @param[in]   epnum  USB endpoint number
N  *
N  * @return      None
N  *
N  * @details     Set USB endpoint stall state. Endpoint will respond STALL token automatically.
N  *
N  */
Nstatic __INLINE void USBD_SetStall(uint8_t epnum)
Xstatic __inline void USBD_SetStall(uint8_t epnum)
N{
N    uint32_t u32CfgAddr;
N    uint32_t u32Cfg;
N    int i;
N
N    for (i = 0; i < USBD_MAX_EP; i++)
X    for (i = 0; i < 8; i++)
N    {
N        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFG; /* USBD_CFG0 */
X        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((uint32_t)0x40000000) + 0x60000))->EP[0].CFG;  
N        u32Cfg = *((__IO uint32_t *)(u32CfgAddr));
X        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));
N
N        if ((u32Cfg & 0xf) == epnum)
N        {
N            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFGP; /* USBD_CFGP0 */
X            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((uint32_t)0x40000000) + 0x60000))->EP[0].CFGP;  
N            u32Cfg = *((__IO uint32_t *)(u32CfgAddr));
X            u32Cfg = *((volatile uint32_t *)(u32CfgAddr));
N
N            *((__IO uint32_t *)(u32CfgAddr)) = (u32Cfg | USBD_CFGP_SSTALL);
X            *((volatile uint32_t *)(u32CfgAddr)) = (u32Cfg | (0x1ul << (1)));
N            break;
N        }
N    }
N}
N
N/**
N  * @brief       Clear USB endpoint stall state
N  *
N  * @param[in]   epnum  USB endpoint number
N  *
N  * @return      None
N  *
N  * @details     Clear USB endpoint stall state. Endpoint will respond ACK/NAK token.
N  */
Nstatic __INLINE void USBD_ClearStall(uint8_t epnum)
Xstatic __inline void USBD_ClearStall(uint8_t epnum)
N{
N    uint32_t u32CfgAddr;
N    uint32_t u32Cfg;
N    int i;
N
N    for (i = 0; i < USBD_MAX_EP; i++)
X    for (i = 0; i < 8; i++)
N    {
N        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFG; /* USBD_CFG0 */
X        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((uint32_t)0x40000000) + 0x60000))->EP[0].CFG;  
N        u32Cfg = *((__IO uint32_t *)(u32CfgAddr));
X        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));
N
N        if ((u32Cfg & 0xf) == epnum)
N        {
N            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFGP; /* USBD_CFGP0 */
X            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((uint32_t)0x40000000) + 0x60000))->EP[0].CFGP;  
N            u32Cfg = *((__IO uint32_t *)(u32CfgAddr));
X            u32Cfg = *((volatile uint32_t *)(u32CfgAddr));
N
N            *((__IO uint32_t *)(u32CfgAddr)) = (u32Cfg & ~USBD_CFGP_SSTALL);
X            *((volatile uint32_t *)(u32CfgAddr)) = (u32Cfg & ~(0x1ul << (1)));
N            break;
N        }
N    }
N}
N
N/**
N  * @brief       Get USB endpoint stall state
N  *
N  * @param[in]   epnum  USB endpoint number
N  *
N  * @retval      0      USB endpoint is not stalled.
N  * @retval      Others USB endpoint is stalled.
N  *
N  * @details     Get USB endpoint stall state.
N  *
N  */
Nstatic __INLINE uint32_t USBD_GetStall(uint8_t epnum)
Xstatic __inline uint32_t USBD_GetStall(uint8_t epnum)
N{
N    uint32_t u32CfgAddr;
N    uint32_t u32Cfg;
N    int i;
N
N    for (i = 0; i < USBD_MAX_EP; i++)
X    for (i = 0; i < 8; i++)
N    {
N        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFG; /* USBD_CFG0 */
X        u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((uint32_t)0x40000000) + 0x60000))->EP[0].CFG;  
N        u32Cfg = *((__IO uint32_t *)(u32CfgAddr));
X        u32Cfg = *((volatile uint32_t *)(u32CfgAddr));
N
N        if ((u32Cfg & 0xf) == epnum)
N        {
N            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&USBD->EP[0].CFGP; /* USBD_CFGP0 */
X            u32CfgAddr = (uint32_t)(i << 4) + (uint32_t)&((USBD_T *) (((uint32_t)0x40000000) + 0x60000))->EP[0].CFGP;  
N            break;
N        }
N    }
N
N    return ((*((__IO uint32_t *)(u32CfgAddr))) & USBD_CFGP_SSTALL);
X    return ((*((volatile uint32_t *)(u32CfgAddr))) & (0x1ul << (1)));
N}
N
N
Nextern volatile uint8_t g_USBD_u8RemoteWakeupEn;
N
N
Ntypedef void (*VENDOR_REQ)(void);           /*!< Functional pointer type definition for Vendor class */
Ntypedef void (*CLASS_REQ)(void);            /*!< Functional pointer type declaration for USB class request callback handler */
Ntypedef void (*SET_INTERFACE_REQ)(void);    /*!< Functional pointer type declaration for USB set interface request callback handler */
Ntypedef void (*SET_CONFIG_CB)(void);       /*!< Functional pointer type declaration for USB set configuration request callback handler */
N
N
N/*--------------------------------------------------------------------*/
Nvoid USBD_Open(const S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface);
Nvoid USBD_Start(void);
Nvoid USBD_GetSetupPacket(uint8_t *buf);
Nvoid USBD_ProcessSetupPacket(void);
Nvoid USBD_StandardRequest(void);
Nvoid USBD_PrepareCtrlIn(uint8_t *pu8Buf, uint32_t u32Size);
Nvoid USBD_CtrlIn(void);
Nvoid USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size);
Nvoid USBD_CtrlOut(void);
Nvoid USBD_SwReset(void);
Nvoid USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq);
Nvoid USBD_SetConfigCallback(SET_CONFIG_CB pfnSetConfigCallback);
Nvoid USBD_LockEpStall(uint32_t u32EpBitmap);
N
N/*@}*/ /* end of group USBD_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group USBD_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__USBD_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 387 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "usci_i2c.h"
L 1 "..\..\..\..\Library\StdDriver\inc\usci_i2c.h" 1
N/**************************************************************************//**
N * @file     USCI_I2C.h
N * @version  V3.00
N * @brief    NUC121 series UI2C (USCI-I2C) driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N ******************************************************************************/
N#ifndef __USCI_I2C_H__
N#define __USCI_I2C_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup UI2C_Driver UI2C Driver (USCI I2C Mode Driver)
N  @{
N*/
N
N/** @addtogroup UI2C_EXPORTED_CONSTANTS UI2C Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* USCI_I2C master event definitions                                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
Nenum UI2C_MASTER_EVENT
N{
N    MASTER_SEND_ADDRESS = 10,    /*!< Master send address to Slave */
N    MASTER_SEND_H_WR_ADDRESS,    /*!< Master send High address to Slave */
N    MASTER_SEND_H_RD_ADDRESS,    /*!< Master send address to Slave (Read ADDR) */
N    MASTER_SEND_L_ADDRESS,       /*!< Master send Low address to Slave */
N    MASTER_SEND_DATA,            /*!< Master Send Data to Slave */
N    MASTER_SEND_REPEAT_START,    /*!< Master send repeat start to Slave */
N    MASTER_READ_DATA,            /*!< Master Get Data from Slave */
N    MASTER_STOP,                 /*!< Master send stop to Slave */
N    MASTER_SEND_START            /*!< Master send start to Slave */
N};
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* USCI_I2C slave event definitions                                                                        */
N/*---------------------------------------------------------------------------------------------------------*/
Nenum UI2C_SLAVE_EVENT
N{
N    SLAVE_ADDRESS_ACK = 100,      /*!< Slave send address ACK */
N    SLAVE_H_WR_ADDRESS_ACK,       /*!< Slave send High address ACK */
N    SLAVE_L_WR_ADDRESS_ACK,       /*!< Slave send Low address ACK */
N    SLAVE_GET_DATA,               /*!< Slave Get Data from Master (Write CMD) */
N    SLAVE_SEND_DATA,              /*!< Slave Send Data to Master (Read CMD) */
N    SLAVE_H_RD_ADDRESS_ACK,       /*!< Slave send High address ACK */
N    SLAVE_L_RD_ADDRESS_ACK        /*!< Slave send Low address ACK */
N};
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  USCI_CTL constant definitions.                                                                         */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UI2C_CTL_PTRG              0x20UL    /*!< USCI_CTL setting for I2C control bits. It would set PTRG bit */
N#define UI2C_CTL_STA               0x08UL    /*!< USCI_CTL setting for I2C control bits. It would set STA bit */
N#define UI2C_CTL_STO               0x04UL    /*!< USCI_CTL setting for I2C control bits. It would set STO bit */
N#define UI2C_CTL_AA                0x02UL    /*!< USCI_CTL setting for I2C control bits. It would set AA bit  */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  USCI_I2C GCMode constant definitions.                                                                  */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UI2C_GCMODE_ENABLE         1    /*!< Enable  USCI_I2C GC Mode */
N#define UI2C_GCMODE_DISABLE        0    /*!< Disable USCI_I2C GC Mode */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  USCI_I2C Wakeup Mode constant definitions.                                                             */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UI2C_DATA_TOGGLE_WK        (0x0 << UI2C_WKCTL_WKADDREN_Pos)    /*!< Wakeup according data toggle */
N#define UI2C_ADDR_MATCH_WK         (0x1 << UI2C_WKCTL_WKADDREN_Pos)    /*!< Wakeup according address match */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* USCI_I2C interrupt mask definitions                                                                     */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UI2C_TO_INT_MASK           (0x001)    /*!< Time-out interrupt mask */
N#define UI2C_STAR_INT_MASK         (0x002)    /*!< Start condition received interrupt mask */
N#define UI2C_STOR_INT_MASK         (0x004)    /*!< Stop condition received interrupt mask */
N#define UI2C_NACK_INT_MASK         (0x008)    /*!< Non-acknowledge interrupt mask */
N#define UI2C_ARBLO_INT_MASK        (0x010)    /*!< Arbitration lost interrupt mask */
N#define UI2C_ERR_INT_MASK          (0x020)    /*!< Error interrupt mask */
N#define UI2C_ACK_INT_MASK          (0x040)    /*!< Acknowledge interrupt mask */
N
N/*@}*/ /* end of group UI2C_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup UI2C_EXPORTED_FUNCTIONS UI2C Exported Functions
N  @{
N*/
N
N/**
N *    @brief        This macro sets the USCI_I2C protocol control register at one time
N *
N *    @param[in]    ui2c      The pointer of the specified USCI_I2C module.
N *    @param[in]    u8Ctrl    Set the register value of USCI_I2C control register.
N *
N *    @return       None
N *
N *    @details      Set UI2C_PROTCTL register to control USCI_I2C bus conditions of START, STOP, SI, ACK.
N *
N *    \hideinitializer
N */
N#define UI2C_SET_CONTROL_REG(ui2c, u8Ctrl) ((ui2c)->PROTCTL = ((ui2c)->PROTCTL & ~0x2E) | (u8Ctrl))
N
N/**
N *    @brief        This macro only set START bit to protocol control register of USCI_I2C module.
N *
N *    @param[in]    ui2c      The pointer of the specified USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      Set the USCI_I2C bus START condition in UI2C_PROTCTL register.
N *
N *    \hideinitializer
N */
N#define UI2C_START(ui2c) ((ui2c)->PROTCTL = ((ui2c)->PROTCTL & ~UI2C_PROTCTL_PTRG_Msk) | UI2C_PROTCTL_STA_Msk)
N
N/**
N *    @brief        This macro only set STOP bit to the control register of USCI_I2C module
N *
N *    @param[in]    ui2c      The pointer of the specified USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      Set the USCI_I2C bus STOP condition in UI2C_PROTCTL register.
N *
N *    \hideinitializer
N */
N#define UI2C_STOP(ui2c) ((ui2c)->PROTCTL = ((ui2c)->PROTCTL & ~0x2E) | (UI2C_PROTCTL_PTRG_Msk | UI2C_PROTCTL_STO_Msk))
N
N/**
N *    @brief        This macro returns the data stored in data register of USCI_I2C module
N *
N *    @param[in]    ui2c      The pointer of the specified USCI_I2C module.
N *
N *    @return       Data
N *
N *    @details      Read a byte data value of UI2C_RXDAT register from USCI_I2C bus
N *
N *    \hideinitializer
N */
N#define UI2C_GET_DATA(ui2c) ((ui2c)->RXDAT)
N
N/**
N *    @brief        This macro writes the data to data register of USCI_I2C module
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *    @param[in]    u8Data   The data which will be written to data register of USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      Write a byte data value of UI2C_TXDAT register, then sends address or data to USCI I2C bus
N *
N *    \hideinitializer
N */
N#define UI2C_SET_DATA(ui2c, u8Data) ((ui2c)->TXDAT = (u8Data))
N
N/**
N *    @brief        This macro returns time-out flag
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @retval       0        USCI_I2C bus time-out is not happened
N *    @retval       1        USCI_I2C bus time-out is happened
N *
N *    @details      USCI_I2C bus occurs time-out event, the time-out flag will be set. If not occurs time-out event, this bit is cleared.
N *
N *    \hideinitializer
N */
N#define UI2C_GET_TIMEOUT_FLAG(ui2c) (((ui2c)->PROTSTS & UI2C_PROTSTS_TOIF_Msk) == UI2C_PROTSTS_TOIF_Msk ? 1:0)
N
N/**
N *    @brief        This macro returns wake-up flag
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @retval       0        Chip is not woken-up from power-down mode
N *    @retval       1        Chip is woken-up from power-down mode
N *
N *    @details      USCI_I2C controller wake-up flag will be set when USCI_I2C bus occurs wake-up from deep-sleep.
N *
N *    \hideinitializer
N */
N#define UI2C_GET_WAKEUP_FLAG(ui2c) (((ui2c)->WKSTS & UI2C_WKSTS_WKF_Msk) == UI2C_WKSTS_WKF_Msk ? 1:0)
N
N/**
N *    @brief        This macro is used to clear USCI_I2C wake-up flag
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      If USCI_I2C wake-up flag is set, use this macro to clear it.
N *
N *    \hideinitializer
N */
N#define UI2C_CLR_WAKEUP_FLAG(ui2c)  ((ui2c)->WKSTS = UI2C_WKSTS_WKF_Msk)
N
N/**
N *    @brief        This macro disables the USCI_I2C 10-bit address mode
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      The UI2C_I2C is 7-bit address mode, when disable USCI_I2C 10-bit address match function.
N *
N *    \hideinitializer
N */
N#define UI2C_DISABLE_10BIT_ADDR_MODE(ui2c)  ((ui2c)->PROTCTL &= ~(UI2C_PROTCTL_ADDR10EN_Msk))
N
N/**
N *    @brief        This macro enables the 10-bit address mode
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @return       None
N *
N *    @details      To enable USCI_I2C 10-bit address match function.
N *
N *    \hideinitializer
N */
N#define UI2C_ENABLE_10BIT_ADDR_MODE(ui2c)  ((ui2c)->PROTCTL |= UI2C_PROTCTL_ADDR10EN_Msk)
N
N/**
N *    @brief        This macro gets USCI_I2C protocol interrupt flag or bus status
N *
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *
N *    @return       A word data of USCI_I2C_PROTSTS register
N *
N *    @details      Read a word data of USCI_I2C PROTSTS register to get USCI_I2C bus Interrupt flags or status.
N *
N *    \hideinitializer
N */
N#define UI2C_GET_PROT_STATUS(ui2c)    ((ui2c)->PROTSTS)
N
N/**
N *    @brief        This macro clears specified protocol interrupt flag
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *    @param[in]    u32IntTypeFlag Interrupt Type Flag, should be
N *                                  - \ref UI2C_PROTSTS_ACKIF_Msk
N *                                  - \ref UI2C_PROTSTS_ERRIF_Msk
N *                                  - \ref UI2C_PROTSTS_ARBLOIF_Msk
N *                                  - \ref UI2C_PROTSTS_NACKIF_Msk
N *                                  - \ref UI2C_PROTSTS_STORIF_Msk
N *                                  - \ref UI2C_PROTSTS_STARIF_Msk
N *                                  - \ref UI2C_PROTSTS_TOIF_Msk
N *    @return None
N *
N *    @details      To clear interrupt flag when USCI_I2C occurs interrupt and set interrupt flag.
N *
N *    \hideinitializer
N */
N#define UI2C_CLR_PROT_INT_FLAG(ui2c,u32IntTypeFlag)    ((ui2c)->PROTSTS = (u32IntTypeFlag))
N
N/**
N *    @brief        This macro enables specified protocol interrupt
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *    @param[in]    u32IntSel Interrupt Type, should be
N *                                  - \ref UI2C_PROTIEN_ACKIEN_Msk
N *                                  - \ref UI2C_PROTIEN_ERRIEN_Msk
N *                                  - \ref UI2C_PROTIEN_ARBLOIEN_Msk
N *                                  - \ref UI2C_PROTIEN_NACKIEN_Msk
N *                                  - \ref UI2C_PROTIEN_STORIEN_Msk
N *                                  - \ref UI2C_PROTIEN_STARIEN_Msk
N *                                  - \ref UI2C_PROTIEN_TOIEN_Msk
N *    @return None
N *
N *    @details      Set specified USCI_I2C protocol interrupt bits to enable interrupt function.
N *
N *    \hideinitializer
N */
N#define UI2C_ENABLE_PROT_INT(ui2c, u32IntSel)    ((ui2c)->PROTIEN |= (u32IntSel))
N
N/**
N *    @brief        This macro disables specified protocol interrupt
N *    @param[in]    ui2c     The pointer of the specified USCI_I2C module.
N *    @param[in]    u32IntSel Interrupt Type, should be
N *                                  - \ref UI2C_PROTIEN_ACKIEN_Msk
N *                                  - \ref UI2C_PROTIEN_ERRIEN_Msk
N *                                  - \ref UI2C_PROTIEN_ARBLOIEN_Msk
N *                                  - \ref UI2C_PROTIEN_NACKIEN_Msk
N *                                  - \ref UI2C_PROTIEN_STORIEN_Msk
N *                                  - \ref UI2C_PROTIEN_STARIEN_Msk
N *                                  - \ref UI2C_PROTIEN_TOIEN_Msk
N *    @return None
N *
N *    @details      Clear specified USCI_I2C protocol interrupt bits to disable interrupt funtion.
N *
N *    \hideinitializer
N */
N#define UI2C_DISABLE_PROT_INT(ui2c, u32IntSel)    ((ui2c)->PROTIEN &= ~ (u32IntSel))
N
N
Nuint32_t UI2C_Open(UI2C_T *ui2c, uint32_t u32BusClock);
Nvoid UI2C_Close(UI2C_T *ui2c);
Nvoid UI2C_ClearTimeoutFlag(UI2C_T *ui2c);
Nvoid UI2C_Trigger(UI2C_T *ui2c, uint8_t u8Start, uint8_t u8Stop, uint8_t u8Ptrg, uint8_t u8Ack);
Nvoid UI2C_DisableInt(UI2C_T *ui2c, uint32_t u32Mask);
Nvoid UI2C_EnableInt(UI2C_T *ui2c, uint32_t u32Mask);
Nuint32_t UI2C_GetBusClockFreq(UI2C_T *ui2c);
Nuint32_t UI2C_SetBusClockFreq(UI2C_T *ui2c, uint32_t u32BusClock);
Nuint32_t UI2C_GetIntFlag(UI2C_T *ui2c, uint32_t u32Mask);
Nvoid UI2C_ClearIntFlag(UI2C_T *ui2c, uint32_t u32Mask);
Nuint32_t UI2C_GetData(UI2C_T *ui2c);
Nvoid UI2C_SetData(UI2C_T *ui2c, uint8_t u8Data);
Nvoid UI2C_SetSlaveAddr(UI2C_T *ui2c, uint8_t u8SlaveNo, uint16_t u16SlaveAddr, uint8_t u8GCMode);
Nvoid UI2C_SetSlaveAddrMask(UI2C_T *ui2c, uint8_t u8SlaveNo, uint16_t u16SlaveAddrMask);
Nvoid UI2C_EnableTimeout(UI2C_T *ui2c, uint32_t u32TimeoutCnt);
Nvoid UI2C_DisableTimeout(UI2C_T *ui2c);
Nvoid UI2C_EnableWakeup(UI2C_T *ui2c, uint8_t u8WakeupMode);
Nvoid UI2C_DisableWakeup(UI2C_T *ui2c);
Nuint8_t UI2C_WriteByte(UI2C_T *ui2c, uint8_t u8SlaveAddr, const uint8_t data);
Nuint32_t UI2C_WriteMultiBytes(UI2C_T *ui2c, uint8_t u8SlaveAddr, const uint8_t *data, uint32_t u32wLen);
Nuint8_t UI2C_WriteByteOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t data);
Nuint32_t UI2C_WriteMultiBytesOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t *data, uint32_t u32wLen);
Nuint8_t UI2C_WriteByteTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t data);
Nuint32_t UI2C_WriteMultiBytesTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t *data, uint32_t u32wLen);
Nuint8_t UI2C_ReadByte(UI2C_T *ui2c, uint8_t u8SlaveAddr);
Nuint32_t UI2C_ReadMultiBytes(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t *rdata, uint32_t u32rLen);
Nuint8_t UI2C_ReadByteOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr);
Nuint32_t UI2C_ReadMultiBytesOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, uint8_t *rdata, uint32_t u32rLen);
Nuint8_t UI2C_ReadByteTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr);
Nuint32_t UI2C_ReadMultiBytesTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, uint8_t *rdata, uint32_t u32rLen);
N/*@}*/ /* end of group UI2C_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group UI2C_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__USCI_I2C_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 388 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "usci_spi.h"
L 1 "..\..\..\..\Library\StdDriver\inc\usci_spi.h" 1
N/**************************************************************************//**
N * @file     usci_spi.h
N * @version  V3.00
N * @brief    NUC121 series USPI (USCI-SPI) driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N
N#ifndef __USCI_SPI_H__
N#define __USCI_SPI_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup USPI_Driver USPI Driver (USCI SPI Mode Driver)
N  @{
N*/
N
N/** @addtogroup USPI_EXPORTED_CONSTANTS USPI Exported Constants
N  @{
N*/
N
N#define USPI_MODE_0        (0x0 << USPI_PROTCTL_SCLKMODE_Pos)        /*!< SCLK idle low; data transmit with falling edge and receive with rising edge */
N#define USPI_MODE_1        (0x1 << USPI_PROTCTL_SCLKMODE_Pos)        /*!< SCLK idle low; data transmit with rising edge and receive with falling edge */
N#define USPI_MODE_2        (0x2 << USPI_PROTCTL_SCLKMODE_Pos)        /*!< SCLK idle high; data transmit with rising edge and receive with falling edge */
N#define USPI_MODE_3        (0x3 << USPI_PROTCTL_SCLKMODE_Pos)        /*!< SCLK idle high; data transmit with falling edge and receive with rising edge */
N
N#define USPI_SLAVE         (USPI_PROTCTL_SLAVE_Msk)                  /*!< Set as slave */
N#define USPI_MASTER        (0x0)                                     /*!< Set as master */
N
N#define USPI_SS                (USPI_PROTCTL_SS_Msk)                 /*!< Set SS */
N#define USPI_SS_ACTIVE_HIGH    (0x0)                                 /*!< SS active high */
N#define USPI_SS_ACTIVE_LOW     (USPI_LINECTL_CTLOINV_Msk)            /*!< SS active low */
N
N/* USCI_SPI Interrupt Mask */
N#define USPI_SSINACT_INT_MASK        (0x001)                         /*!< Slave Slave Inactive interrupt mask */
N#define USPI_SSACT_INT_MASK          (0x002)                         /*!< Slave Slave Active interrupt mask */
N#define USPI_SLVTO_INT_MASK          (0x004)                         /*!< Slave Mode Time-out interrupt mask */
N#define USPI_SLVBE_INT_MASK          (0x008)                         /*!< Slave Mode Bit Count Error interrupt mask */
N#define USPI_TXUDR_INT_MASK          (0x010)                         /*!< Slave Transmit Under Run interrupt mask */
N#define USPI_RXOV_INT_MASK           (0x020)                         /*!< Receive Buffer Overrun interrupt mask */
N#define USPI_TXST_INT_MASK           (0x040)                         /*!< Transmit Start interrupt mask */
N#define USPI_TXEND_INT_MASK          (0x080)                         /*!< Transmit End interrupt mask */
N#define USPI_RXST_INT_MASK           (0x100)                         /*!< Receive Start interrupt mask */
N#define USPI_RXEND_INT_MASK          (0x200)                         /*!< Receive End interrupt mask */
N
N/* USCI_SPI Status Mask */
N#define USPI_BUSY_MASK               (0x01)                          /*!< Busy status mask */
N#define USPI_RX_EMPTY_MASK           (0x02)                          /*!< RX empty status mask */
N#define USPI_RX_FULL_MASK            (0x04)                          /*!< RX full status mask */
N#define USPI_TX_EMPTY_MASK           (0x08)                          /*!< TX empty status mask */
N#define USPI_TX_FULL_MASK            (0x10)                          /*!< TX full status mask */
N#define USPI_SSLINE_STS_MASK         (0x20)                          /*!< USCI_SPI_SS line status mask */
N
N/*@}*/ /* end of group USPI_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup USPI_EXPORTED_FUNCTIONS USPI Exported Functions
N  @{
N*/
N
N/**
N  * @brief  Disable slave 3-wire mode.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_DISABLE_3WIRE_MODE(uspi) ( (uspi)->PROTCTL &= ~USPI_PROTCTL_SLV3WIRE_Msk )
N
N/**
N  * @brief  Enable slave 3-wire mode.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_ENABLE_3WIRE_MODE(uspi) ( (uspi)->PROTCTL |= USPI_PROTCTL_SLV3WIRE_Msk )
N
N/**
N  * @brief  Get the Rx buffer empty flag.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return Rx buffer flag
N  * @retval 0: Rx buffer is not empty
N  * @retval 1: Rx buffer is empty
N  * \hideinitializer
N  */
N#define USPI_GET_RX_EMPTY_FLAG(uspi) ( ((uspi)->BUFSTS & USPI_BUFSTS_RXEMPTY_Msk) == USPI_BUFSTS_RXEMPTY_Msk ? 1:0 )
N
N/**
N  * @brief  Get the Tx buffer empty flag.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return Tx buffer flag
N  * @retval 0: Tx buffer is not empty
N  * @retval 1: Tx buffer is empty
N  * \hideinitializer
N  */
N#define USPI_GET_TX_EMPTY_FLAG(uspi) ( ((uspi)->BUFSTS & USPI_BUFSTS_TXEMPTY_Msk) == USPI_BUFSTS_TXEMPTY_Msk ? 1:0 )
N
N/**
N  * @brief  Get the Tx buffer full flag.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return Tx buffer flag
N  * @retval 0: Tx buffer is not full
N  * @retval 1: Tx buffer is full
N  * \hideinitializer
N  */
N#define USPI_GET_TX_FULL_FLAG(uspi) ( ((uspi)->BUFSTS & USPI_BUFSTS_TXFULL_Msk) == USPI_BUFSTS_TXFULL_Msk ? 1:0 )
N
N/**
N  * @brief  Get the datum read from RX register.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return data in Rx register
N  * \hideinitializer
N  */
N#define USPI_READ_RX(uspi) ((uspi)->RXDAT)
N
N/**
N  * @brief  Write datum to TX register.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @param[in]  u32TxData The datum which user attempt to transfer through USCI_SPI bus.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_WRITE_TX(uspi, u32TxData) ( (uspi)->TXDAT = (u32TxData) )
N
N/**
N  * @brief      Set USCI_SPI_SS pin to high state.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return     None.
N  * @details    Disable automatic slave selection function and set USCI_SPI_SS pin to high state. Only available in Master mode.
N  * \hideinitializer
N  */
N#define USPI_SET_SS_HIGH(uspi) \
N    do{ \
N        (uspi)->LINECTL &= ~(USPI_LINECTL_CTLOINV_Msk); \
N        (uspi)->PROTCTL = (((uspi)->PROTCTL & ~USPI_PROTCTL_AUTOSS_Msk) | USPI_PROTCTL_SS_Msk); \
N    }while(0)
X#define USPI_SET_SS_HIGH(uspi)     do{         (uspi)->LINECTL &= ~(USPI_LINECTL_CTLOINV_Msk);         (uspi)->PROTCTL = (((uspi)->PROTCTL & ~USPI_PROTCTL_AUTOSS_Msk) | USPI_PROTCTL_SS_Msk);     }while(0)
N
N/**
N  * @brief      Set USCI_SPI_SS pin to low state.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return     None.
N  * @details    Disable automatic slave selection function and set USCI_SPI_SS pin to low state. Only available in Master mode.
N  * \hideinitializer
N  */
N#define USPI_SET_SS_LOW(uspi) \
N    do{ \
N        (uspi)->LINECTL |= (USPI_LINECTL_CTLOINV_Msk); \
N        (uspi)->PROTCTL = (((uspi)->PROTCTL & ~USPI_PROTCTL_AUTOSS_Msk) | USPI_PROTCTL_SS_Msk); \
N    }while(0)
X#define USPI_SET_SS_LOW(uspi)     do{         (uspi)->LINECTL |= (USPI_LINECTL_CTLOINV_Msk);         (uspi)->PROTCTL = (((uspi)->PROTCTL & ~USPI_PROTCTL_AUTOSS_Msk) | USPI_PROTCTL_SS_Msk);     }while(0)
N
N/**
N  * @brief  Set the length of suspend interval.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @param[in]  u32SuspCycle Decide the length of suspend interval.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_SET_SUSPEND_CYCLE(uspi, u32SuspCycle) ( (uspi)->PROTCTL = ((uspi)->PROTCTL & ~USPI_PROTCTL_SUSPITV_Msk) | ((u32SuspCycle) << USPI_PROTCTL_SUSPITV_Pos) )
N
N/**
N  * @brief  Set the USCI_SPI transfer sequence with LSB first.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_SET_LSB_FIRST(uspi) ( (uspi)->LINECTL |= USPI_LINECTL_LSB_Msk )
N
N/**
N  * @brief  Set the USCI_SPI transfer sequence with MSB first.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_SET_MSB_FIRST(uspi) ( (uspi)->LINECTL &= ~USPI_LINECTL_LSB_Msk )
N
N/**
N  * @brief  Get the USCI_SPI busy state.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @return USCI_SPI busy status
N  * @retval 0: USCI_SPI module is not busy
N  * @retval 1: USCI_SPI module is busy
N  * \hideinitializer
N  */
N#define USPI_IS_BUSY(uspi) ( ((uspi)->PROTSTS & USPI_PROTSTS_BUSY_Msk) == USPI_PROTSTS_BUSY_Msk ? 1:0 )
N
N/**
N  * @brief Get the USCI_SPI wake-up flag.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @return Wake-up status.
N  * @retval 0 Flag is not set.
N  * @retval 1 Flag is set.
N  * \hideinitializer
N  */
N#define USPI_GET_WAKEUP_FLAG(uspi) ( ((uspi)->WKSTS & USPI_WKSTS_WKF_Msk) == USPI_WKSTS_WKF_Msk ? 1:0)
N
N/**
N  * @brief Clear the USCI_SPI wake-up flag.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_CLR_WAKEUP_FLAG(uspi)  ( (uspi)->WKSTS |= USPI_WKSTS_WKF_Msk)
N
N/**
N  * @brief Get protocol interrupt flag/status.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @return The interrupt flag/status of protocol status register.
N  * \hideinitializer
N  */
N#define USPI_GET_PROT_STATUS(uspi)    ( (uspi)->PROTSTS)
N
N/**
N  * @brief Clear specified protocol interrupt flag.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntTypeFlag Interrupt Type Flag, should be
N  *                                  - \ref USPI_PROTSTS_SSACTIF_Msk
N  *                                  - \ref USPI_PROTSTS_SSINAIF_Msk
N  *                                  - \ref USPI_PROTSTS_SLVBEIF_Msk
N  *                                  - \ref USPI_PROTSTS_SLVTOIF_Msk
N  *                                  - \ref USPI_PROTSTS_RXENDIF_Msk
N  *                                  - \ref USPI_PROTSTS_RXSTIF_Msk
N  *                                  - \ref USPI_PROTSTS_TXENDIF_Msk
N  *                                  - \ref USPI_PROTSTS_TXSTIF_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_CLR_PROT_INT_FLAG(uspi,u32IntTypeFlag)    ( (uspi)->PROTSTS = (u32IntTypeFlag))
N
N/**
N  * @brief Get buffer interrupt flag/status.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @return The interrupt flag/status of buffer status register.
N  * \hideinitializer
N  */
N#define USPI_GET_BUF_STATUS(uspi)    ( (uspi)->BUFSTS)
N
N/**
N  * @brief Clear specified buffer interrupt flag.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntTypeFlag Interrupt Type Flag, should be
N  *                                  - \ref USPI_BUFSTS_TXUDRIF_Msk
N  *                                  - \ref USPI_BUFSTS_RXOVIF_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_CLR_BUF_INT_FLAG(uspi,u32IntTypeFlag)    ( (uspi)->BUFSTS = (u32IntTypeFlag))
N
N/**
N  * @brief Enable specified protocol interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_PROTIEN_SLVBEIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SLVTOIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SSACTIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SSINAIEN_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_ENABLE_PROT_INT(uspi, u32IntSel)    ((uspi)->PROTIEN |= (u32IntSel))
N
N/**
N  * @brief Disable specified protocol interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_PROTIEN_SLVBEIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SLVTOIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SSACTIEN_Msk
N  *                                  - \ref USPI_PROTIEN_SSINAIEN_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_DISABLE_PROT_INT(uspi, u32IntSel)    ((uspi)->PROTIEN &= ~ (u32IntSel))
N
N/**
N  * @brief Enable specified buffer interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_BUFCTL_RXOVIEN_Msk
N  *                                  - \ref USPI_BUFCTL_TXUDRIEN_Msk
N  * @return None
N   * \hideinitializer
N */
N#define USPI_ENABLE_BUF_INT(uspi, u32IntSel)    ((uspi)->BUFCTL |= (u32IntSel))
N
N/**
N  * @brief Disable specified buffer interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_BUFCTL_RXOVIEN_Msk
N  *                                  - \ref USPI_BUFCTL_TXUDRIEN_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_DISABLE_BUF_INT(uspi, u32IntSel)    ((uspi)->BUFCTL &= ~ (u32IntSel))
N
N/**
N  * @brief Enable specified transfer interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_INTEN_RXENDIEN_Msk
N  *                                  - \ref USPI_INTEN_RXSTIEN_Msk
N  *                                  - \ref USPI_INTEN_TXENDIEN_Msk
N  *                                  - \ref USPI_INTEN_TXSTIEN_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_ENABLE_TRANS_INT(uspi, u32IntSel)    ((uspi)->INTEN |= (u32IntSel))
N
N/**
N  * @brief Disable specified transfer interrupt.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @param[in] u32IntSel Interrupt Type, should be
N  *                                  - \ref USPI_INTEN_RXENDIEN_Msk
N  *                                  - \ref USPI_INTEN_RXSTIEN_Msk
N  *                                  - \ref USPI_INTEN_TXENDIEN_Msk
N  *                                  - \ref USPI_INTEN_TXSTIEN_Msk
N  * @return None
N  * \hideinitializer
N  */
N#define USPI_DISABLE_TRANS_INT(uspi, u32IntSel)    ((uspi)->INTEN &= ~ (u32IntSel))
N
N/**
N  * @brief Enable PDMA transfer.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * @details Enable PDMA function for both transfer and receive.
N  * \hideinitializer
N  */
N#define USPI_ENABLE_PDMA(uspi) ((uspi)->PDMACTL |= (USPI_PDMACTL_TXPDMAEN_Msk | USPI_PDMACTL_RXPDMAEN_Msk | USPI_PDMACTL_PDMAEN_Msk))
N
N/**
N  * @brief Disable PDMA transfer.
N  * @param[in] uspi The pointer of the specified USCI_SPI module.
N  * @return None
N  * @details Disable PDMA function for both transfer and receive.
N  * \hideinitializer
N  */
N#define USPI_DISABLE_PDMA(uspi) ((uspi)->PDMACTL &= ~(USPI_PDMACTL_TXPDMAEN_Msk | USPI_PDMACTL_RXPDMAEN_Msk | USPI_PDMACTL_PDMAEN_Msk))
N
N
N/**
N  * @brief  Set the data width of a USCI_SPI transaction.
N  * @param[in]  uspi The pointer of the specified USCI_SPI module.
N  * @param[in]  u32Width The data width. The valid data width is 4 ~ 16.
N  * @return None
N  */
Nstatic __INLINE void USPI_SET_DATA_WIDTH(USPI_T *uspi, uint32_t u32Width)
Xstatic __inline void USPI_SET_DATA_WIDTH(USPI_T *uspi, uint32_t u32Width)
N{
N    if (u32Width == 16)
N        u32Width = 0;
N
N    uspi->LINECTL = (uspi->LINECTL & ~USPI_LINECTL_DWIDTH_Msk) | (u32Width << USPI_LINECTL_DWIDTH_Pos);
X    uspi->LINECTL = (uspi->LINECTL & ~(0xful << (8))) | (u32Width << (8));
N}
N
N
Nuint32_t USPI_Open(USPI_T *uspi, uint32_t u32MasterSlave, uint32_t u32SPIMode,  uint32_t u32DataWidth, uint32_t u32BusClock);
Nvoid USPI_Close(USPI_T *uspi);
Nvoid USPI_ClearRxBuf(USPI_T *uspi);
Nvoid USPI_ClearTxBuf(USPI_T *uspi);
Nvoid USPI_DisableAutoSS(USPI_T *uspi);
Nvoid USPI_EnableAutoSS(USPI_T *uspi, uint32_t u32SSPinMask, uint32_t u32ActiveLevel);
Nuint32_t USPI_SetBusClock(USPI_T *uspi, uint32_t u32BusClock);
Nuint32_t USPI_GetBusClock(USPI_T *uspi);
Nvoid USPI_EnableInt(USPI_T *uspi, uint32_t u32Mask);
Nvoid USPI_DisableInt(USPI_T *uspi, uint32_t u32Mask);
Nuint32_t USPI_GetIntFlag(USPI_T *uspi, uint32_t u32Mask);
Nvoid USPI_ClearIntFlag(USPI_T *uspi, uint32_t u32Mask);
Nuint32_t USPI_GetStatus(USPI_T *uspi, uint32_t u32Mask);
Nvoid USPI_EnableWakeup(USPI_T *uspi);
Nvoid USPI_DisableWakeup(USPI_T *uspi);
N
N
N/*@}*/ /* end of group USPI_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group USPI_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__USCI_SPI_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 389 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "usci_uart.h"
L 1 "..\..\..\..\Library\StdDriver\inc\usci_uart.h" 1
N/*************************************************************************//**
N * @file     usci_uart.h
N * @version  V3.00
N * @brief    NUC121 series UUART (USCI-UART) driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N*****************************************************************************/
N#ifndef __USCI_UART_H__
N#define __USCI_UART_H__
N
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup UUART_Driver UUART Driver (USCI UART Mode Driver)
N  @{
N*/
N
N/** @addtogroup UUART_EXPORTED_CONSTANTS UUART Exported Constants
N  @{
N*/
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UUART_LINECTL constants definitions                                                                     */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UUART_WORD_LEN_6     (6 << UUART_LINECTL_DWIDTH_Pos) /*!< UUART_LINECTL setting to set UART word length to 6 bits */
N#define UUART_WORD_LEN_7     (7 << UUART_LINECTL_DWIDTH_Pos) /*!< UUART_LINECTL setting to set UART word length to 7 bits */
N#define UUART_WORD_LEN_8     (8 << UUART_LINECTL_DWIDTH_Pos) /*!< UUART_LINECTL setting to set UART word length to 8 bits */
N#define UUART_WORD_LEN_9     (9 << UUART_LINECTL_DWIDTH_Pos) /*!< UUART_LINECTL setting to set UART word length to 9 bits */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* UUART_PROTCTL constants definitions                                                                     */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UUART_PARITY_NONE    (0x0 << UUART_PROTCTL_PARITYEN_Pos)    /*!< UUART_PROTCTL setting to set UART as no parity */
N#define UUART_PARITY_ODD     (0x1 << UUART_PROTCTL_PARITYEN_Pos)    /*!< UUART_PROTCTL setting to set UART as odd parity */
N#define UUART_PARITY_EVEN    (0x3 << UUART_PROTCTL_PARITYEN_Pos)    /*!< UUART_PROTCTL setting to set UART as even parity */
N
N#define UUART_STOP_BIT_1     (0x0) /*!< UUART_PROTCTL setting for one stop bit */
N#define UUART_STOP_BIT_2     (0x1) /*!< UUART_PROTCTL setting for two stop bit */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/* USCI UART interrupt mask definitions                                                                            */
N/*---------------------------------------------------------------------------------------------------------*/
N#define UUART_ABR_INT_MASK      (0x002) /*!< Auto-baud rate interrupt mask */
N#define UUART_RLS_INT_MASK      (0x004) /*!< Receive line status interrupt mask */
N#define UUART_BUF_RXOV_INT_MASK (0x008) /*!< Buffer RX overrun interrupt mask */
N#define UUART_TXST_INT_MASK     (0x010) /*!< TX start interrupt mask */
N#define UUART_TXEND_INT_MASK    (0x020) /*!< Tx end interrupt mask */
N#define UUART_RXST_INT_MASK     (0x040) /*!< RX start interrupt mask */
N#define UUART_RXEND_INT_MASK    (0x080) /*!< RX end interrupt mask */
N
N
N/*@}*/ /* end of group UUART_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup UUART_EXPORTED_FUNCTIONS UUART Exported Functions
N  @{
N*/
N
N
N/**
N *    @brief        Write USCI_UART data
N *
N *    @param[in]    psUUART   The pointer of the specified USCI_UART module
N *    @param[in]    u8Data  Data byte to transmit.
N *
N *    @return       None
N *
N *    @details      This macro write Data to Tx data register.
N *
N *    \hideinitializer
N */
N#define UUART_WRITE(psUUART, u8Data)    ((psUUART)->TXDAT = (u8Data))
N
N
N/**
N *    @brief        Read USCI_UART data
N *
N *    @param[in]    psUUART    The pointer of the specified USCI_UART module
N *
N *    @return       The oldest data byte in RX buffer.
N *
N *    @details      This macro read Rx data register.
N *
N *    \hideinitializer
N */
N#define UUART_READ(psUUART)    ((psUUART)->RXDAT)
N
N
N/**
N *    @brief        Get Tx empty
N *
N *    @param[in]    psUUART    The pointer of the specified USCI_UART module
N *
N *    @retval       0   Tx buffer is not empty
N *    @retval       >=1 Tx buffer is empty
N *
N *    @details      This macro get Transmitter buffer empty register value.
N *
N *    \hideinitializer
N */
N#define UUART_GET_TX_EMPTY(psUUART)    ((psUUART)->BUFSTS & UUART_BUFSTS_TXEMPTY_Msk)
N
N
N/**
N *    @brief        Get Rx empty
N *
N *    @param[in]    psUUART    The pointer of the specified USCI_UART module
N *
N *    @retval       0   Rx buffer is not empty
N *    @retval       >=1 Rx buffer is empty
N *
N *    @details      This macro get Receiver buffer empty register value.
N *
N *    \hideinitializer
N */
N#define UUART_GET_RX_EMPTY(psUUART)    ((psUUART)->BUFSTS & UUART_BUFSTS_RXEMPTY_Msk)
N
N
N/**
N *    @brief        Check specified usci_uart port transmission is over.
N *
N *    @param[in]    psUUART    The pointer of the specified USCI_UART module
N *
N *    @retval       0 Tx transmission is not over
N *    @retval       1 Tx transmission is over
N *
N *    @details      This macro return Transmitter Empty Flag register bit value. \n
N *                  It indicates if specified usci_uart port transmission is over nor not.
N *
N *    \hideinitializer
N */
N#define UUART_IS_TX_EMPTY(psUUART)    (((psUUART)->BUFSTS & UUART_BUFSTS_TXEMPTY_Msk) >> UUART_BUFSTS_TXEMPTY_Pos)
N
N
N/**
N *    @brief        Check specified usci_uart port receiver is empty.
N *
N *    @param[in]    psUUART    The pointer of the specified USCI_UART module
N *
N *    @retval       0 Rx receiver is not empty
N *    @retval       1 Rx receiver is empty
N *
N *    @details      This macro return Receive Empty Flag register bit value. \n
N *                  It indicates if specified usci_uart port receiver is empty nor not.
N *
N *    \hideinitializer
N */
N#define UUART_IS_RX_EMPTY(psUUART)    (((psUUART)->BUFSTS & UUART_BUFSTS_RXEMPTY_Msk) >> UUART_BUFSTS_RXEMPTY_Pos)
N
N
N/**
N *    @brief        Wait specified usci_uart port transmission is over
N *
N *    @param[in]    psUUART    The pointer of the specified USCI_UART module
N *
N *    @return       None
N *
N *    @details      This macro wait specified usci_uart port transmission is over.
N *
N *    \hideinitializer
N */
N#define UUART_WAIT_TX_EMPTY(psUUART)    while(!((((psUUART)->BUFSTS) & UUART_BUFSTS_TXEMPTY_Msk) >> UUART_BUFSTS_TXEMPTY_Pos))
N
N
N/**
N *    @brief        Check TX buffer is full or not
N *
N *    @param[in]    psUUART    The pointer of the specified USCI_UART module
N *
N *    @retval       1 TX buffer is full
N *    @retval       0 TX buffer is not full
N *
N *    @details      This macro check TX buffer is full or not.
N *
N *    \hideinitializer
N */
N#define UUART_IS_TX_FULL(psUUART)    (((psUUART)->BUFSTS & UUART_BUFSTS_TXFULL_Msk)>>UUART_BUFSTS_TXFULL_Pos)
N
N
N/**
N *    @brief        Check RX buffer is full or not
N *
N *    @param[in]    psUUART    The pointer of the specified USCI_UART module
N *
N *    @retval       1 RX buffer is full
N *    @retval       0 RX buffer is not full
N *
N *    @details      This macro check RX buffer is full or not.
N *
N *    \hideinitializer
N */
N#define UUART_IS_RX_FULL(psUUART)    (((psUUART)->BUFSTS & UUART_BUFSTS_RXFULL_Msk)>>UUART_BUFSTS_RXFULL_Pos)
N
N
N/**
N *    @brief        Get Tx full register value
N *
N *    @param[in]    psUUART    The pointer of the specified USCI_UART module
N *
N *    @retval       0   Tx buffer is not full.
N *    @retval       >=1 Tx buffer is full.
N *
N *    @details      This macro get Tx full register value.
N *
N *    \hideinitializer
N */
N#define UUART_GET_TX_FULL(psUUART)    ((psUUART)->BUFSTS & UUART_BUFSTS_TXFULL_Msk)
N
N
N/**
N *    @brief        Get Rx full register value
N *
N *    @param[in]    psUUART    The pointer of the specified USCI_UART module
N *
N *    @retval       0   Rx buffer is not full.
N *    @retval       >=1 Rx buffer is full.
N *
N *    @details      This macro get Rx full register value.
N *
N *    \hideinitializer
N */
N#define UUART_GET_RX_FULL(psUUART)    ((psUUART)->BUFSTS & UUART_BUFSTS_RXFULL_Msk)
N
N
N/**
N *    @brief        Enable specified USCI_UART protocol interrupt
N *
N *    @param[in]    psUUART      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_PROTIEN_RLSIEN_Msk   : Rx Line status interrupt
N *                             - \ref UUART_PROTIEN_ABRIEN_Msk   : Auto-baud rate interrupt
N *
N *    @return       None
N *
N *    @details      This macro enable specified USCI_UART protocol interrupt.
N *
N *    \hideinitializer
N */
N#define UUART_ENABLE_PROT_INT(psUUART, u32IntSel)    ((psUUART)->PROTIEN |= (u32IntSel))
N
N
N/**
N *    @brief        Disable specified USCI_UART protocol interrupt
N *
N *    @param[in]    psUUART      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_PROTIEN_RLSIEN_Msk   : Rx Line status interrupt
N *                             - \ref UUART_PROTIEN_ABRIEN_Msk   : Auto-baud rate interrupt
N *
N *    @return       None
N *
N *    @details      This macro disable specified USCI_UART protocol interrupt.
N *
N *    \hideinitializer
N */
N#define UUART_DISABLE_PROT_INT(psUUART, u32IntSel)    ((psUUART)->PROTIEN &= ~(u32IntSel))
N
N
N/**
N *    @brief        Enable specified USCI_UART buffer interrupt
N *
N *    @param[in]    psUUART      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_BUFCTL_RXOVIEN_Msk     : Receive buffer overrun error interrupt
N *
N *    @return       None
N *
N *    @details      This macro enable specified USCI_UART buffer interrupt.
N *
N *    \hideinitializer
N */
N#define UUART_ENABLE_BUF_INT(psUUART, u32IntSel)    ((psUUART)->BUFCTL |= (u32IntSel))
N
N
N/**
N *    @brief        Disable specified USCI_UART buffer interrupt
N *
N *    @param[in]    psUUART      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_BUFCTL_RXOVIEN_Msk     : Receive buffer overrun error interrupt
N *
N *    @return       None
N *
N *    @details      This macro disable specified USCI_UART buffer interrupt.
N *
N *    \hideinitializer
N */
N#define UUART_DISABLE_BUF_INT(psUUART, u32IntSel)    ((psUUART)->BUFCTL &= ~ (u32IntSel))
N
N
N/**
N *    @brief        Enable specified USCI_UART transfer interrupt
N *
N *    @param[in]    psUUART      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_INTEN_RXENDIEN_Msk  : Receive end interrupt
N *                             - \ref UUART_INTEN_RXSTIEN_Msk   : Receive start interrupt
N *                             - \ref UUART_INTEN_TXENDIEN_Msk  : Transmit end interrupt
N *                             - \ref UUART_INTEN_TXSTIEN_Msk   : Transmit start interrupt
N *
N *    @return       None
N *
N *    @details      This macro enable specified USCI_UART transfer interrupt.
N *
N *    \hideinitializer
N */
N#define UUART_ENABLE_TRANS_INT(psUUART, u32IntSel)    ((psUUART)->INTEN |= (u32IntSel))
N
N
N/**
N *    @brief        Disable specified USCI_UART transfer interrupt
N *
N *    @param[in]    psUUART      The pointer of the specified USCI_UART module
N *    @param[in]    u32IntSel  Interrupt type select
N *                             - \ref UUART_INTEN_RXENDIEN_Msk  : Receive end interrupt
N *                             - \ref UUART_INTEN_RXSTIEN_Msk   : Receive start interrupt
N *                             - \ref UUART_INTEN_TXENDIEN_Msk  : Transmit end interrupt
N *                             - \ref UUART_INTEN_TXSTIEN_Msk   : Transmit start interrupt
N *
N *    @return       None
N *
N *    @details      This macro disable specified USCI_UART transfer interrupt.
N *
N *    \hideinitializer
N */
N#define UUART_DISABLE_TRANS_INT(psUUART, u32IntSel)    ((psUUART)->INTEN &= ~(u32IntSel))
N
N
N/**
N *    @brief        Get protocol interrupt flag/status
N *
N *    @param[in]    psUUART        The pointer of the specified USCI_UART module
N *
N *    @return       The interrupt flag/status of protocol status register.
N *
N *    @details      This macro get protocol status register value.
N *
N *    \hideinitializer
N */
N#define UUART_GET_PROT_STATUS(psUUART)    ((psUUART)->PROTSTS)
N
N
N/**
N *    @brief        Clear specified protocol interrupt flag
N *
N *    @param[in]    psUUART         The pointer of the specified USCI_UART module
N *    @param[in]    u32IntTypeFlag  Interrupt Type Flag, should be
N *                                  - \ref UUART_PROTSTS_ABERRSTS_Msk    : Auto-baud Rate Error Interrupt Indicator
N *                                  - \ref UUART_PROTSTS_ABRDETIF_Msk    : Auto-baud Rate Detected Interrupt Flag
N *                                  - \ref UUART_PROTSTS_BREAK_Msk       : Break Flag
N *                                  - \ref UUART_PROTSTS_FRMERR_Msk      : Framing Error Flag
N *                                  - \ref UUART_PROTSTS_PARITYERR_Msk   : Parity Error Flag
N *                                  - \ref UUART_PROTSTS_RXENDIF_Msk     : Receive End Interrupt Flag
N *                                  - \ref UUART_PROTSTS_RXSTIF_Msk      : Receive Start Interrupt Flag
N *                                  - \ref UUART_PROTSTS_TXENDIF_Msk     : Transmit End Interrupt Flag
N *                                  - \ref UUART_PROTSTS_TXSTIF_Msk      : Transmit Start Interrupt Flag
N *
N *    @return       None
N *
N *    @details      This macro clear specified protocol interrupt flag.
N *
N *    \hideinitializer
N */
N#define UUART_CLR_PROT_INT_FLAG(psUUART,u32IntTypeFlag)    ((psUUART)->PROTSTS = (u32IntTypeFlag))
N
N
N/**
N *    @brief        Get transmit/receive buffer interrupt flag/status
N *
N *    @param[in]    psUUART        The pointer of the specified USCI_UART module
N *
N *    @return       The interrupt flag/status of buffer status register.
N *
N *    @details      This macro get buffer status register value.
N *
N *    \hideinitializer
N */
N#define UUART_GET_BUF_STATUS(psUUART)    ((psUUART)->BUFSTS)
N
N
N/**
N *    @brief        Clear specified buffer interrupt flag
N *
N *    @param[in]    psUUART         The pointer of the specified USCI_UART module
N *    @param[in]    u32IntTypeFlag  Interrupt Type Flag, should be
N *                                  - \ref UUART_BUFSTS_RXOVIF_Msk : Receive Buffer Over-run Error  Interrupt Indicator
N *
N *    @return       None
N *
N *    @details      This macro clear specified buffer interrupt flag.
N *
N *    \hideinitializer
N */
N#define UUART_CLR_BUF_INT_FLAG(psUUART,u32IntTypeFlag)    ((psUUART)->BUFSTS = (u32IntTypeFlag))
N
N
N/**
N *    @brief        Get wakeup flag
N *
N *    @param[in]    psUUART The pointer of the specified USCI_UART module
N *
N *    @retval       0       Chip did not wake up from power-down mode.
N *    @retval       1       Chip waked up from power-down mode.
N *
N *    @details      This macro get wakeup flag.
N *
N *    \hideinitializer
N */
N#define UUART_GET_WAKEUP_FLAG(psUUART)    ((psUUART)->WKSTS & UUART_WKSTS_WKF_Msk ? 1: 0 )
N
N
N/**
N *    @brief        Clear wakeup flag
N *
N *    @param[in]    psUUART        The pointer of the specified USCI_UART module
N *
N *    @return       None
N *
N *    @details      This macro clear wakeup flag.
N *
N *    \hideinitializer
N */
N#define UUART_CLR_WAKEUP_FLAG(psUUART)    ((psUUART)->WKSTS = UUART_WKSTS_WKF_Msk)
N
N
N/**
N  *   @brief      Enable PDMA transfer.
N  *
N  *   @param[in]  psUUART    The pointer of the specified USCI_UART module.
N  *
N  *   @return     None
N  *
N  *   @details    Enable PDMA function for both transfer and receive.
N *
N *    \hideinitializer
N  */
N#define UUART_ENABLE_PDMA(psUUART) ((psUUART)->PDMACTL |= (UUART_PDMACTL_TXPDMAEN_Msk | UUART_PDMACTL_RXPDMAEN_Msk | UUART_PDMACTL_PDMAEN_Msk))
N
N
N/**
N  *   @brief      Disable PDMA transfer.
N  *
N  *   @param[in]  psUUART    The pointer of the specified USCI_UART module.
N  *
N  *   @return     None
N  *
N  *   @details    Disable PDMA function for both transfer and receive.
N *
N *    \hideinitializer
N  */
N#define UUART_DISABLE_PDMA(psUUART) ((psUUART)->PDMACTL &= ~(UUART_PDMACTL_TXPDMAEN_Msk | UUART_PDMACTL_RXPDMAEN_Msk | UUART_PDMACTL_PDMAEN_Msk))
N
N
Nvoid UUART_ClearIntFlag(UUART_T *psUUART, uint32_t u32Mask);
Nuint32_t UUART_GetIntFlag(UUART_T *psUUART, uint32_t u32Mask);
Nvoid UUART_Close(UUART_T *psUUART);
Nvoid UUART_DisableInt(UUART_T  *psUUART, uint32_t u32Mask);
Nvoid UUART_EnableInt(UUART_T  *psUUART, uint32_t u32Mask);
Nuint32_t UUART_Open(UUART_T *psUUART, uint32_t u32Baudrate);
Nuint32_t UUART_Read(UUART_T *psUUART, uint8_t *pu8RxBuf, uint32_t u32ReadBytes);
Nuint32_t UUART_SetLine_Config(UUART_T *psUUART, uint32_t u32Baudrate, uint32_t u32DataWidth, uint32_t u32Parity, uint32_t u32StopBits);
Nuint32_t UUART_Write(UUART_T *psUUART, uint8_t *pu8TxBuf, uint32_t u32WriteBytes);
Nvoid UUART_EnableWakeup(UUART_T *psUUART, uint32_t u32WakeupMode);
Nvoid UUART_DisableWakeup(UUART_T *psUUART);
Nvoid UUART_EnableFlowCtrl(UUART_T *psUUART);
Nvoid UUART_DisableFlowCtrl(UUART_T *psUUART);
N
N
N/*@}*/ /* end of group UUART_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group UUART_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__USCI_UART_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 390 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "wdt.h"
L 1 "..\..\..\..\Library\StdDriver\inc\wdt.h" 1
N/**************************************************************************//**
N * @file     wdt.h
N * @version  V3.00
N * @brief    NUC121 series WDT driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __WDT_H__
N#define __WDT_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup WDT_Driver WDT Driver
N  @{
N*/
N
N/** @addtogroup WDT_EXPORTED_CONSTANTS WDT Exported Constants
N  @{
N*/
N/*---------------------------------------------------------------------------------------------------------*/
N/*  WDT Time-out Interval Period Constant Definitions                                                      */
N/*---------------------------------------------------------------------------------------------------------*/
N#define WDT_TIMEOUT_2POW4           (0UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^4 * WDT clocks */
N#define WDT_TIMEOUT_2POW6           (1UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^6 * WDT clocks */
N#define WDT_TIMEOUT_2POW8           (2UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^8 * WDT clocks */
N#define WDT_TIMEOUT_2POW10          (3UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^10 * WDT clocks */
N#define WDT_TIMEOUT_2POW12          (4UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^12 * WDT clocks */
N#define WDT_TIMEOUT_2POW14          (5UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^14 * WDT clocks */
N#define WDT_TIMEOUT_2POW16          (6UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^16 * WDT clocks */
N#define WDT_TIMEOUT_2POW18          (7UL << WDT_CTL_TOUTSEL_Pos) /*!< Setting WDT time-out interval to 2^18 * WDT clocks */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  WDT  Reset Delay Period Constant Definitions                                                           */
N/*---------------------------------------------------------------------------------------------------------*/
N#define WDT_RESET_DELAY_1026CLK     (0UL << WDT_ALTCTL_RSTDSEL_Pos) /*!< Setting WDT reset delay period to 1026 * WDT clocks */
N#define WDT_RESET_DELAY_130CLK      (1UL << WDT_ALTCTL_RSTDSEL_Pos) /*!< Setting WDT reset delay period to 130 * WDT clocks */
N#define WDT_RESET_DELAY_18CLK       (2UL << WDT_ALTCTL_RSTDSEL_Pos) /*!< Setting WDT reset delay period to 18 * WDT clocks */
N#define WDT_RESET_DELAY_3CLK        (3UL << WDT_ALTCTL_RSTDSEL_Pos) /*!< Setting WDT reset delay period to 3 * WDT clocks */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  WDT Free Reset Counter Keyword Constant Definitions                                                    */
N/*---------------------------------------------------------------------------------------------------------*/
N#define WDT_FREE_RESET_COUNTER_KEY (0x00005AA5)                 /*!< Fill this value to WDT_RSTCNT register to free reset WDT counter */
N
N/*@}*/ /* end of group WDT_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup WDT_EXPORTED_FUNCTIONS WDT Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Clear WDT Reset System Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro clears WDT time-out reset system flag.
N  *
N  * \hideinitializer
N  */
N#define WDT_CLEAR_RESET_FLAG()          (WDT->CTL = (WDT->CTL & ~(WDT_CTL_IF_Msk | WDT_CTL_WKF_Msk)) | WDT_CTL_RSTF_Msk)
N
N/**
N  * @brief      Clear WDT Time-out Interrupt Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro clears WDT time-out interrupt flag.
N  *
N  * \hideinitializer
N  */
N#define WDT_CLEAR_TIMEOUT_INT_FLAG()    (WDT->CTL = (WDT->CTL & ~(WDT_CTL_RSTF_Msk | WDT_CTL_WKF_Msk)) | WDT_CTL_IF_Msk)
N
N/**
N  * @brief      Clear WDT Wake-up Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro clears WDT time-out wake-up system flag.
N  *
N  * \hideinitializer
N  */
N#define WDT_CLEAR_TIMEOUT_WAKEUP_FLAG() (WDT->CTL = (WDT->CTL & ~(WDT_CTL_RSTF_Msk | WDT_CTL_IF_Msk)) | WDT_CTL_WKF_Msk)
N
N/**
N  * @brief      Get WDT Time-out Reset Flag
N  *
N  * @param      None
N  *
N  * @retval     0   WDT time-out reset system did not occur
N  * @retval     1   WDT time-out reset system occurred
N  *
N  * @details    This macro indicates system has been reset by WDT time-out reset or not.
N  *
N  * \hideinitializer
N  */
N#define WDT_GET_RESET_FLAG()            ((WDT->CTL & WDT_CTL_RSTF_Msk)? 1 : 0)
N
N/**
N  * @brief      Get WDT Time-out Interrupt Flag
N  *
N  * @param      None
N  *
N  * @retval     0   WDT time-out interrupt did not occur
N  * @retval     1   WDT time-out interrupt occurred
N  *
N  * @details    This macro indicates WDT time-out interrupt occurred or not.
N  *
N  * \hideinitializer
N  */
N#define WDT_GET_TIMEOUT_INT_FLAG()      ((WDT->CTL & WDT_CTL_IF_Msk)? 1 : 0)
N
N/**
N  * @brief      Get WDT Time-out Wake-up Flag
N  *
N  * @param      None
N  *
N  * @retval     0   WDT time-out interrupt does not cause CPU wake-up
N  * @retval     1   WDT time-out interrupt event cause CPU wake-up
N  *
N  * @details    This macro indicates WDT time-out interrupt event has waked up system or not.
N  *
N  * \hideinitializer
N  */
N#define WDT_GET_TIMEOUT_WAKEUP_FLAG()   ((WDT->CTL & WDT_CTL_WKF_Msk)? 1 : 0)
N
N/**
N  * @brief      Reset WDT Counter
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to reset the internal 18-bit WDT up counter value.
N  * @note       If WDT is activated and time-out reset system function is enabled also, user should \n
N  *             reset the 18-bit WDT up counter value to avoid generate WDT time-out reset signal to \n
N  *             reset system before the WDT time-out reset delay period expires.
N  *
N  * \hideinitializer
N  */
N#define WDT_RESET_COUNTER()             (WDT->RSTCNT = WDT_FREE_RESET_COUNTER_KEY)
N
N/**
N  * @brief      Stop WDT Counting
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This function will stop WDT counting and disable WDT module.
N  */
Nstatic __INLINE void WDT_Close(void)
Xstatic __inline void WDT_Close(void)
N{
N    WDT->CTL = 0;
X    ((WDT_T *) (((uint32_t)0x40000000) + 0x04000))->CTL = 0;
N    return;
N}
N
N/**
N  * @brief      Enable WDT Time-out Interrupt
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This function will enable the WDT time-out interrupt function.
N  */
Nstatic __INLINE void WDT_EnableInt(void)
Xstatic __inline void WDT_EnableInt(void)
N{
N    WDT->CTL |= WDT_CTL_INTEN_Msk;
X    ((WDT_T *) (((uint32_t)0x40000000) + 0x04000))->CTL |= (0x1ul << (6));
N    return;
N}
N
N/**
N  * @brief      Disable WDT Time-out Interrupt
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This function will disable the WDT time-out interrupt function.
N  */
Nstatic __INLINE void WDT_DisableInt(void)
Xstatic __inline void WDT_DisableInt(void)
N{
N    // Do not touch another write 1 clear bits
N    WDT->CTL &= ~(WDT_CTL_INTEN_Msk | WDT_CTL_RSTF_Msk | WDT_CTL_IF_Msk | WDT_CTL_WKF_Msk);
X    ((WDT_T *) (((uint32_t)0x40000000) + 0x04000))->CTL &= ~((0x1ul << (6)) | (0x1ul << (2)) | (0x1ul << (3)) | (0x1ul << (5)));
N    return;
N}
N
Nvoid WDT_Open(uint32_t u32TimeoutInterval, uint32_t u32ResetDelay, uint32_t u32EnableReset, uint32_t u32EnableWakeup);
N
N/*@}*/ /* end of group WDT_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group WDT_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__WDT_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 391 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N#include "wwdt.h"
L 1 "..\..\..\..\Library\StdDriver\inc\wwdt.h" 1
N/**************************************************************************//**
N * @file     wwdt.h
N * @version  V3.00
N * @brief    NUC121 series WWDT driver header file
N *
N * @copyright (C) 2016 Nuvoton Technology Corp. All rights reserved.
N *****************************************************************************/
N#ifndef __WWDT_H__
N#define __WWDT_H__
N
N#ifdef __cplusplus
Sextern "C"
S{
N#endif
N
N
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup WWDT_Driver WWDT Driver
N  @{
N*/
N
N/** @addtogroup WWDT_EXPORTED_CONSTANTS WWDT Exported Constants
N  @{
N*/
N/*---------------------------------------------------------------------------------------------------------*/
N/*  WWDT Prescale Period Constant Definitions                                                              */
N/*---------------------------------------------------------------------------------------------------------*/
N#define WWDT_PRESCALER_1        (0 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 1 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_2        (1 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 2 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_4        (2 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 4 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_8        (3 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 8 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_16       (4 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 16 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_32       (5 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 32 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_64       (6 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 64 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_128      (7 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 128 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_192      (8 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 192 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_256      (9 << WWDT_CTL_PSCSEL_Pos)  /*!< Select max time-out period to 256 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_384      (10 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 384 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_512      (11 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 512 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_768      (12 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 768 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_1024     (13 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 1024 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_1536     (14 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 1536 * (64*WWDT_CLK) */
N#define WWDT_PRESCALER_2048     (15 << WWDT_CTL_PSCSEL_Pos) /*!< Select max time-out period to 2048 * (64*WWDT_CLK) */
N
N/*---------------------------------------------------------------------------------------------------------*/
N/*  WWDT Reload Counter Keyword Constant Definitions                                                       */
N/*---------------------------------------------------------------------------------------------------------*/
N#define WWDT_RELOAD_WORD        (0x00005AA5)                /*!< Fill this value to WWDT_RLDCNT register to reload WWDT counter */
N
N/*@}*/ /* end of group WWDT_EXPORTED_CONSTANTS */
N
N
N/** @addtogroup WWDT_EXPORTED_FUNCTIONS WWDT Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Clear WWDT Reset System Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to clear WWDT time-out reset system flag.
N  *
N  * \hideinitializer
N  */
N#define WWDT_CLEAR_RESET_FLAG()     (WWDT->STATUS = WWDT_STATUS_WWDTRF_Msk)
N
N/**
N  * @brief      Clear WWDT Compared Match Interrupt Flag
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to clear WWDT compared match interrupt flag.
N  *
N  * \hideinitializer
N  */
N#define WWDT_CLEAR_INT_FLAG()       (WWDT->STATUS = WWDT_STATUS_WWDTIF_Msk)
N
N/**
N  * @brief      Get WWDT Reset System Flag
N  *
N  * @param      None
N  *
N  * @retval     0   WWDT time-out reset system did not occur
N  * @retval     1   WWDT time-out reset system occurred
N  *
N  * @details    This macro is used to indicate system has been reset by WWDT time-out reset or not.
N  *
N  * \hideinitializer
N  */
N#define WWDT_GET_RESET_FLAG()       ((WWDT->STATUS & WWDT_STATUS_WWDTRF_Msk)? 1 : 0)
N
N/**
N  * @brief      Get WWDT Compared Match Interrupt Flag
N  *
N  * @param      None
N  *
N  * @retval     0   WWDT compare match interrupt did not occur
N  * @retval     1   WWDT compare match interrupt occurred
N  *
N  * @details    This macro is used to indicate WWDT counter value matches CMPDAT value or not.
N  *
N  * \hideinitializer
N  */
N#define WWDT_GET_INT_FLAG()         ((WWDT->STATUS & WWDT_STATUS_WWDTIF_Msk)? 1 : 0)
N
N/**
N  * @brief      Get WWDT Counter
N  *
N  * @param      None
N  *
N  * @return     WWDT Counter Value
N  *
N  * @details    This macro reflects the current WWDT counter value.
N  *
N  * \hideinitializer
N  */
N#define WWDT_GET_COUNTER()          (WWDT->CNT)
N
N/**
N  * @brief      Reload WWDT Counter
N  *
N  * @param      None
N  *
N  * @return     None
N  *
N  * @details    This macro is used to reload the WWDT counter value to 0x3F.
N  * @note       User can only write WWDT_RLDCNT register to reload WWDT counter value when current WWDT counter value \n
N  *             between 0 and CMPDAT value. If user writes WWDT_RLDCNT when current WWDT counter value is larger than CMPDAT, \n
N  *             WWDT reset signal will generate immediately to reset system.
N  *
N  * \hideinitializer
N  */
N#define WWDT_RELOAD_COUNTER()       (WWDT->RLDCNT = WWDT_RELOAD_WORD)
N
Nvoid WWDT_Open(uint32_t u32PreScale, uint32_t u32CmpValue, uint32_t u32EnableInt);
N
N/*@}*/ /* end of group WWDT_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group WWDT_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif //__WWDT_H__
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
L 392 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NUC121.h" 2
N
N#endif /*__NUC121_H__*/
L 12 "..\..\..\..\Library\Device\Nuvoton\NUC121\Include\NuMicro.h" 2
N
N#endif  /* __NUMICRO_H__ */
N
N/*** (C) COPYRIGHT 2018 Nuvoton Technology Corp. ***/
L 9 "..\..\..\..\Library\StdDriver\src\clk.c" 2
N/** @addtogroup Standard_Driver Standard Driver
N  @{
N*/
N
N/** @addtogroup CLK_Driver CLK Driver
N  @{
N*/
N
N
N/** @addtogroup CLK_EXPORTED_FUNCTIONS CLK Exported Functions
N  @{
N*/
N
N/**
N  * @brief      Disable frequency output function
N  * @param      None
N  * @return     None
N  * @details    This function disable frequency output function.
N  */
Nvoid CLK_DisableCKO(void)
N{
N    /* Disable CKO clock source */
N    CLK->APBCLK0 &= (~CLK_APBCLK0_CLKOCKEN_Msk);
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->APBCLK0 &= (~(0x1ul << (6)));
N}
N
N/**
N  * @brief      This function enable frequency divider module clock.
N  *             enable frequency divider clock function and configure frequency divider.
N  * @param[in]  u32ClkSrc is frequency divider function clock source. Including :
N  *             - \ref CLK_CLKSEL2_CLKOSEL_HXT
N  *             - \ref CLK_CLKSEL2_CLKOSEL_LXT
N  *             - \ref CLK_CLKSEL2_CLKOSEL_HCLK
N  *             - \ref CLK_CLKSEL2_CLKOSEL_HIRC_DIV2
N  *             - \ref CLK_CLKSEL2_CLKOSEL_HIRC
N  *             - \ref CLK_CLKSEL2_CLKOSEL_SOF
N  * @param[in]  u32ClkDiv is divider output frequency selection.
N  * @param[in]  u32ClkDivBy1En is frequency divided by one enable.
N  * @return     None
N  *
N  * @details    Output selected clock to CKO. The output clock frequency is divided by u32ClkDiv.
N  *             The formula is:
N  *                 CKO frequency = (Clock source frequency) / 2^(u32ClkDiv + 1)
N  *             This function is just used to set CKO clock.
N  *             User must enable I/O for CKO clock output pin by themselves.
N  */
Nvoid CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En)
N{
N    /* CKO = clock source / 2^(u32ClkDiv + 1) */
N    CLK->CLKOCTL = CLK_CLKOCTL_CLKOEN_Msk | u32ClkDiv | (u32ClkDivBy1En << CLK_CLKOCTL_DIV1EN_Pos);
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKOCTL = (0x1ul << (4)) | u32ClkDiv | (u32ClkDivBy1En << (5));
N
N    /* Enable CKO clock source */
N    CLK->APBCLK0 |= CLK_APBCLK0_CLKOCKEN_Msk;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->APBCLK0 |= (0x1ul << (6));
N
N    /* Select CKO clock source */
N    CLK->CLKSEL2 = (CLK->CLKSEL2 & (~CLK_CLKSEL2_CLKOSEL_Msk)) | (u32ClkSrc);
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL2 = (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL2 & (~(0x7ul << (2)))) | (u32ClkSrc);
N
N}
N
N/**
N  * @brief      Enter to Power-down mode
N  * @param      None
N  * @return     None
N  * @details    This function is used to let system enter to Power-down mode. \n
N  *             The register write-protection function should be disabled before using this function.
N  */
Nvoid CLK_PowerDown(void)
N{
N    uint32_t u32HIRCTRIMCTL;
N
N    /* Set the processor uses deep sleep as its low power mode */
N    SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR |= (1UL << 2U);
N
N    /* Set system Power-down enabled */
N    CLK->PWRCTL |= (CLK_PWRCTL_PDEN_Msk);
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL |= ((0x1ul << (7)));
N
N    /* Store HIRC control register */
N    u32HIRCTRIMCTL = SYS->IRCTCTL;
X    u32HIRCTRIMCTL = ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->IRCTCTL;
N
N    /* Disable HIRC auto trim */
N    SYS->IRCTCTL &= (~SYS_IRCTCTL_FREQSEL_Msk);
X    ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->IRCTCTL &= (~(0x3ul << (0)));
N
N    /* Chip enter Power-down mode after CPU run WFI instruction */
N    __WFI();
X    __wfi();
N
N    /* Restore HIRC control register */
N    SYS->IRCTCTL = u32HIRCTRIMCTL;
X    ((SYS_T *) (((uint32_t)0x50000000) + 0x00000))->IRCTCTL = u32HIRCTRIMCTL;
N}
N
N/**
N  * @brief      Enter to Idle mode
N  * @param      None
N  * @return     None
N  * @details    This function let system enter to Idle mode. \n
N  *             The register write-protection function should be disabled before using this function.
N  */
Nvoid CLK_Idle(void)
N{
N    /* Set the processor uses sleep as its low power mode */
N    SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
X    ((SCB_Type *) ((0xE000E000UL) + 0x0D00UL) )->SCR &= ~(1UL << 2U);
N
N    /* Set chip in idle mode because of WFI command */
N    CLK->PWRCTL &= ~CLK_PWRCTL_PDEN_Msk;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL &= ~(0x1ul << (7));
N
N    /* Chip enter idle mode after CPU run WFI instruction */
N    __WFI();
X    __wfi();
N}
N
N/**
N  * @brief      Get external high speed crystal clock frequency
N  * @param      None
N  * @return     External high frequency crystal frequency
N  * @details    This function get external high frequency crystal frequency. The frequency unit is Hz.
N  */
Nuint32_t CLK_GetHXTFreq(void)
N{
N    if (CLK->PWRCTL & CLK_PWRCTL_HXTEN)
X    if (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL & (0x01UL<<(0)))
N        return __HXT;
X        return (12000000UL);
N    else
N        return 0;
N}
N
N/**
N  * @brief      Get external low speed crystal clock frequency
N  * @param      None
N  * @return     External low speed crystal clock frequency
N  * @details    This function get external low frequency crystal frequency. The frequency unit is Hz.
N  */
Nuint32_t CLK_GetLXTFreq(void)
N{
N    if (CLK->PWRCTL & CLK_PWRCTL_LXTEN)
X    if (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL & (0x02UL<<(0)))
N        return __LXT;
X        return (32768UL);
N    else
N        return 0;
N}
N
N
N/**
N  * @brief      Get HCLK frequency
N  * @param      None
N  * @return     HCLK frequency
N  * @details    This function get HCLK frequency. The frequency unit is Hz.
N  */
Nuint32_t CLK_GetHCLKFreq(void)
N{
N    SystemCoreClockUpdate();
N    return SystemCoreClock;
N}
N
N/**
N  * @brief      Get PCLK0 frequency
N  * @param      None
N  * @return     PCLK0 frequency
N  * @details    This function get PCLK0 frequency. The frequency unit is Hz.
N  */
Nuint32_t CLK_GetPCLK0Freq(void)
N{
N    SystemCoreClockUpdate();
N
N    if (CLK->CLKSEL0 & CLK_CLKSEL0_PCLK0SEL_Msk)
X    if (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 & (0x1ul << (6)))
N        return SystemCoreClock >> 1;
N    else
N        return SystemCoreClock;
N}
N
N/**
N  * @brief      Get PCLK1 frequency
N  * @param      None
N  * @return     PCLK1 frequency
N  * @details    This function get PCLK1 frequency. The frequency unit is Hz.
N  */
Nuint32_t CLK_GetPCLK1Freq(void)
N{
N    SystemCoreClockUpdate();
N
N    if (CLK->CLKSEL0 & CLK_CLKSEL0_PCLK1SEL_Msk)
X    if (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 & (0x1ul << (7)))
N        return SystemCoreClock >> 1;
N    else
N        return SystemCoreClock;
N}
N
N/**
N  * @brief      Get CPU frequency
N  * @param      None
N  * @return     CPU frequency
N  * @details    This function get CPU frequency. The frequency unit is Hz.
N  */
Nuint32_t CLK_GetCPUFreq(void)
N{
N    SystemCoreClockUpdate();
N    return SystemCoreClock;
N}
N
N/**
N  * @brief      Set HCLK frequency
N  * @param[in]  u32Hclk is HCLK frequency. The range of u32Hclk is 25 MHz ~ 50 MHz.
N  * @return     HCLK frequency
N  * @details    This function is used to set HCLK frequency. The frequency unit is Hz. \n
N  *             It would configure PLL frequency to 50MHz ~ 100MHz,
N  *             set HCLK clock divider as 2 and switch HCLK clock source to PLL. \n
N  *             The register write-protection function should be disabled before using this function.
N  */
Nuint32_t CLK_SetCoreClock(uint32_t u32Hclk)
N{
N    uint32_t u32HIRCSTB;
N
N    /* Read HIRC clock source stable flag */
N    u32HIRCSTB = CLK->STATUS & CLK_STATUS_HIRCSTB_Msk;
X    u32HIRCSTB = ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->STATUS & (0x1ul << (4));
N
N    /* The range of u32Hclk is 25 MHz ~ 50 MHz */
N    if (u32Hclk > FREQ_50MHZ)
X    if (u32Hclk > 50000000)
N        u32Hclk = FREQ_50MHZ;
X        u32Hclk = 50000000;
N
N    if (u32Hclk < FREQ_25MHZ)
X    if (u32Hclk < 25000000)
N        u32Hclk = FREQ_25MHZ;
X        u32Hclk = 25000000;
N
N    /* Switch HCLK clock source to HIRC clock for safe */
N    CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL |= (0x1ul << (2));
N    CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
X    CLK_WaitClockReady((0x1ul << (4)));
N    CLK->CLKSEL0 |= CLK_CLKSEL0_HCLKSEL_Msk;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 |= (0x7ul << (0));
N    CLK->CLKDIV0 &= (~CLK_CLKDIV0_HCLKDIV_Msk);
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKDIV0 &= (~(0xful << (0)));
N
N    /* Configure PLL setting if HXT clock is stable */
N    if (CLK->STATUS & CLK_STATUS_HXTSTB_Msk)
X    if (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->STATUS & (0x1ul << (0)))
N        u32Hclk = CLK_EnablePLL(CLK_PLLCTL_PLLSRC_HXT, (u32Hclk << 1));
X        u32Hclk = CLK_EnablePLL(0x00000000UL, (u32Hclk << 1));
N
N    /* Configure PLL setting if HXT clock is not stable */
N    else
N    {
N        u32Hclk = CLK_EnablePLL(CLK_PLLCTL_PLLSRC_HIRC_DIV2, (u32Hclk << 1));
X        u32Hclk = CLK_EnablePLL(0x00880000UL, (u32Hclk << 1));
N
N        /* Read HIRC clock source stable flag */
N        u32HIRCSTB = CLK->STATUS & CLK_STATUS_HIRCSTB_Msk;
X        u32HIRCSTB = ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->STATUS & (0x1ul << (4));
N    }
N
N    /* Select HCLK clock source to PLL,
N       Select HCLK clock source divider as 2
N       and update system core clock
N    */
N    CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_PLL, CLK_CLKDIV0_HCLK(2));
X    CLK_SetHCLK((0x02UL<<(0)), (((2)-1) << (0)));
N
N    /* Disable HIRC if HIRC is disabled before setting core clock */
N    if (u32HIRCSTB == 0)
N        CLK->PWRCTL &= ~CLK_PWRCTL_HIRCEN_Msk;
X        ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL &= ~(0x1ul << (2));
N
N    /* Return actually HCLK frequency is PLL frequency divide 2 */
N    return u32Hclk >> 1;
N}
N
N/**
N  * @brief      Set HCLK clock source and HCLK clock divider
N  * @param[in]  u32ClkSrc is HCLK clock source. Including :
N  *             - \ref CLK_CLKSEL0_HCLKSEL_HXT
N  *             - \ref CLK_CLKSEL0_HCLKSEL_LXT
N  *             - \ref CLK_CLKSEL0_HCLKSEL_PLL
N  *             - \ref CLK_CLKSEL0_HCLKSEL_LIRC
N  *             - \ref CLK_CLKSEL0_HCLKSEL_HIRC
N  *             - \ref CLK_CLKSEL0_HCLKSEL_PLL_DIV2
N  *             - \ref CLK_CLKSEL0_HCLKSEL_HIRC_DIV2
N  * @param[in]  u32ClkDiv is HCLK clock divider. Including :
N  *             - \ref CLK_CLKDIV0_HCLK(x)
N  * @return     None
N  * @details    This function set HCLK clock source and HCLK clock divider.
N  *             The register write-protection function should be disabled before using this function.
N  */
Nvoid CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv)
N{
N    uint32_t u32HIRCSTB;
N
N    /* Read HIRC clock source stable flag */
N    u32HIRCSTB = CLK->STATUS & CLK_STATUS_HIRCSTB_Msk;
X    u32HIRCSTB = ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->STATUS & (0x1ul << (4));
N
N    /* Switch to HIRC for Safe. Avoid HCLK too high when applying new divider. */
N    CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL |= (0x1ul << (2));
N    CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
X    CLK_WaitClockReady((0x1ul << (4)));
N    CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLKSEL_Msk)) | CLK_CLKSEL0_HCLKSEL_HIRC;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 = (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 & (~(0x7ul << (0)))) | (0x04UL<<(0));
N
N    /* Apply new Divider */
N    CLK->CLKDIV0 = (CLK->CLKDIV0 & (~CLK_CLKDIV0_HCLKDIV_Msk)) | u32ClkDiv;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKDIV0 = (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKDIV0 & (~(0xful << (0)))) | u32ClkDiv;
N
N    /* Switch HCLK to new HCLK source */
N    CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLKSEL_Msk)) | u32ClkSrc;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 = (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 & (~(0x7ul << (0)))) | u32ClkSrc;
N
N    /* Update System Core Clock */
N    SystemCoreClockUpdate();
N
N    /* Disable HIRC if HIRC is disabled before switching HCLK source */
N    if (u32HIRCSTB == 0)
N        CLK->PWRCTL &= ~CLK_PWRCTL_HIRCEN_Msk;
X        ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL &= ~(0x1ul << (2));
N}
N/**
N  * @brief      This function set selected module clock source and module clock divider
N  * @param[in]  u32ModuleIdx is module index.
N  * @param[in]  u32ClkSrc is module clock source.
N  * @param[in]  u32ClkDiv is module clock divider.
N  * @return     None
N  * @details    Valid parameter combinations listed in following table:
N  *
N  * |Module index        |Clock source                          |Divider                 |
N  * | :----------------  | :----------------------------------- | :--------------------- |
N  * |\ref WDT_MODULE     |\ref CLK_CLKSEL1_WDTSEL_HCLK_DIV2048  | x                      |
N  * |\ref WDT_MODULE     |\ref CLK_CLKSEL1_WDTSEL_LXT           | x                      |
N  * |\ref WDT_MODULE     |\ref CLK_CLKSEL1_WDTSEL_LIRC          | x                      |
N  * |\ref ADC_MODULE     |\ref CLK_CLKSEL1_ADCSEL_HXT           |\ref CLK_CLKDIV0_ADC(x) |
N  * |\ref ADC_MODULE     |\ref CLK_CLKSEL1_ADCSEL_PLL           |\ref CLK_CLKDIV0_ADC(x) |
N  * |\ref ADC_MODULE     |\ref CLK_CLKSEL1_ADCSEL_PCLK0         |\ref CLK_CLKDIV0_ADC(x) |
N  * |\ref ADC_MODULE     |\ref CLK_CLKSEL1_ADCSEL_HIRC          |\ref CLK_CLKDIV0_ADC(x) |
N  * |\ref TMR0_MODULE    |\ref CLK_CLKSEL1_TMR0SEL_HXT          | x                      |
N  * |\ref TMR0_MODULE    |\ref CLK_CLKSEL1_TMR0SEL_LXT          | x                      |
N  * |\ref TMR0_MODULE    |\ref CLK_CLKSEL1_TMR0SEL_PCLK0        | x                      |
N  * |\ref TMR0_MODULE    |\ref CLK_CLKSEL1_TMR0SEL_EXT_TRG      | x                      |
N  * |\ref TMR0_MODULE    |\ref CLK_CLKSEL1_TMR0SEL_LIRC         | x                      |
N  * |\ref TMR0_MODULE    |\ref CLK_CLKSEL1_TMR0SEL_HIRC_DIV2    | x                      |
N  * |\ref TMR1_MODULE    |\ref CLK_CLKSEL1_TMR1SEL_HXT          | x                      |
N  * |\ref TMR1_MODULE    |\ref CLK_CLKSEL1_TMR1SEL_LXT          | x                      |
N  * |\ref TMR1_MODULE    |\ref CLK_CLKSEL1_TMR1SEL_PCLK0        | x                      |
N  * |\ref TMR1_MODULE    |\ref CLK_CLKSEL1_TMR1SEL_EXT_TRG      | x                      |
N  * |\ref TMR1_MODULE    |\ref CLK_CLKSEL1_TMR1SEL_LIRC         | x                      |
N  * |\ref TMR1_MODULE    |\ref CLK_CLKSEL1_TMR1SEL_HIRC_DIV2    | x                      |
N  * |\ref TMR2_MODULE    |\ref CLK_CLKSEL1_TMR2SEL_HXT          | x                      |
N  * |\ref TMR2_MODULE    |\ref CLK_CLKSEL1_TMR2SEL_LXT          | x                      |
N  * |\ref TMR2_MODULE    |\ref CLK_CLKSEL1_TMR2SEL_PCLK1        | x                      |
N  * |\ref TMR2_MODULE    |\ref CLK_CLKSEL1_TMR2SEL_EXT_TRG      | x                      |
N  * |\ref TMR2_MODULE    |\ref CLK_CLKSEL1_TMR2SEL_LIRC         | x                      |
N  * |\ref TMR2_MODULE    |\ref CLK_CLKSEL1_TMR2SEL_HIRC_DIV2    | x                      |
N  * |\ref TMR3_MODULE    |\ref CLK_CLKSEL1_TMR3SEL_HXT          | x                      |
N  * |\ref TMR3_MODULE    |\ref CLK_CLKSEL1_TMR3SEL_LXT          | x                      |
N  * |\ref TMR3_MODULE    |\ref CLK_CLKSEL1_TMR3SEL_PCLK1        | x                      |
N  * |\ref TMR3_MODULE    |\ref CLK_CLKSEL1_TMR3SEL_EXT_TRG      | x                      |
N  * |\ref TMR3_MODULE    |\ref CLK_CLKSEL1_TMR3SEL_LIRC         | x                      |
N  * |\ref TMR3_MODULE    |\ref CLK_CLKSEL1_TMR3SEL_HIRC_DIV2    | x                      |
N  * |\ref UART0_MODULE   |\ref CLK_CLKSEL1_UARTSEL_HXT          |\ref CLK_CLKDIV0_UART(x)|
N  * |\ref UART0_MODULE   |\ref CLK_CLKSEL1_UARTSEL_PLL          |\ref CLK_CLKDIV0_UART(x)|
N  * |\ref UART0_MODULE   |\ref CLK_CLKSEL1_UARTSEL_LXT          |\ref CLK_CLKDIV0_UART(x)|
N  * |\ref UART0_MODULE   |\ref CLK_CLKSEL1_UARTSEL_HIRC_DIV2    |\ref CLK_CLKDIV0_UART(x)|
N  * |\ref BPWM0_MODULE   |\ref CLK_CLKSEL1_BPWM0SEL_PLL         | x                      |
N  * |\ref BPWM0_MODULE   |\ref CLK_CLKSEL1_BPWM0SEL_PCLK0       | x                      |
N  * |\ref BPWM1_MODULE   |\ref CLK_CLKSEL1_BPWM1SEL_PLL         | x                      |
N  * |\ref BPWM1_MODULE   |\ref CLK_CLKSEL1_BPWM1SEL_PCLK1       | x                      |
N  * |\ref PWM0_MODULE    |\ref CLK_CLKSEL1_PWM0SEL_PLL          | x                      |
N  * |\ref PWM0_MODULE    |\ref CLK_CLKSEL1_PWM0SEL_PCLK0        | x                      |
N  * |\ref PWM1_MODULE    |\ref CLK_CLKSEL1_PWM1SEL_PLL          | x                      |
N  * |\ref PWM1_MODULE    |\ref CLK_CLKSEL1_PWM1SEL_PCLK1        | x                      |
N  * |\ref CLKO_MODULE    |\ref CLK_CLKSEL2_CLKOSEL_HXT          | x                      |
N  * |\ref CLKO_MODULE    |\ref CLK_CLKSEL2_CLKOSEL_LXT          | x                      |
N  * |\ref CLKO_MODULE    |\ref CLK_CLKSEL2_CLKOSEL_HCLK         | x                      |
N  * |\ref CLKO_MODULE    |\ref CLK_CLKSEL2_CLKOSEL_HIRC_DIV2    | x                      |
N  * |\ref CLKO_MODULE    |\ref CLK_CLKSEL2_CLKOSEL_HIRC         | x                      |
N  * |\ref CLKO_MODULE    |\ref CLK_CLKSEL2_CLKOSEL_SOF          | x                      |
N  * |\ref WWDT_MODULE    |\ref CLK_CLKSEL2_WWDTSEL_HCLK_DIV2048 | x                      |
N  * |\ref WWDT_MODULE    |\ref CLK_CLKSEL2_WWDTSEL_LIRC         | x                      |
N  * |\ref SPI0_MODULE    |\ref CLK_CLKSEL2_SPI0SEL_HXT          | x                      |
N  * |\ref SPI0_MODULE    |\ref CLK_CLKSEL2_SPI0SEL_PLL          | x                      |
N  * |\ref SPI0_MODULE    |\ref CLK_CLKSEL2_SPI0SEL_PCLK0        | x                      |
N  * |\ref SPI0_MODULE    |\ref CLK_CLKSEL2_SPI0SEL_HIRC         | x                      |
N  * |\ref USBD_MODULE    |\ref CLK_CLKSEL3_USBDSEL_HIRC         | x                      |
N  * |\ref USBD_MODULE    |\ref CLK_CLKSEL3_USBDSEL_PLL          |\ref CLK_CLKDIV0_USB(x) |
N  */
Nvoid CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv)
N{
N    uint32_t u32sel = 0, u32div = 0;
N    uint32_t u32SelTbl[] = {0x0, 0x4, 0xC, 0x24};
N    uint32_t u32DivTbl[] = {0x0};
N
N    if (MODULE_CLKDIV_Msk(u32ModuleIdx) != MODULE_NoMsk)
X    if ((((u32ModuleIdx) >>10) & 0xff) != 0x0)
N    {
N        /* Get clock divider control register address */
N        u32div = (uint32_t)&CLK->CLKDIV0 + (u32DivTbl[MODULE_CLKDIV(u32ModuleIdx)]);
X        u32div = (uint32_t)&((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKDIV0 + (u32DivTbl[(((u32ModuleIdx) >>18) & 0x3)]);
N        /* Apply new divider */
N        M32(u32div) = (M32(u32div) & (~(MODULE_CLKDIV_Msk(u32ModuleIdx) << MODULE_CLKDIV_Pos(u32ModuleIdx)))) | u32ClkDiv;
X        (*((vu32 *) (u32div))) = ((*((vu32 *) (u32div))) & (~((((u32ModuleIdx) >>10) & 0xff) << (((u32ModuleIdx) >>5 ) & 0x1f)))) | u32ClkDiv;
N    }
N
N    if (MODULE_CLKSEL_Msk(u32ModuleIdx) != MODULE_NoMsk)
X    if ((((u32ModuleIdx) >>25) & 0x7) != 0x0)
N    {
N        /* Get clock select control register address */
N        u32sel = (uint32_t)&CLK->CLKSEL0 + (u32SelTbl[MODULE_CLKSEL(u32ModuleIdx)]);
X        u32sel = (uint32_t)&((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 + (u32SelTbl[(((u32ModuleIdx) >>28) & 0x3)]);
N        /* Set new clock selection setting */
N        M32(u32sel) = (M32(u32sel) & (~(MODULE_CLKSEL_Msk(u32ModuleIdx) << MODULE_CLKSEL_Pos(u32ModuleIdx)))) | u32ClkSrc;
X        (*((vu32 *) (u32sel))) = ((*((vu32 *) (u32sel))) & (~((((u32ModuleIdx) >>25) & 0x7) << (((u32ModuleIdx) >>20) & 0x1f)))) | u32ClkSrc;
N    }
N}
N
N/**
N  * @brief      Set SysTick clock source
N  * @param[in]  u32ClkSrc is module clock source. Including:
N  *             - \ref CLK_CLKSEL0_STCLKSEL_HXT
N  *             - \ref CLK_CLKSEL0_STCLKSEL_LXT
N  *             - \ref CLK_CLKSEL0_STCLKSEL_HXT_DIV2
N  *             - \ref CLK_CLKSEL0_STCLKSEL_HCLK_DIV2
N  *             - \ref CLK_CLKSEL0_STCLKSEL_HIRC_DIV4
N  * @return     None
N  * @details    This function set SysTick clock source. \n
N  *             The register write-protection function should be disabled before using this function.
N  */
Nvoid CLK_SetSysTickClockSrc(uint32_t u32ClkSrc)
N{
N    CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLKSEL_Msk) | u32ClkSrc;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 = (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 & ~(0x7ul << (3))) | u32ClkSrc;
N}
N
N/**
N  * @brief      Enable clock source
N  * @param[in]  u32ClkMask is clock source mask. Including :
N  *             - \ref CLK_PWRCTL_HXTEN
N  *             - \ref CLK_PWRCTL_LXTEN
N  *             - \ref CLK_PWRCTL_HIRCEN
N  *             - \ref CLK_PWRCTL_LIRCEN
N  * @return     None
N  * @details    This function enable clock source. \n
N  *             The register write-protection function should be disabled before using this function.
N  *             Notice that HXT and LXT are using commmon pin,
N  *             that is the two clock(HXT, LXT) sources are mutual exclusive.
N  *             So parameters, CLK_PWRCTL_HXTEN and CLK_PWRCTL_LXTEN, can not be applied at the same time.
N  *             In other word, user should make sure that LXT is disabled if user want to enable HXT.
N  *             user should disable HXT if user want to enable LXT.
N  */
Nvoid CLK_EnableXtalRC(uint32_t u32ClkMask)
N{
N    if (((CLK->PWRCTL | u32ClkMask) & CLK_PWRCTL_XTLEN_Msk) == CLK_PWRCTL_XTLEN_Msk)
X    if (((((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL | u32ClkMask) & (0x3ul << (0))) == (0x3ul << (0)))
N        return;
N
N    CLK->PWRCTL |= u32ClkMask;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL |= u32ClkMask;
N}
N
N/**
N  * @brief      Disable clock source
N  * @param[in]  u32ClkMask is clock source mask. Including :
N  *             - \ref CLK_PWRCTL_HXTEN
N  *             - \ref CLK_PWRCTL_LXTEN
N  *             - \ref CLK_PWRCTL_HIRCEN
N  *             - \ref CLK_PWRCTL_LIRCEN
N  * @return     None
N  * @details    This function disable clock source. \n
N  *             The register write-protection function should be disabled before using this function.
N  */
Nvoid CLK_DisableXtalRC(uint32_t u32ClkMask)
N{
N    CLK->PWRCTL &= ~u32ClkMask;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL &= ~u32ClkMask;
N}
N
N/**
N  * @brief      This function enable module clock
N  * @param[in]  u32ModuleIdx is module index. Including :
N  *             - \ref ISP_MODULE
N  *             - \ref GPIOA_MODULE
N  *             - \ref GPIOB_MODULE
N  *             - \ref GPIOC_MODULE
N  *             - \ref GPIOD_MODULE
N  *             - \ref GPIOE_MODULE
N  *             - \ref GPIOF_MODULE
N  *             - \ref WDT_MODULE
N  *             - \ref WWDT_MODULE
N  *             - \ref TMR0_MODULE
N  *             - \ref TMR1_MODULE
N  *             - \ref TMR2_MODULE
N  *             - \ref TMR3_MODULE
N  *             - \ref CLKO_MODULE
N  *             - \ref I2C0_MODULE
N  *             - \ref I2C1_MODULE
N  *             - \ref SPI0_MODULE
N  *             - \ref UART0_MODULE
N  *             - \ref BPWM0_MODULE
N  *             - \ref BPWM1_MODULE
N  *             - \ref PWM0_MODULE
N  *             - \ref PWM1_MODULE
N  *             - \ref ADC_MODULE
N  *             - \ref USBD_MODULE
N  *             - \ref PDMA_MODULE
N  *             - \ref USCI0_MODULE
N  * @return     None
N  * @details    This function enable module clock.
N  */
Nvoid CLK_EnableModuleClock(uint32_t u32ModuleIdx)
N{
N    uint32_t u32ClkTbl[3] = {0x0, 0x4, 0x2C};
N
N    *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK + (u32ClkTbl[MODULE_APBCLK(u32ModuleIdx)]))  |= 1 << MODULE_IP_EN_Pos(u32ModuleIdx);
X    *(volatile uint32_t *)((uint32_t)&((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->AHBCLK + (u32ClkTbl[(((u32ModuleIdx) >>30) & 0x3)]))  |= 1 << (((u32ModuleIdx) >>0 ) & 0x1f);
N}
N
N/**
N  * @brief      This function disable module clock
N  * @param[in]  u32ModuleIdx is module index
N  *             - \ref ISP_MODULE
N  *             - \ref GPIOA_MODULE
N  *             - \ref GPIOB_MODULE
N  *             - \ref GPIOC_MODULE
N  *             - \ref GPIOD_MODULE
N  *             - \ref GPIOE_MODULE
N  *             - \ref GPIOF_MODULE
N  *             - \ref WDT_MODULE
N  *             - \ref WWDT_MODULE
N  *             - \ref TMR0_MODULE
N  *             - \ref TMR1_MODULE
N  *             - \ref TMR2_MODULE
N  *             - \ref TMR3_MODULE
N  *             - \ref CLKO_MODULE
N  *             - \ref I2C0_MODULE
N  *             - \ref I2C1_MODULE
N  *             - \ref SPI0_MODULE
N  *             - \ref UART0_MODULE
N  *             - \ref BPWM0_MODULE
N  *             - \ref BPWM1_MODULE
N  *             - \ref PWM0_MODULE
N  *             - \ref PWM1_MODULE
N  *             - \ref ADC_MODULE
N  *             - \ref USBD_MODULE
N  *             - \ref PDMA_MODULE
N  *             - \ref USCI0_MODULE
N  * @return     None
N  * @details    This function disable module clock.
N  */
Nvoid CLK_DisableModuleClock(uint32_t u32ModuleIdx)
N{
N    uint32_t u32ClkTbl[3] = {0x0, 0x4, 0x2C};
N
N    *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK + (u32ClkTbl[MODULE_APBCLK(u32ModuleIdx)]))  &= ~(1 << MODULE_IP_EN_Pos(u32ModuleIdx));
X    *(volatile uint32_t *)((uint32_t)&((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->AHBCLK + (u32ClkTbl[(((u32ModuleIdx) >>30) & 0x3)]))  &= ~(1 << (((u32ModuleIdx) >>0 ) & 0x1f));
N}
N
N
N/**
N  * @brief      Set PLL frequency
N  * @param[in]  u32PllClkSrc is PLL clock source. Including :
N  *             - \ref CLK_PLLCTL_PLLSRC_HXT
N  *             - \ref CLK_PLLCTL_PLLSRC_HIRC_DIV2
N  * @param[in]  u32PllFreq is PLL frequency.
N  * @return     PLL frequency
N  * @details    This function is used to configure PLLCTL register to set specified PLL frequency. \n
N  *             The register write-protection function should be disabled before using this function.
N  *             The PLL output is least 50MHz at least if BP(CLK_PLLCTL[17]) is not set.
N  */
Nuint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq)
N{
N    uint32_t u32PllSrcClk, u32NR, u32NF, u32NO, u32CLK_SRC;
N    uint32_t u32Tmp, u32Tmp2, u32Tmp3, u32Min, u32MinNF, u32MinNR;
N
N    /* Disable PLL first to avoid unstable when setting PLL */
N    CLK_DisablePLL();
N
N    /* PLL source clock is from HXT */
N    if (u32PllClkSrc == CLK_PLLCTL_PLLSRC_HXT)
X    if (u32PllClkSrc == 0x00000000UL)
N    {
N        /* Enable HXT clock */
N        CLK->PWRCTL = (CLK->PWRCTL & ~CLK_PWRCTL_XTLEN_Msk) | CLK_PWRCTL_HXTEN;
X        ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL = (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL & ~(0x3ul << (0))) | (0x01UL<<(0));
N
N        /* Wait for HXT clock ready */
N        CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
X        CLK_WaitClockReady((0x1ul << (0)));
N
N        /* Select PLL source clock from HXT */
N        u32CLK_SRC = CLK_PLLCTL_PLLSRC_HXT;
X        u32CLK_SRC = 0x00000000UL;
N        u32PllSrcClk = __HXT;
X        u32PllSrcClk = (12000000UL);
N
N        /* u32NR start from 2 */
N        u32NR = 2;
N    }
N
N    /* PLL source clock is from HIRC_DIV2 */
N    else
N    {
N        /* Enable HIRC_DIV2 clock */
N        CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
X        ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PWRCTL |= (0x1ul << (2));
N
N        /* Wait for HIRC clock ready */
N        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
X        CLK_WaitClockReady((0x1ul << (4)));
N
N        /* Select PLL source clock from HIRC */
N        u32CLK_SRC = CLK_PLLCTL_PLLSRC_HIRC_DIV2;
X        u32CLK_SRC = 0x00880000UL;
N        u32PllSrcClk = __HIRC_DIV2;
X        u32PllSrcClk = ((48000000UL)/2);
N
N        /* u32NR start from 4 when FIN = 24MHz to avoid calculation overflow */
N        u32NR = 4;
N    }
N
N    /* Select "NO" according to request frequency */
N    if ((u32PllFreq <= FREQ_500MHZ) && (u32PllFreq > FREQ_250MHZ))
X    if ((u32PllFreq <= 500000000) && (u32PllFreq > 250000000))
N    {
N        u32NO = 0;
N    }
N    else if ((u32PllFreq <= FREQ_250MHZ) && (u32PllFreq > FREQ_125MHZ))
X    else if ((u32PllFreq <= 250000000) && (u32PllFreq > 125000000))
N    {
N        u32NO = 1;
N        u32PllFreq = u32PllFreq << 1;
N    }
N    else if ((u32PllFreq <= FREQ_125MHZ) && (u32PllFreq >= FREQ_50MHZ))
X    else if ((u32PllFreq <= 125000000) && (u32PllFreq >= 50000000))
N    {
N        u32NO = 3;
N        u32PllFreq = u32PllFreq << 2;
N    }
N    else
N    {
N        /* Wrong frequency request. Just return default setting. */
N        goto lexit;
N    }
N
N    /* Find best solution */
N    u32Min = (uint32_t) - 1;
N    u32MinNR = 0;
N    u32MinNF = 0;
N
N    for (; u32NR <= 33; u32NR++)
N    {
N        u32Tmp = u32PllSrcClk / u32NR;
N
N        if ((u32Tmp > 1600000) && (u32Tmp < 16000000))
N        {
N            for (u32NF = 2; u32NF <= 513; u32NF++)
N            {
N                u32Tmp2 = u32Tmp * u32NF;
N
N                if ((u32Tmp2 >= 200000000) && (u32Tmp2 <= 500000000))
N                {
N                    u32Tmp3 = (u32Tmp2 > u32PllFreq) ? u32Tmp2 - u32PllFreq : u32PllFreq - u32Tmp2;
N
N                    if (u32Tmp3 < u32Min)
N                    {
N                        u32Min = u32Tmp3;
N                        u32MinNR = u32NR;
N                        u32MinNF = u32NF;
N
N                        /* Break when get good results */
N                        if (u32Min == 0)
N                            break;
N                    }
N                }
N            }
N        }
N    }
N
N    /* Enable and apply new PLL setting. */
N    CLK->PLLCTL = u32CLK_SRC | (u32NO << 14) | ((u32MinNR - 2) << 9) | (u32MinNF - 2);
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PLLCTL = u32CLK_SRC | (u32NO << 14) | ((u32MinNR - 2) << 9) | (u32MinNF - 2);
N
N    /* Wait for PLL clock stable */
N    CLK_WaitClockReady(CLK_STATUS_PLLSTB_Msk);
X    CLK_WaitClockReady((0x1ul << (2)));
N
N    /* Return actual PLL output clock frequency */
N    return u32PllSrcClk / ((u32NO + 1) * u32MinNR) * u32MinNF;
N
Nlexit:
N
N    /* Apply default PLL setting and return */
N    if (u32PllClkSrc == CLK_PLLCTL_PLLSRC_HXT)
X    if (u32PllClkSrc == 0x00000000UL)
N        CLK->PLLCTL = CLK_PLLCTL_96MHz_HXT; /* 96MHz */
X        ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PLLCTL = (0x00000000UL | (((3)-2)<<9) | ((96)-2) | 0xC000UL);  
N    else
N        CLK->PLLCTL = CLK_PLLCTL_96MHz_HIRC_DIV2; /* 96MHz */
X        ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PLLCTL = (0x00880000UL | (((3)-2)<<9) |((48)-2) | 0xC000UL);  
N
N    /* Wait for PLL clock stable */
N    CLK_WaitClockReady(CLK_STATUS_PLLSTB_Msk);
X    CLK_WaitClockReady((0x1ul << (2)));
N
N    return CLK_GetPLLClockFreq();
N
N}
N
N/**
N  * @brief      Disable PLL
N  * @param      None
N  * @return     None
N  * @details    This function set PLL in Power-down mode. \n
N  *             The register write-protection function should be disabled before using this function.
N  */
Nvoid CLK_DisablePLL(void)
N{
N    CLK->PLLCTL |= CLK_PLLCTL_PD_Msk;
X    ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->PLLCTL |= (0x1ul << (16));
N}
N
N/**
N  * @brief      This function check selected clock source status
N  * @param[in]  u32ClkMask is selected clock source. Including :
N  *             - \ref CLK_STATUS_HXTSTB_Msk
N  *             - \ref CLK_STATUS_LXTSTB_Msk
N  *             - \ref CLK_STATUS_HIRCSTB_Msk
N  *             - \ref CLK_STATUS_LIRCSTB_Msk
N  *             - \ref CLK_STATUS_PLLSTB_Msk
N  * @retval     0  clock is not stable
N  * @retval     1  clock is stable
N  * @details    To wait for clock ready by specified clock source stable flag or timeout (~300ms)
N  */
Nuint32_t CLK_WaitClockReady(uint32_t u32ClkMask)
N{
N    int32_t i32TimeOutCnt = 2160000;
N
N    while ((CLK->STATUS & u32ClkMask) != u32ClkMask)
X    while ((((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->STATUS & u32ClkMask) != u32ClkMask)
N    {
N        if (i32TimeOutCnt-- <= 0)
N            return 0;
N    }
N
N    return 1;
N}
N
N/**
N  * @brief      Enable System Tick counter
N  * @param[in]  u32ClkSrc is System Tick clock source. Including:
N  *             - \ref CLK_CLKSEL0_STCLKSEL_HXT
N  *             - \ref CLK_CLKSEL0_STCLKSEL_LXT
N  *             - \ref CLK_CLKSEL0_STCLKSEL_HXT_DIV2
N  *             - \ref CLK_CLKSEL0_STCLKSEL_HCLK_DIV2
N  *             - \ref CLK_CLKSEL0_STCLKSEL_HIRC_DIV4
N  *             - \ref CLK_CLKSEL0_STCLKSEL_HCLK
N  * @param[in]  u32Count is System Tick reload value. It could be 0~0xFFFFFF.
N  * @return     None
N  * @details    This function set System Tick clock source, reload value, enable System Tick counter and interrupt. \n
N  *             The register write-protection function should be disabled before using this function.
N  */
Nvoid CLK_EnableSysTick(uint32_t u32ClkSrc, uint32_t u32Count)
N{
N    /* Set System Tick counter disabled */
N    SysTick->CTRL = 0;
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = 0;
N
N    /* Set System Tick clock source */
N    if (u32ClkSrc == CLK_CLKSEL0_STCLKSEL_HCLK)
X    if (u32ClkSrc == (0x01UL<<2U))
N        SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
X        ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL |= (1UL << 2U);
N    else
N        CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLKSEL_Msk) | u32ClkSrc;
X        ((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 = (((CLK_T *) (((uint32_t)0x50000000) + 0x00200))->CLKSEL0 & ~(0x7ul << (3))) | u32ClkSrc;
N
N    /* Set System Tick reload value */
N    SysTick->LOAD = u32Count;
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->LOAD = u32Count;
N
N    /* Clear System Tick current value and counter flag */
N    SysTick->VAL = 0;
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->VAL = 0;
N
N    /* Set System Tick interrupt enabled and counter enabled */
N    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL |= (1UL << 1U) | (1UL );
N}
N
N/**
N  * @brief      Disable System Tick counter
N  * @param      None
N  * @return     None
N  * @details    This function disable System Tick counter.
N  */
Nvoid CLK_DisableSysTick(void)
N{
N    /* Set System Tick counter disabled */
N    SysTick->CTRL = 0;
X    ((SysTick_Type *) ((0xE000E000UL) + 0x0010UL) )->CTRL = 0;
N}
N
N
N
N
N/*@}*/ /* end of group CLK_EXPORTED_FUNCTIONS */
N
N/*@}*/ /* end of group CLK_Driver */
N
N/*@}*/ /* end of group Standard_Driver */
N
N/*** (C) COPYRIGHT 2016 Nuvoton Technology Corp. ***/
