; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\retarget.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\retarget.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC121\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\ARM\RV31\INC -IC:\Keil_v5\ARM\ARM\CMSIS\Include -IC:\Keil_v5\ARM\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=529 --omf_browse=.\obj\retarget.crf StdDriver\src\retarget.c]
                          THUMB

                          AREA ||i.GetChar||, CODE, READONLY, ALIGN=2

                  GetChar PROC
;;;500     */
;;;501    char GetChar(void)
000000  e00a              B        |L1.24|
                  |L1.2|
;;;502    {
;;;503    #ifdef DEBUG_ENABLE_SEMIHOST
;;;504    # if defined (__CC_ARM)
;;;505        int nRet;
;;;506    
;;;507        while (SH_DoCommand(0x101, 0, &nRet) != 0) {
;;;508            if (nRet != 0) {
;;;509                SH_DoCommand(0x07, 0, &nRet);
;;;510                return (char)nRet;
;;;511            }
;;;512        }
;;;513    
;;;514    # else
;;;515        int nRet;
;;;516    
;;;517        while (SH_DoCommand(0x7, 0, &nRet) != 0) {
;;;518            if (nRet != 0)
;;;519                return (char)nRet;
;;;520        }
;;;521    
;;;522    # endif
;;;523        return (0);
;;;524    #else
;;;525    
;;;526        while (1) {
;;;527            if ((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0) {
000002  4806              LDR      r0,|L1.28|
000004  6980              LDR      r0,[r0,#0x18]
000006  2101              MOVS     r1,#1
000008  0389              LSLS     r1,r1,#14
00000a  4008              ANDS     r0,r0,r1
00000c  2800              CMP      r0,#0
00000e  d103              BNE      |L1.24|
;;;528                return (DEBUG_PORT->DAT);
000010  4802              LDR      r0,|L1.28|
000012  6800              LDR      r0,[r0,#0]
000014  b2c0              UXTB     r0,r0
;;;529            }
;;;530        }
;;;531    
;;;532    #endif
;;;533    }
000016  4770              BX       lr
                  |L1.24|
000018  e7f3              B        |L1.2|
;;;534    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      0x40050000

                          AREA ||i.Hard_Fault_Handler||, CODE, READONLY, ALIGN=2

                  Hard_Fault_Handler PROC
                  ||__tagsym$$used||
;;;57      */
;;;58     void Hard_Fault_Handler(uint32_t stack[])
000000  4604              MOV      r4,r0
;;;59     {
;;;60         printf("In Hard Fault Handler\n");
000002  a004              ADR      r0,|L2.20|
000004  f7fffffe          BL       __2printf
;;;61     
;;;62         stackDump(stack);
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       stackDump
;;;63     
;;;64         // Replace while(1) with chip reset if WDT is not enabled for end product
;;;65         while (1);
00000e  bf00              NOP      
                  |L2.16|
000010  e7fe              B        |L2.16|
;;;66     
;;;67         //SYS->IPRSTC1 = SYS_IPRSTC1_CHIP_RST_Msk;
;;;68     }
;;;69     
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
000014  496e2048          DCB      "In Hard Fault Handler\n",0
000018  61726420
00001c  4661756c
000020  74204861
000024  6e646c65
000028  720a00  
00002b  00                DCB      0

                          AREA ||i.IsDebugFifoEmpty||, CODE, READONLY, ALIGN=2

                  IsDebugFifoEmpty PROC
;;;560    
;;;561    int IsDebugFifoEmpty(void)
000000  4803              LDR      r0,|L3.16|
;;;562    {
;;;563        return ((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXEMPTYF_Msk) != 0);
000002  6980              LDR      r0,[r0,#0x18]
000004  2101              MOVS     r1,#1
000006  0709              LSLS     r1,r1,#28
000008  4008              ANDS     r0,r0,r1
00000a  0f00              LSRS     r0,r0,#28
;;;564    }
00000c  4770              BX       lr
;;;565    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40050000

                          AREA ||i.SendChar||, CODE, READONLY, ALIGN=1

                  SendChar PROC
;;;465     */
;;;466    void SendChar(int ch)
000000  b500              PUSH     {lr}
;;;467    {
000002  4603              MOV      r3,r0
;;;468    #if defined(DEBUG_ENABLE_SEMIHOST)
;;;469        g_buf[g_buf_len++] = ch;
;;;470        g_buf[g_buf_len] = '\0';
;;;471    
;;;472        if (g_buf_len + 1 >= sizeof(g_buf) || ch == '\n' || ch == '\0') {
;;;473            /* Send the char */
;;;474            if (SH_DoCommand(0x04, (int)g_buf, NULL) != 0) {
;;;475                g_buf_len = 0;
;;;476                return;
;;;477            } else {
;;;478                int i;
;;;479    
;;;480                for (i = 0; i < g_buf_len; i++)
;;;481                    SendChar_ToUART(g_buf[i]);
;;;482    
;;;483                g_buf_len = 0;
;;;484            }
;;;485        }
;;;486    
;;;487    #else
;;;488        SendChar_ToUART(ch);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       SendChar_ToUART
;;;489    #endif
;;;490    }
00000a  bd00              POP      {pc}
;;;491    
                          ENDP


                          AREA ||i.SendChar_ToUART||, CODE, READONLY, ALIGN=2

                  SendChar_ToUART PROC
;;;390    #ifndef NONBLOCK_PRINTF
;;;391    void SendChar_ToUART(int ch)
000000  bf00              NOP      
                  |L5.2|
;;;392    {
;;;393    
;;;394        while (DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXFULL_Msk);
000002  490b              LDR      r1,|L5.48|
000004  6989              LDR      r1,[r1,#0x18]
000006  2201              MOVS     r2,#1
000008  05d2              LSLS     r2,r2,#23
00000a  4011              ANDS     r1,r1,r2
00000c  2900              CMP      r1,#0
00000e  d1f8              BNE      |L5.2|
;;;395    
;;;396        DEBUG_PORT->DAT = ch;
000010  4907              LDR      r1,|L5.48|
000012  6008              STR      r0,[r1,#0]
;;;397    
;;;398        if (ch == '\n') {
000014  280a              CMP      r0,#0xa
000016  d10a              BNE      |L5.46|
;;;399            while (DEBUG_PORT->FIFOSTS & UART_FIFOSTS_TXFULL_Msk);
000018  bf00              NOP      
                  |L5.26|
00001a  4905              LDR      r1,|L5.48|
00001c  6989              LDR      r1,[r1,#0x18]
00001e  2201              MOVS     r2,#1
000020  05d2              LSLS     r2,r2,#23
000022  4011              ANDS     r1,r1,r2
000024  2900              CMP      r1,#0
000026  d1f8              BNE      |L5.26|
;;;400    
;;;401            DEBUG_PORT->DAT = '\r';
000028  210d              MOVS     r1,#0xd
00002a  4a01              LDR      r2,|L5.48|
00002c  6011              STR      r1,[r2,#0]
                  |L5.46|
;;;402        }
;;;403    }
00002e  4770              BX       lr
;;;404    
                          ENDP

                  |L5.48|
                          DCD      0x40050000

                          AREA ||i._ttywrch||, CODE, READONLY, ALIGN=1

                  _ttywrch PROC
;;;575    
;;;576    void _ttywrch(int ch)
000000  b510              PUSH     {r4,lr}
;;;577    {
000002  4604              MOV      r4,r0
;;;578        SendChar(ch);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       SendChar
;;;579        return;
;;;580    }
00000a  bd10              POP      {r4,pc}
;;;581    
                          ENDP


                          AREA ||i.ferror||, CODE, READONLY, ALIGN=1

                  ferror PROC
;;;638    
;;;639    int ferror(FILE *stream)
000000  4601              MOV      r1,r0
;;;640    {
;;;641        return EOF;
000002  2000              MOVS     r0,#0
000004  43c0              MVNS     r0,r0
;;;642    }
000006  4770              BX       lr
;;;643    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;618    
;;;619    int fgetc(FILE *stream)
000000  b500              PUSH     {lr}
;;;620    {
000002  4602              MOV      r2,r0
;;;621        return (GetChar());
000004  f7fffffe          BL       GetChar
;;;622    }
000008  bd00              POP      {pc}
;;;623    
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;600    
;;;601    int fputc(int ch, FILE *stream)
000000  b530              PUSH     {r4,r5,lr}
;;;602    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;603        SendChar(ch);
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       SendChar
;;;604        return ch;
00000c  4620              MOV      r0,r4
;;;605    }
00000e  bd30              POP      {r4,r5,pc}
;;;606    
                          ENDP


                          AREA ||i.kbhit||, CODE, READONLY, ALIGN=2

                  kbhit PROC
;;;545    
;;;546    int kbhit(void)
000000  4803              LDR      r0,|L10.16|
;;;547    {
;;;548        return !((DEBUG_PORT->FIFOSTS & UART_FIFOSTS_RXEMPTY_Msk) == 0);
000002  6980              LDR      r0,[r0,#0x18]
000004  2101              MOVS     r1,#1
000006  0389              LSLS     r1,r1,#14
000008  4008              ANDS     r0,r0,r1
00000a  0b80              LSRS     r0,r0,#14
;;;549    }
00000c  4770              BX       lr
;;;550    /**
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      0x40050000

                          AREA ||i.stackDump||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  stackDump PROC
;;;39      */
;;;40     static void stackDump(uint32_t stack[])
000000  b510              PUSH     {r4,lr}
;;;41     {
000002  4604              MOV      r4,r0
;;;42         printf("r0  = 0x%x\n", stack[r0]);
000004  a010              ADR      r0,|L11.72|
000006  6821              LDR      r1,[r4,#0]
000008  f7fffffe          BL       __2printf
;;;43         printf("r1  = 0x%x\n", stack[r1]);
00000c  a011              ADR      r0,|L11.84|
00000e  6861              LDR      r1,[r4,#4]
000010  f7fffffe          BL       __2printf
;;;44         printf("r2  = 0x%x\n", stack[r2]);
000014  a012              ADR      r0,|L11.96|
000016  68a1              LDR      r1,[r4,#8]
000018  f7fffffe          BL       __2printf
;;;45         printf("r3  = 0x%x\n", stack[r3]);
00001c  a013              ADR      r0,|L11.108|
00001e  68e1              LDR      r1,[r4,#0xc]
000020  f7fffffe          BL       __2printf
;;;46         printf("r12 = 0x%x\n", stack[r12]);
000024  a014              ADR      r0,|L11.120|
000026  6921              LDR      r1,[r4,#0x10]
000028  f7fffffe          BL       __2printf
;;;47         printf("lr  = 0x%x\n", stack[lr]);
00002c  a015              ADR      r0,|L11.132|
00002e  6961              LDR      r1,[r4,#0x14]
000030  f7fffffe          BL       __2printf
;;;48         printf("pc  = 0x%x\n", stack[pc]);
000034  a016              ADR      r0,|L11.144|
000036  69a1              LDR      r1,[r4,#0x18]
000038  f7fffffe          BL       __2printf
;;;49         printf("psr = 0x%x\n", stack[psr]);
00003c  a017              ADR      r0,|L11.156|
00003e  69e1              LDR      r1,[r4,#0x1c]
000040  f7fffffe          BL       __2printf
;;;50     }
000044  bd10              POP      {r4,pc}
;;;51     
                          ENDP

000046  0000              DCW      0x0000
                  |L11.72|
000048  72302020          DCB      "r0  = 0x%x\n",0
00004c  3d203078
000050  25780a00
                  |L11.84|
000054  72312020          DCB      "r1  = 0x%x\n",0
000058  3d203078
00005c  25780a00
                  |L11.96|
000060  72322020          DCB      "r2  = 0x%x\n",0
000064  3d203078
000068  25780a00
                  |L11.108|
00006c  72332020          DCB      "r3  = 0x%x\n",0
000070  3d203078
000074  25780a00
                  |L11.120|
000078  72313220          DCB      "r12 = 0x%x\n",0
00007c  3d203078
000080  25780a00
                  |L11.132|
000084  6c722020          DCB      "lr  = 0x%x\n",0
000088  3d203078
00008c  25780a00
                  |L11.144|
000090  70632020          DCB      "pc  = 0x%x\n",0
000094  3d203078
000098  25780a00
                  |L11.156|
00009c  70737220          DCB      "psr = 0x%x\n",0
0000a0  3d203078
0000a4  25780a00

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
                  __stdin
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "StdDriver\\src\\retarget.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REV16|
#line 388 ".\\CMSIS\\cmsis_armcc.h"
|__asm___10_retarget_c_d5a1b03f____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_retarget_c_d5a1b03f____REVSH|
#line 402
|__asm___10_retarget_c_d5a1b03f____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT |HardFault_Handler|
#line 360 "StdDriver\\src\\retarget.c"
|HardFault_Handler| PROC
#line 361

 MOVS r0, #4 
 MOV r1, LR
 TST r0, r1  
 BEQ Stack_Use_MSP  
 MRS R0, PSP  
 B Get_LR_and_Branch
Stack_Use_MSP
 MRS R0, MSP  
Get_LR_and_Branch
 MOV R1, LR  
 LDR R2,= |Hard_Fault_Handler|  
 BX R2
	ENDP

;*** End   embedded assembler ***
