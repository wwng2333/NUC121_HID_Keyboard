; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usbd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\usbd.d --cpu=Cortex-M0 --apcs=interwork -O0 --diag_suppress=9931 -I.\ -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\Device\Nuvoton\NUC121\Include -I..\..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\ARM\RV31\INC -IC:\Keil_v5\ARM\ARM\CMSIS\Include -IC:\Keil_v5\ARM\ARM\INC\?ST\STM32F10x -D__MICROLIB -D__UVISION_VERSION=529 --omf_browse=.\obj\usbd.crf StdDriver\src\usbd.c]
                          THUMB

                          AREA ||i.USBD_CtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_CtrlIn PROC
;;;542      */
;;;543    void USBD_CtrlIn(void)
000000  b510              PUSH     {r4,lr}
;;;544    {
;;;545        static uint8_t u8ZeroFlag = 0;
;;;546    
;;;547        DBG_PRINTF("Ctrl In Ack. residue %d\n", g_usbd_CtrlInSize);
;;;548    
;;;549        if (g_usbd_CtrlInSize) {
000002  4832              LDR      r0,|L1.204|
000004  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlInSize
000006  2800              CMP      r0,#0
000008  d03f              BEQ      |L1.138|
;;;550            // Process remained data
;;;551            if (g_usbd_CtrlInSize > g_usbd_CtrlMaxPktSize) {
00000a  4830              LDR      r0,|L1.204|
00000c  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlInSize
00000e  4930              LDR      r1,|L1.208|
000010  6809              LDR      r1,[r1,#0]  ; g_usbd_CtrlMaxPktSize
000012  4288              CMP      r0,r1
000014  d91c              BLS      |L1.80|
;;;552                // Data size > MXPLD
;;;553                USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlMaxPktSize);
000016  492f              LDR      r1,|L1.212|
000018  6809              LDR      r1,[r1,#0]
00001a  4a2f              LDR      r2,|L1.216|
00001c  1888              ADDS     r0,r1,r2
00001e  492c              LDR      r1,|L1.208|
000020  680a              LDR      r2,[r1,#0]  ; g_usbd_CtrlMaxPktSize
000022  492e              LDR      r1,|L1.220|
000024  6809              LDR      r1,[r1,#0]  ; g_usbd_CtrlInPointer
000026  f7fffffe          BL       USBD_MemCopy
;;;554                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
00002a  4829              LDR      r0,|L1.208|
00002c  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlMaxPktSize
00002e  4929              LDR      r1,|L1.212|
000030  6048              STR      r0,[r1,#4]
;;;555                g_usbd_CtrlInPointer += g_usbd_CtrlMaxPktSize;
000032  482a              LDR      r0,|L1.220|
000034  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlInPointer
000036  4926              LDR      r1,|L1.208|
000038  6809              LDR      r1,[r1,#0]  ; g_usbd_CtrlMaxPktSize
00003a  1840              ADDS     r0,r0,r1
00003c  4927              LDR      r1,|L1.220|
00003e  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlInPointer
;;;556                g_usbd_CtrlInSize -= g_usbd_CtrlMaxPktSize;
000040  4822              LDR      r0,|L1.204|
000042  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlInSize
000044  4922              LDR      r1,|L1.208|
000046  6809              LDR      r1,[r1,#0]  ; g_usbd_CtrlMaxPktSize
000048  1a40              SUBS     r0,r0,r1
00004a  4920              LDR      r1,|L1.204|
00004c  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlInSize
00004e  e03b              B        |L1.200|
                  |L1.80|
;;;557            } else {
;;;558                // Data size <= MXPLD
;;;559                USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlInSize);
000050  4920              LDR      r1,|L1.212|
000052  6809              LDR      r1,[r1,#0]
000054  4a20              LDR      r2,|L1.216|
000056  1888              ADDS     r0,r1,r2
000058  491c              LDR      r1,|L1.204|
00005a  680a              LDR      r2,[r1,#0]  ; g_usbd_CtrlInSize
00005c  491f              LDR      r1,|L1.220|
00005e  6809              LDR      r1,[r1,#0]  ; g_usbd_CtrlInPointer
000060  f7fffffe          BL       USBD_MemCopy
;;;560                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlInSize);
000064  4819              LDR      r0,|L1.204|
000066  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlInSize
000068  491a              LDR      r1,|L1.212|
00006a  6048              STR      r0,[r1,#4]
;;;561    
;;;562                if (g_usbd_CtrlInSize == g_usbd_CtrlMaxPktSize)
00006c  4817              LDR      r0,|L1.204|
00006e  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlInSize
000070  4917              LDR      r1,|L1.208|
000072  6809              LDR      r1,[r1,#0]  ; g_usbd_CtrlMaxPktSize
000074  4288              CMP      r0,r1
000076  d102              BNE      |L1.126|
;;;563                    u8ZeroFlag = 1;
000078  2001              MOVS     r0,#1
00007a  4919              LDR      r1,|L1.224|
00007c  7008              STRB     r0,[r1,#0]
                  |L1.126|
;;;564    
;;;565                g_usbd_CtrlInPointer = 0;
00007e  2000              MOVS     r0,#0
000080  4916              LDR      r1,|L1.220|
000082  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlInPointer
;;;566                g_usbd_CtrlInSize = 0;
000084  4911              LDR      r1,|L1.204|
000086  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlInSize
000088  e01e              B        |L1.200|
                  |L1.138|
;;;567            }
;;;568        } else { // No more data for IN token
;;;569            // In ACK for Set address
;;;570            if ((g_usbd_SetupPacket[0] == REQ_STANDARD) && (g_usbd_SetupPacket[1] == SET_ADDRESS)) {
00008a  4816              LDR      r0,|L1.228|
00008c  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
00008e  2800              CMP      r0,#0
000090  d111              BNE      |L1.182|
000092  4814              LDR      r0,|L1.228|
000094  7840              LDRB     r0,[r0,#1]  ; g_usbd_SetupPacket
000096  2805              CMP      r0,#5
000098  d10d              BNE      |L1.182|
;;;571                if ((USBD_GET_ADDR() != g_usbd_UsbAddr) && (USBD_GET_ADDR() == 0)) {
00009a  4813              LDR      r0,|L1.232|
00009c  6880              LDR      r0,[r0,#8]
00009e  4913              LDR      r1,|L1.236|
0000a0  6809              LDR      r1,[r1,#0]  ; g_usbd_UsbAddr
0000a2  4288              CMP      r0,r1
0000a4  d007              BEQ      |L1.182|
0000a6  4810              LDR      r0,|L1.232|
0000a8  6880              LDR      r0,[r0,#8]
0000aa  2800              CMP      r0,#0
0000ac  d103              BNE      |L1.182|
;;;572                    USBD_SET_ADDR(g_usbd_UsbAddr);
0000ae  480f              LDR      r0,|L1.236|
0000b0  6800              LDR      r0,[r0,#0]  ; g_usbd_UsbAddr
0000b2  490d              LDR      r1,|L1.232|
0000b4  6088              STR      r0,[r1,#8]
                  |L1.182|
;;;573                }
;;;574            }
;;;575    
;;;576            /* For the case of data size is integral times maximum packet size */
;;;577            if (u8ZeroFlag) {
0000b6  480a              LDR      r0,|L1.224|
0000b8  7800              LDRB     r0,[r0,#0]  ; u8ZeroFlag
0000ba  2800              CMP      r0,#0
0000bc  d004              BEQ      |L1.200|
;;;578                USBD_SET_PAYLOAD_LEN(EP0, 0);
0000be  2000              MOVS     r0,#0
0000c0  4904              LDR      r1,|L1.212|
0000c2  6048              STR      r0,[r1,#4]
;;;579                u8ZeroFlag = 0;
0000c4  4906              LDR      r1,|L1.224|
0000c6  7008              STRB     r0,[r1,#0]
                  |L1.200|
;;;580            }
;;;581    
;;;582            DBG_PRINTF("Ctrl In done.\n");
;;;583    
;;;584        }
;;;585    }
0000c8  bd10              POP      {r4,pc}
;;;586    
                          ENDP

0000ca  0000              DCW      0x0000
                  |L1.204|
                          DCD      g_usbd_CtrlInSize
                  |L1.208|
                          DCD      g_usbd_CtrlMaxPktSize
                  |L1.212|
                          DCD      0x40060500
                  |L1.216|
                          DCD      0x40060100
                  |L1.220|
                          DCD      g_usbd_CtrlInPointer
                  |L1.224|
                          DCD      u8ZeroFlag
                  |L1.228|
                          DCD      g_usbd_SetupPacket
                  |L1.232|
                          DCD      0x40060000
                  |L1.236|
                          DCD      g_usbd_UsbAddr

                          AREA ||i.USBD_CtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_CtrlOut PROC
;;;615      */
;;;616    void USBD_CtrlOut(void)
000000  b510              PUSH     {r4,lr}
;;;617    {
;;;618        uint32_t u32Size;
;;;619    
;;;620        DBG_PRINTF("Ctrl Out Ack %d\n", g_usbd_CtrlOutSize);
;;;621    
;;;622        if (g_usbd_CtrlOutSize < g_usbd_CtrlOutSizeLimit) {
000002  4812              LDR      r0,|L2.76|
000004  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlOutSize
000006  4912              LDR      r1,|L2.80|
000008  6809              LDR      r1,[r1,#0]  ; g_usbd_CtrlOutSizeLimit
00000a  4288              CMP      r0,r1
00000c  d21d              BCS      |L2.74|
;;;623            u32Size = USBD_GET_PAYLOAD_LEN(EP1);
00000e  4811              LDR      r0,|L2.84|
000010  6944              LDR      r4,[r0,#0x14]
;;;624            USBD_MemCopy((uint8_t *)g_usbd_CtrlOutPointer, (uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP1), u32Size);
000012  6900              LDR      r0,[r0,#0x10]
000014  4a10              LDR      r2,|L2.88|
000016  1881              ADDS     r1,r0,r2
000018  4622              MOV      r2,r4
00001a  4810              LDR      r0,|L2.92|
00001c  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlOutPointer
00001e  f7fffffe          BL       USBD_MemCopy
;;;625            g_usbd_CtrlOutPointer += u32Size;
000022  480e              LDR      r0,|L2.92|
000024  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlOutPointer
000026  1900              ADDS     r0,r0,r4
000028  490c              LDR      r1,|L2.92|
00002a  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlOutPointer
;;;626            g_usbd_CtrlOutSize += u32Size;
00002c  4807              LDR      r0,|L2.76|
00002e  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlOutSize
000030  1900              ADDS     r0,r0,r4
000032  4906              LDR      r1,|L2.76|
000034  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlOutSize
;;;627    
;;;628            if (g_usbd_CtrlOutSize < g_usbd_CtrlOutSizeLimit)
000036  4608              MOV      r0,r1
000038  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlOutSize
00003a  4905              LDR      r1,|L2.80|
00003c  6809              LDR      r1,[r1,#0]  ; g_usbd_CtrlOutSizeLimit
00003e  4288              CMP      r0,r1
000040  d203              BCS      |L2.74|
;;;629                USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
000042  4807              LDR      r0,|L2.96|
000044  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlMaxPktSize
000046  4903              LDR      r1,|L2.84|
000048  6148              STR      r0,[r1,#0x14]
                  |L2.74|
;;;630    
;;;631        }
;;;632    }
00004a  bd10              POP      {r4,pc}
;;;633    
                          ENDP

                  |L2.76|
                          DCD      g_usbd_CtrlOutSize
                  |L2.80|
                          DCD      g_usbd_CtrlOutSizeLimit
                  |L2.84|
                          DCD      0x40060500
                  |L2.88|
                          DCD      0x40060100
                  |L2.92|
                          DCD      g_usbd_CtrlOutPointer
                  |L2.96|
                          DCD      g_usbd_CtrlMaxPktSize

                          AREA ||i.USBD_GetDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_GetDescriptor PROC
;;;188      */
;;;189    void USBD_GetDescriptor(void)
000000  b570              PUSH     {r4-r6,lr}
;;;190    {
;;;191        uint32_t u32Len;
;;;192    
;;;193        u32Len = 0;
000002  2400              MOVS     r4,#0
;;;194        u32Len = g_usbd_SetupPacket[7];
000004  4856              LDR      r0,|L3.352|
000006  79c4              LDRB     r4,[r0,#7]  ; g_usbd_SetupPacket
;;;195        u32Len <<= 8;
000008  0224              LSLS     r4,r4,#8
;;;196        u32Len += g_usbd_SetupPacket[6];
00000a  7980              LDRB     r0,[r0,#6]  ; g_usbd_SetupPacket
00000c  1904              ADDS     r4,r0,r4
;;;197    
;;;198        switch (g_usbd_SetupPacket[3]) {
00000e  4854              LDR      r0,|L3.352|
000010  78c0              LDRB     r0,[r0,#3]  ; g_usbd_SetupPacket
000012  2803              CMP      r0,#3
000014  d061              BEQ      |L3.218|
000016  dc04              BGT      |L3.34|
000018  2801              CMP      r0,#1
00001a  d007              BEQ      |L3.44|
00001c  2802              CMP      r0,#2
                  |L3.30|
00001e  d17d              BNE      |L3.284|
000020  e011              B        |L3.70|
                  |L3.34|
000022  2821              CMP      r0,#0x21
000024  d026              BEQ      |L3.116|
000026  2822              CMP      r0,#0x22
000028  d1f9              BNE      |L3.30|
00002a  e038              B        |L3.158|
                  |L3.44|
;;;199        // Get Device Descriptor
;;;200        case DESC_DEVICE: {
;;;201            u32Len = Minimum(u32Len, LEN_DEVICE);
00002c  2c12              CMP      r4,#0x12
00002e  d201              BCS      |L3.52|
000030  4620              MOV      r0,r4
000032  e000              B        |L3.54|
                  |L3.52|
000034  2012              MOVS     r0,#0x12
                  |L3.54|
000036  4604              MOV      r4,r0
;;;202            DBG_PRINTF("Get device desc, %d\n", u32Len);
;;;203    
;;;204            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8DevDesc, u32Len);
000038  494a              LDR      r1,|L3.356|
00003a  6809              LDR      r1,[r1,#0]  ; g_usbd_sInfo
00003c  6808              LDR      r0,[r1,#0]
00003e  4621              MOV      r1,r4
000040  f7fffffe          BL       USBD_PrepareCtrlIn
;;;205    
;;;206            break;
000044  e089              B        |L3.346|
                  |L3.70|
;;;207        }
;;;208    
;;;209        // Get Configuration Descriptor
;;;210        case DESC_CONFIG: {
;;;211            uint32_t u32TotalLen;
;;;212    
;;;213            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[3];
000046  4847              LDR      r0,|L3.356|
000048  6800              LDR      r0,[r0,#0]  ; g_usbd_sInfo
00004a  6840              LDR      r0,[r0,#4]
00004c  78c5              LDRB     r5,[r0,#3]
;;;214            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[2] + (u32TotalLen << 8);
00004e  4845              LDR      r0,|L3.356|
000050  6800              LDR      r0,[r0,#0]  ; g_usbd_sInfo
000052  6840              LDR      r0,[r0,#4]
000054  7880              LDRB     r0,[r0,#2]
000056  0229              LSLS     r1,r5,#8
000058  1845              ADDS     r5,r0,r1
;;;215    
;;;216            DBG_PRINTF("Get config desc len %d, acture len %d\n", u32Len, u32TotalLen);
;;;217            u32Len = Minimum(u32Len, u32TotalLen);
00005a  42ac              CMP      r4,r5
00005c  d201              BCS      |L3.98|
00005e  4620              MOV      r0,r4
000060  e000              B        |L3.100|
                  |L3.98|
000062  4628              MOV      r0,r5
                  |L3.100|
000064  4604              MOV      r4,r0
;;;218            DBG_PRINTF("Minimum len %d\n", u32Len);
;;;219    
;;;220            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8ConfigDesc, u32Len);
000066  493f              LDR      r1,|L3.356|
000068  6809              LDR      r1,[r1,#0]  ; g_usbd_sInfo
00006a  6848              LDR      r0,[r1,#4]
00006c  4621              MOV      r1,r4
00006e  f7fffffe          BL       USBD_PrepareCtrlIn
;;;221    
;;;222            break;
000072  e072              B        |L3.346|
                  |L3.116|
;;;223        }
;;;224    
;;;225        // Get HID Descriptor
;;;226        case DESC_HID: {
;;;227            /* CV3.0 HID Class Descriptor Test,
;;;228               Need to indicate index of the HID Descriptor within gu8ConfigDescriptor, specifically HID Composite device. */
;;;229            uint32_t u32ConfigDescOffset;   // u32ConfigDescOffset is configuration descriptor offset (HID descriptor start index)
;;;230            u32Len = Minimum(u32Len, LEN_HID);
000074  2c09              CMP      r4,#9
000076  d201              BCS      |L3.124|
000078  4620              MOV      r0,r4
00007a  e000              B        |L3.126|
                  |L3.124|
00007c  2009              MOVS     r0,#9
                  |L3.126|
00007e  4604              MOV      r4,r0
;;;231            DBG_PRINTF("Get HID desc, %d\n", u32Len);
;;;232    
;;;233            u32ConfigDescOffset = g_usbd_sInfo->gu32ConfigHidDescIdx[g_usbd_SetupPacket[4]];
000080  4838              LDR      r0,|L3.356|
000082  6800              LDR      r0,[r0,#0]  ; g_usbd_sInfo
000084  6940              LDR      r0,[r0,#0x14]
000086  4936              LDR      r1,|L3.352|
000088  7909              LDRB     r1,[r1,#4]  ; g_usbd_SetupPacket
00008a  0089              LSLS     r1,r1,#2
00008c  5845              LDR      r5,[r0,r1]
;;;234            USBD_PrepareCtrlIn((uint8_t *)&g_usbd_sInfo->gu8ConfigDesc[u32ConfigDescOffset], u32Len);
00008e  4935              LDR      r1,|L3.356|
000090  6809              LDR      r1,[r1,#0]  ; g_usbd_sInfo
000092  6849              LDR      r1,[r1,#4]
000094  1948              ADDS     r0,r1,r5
000096  4621              MOV      r1,r4
000098  f7fffffe          BL       USBD_PrepareCtrlIn
;;;235    
;;;236            break;
00009c  e05d              B        |L3.346|
                  |L3.158|
;;;237        }
;;;238    
;;;239        // Get Report Descriptor
;;;240        case DESC_HID_RPT: {
;;;241            DBG_PRINTF("Get HID report, %d\n", u32Len);
;;;242    
;;;243            u32Len = Minimum(u32Len, g_usbd_sInfo->gu32HidReportSize[g_usbd_SetupPacket[4]]);
00009e  4831              LDR      r0,|L3.356|
0000a0  6800              LDR      r0,[r0,#0]  ; g_usbd_sInfo
0000a2  6900              LDR      r0,[r0,#0x10]
0000a4  492e              LDR      r1,|L3.352|
0000a6  7909              LDRB     r1,[r1,#4]  ; g_usbd_SetupPacket
0000a8  0089              LSLS     r1,r1,#2
0000aa  5840              LDR      r0,[r0,r1]
0000ac  42a0              CMP      r0,r4
0000ae  d901              BLS      |L3.180|
0000b0  4620              MOV      r0,r4
0000b2  e006              B        |L3.194|
                  |L3.180|
0000b4  482b              LDR      r0,|L3.356|
0000b6  6800              LDR      r0,[r0,#0]  ; g_usbd_sInfo
0000b8  6900              LDR      r0,[r0,#0x10]
0000ba  4929              LDR      r1,|L3.352|
0000bc  7909              LDRB     r1,[r1,#4]  ; g_usbd_SetupPacket
0000be  0089              LSLS     r1,r1,#2
0000c0  5840              LDR      r0,[r0,r1]
                  |L3.194|
0000c2  4604              MOV      r4,r0
;;;244            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8HidReportDesc[g_usbd_SetupPacket[4]], u32Len);
0000c4  4927              LDR      r1,|L3.356|
0000c6  6809              LDR      r1,[r1,#0]  ; g_usbd_sInfo
0000c8  68c9              LDR      r1,[r1,#0xc]
0000ca  4a25              LDR      r2,|L3.352|
0000cc  7912              LDRB     r2,[r2,#4]  ; g_usbd_SetupPacket
0000ce  0092              LSLS     r2,r2,#2
0000d0  5888              LDR      r0,[r1,r2]
0000d2  4621              MOV      r1,r4
0000d4  f7fffffe          BL       USBD_PrepareCtrlIn
;;;245            break;
0000d8  e03f              B        |L3.346|
                  |L3.218|
;;;246        }
;;;247    
;;;248        // Get String Descriptor
;;;249        case DESC_STRING: {
;;;250            // Get String Descriptor
;;;251            if (g_usbd_SetupPacket[2] < 4) {
0000da  4821              LDR      r0,|L3.352|
0000dc  7880              LDRB     r0,[r0,#2]  ; g_usbd_SetupPacket
0000de  2804              CMP      r0,#4
0000e0  da21              BGE      |L3.294|
;;;252                u32Len = Minimum(u32Len, g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]][0]);
0000e2  4820              LDR      r0,|L3.356|
0000e4  6800              LDR      r0,[r0,#0]  ; g_usbd_sInfo
0000e6  6880              LDR      r0,[r0,#8]
0000e8  491d              LDR      r1,|L3.352|
0000ea  7889              LDRB     r1,[r1,#2]  ; g_usbd_SetupPacket
0000ec  0089              LSLS     r1,r1,#2
0000ee  5840              LDR      r0,[r0,r1]
0000f0  7800              LDRB     r0,[r0,#0]
0000f2  42a0              CMP      r0,r4
0000f4  d901              BLS      |L3.250|
0000f6  4620              MOV      r0,r4
0000f8  e007              B        |L3.266|
                  |L3.250|
0000fa  481a              LDR      r0,|L3.356|
0000fc  6800              LDR      r0,[r0,#0]  ; g_usbd_sInfo
0000fe  6880              LDR      r0,[r0,#8]
000100  4917              LDR      r1,|L3.352|
000102  7889              LDRB     r1,[r1,#2]  ; g_usbd_SetupPacket
000104  0089              LSLS     r1,r1,#2
000106  5840              LDR      r0,[r0,r1]
000108  7800              LDRB     r0,[r0,#0]
                  |L3.266|
00010a  4604              MOV      r4,r0
;;;253                DBG_PRINTF("Get string desc %d\n", u32Len);
;;;254    
;;;255                USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]], u32Len);
00010c  4915              LDR      r1,|L3.356|
00010e  6809              LDR      r1,[r1,#0]  ; g_usbd_sInfo
000110  6889              LDR      r1,[r1,#8]
000112  4a13              LDR      r2,|L3.352|
000114  7892              LDRB     r2,[r2,#2]  ; g_usbd_SetupPacket
000116  0092              LSLS     r2,r2,#2
000118  5888              LDR      r0,[r1,r2]
00011a  e000              B        |L3.286|
                  |L3.284|
00011c  e010              B        |L3.320|
                  |L3.286|
00011e  4621              MOV      r1,r4
000120  f7fffffe          BL       USBD_PrepareCtrlIn
;;;256    
;;;257    
;;;258                break;
000124  e019              B        |L3.346|
                  |L3.294|
;;;259            } else {
;;;260                // Not support. Reply STALL.
;;;261                USBD_SET_EP_STALL(EP0);
000126  4810              LDR      r0,|L3.360|
000128  68c0              LDR      r0,[r0,#0xc]
00012a  2102              MOVS     r1,#2
00012c  4308              ORRS     r0,r0,r1
00012e  490e              LDR      r1,|L3.360|
000130  60c8              STR      r0,[r1,#0xc]
;;;262                USBD_SET_EP_STALL(EP1);
000132  4608              MOV      r0,r1
000134  69c0              LDR      r0,[r0,#0x1c]
000136  2102              MOVS     r1,#2
000138  4308              ORRS     r0,r0,r1
00013a  490b              LDR      r1,|L3.360|
00013c  61c8              STR      r0,[r1,#0x1c]
;;;263    
;;;264                DBG_PRINTF("Unsupported string desc (%d). Stall ctrl pipe.\n", g_usbd_SetupPacket[2]);
;;;265    
;;;266                break;
00013e  e00c              B        |L3.346|
                  |L3.320|
;;;267            }
;;;268        }
;;;269    
;;;270    #ifdef SUPPORT_LPM
;;;271    
;;;272        case DESC_BOS: {
;;;273            uint32_t u32TotalLen;
;;;274    
;;;275            u32TotalLen = g_usbd_sInfo->gu8BosDesc[3];
;;;276            u32TotalLen = g_usbd_sInfo->gu8BosDesc[2] + (u32TotalLen << 8);
;;;277    
;;;278            DBG_PRINTF("Get BOS desc len %d, acture len %d\n", u32Len, u32TotalLen);
;;;279            u32Len = Minimum(u32Len, u32TotalLen);
;;;280            DBG_PRINTF("Minimum len %d\n", u32Len);
;;;281    
;;;282            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8BosDesc, u32Len);
;;;283            break;
;;;284        }
;;;285    
;;;286    #endif
;;;287    
;;;288        default:
;;;289            // Not support. Reply STALL.
;;;290            USBD_SET_EP_STALL(EP0);
000140  4809              LDR      r0,|L3.360|
000142  68c0              LDR      r0,[r0,#0xc]
000144  2102              MOVS     r1,#2
000146  4308              ORRS     r0,r0,r1
000148  4907              LDR      r1,|L3.360|
00014a  60c8              STR      r0,[r1,#0xc]
;;;291            USBD_SET_EP_STALL(EP1);
00014c  4608              MOV      r0,r1
00014e  69c0              LDR      r0,[r0,#0x1c]
000150  2102              MOVS     r1,#2
000152  4308              ORRS     r0,r0,r1
000154  4904              LDR      r1,|L3.360|
000156  61c8              STR      r0,[r1,#0x1c]
;;;292    
;;;293            DBG_PRINTF("Unsupported get desc type. stall ctrl pipe\n");
;;;294    
;;;295            break;
000158  bf00              NOP      
                  |L3.346|
00015a  bf00              NOP                            ;206
;;;296        }
;;;297    }
00015c  bd70              POP      {r4-r6,pc}
;;;298    
                          ENDP

00015e  0000              DCW      0x0000
                  |L3.352|
                          DCD      g_usbd_SetupPacket
                  |L3.356|
                          DCD      g_usbd_sInfo
                  |L3.360|
                          DCD      0x40060500

                          AREA ||i.USBD_GetSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_GetSetupPacket PROC
;;;126      */
;;;127    void USBD_GetSetupPacket(uint8_t *buf)
000000  b510              PUSH     {r4,lr}
;;;128    {
000002  4604              MOV      r4,r0
;;;129        USBD_MemCopy(buf, g_usbd_SetupPacket, 8);
000004  2208              MOVS     r2,#8
000006  4902              LDR      r1,|L4.16|
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USBD_MemCopy
;;;130    }
00000e  bd10              POP      {r4,pc}
;;;131    
                          ENDP

                  |L4.16|
                          DCD      g_usbd_SetupPacket

                          AREA ||i.USBD_LockEpStall||, CODE, READONLY, ALIGN=2

                  USBD_LockEpStall PROC
;;;703     */
;;;704    void USBD_LockEpStall(uint32_t u32EpBitmap)
000000  4901              LDR      r1,|L5.8|
;;;705    {
;;;706        g_u32EpStallLock = u32EpBitmap;
000002  6008              STR      r0,[r1,#0]  ; g_u32EpStallLock
;;;707    }
000004  4770              BX       lr
;;;708    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      g_u32EpStallLock

                          AREA ||i.USBD_MemCopy||, CODE, READONLY, ALIGN=1

                  USBD_MemCopy PROC
;;;582      */
;;;583    static __INLINE void USBD_MemCopy(uint8_t *dest, uint8_t *src, int32_t size)
000000  b510              PUSH     {r4,lr}
;;;584    {
;;;585        while (size--) *dest++ = *src++;
000002  e003              B        |L6.12|
                  |L6.4|
000004  780b              LDRB     r3,[r1,#0]
000006  7003              STRB     r3,[r0,#0]
000008  1c49              ADDS     r1,r1,#1
00000a  1c40              ADDS     r0,r0,#1
                  |L6.12|
00000c  4613              MOV      r3,r2
00000e  1e52              SUBS     r2,r2,#1
000010  2b00              CMP      r3,#0
000012  d1f7              BNE      |L6.4|
;;;586    }
000014  bd10              POP      {r4,pc}
;;;587    
                          ENDP


                          AREA ||i.USBD_Open||, CODE, READONLY, ALIGN=2

                  USBD_Open PROC
;;;74       */
;;;75     void USBD_Open(const S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface)
000000  b510              PUSH     {r4,lr}
;;;76     {
;;;77         g_usbd_sInfo = param;
000002  4b0c              LDR      r3,|L7.52|
000004  6018              STR      r0,[r3,#0]  ; g_usbd_sInfo
;;;78         g_usbd_pfnClassRequest = pfnClassReq;
000006  4b0c              LDR      r3,|L7.56|
000008  6019              STR      r1,[r3,#0]  ; g_usbd_pfnClassRequest
;;;79         g_usbd_pfnSetInterface = pfnSetInterface;
00000a  4b0c              LDR      r3,|L7.60|
00000c  601a              STR      r2,[r3,#0]  ; g_usbd_pfnSetInterface
;;;80     
;;;81         /* get EP0 maximum packet size */
;;;82         g_usbd_CtrlMaxPktSize = g_usbd_sInfo->gu8DevDesc[7];
00000e  4b09              LDR      r3,|L7.52|
000010  681b              LDR      r3,[r3,#0]  ; g_usbd_sInfo
000012  681b              LDR      r3,[r3,#0]
000014  79db              LDRB     r3,[r3,#7]
000016  4c0a              LDR      r4,|L7.64|
000018  6023              STR      r3,[r4,#0]  ; g_usbd_CtrlMaxPktSize
;;;83     
;;;84         /* Initial USB engine */
;;;85     #ifdef SUPPORT_LPM
;;;86         USBD->ATTR = 0x7D0 | USBD_LPMACK;
;;;87     #else
;;;88         USBD->ATTR = 0x7D0;
00001a  237d              MOVS     r3,#0x7d
00001c  011b              LSLS     r3,r3,#4
00001e  4c09              LDR      r4,|L7.68|
000020  6123              STR      r3,[r4,#0x10]
;;;89     #endif
;;;90     
;;;91         /* Force SE0 */
;;;92         USBD_SET_SE0();
000022  4b08              LDR      r3,|L7.68|
000024  3380              ADDS     r3,r3,#0x80
000026  691b              LDR      r3,[r3,#0x10]
000028  2401              MOVS     r4,#1
00002a  4323              ORRS     r3,r3,r4
00002c  4c05              LDR      r4,|L7.68|
00002e  3480              ADDS     r4,r4,#0x80
000030  6123              STR      r3,[r4,#0x10]
;;;93     }
000032  bd10              POP      {r4,pc}
;;;94     
                          ENDP

                  |L7.52|
                          DCD      g_usbd_sInfo
                  |L7.56|
                          DCD      g_usbd_pfnClassRequest
                  |L7.60|
                          DCD      g_usbd_pfnSetInterface
                  |L7.64|
                          DCD      g_usbd_CtrlMaxPktSize
                  |L7.68|
                          DCD      0x40060000

                          AREA ||i.USBD_PrepareCtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlIn PROC
;;;511      */
;;;512    void USBD_PrepareCtrlIn(uint8_t *pu8Buf, uint32_t u32Size)
000000  b570              PUSH     {r4-r6,lr}
;;;513    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;514        DBG_PRINTF("Prepare Ctrl In %d\n", u32Size);
;;;515    
;;;516        if (u32Size > g_usbd_CtrlMaxPktSize) {
000006  481b              LDR      r0,|L8.116|
000008  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlMaxPktSize
00000a  4284              CMP      r4,r0
00000c  d91c              BLS      |L8.72|
;;;517            // Data size > MXPLD
;;;518            g_usbd_CtrlInPointer = pu8Buf + g_usbd_CtrlMaxPktSize;
00000e  4819              LDR      r0,|L8.116|
000010  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlMaxPktSize
000012  1828              ADDS     r0,r5,r0
000014  4918              LDR      r1,|L8.120|
000016  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlInPointer
;;;519            g_usbd_CtrlInSize = u32Size - g_usbd_CtrlMaxPktSize;
000018  4816              LDR      r0,|L8.116|
00001a  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlMaxPktSize
00001c  1a20              SUBS     r0,r4,r0
00001e  4917              LDR      r1,|L8.124|
000020  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlInSize
;;;520            USBD_SET_DATA1(EP0);
000022  4817              LDR      r0,|L8.128|
000024  6880              LDR      r0,[r0,#8]
000026  2180              MOVS     r1,#0x80
000028  4308              ORRS     r0,r0,r1
00002a  4915              LDR      r1,|L8.128|
00002c  6088              STR      r0,[r1,#8]
;;;521            USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), pu8Buf, g_usbd_CtrlMaxPktSize);
00002e  6809              LDR      r1,[r1,#0]
000030  4a14              LDR      r2,|L8.132|
000032  1888              ADDS     r0,r1,r2
000034  490f              LDR      r1,|L8.116|
000036  680a              LDR      r2,[r1,#0]  ; g_usbd_CtrlMaxPktSize
000038  4629              MOV      r1,r5
00003a  f7fffffe          BL       USBD_MemCopy
;;;522            USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
00003e  480d              LDR      r0,|L8.116|
000040  6800              LDR      r0,[r0,#0]  ; g_usbd_CtrlMaxPktSize
000042  490f              LDR      r1,|L8.128|
000044  6048              STR      r0,[r1,#4]
000046  e013              B        |L8.112|
                  |L8.72|
;;;523        } else {
;;;524            // Data size <= MXPLD
;;;525            g_usbd_CtrlInPointer = 0;
000048  2000              MOVS     r0,#0
00004a  490b              LDR      r1,|L8.120|
00004c  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlInPointer
;;;526            g_usbd_CtrlInSize = 0;
00004e  490b              LDR      r1,|L8.124|
000050  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlInSize
;;;527            USBD_SET_DATA1(EP0);
000052  480b              LDR      r0,|L8.128|
000054  6880              LDR      r0,[r0,#8]
000056  2180              MOVS     r1,#0x80
000058  4308              ORRS     r0,r0,r1
00005a  4909              LDR      r1,|L8.128|
00005c  6088              STR      r0,[r1,#8]
;;;528            USBD_MemCopy((uint8_t *)USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0), pu8Buf, u32Size);
00005e  6809              LDR      r1,[r1,#0]
000060  4a08              LDR      r2,|L8.132|
000062  1888              ADDS     r0,r1,r2
000064  4622              MOV      r2,r4
000066  4629              MOV      r1,r5
000068  f7fffffe          BL       USBD_MemCopy
;;;529            USBD_SET_PAYLOAD_LEN(EP0, u32Size);
00006c  4804              LDR      r0,|L8.128|
00006e  6044              STR      r4,[r0,#4]
                  |L8.112|
;;;530        }
;;;531    }
000070  bd70              POP      {r4-r6,pc}
;;;532    
                          ENDP

000072  0000              DCW      0x0000
                  |L8.116|
                          DCD      g_usbd_CtrlMaxPktSize
                  |L8.120|
                          DCD      g_usbd_CtrlInPointer
                  |L8.124|
                          DCD      g_usbd_CtrlInSize
                  |L8.128|
                          DCD      0x40060500
                  |L8.132|
                          DCD      0x40060100

                          AREA ||i.USBD_PrepareCtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlOut PROC
;;;597      */
;;;598    void USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size)
000000  4a05              LDR      r2,|L9.24|
;;;599    {
;;;600        g_usbd_CtrlOutPointer = pu8Buf;
000002  6010              STR      r0,[r2,#0]  ; g_usbd_CtrlOutPointer
;;;601        g_usbd_CtrlOutSize = 0;
000004  2200              MOVS     r2,#0
000006  4b05              LDR      r3,|L9.28|
000008  601a              STR      r2,[r3,#0]  ; g_usbd_CtrlOutSize
;;;602        g_usbd_CtrlOutSizeLimit = u32Size;
00000a  4a05              LDR      r2,|L9.32|
00000c  6011              STR      r1,[r2,#0]  ; g_usbd_CtrlOutSizeLimit
;;;603        USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
00000e  4a05              LDR      r2,|L9.36|
000010  6812              LDR      r2,[r2,#0]  ; g_usbd_CtrlMaxPktSize
000012  4b05              LDR      r3,|L9.40|
000014  615a              STR      r2,[r3,#0x14]
;;;604    }
000016  4770              BX       lr
;;;605    
                          ENDP

                  |L9.24|
                          DCD      g_usbd_CtrlOutPointer
                  |L9.28|
                          DCD      g_usbd_CtrlOutSize
                  |L9.32|
                          DCD      g_usbd_CtrlOutSizeLimit
                  |L9.36|
                          DCD      g_usbd_CtrlMaxPktSize
                  |L9.40|
                          DCD      0x40060500

                          AREA ||i.USBD_ProcessSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_ProcessSetupPacket PROC
;;;141      */
;;;142    void USBD_ProcessSetupPacket(void)
000000  b510              PUSH     {r4,lr}
;;;143    {
;;;144        /* Get SETUP packet from USB buffer */
;;;145        USBD_MemCopy(g_usbd_SetupPacket, (uint8_t *)USBD_BUF_BASE + USBD->STBUFSEG, 8);
000002  481a              LDR      r0,|L10.108|
000004  6980              LDR      r0,[r0,#0x18]
000006  4a1a              LDR      r2,|L10.112|
000008  1881              ADDS     r1,r0,r2
00000a  2208              MOVS     r2,#8
00000c  4819              LDR      r0,|L10.116|
00000e  f7fffffe          BL       USBD_MemCopy
;;;146    
;;;147        /* Check the request type */
;;;148        switch (g_usbd_SetupPacket[0] & 0x60) {
000012  4818              LDR      r0,|L10.116|
000014  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
000016  2160              MOVS     r1,#0x60
000018  4008              ANDS     r0,r0,r1
00001a  2800              CMP      r0,#0
00001c  d004              BEQ      |L10.40|
00001e  2820              CMP      r0,#0x20
000020  d005              BEQ      |L10.46|
000022  2840              CMP      r0,#0x40
000024  d113              BNE      |L10.78|
000026  e00a              B        |L10.62|
                  |L10.40|
;;;149        case REQ_STANDARD: { // Standard
;;;150            USBD_StandardRequest();
000028  f7fffffe          BL       USBD_StandardRequest
;;;151            break;
00002c  e01c              B        |L10.104|
                  |L10.46|
;;;152        }
;;;153    
;;;154        case REQ_CLASS: { // Class
;;;155            if (g_usbd_pfnClassRequest != NULL) {
00002e  4812              LDR      r0,|L10.120|
000030  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnClassRequest
000032  2800              CMP      r0,#0
000034  d002              BEQ      |L10.60|
;;;156                g_usbd_pfnClassRequest();
000036  4810              LDR      r0,|L10.120|
000038  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnClassRequest
00003a  4780              BLX      r0
                  |L10.60|
;;;157            }
;;;158    
;;;159            break;
00003c  e014              B        |L10.104|
                  |L10.62|
;;;160        }
;;;161    
;;;162        case REQ_VENDOR: { // Vendor
;;;163            if (g_usbd_pfnVendorRequest != NULL) {
00003e  480f              LDR      r0,|L10.124|
000040  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnVendorRequest
000042  2800              CMP      r0,#0
000044  d002              BEQ      |L10.76|
;;;164                g_usbd_pfnVendorRequest();
000046  480d              LDR      r0,|L10.124|
000048  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnVendorRequest
00004a  4780              BLX      r0
                  |L10.76|
;;;165            }
;;;166    
;;;167            break;
00004c  e00c              B        |L10.104|
                  |L10.78|
;;;168        }
;;;169    
;;;170        default: { // reserved
;;;171            /* Setup error, stall the device */
;;;172            USBD_SET_EP_STALL(EP0);
00004e  480c              LDR      r0,|L10.128|
000050  68c0              LDR      r0,[r0,#0xc]
000052  2102              MOVS     r1,#2
000054  4308              ORRS     r0,r0,r1
000056  490a              LDR      r1,|L10.128|
000058  60c8              STR      r0,[r1,#0xc]
;;;173            USBD_SET_EP_STALL(EP1);
00005a  4608              MOV      r0,r1
00005c  69c0              LDR      r0,[r0,#0x1c]
00005e  2102              MOVS     r1,#2
000060  4308              ORRS     r0,r0,r1
000062  4907              LDR      r1,|L10.128|
000064  61c8              STR      r0,[r1,#0x1c]
;;;174            break;
000066  bf00              NOP      
                  |L10.104|
000068  bf00              NOP                            ;151
;;;175        }
;;;176        }
;;;177    }
00006a  bd10              POP      {r4,pc}
;;;178    
                          ENDP

                  |L10.108|
                          DCD      0x40060000
                  |L10.112|
                          DCD      0x40060100
                  |L10.116|
                          DCD      g_usbd_SetupPacket
                  |L10.120|
                          DCD      g_usbd_pfnClassRequest
                  |L10.124|
                          DCD      g_usbd_pfnVendorRequest
                  |L10.128|
                          DCD      0x40060500

                          AREA ||i.USBD_SetConfigCallback||, CODE, READONLY, ALIGN=2

                  USBD_SetConfigCallback PROC
;;;687     */
;;;688    void USBD_SetConfigCallback(SET_CONFIG_CB pfnSetConfigCallback)
000000  4901              LDR      r1,|L11.8|
;;;689    {
;;;690        g_usbd_pfnSetConfigCallback = pfnSetConfigCallback;
000002  6008              STR      r0,[r1,#0]  ; g_usbd_pfnSetConfigCallback
;;;691    }
000004  4770              BX       lr
;;;692    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      g_usbd_pfnSetConfigCallback

                          AREA ||i.USBD_SetVendorRequest||, CODE, READONLY, ALIGN=2

                  USBD_SetVendorRequest PROC
;;;673     */
;;;674    void USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq)
000000  4901              LDR      r1,|L12.8|
;;;675    {
;;;676        g_usbd_pfnVendorRequest = pfnVendorReq;
000002  6008              STR      r0,[r1,#0]  ; g_usbd_pfnVendorRequest
;;;677    }
000004  4770              BX       lr
;;;678    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      g_usbd_pfnVendorRequest

                          AREA ||i.USBD_StandardRequest||, CODE, READONLY, ALIGN=2

                  USBD_StandardRequest PROC
;;;308      */
;;;309    void USBD_StandardRequest(void)
000000  b570              PUSH     {r4-r6,lr}
;;;310    {
;;;311    
;;;312        /* clear global variables for new request */
;;;313        g_usbd_CtrlInPointer = 0;
000002  2000              MOVS     r0,#0
000004  49c0              LDR      r1,|L13.776|
000006  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlInPointer
;;;314        g_usbd_CtrlInSize = 0;
000008  49c0              LDR      r1,|L13.780|
00000a  6008              STR      r0,[r1,#0]  ; g_usbd_CtrlInSize
;;;315    
;;;316        if (g_usbd_SetupPacket[0] & 0x80) { /* request data transfer direction */
00000c  48c0              LDR      r0,|L13.784|
00000e  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
000010  2180              MOVS     r1,#0x80
000012  4008              ANDS     r0,r0,r1
000014  2800              CMP      r0,#0
000016  d072              BEQ      |L13.254|
;;;317            // Device to host
;;;318            switch (g_usbd_SetupPacket[1]) {
000018  48bd              LDR      r0,|L13.784|
00001a  7840              LDRB     r0,[r0,#1]  ; g_usbd_SetupPacket
00001c  2800              CMP      r0,#0
00001e  d036              BEQ      |L13.142|
000020  2806              CMP      r0,#6
000022  d019              BEQ      |L13.88|
000024  2808              CMP      r0,#8
000026  d002              BEQ      |L13.46|
000028  280a              CMP      r0,#0xa
00002a  d169              BNE      |L13.256|
00002c  e01b              B        |L13.102|
                  |L13.46|
;;;319            case GET_CONFIGURATION: {
;;;320                // Return current configuration setting
;;;321                /* Data stage */
;;;322                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = g_usbd_UsbConfig;
00002e  48b9              LDR      r0,|L13.788|
000030  6800              LDR      r0,[r0,#0]  ; g_usbd_UsbConfig
000032  b2c1              UXTB     r1,r0
000034  48b8              LDR      r0,|L13.792|
000036  6800              LDR      r0,[r0,#0]
000038  4ab8              LDR      r2,|L13.796|
00003a  1880              ADDS     r0,r0,r2
00003c  7001              STRB     r1,[r0,#0]
;;;323                USBD_SET_DATA1(EP0);
00003e  48b6              LDR      r0,|L13.792|
000040  6880              LDR      r0,[r0,#8]
000042  2180              MOVS     r1,#0x80
000044  4308              ORRS     r0,r0,r1
000046  49b4              LDR      r1,|L13.792|
000048  6088              STR      r0,[r1,#8]
;;;324                USBD_SET_PAYLOAD_LEN(EP0, 1);
00004a  2001              MOVS     r0,#1
00004c  6048              STR      r0,[r1,#4]
;;;325                /* Status stage */
;;;326                USBD_PrepareCtrlOut(0, 0);
00004e  2100              MOVS     r1,#0
000050  4608              MOV      r0,r1
000052  f7fffffe          BL       USBD_PrepareCtrlOut
;;;327    
;;;328                DBG_PRINTF("Get configuration\n");
;;;329    
;;;330                break;
000056  e093              B        |L13.384|
                  |L13.88|
;;;331            }
;;;332    
;;;333            case GET_DESCRIPTOR: {
;;;334                USBD_GetDescriptor();
000058  f7fffffe          BL       USBD_GetDescriptor
;;;335                USBD_PrepareCtrlOut(0, 0); /* For status stage */
00005c  2100              MOVS     r1,#0
00005e  4608              MOV      r0,r1
000060  f7fffffe          BL       USBD_PrepareCtrlOut
;;;336                break;
000064  e08c              B        |L13.384|
                  |L13.102|
;;;337            }
;;;338    
;;;339            case GET_INTERFACE: {
;;;340                // Return current interface setting
;;;341                /* Data stage */
;;;342                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = g_usbd_UsbAltInterface;
000066  48ae              LDR      r0,|L13.800|
000068  6800              LDR      r0,[r0,#0]  ; g_usbd_UsbAltInterface
00006a  49ab              LDR      r1,|L13.792|
00006c  6809              LDR      r1,[r1,#0]
00006e  4aab              LDR      r2,|L13.796|
000070  1889              ADDS     r1,r1,r2
000072  7008              STRB     r0,[r1,#0]
;;;343                USBD_SET_DATA1(EP0);
000074  48a8              LDR      r0,|L13.792|
000076  6880              LDR      r0,[r0,#8]
000078  2180              MOVS     r1,#0x80
00007a  4308              ORRS     r0,r0,r1
00007c  49a6              LDR      r1,|L13.792|
00007e  6088              STR      r0,[r1,#8]
;;;344                USBD_SET_PAYLOAD_LEN(EP0, 1);
000080  2001              MOVS     r0,#1
000082  6048              STR      r0,[r1,#4]
;;;345                /* Status stage */
;;;346                USBD_PrepareCtrlOut(0, 0);
000084  2100              MOVS     r1,#0
000086  4608              MOV      r0,r1
000088  f7fffffe          BL       USBD_PrepareCtrlOut
;;;347    
;;;348                DBG_PRINTF("Get interface\n");
;;;349    
;;;350                break;
00008c  e078              B        |L13.384|
                  |L13.142|
;;;351            }
;;;352    
;;;353            case GET_STATUS: {
;;;354                // Device
;;;355                if (g_usbd_SetupPacket[0] == 0x80) {
00008e  48a0              LDR      r0,|L13.784|
000090  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
000092  2880              CMP      r0,#0x80
000094  d11d              BNE      |L13.210|
;;;356                    uint8_t u8Tmp;
;;;357    
;;;358                    u8Tmp = 0;
000096  2000              MOVS     r0,#0
;;;359    
;;;360                    if (g_usbd_sInfo->gu8ConfigDesc[7] & 0x40) u8Tmp |= 1; // Self-Powered/Bus-Powered.
000098  49a2              LDR      r1,|L13.804|
00009a  6809              LDR      r1,[r1,#0]  ; g_usbd_sInfo
00009c  6849              LDR      r1,[r1,#4]
00009e  79c9              LDRB     r1,[r1,#7]
0000a0  2240              MOVS     r2,#0x40
0000a2  4011              ANDS     r1,r1,r2
0000a4  2900              CMP      r1,#0
0000a6  d001              BEQ      |L13.172|
0000a8  2101              MOVS     r1,#1
0000aa  4308              ORRS     r0,r0,r1
                  |L13.172|
;;;361    
;;;362                    if (g_usbd_sInfo->gu8ConfigDesc[7] & 0x20) u8Tmp |= (g_usbd_RemoteWakeupEn << 1); // Remote wake up
0000ac  499d              LDR      r1,|L13.804|
0000ae  6809              LDR      r1,[r1,#0]  ; g_usbd_sInfo
0000b0  6849              LDR      r1,[r1,#4]
0000b2  79c9              LDRB     r1,[r1,#7]
0000b4  2220              MOVS     r2,#0x20
0000b6  4011              ANDS     r1,r1,r2
0000b8  2900              CMP      r1,#0
0000ba  d004              BEQ      |L13.198|
0000bc  499a              LDR      r1,|L13.808|
0000be  7809              LDRB     r1,[r1,#0]  ; g_usbd_RemoteWakeupEn
0000c0  0049              LSLS     r1,r1,#1
0000c2  4301              ORRS     r1,r1,r0
0000c4  b2c8              UXTB     r0,r1
                  |L13.198|
;;;363    
;;;364                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = u8Tmp;
0000c6  4994              LDR      r1,|L13.792|
0000c8  6809              LDR      r1,[r1,#0]
0000ca  4a94              LDR      r2,|L13.796|
0000cc  1889              ADDS     r1,r1,r2
0000ce  7008              STRB     r0,[r1,#0]
;;;365    
;;;366                }
0000d0  e036              B        |L13.320|
                  |L13.210|
;;;367                // Interface
;;;368                else if (g_usbd_SetupPacket[0] == 0x81)
0000d2  488f              LDR      r0,|L13.784|
0000d4  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
0000d6  2881              CMP      r0,#0x81
0000d8  d106              BNE      |L13.232|
;;;369                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = 0;
0000da  2000              MOVS     r0,#0
0000dc  498e              LDR      r1,|L13.792|
0000de  6809              LDR      r1,[r1,#0]
0000e0  4a8e              LDR      r2,|L13.796|
0000e2  1889              ADDS     r1,r1,r2
0000e4  7008              STRB     r0,[r1,#0]
0000e6  e02b              B        |L13.320|
                  |L13.232|
;;;370                // Endpoint
;;;371                else if (g_usbd_SetupPacket[0] == 0x82) {
0000e8  4889              LDR      r0,|L13.784|
0000ea  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
0000ec  2882              CMP      r0,#0x82
0000ee  d127              BNE      |L13.320|
;;;372                    uint8_t ep = g_usbd_SetupPacket[4] & 0xF;
0000f0  4887              LDR      r0,|L13.784|
0000f2  7900              LDRB     r0,[r0,#4]  ; g_usbd_SetupPacket
0000f4  0704              LSLS     r4,r0,#28
0000f6  0f24              LSRS     r4,r4,#28
;;;373                    M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0)) = USBD_GetStall(ep) ? 1 : 0;
0000f8  4622              MOV      r2,r4
0000fa  2000              MOVS     r0,#0
0000fc  e00f              B        |L13.286|
                  |L13.254|
0000fe  e040              B        |L13.386|
                  |L13.256|
000100  e031              B        |L13.358|
                  |L13.258|
000102  0105              LSLS     r5,r0,#4
000104  4e84              LDR      r6,|L13.792|
000106  3608              ADDS     r6,r6,#8
000108  19a9              ADDS     r1,r5,r6
00010a  680b              LDR      r3,[r1,#0]
00010c  071d              LSLS     r5,r3,#28
00010e  0f2d              LSRS     r5,r5,#28
000110  4295              CMP      r5,r2
000112  d103              BNE      |L13.284|
000114  0105              LSLS     r5,r0,#4
000116  1d36              ADDS     r6,r6,#4
000118  19a9              ADDS     r1,r5,r6
00011a  e002              B        |L13.290|
                  |L13.284|
00011c  1c40              ADDS     r0,r0,#1
                  |L13.286|
00011e  2808              CMP      r0,#8
000120  dbef              BLT      |L13.258|
                  |L13.290|
000122  bf00              NOP      
000124  680d              LDR      r5,[r1,#0]
000126  2602              MOVS     r6,#2
000128  4035              ANDS     r5,r5,r6
00012a  2d00              CMP      r5,#0
00012c  d001              BEQ      |L13.306|
00012e  2001              MOVS     r0,#1
000130  e000              B        |L13.308|
                  |L13.306|
000132  2000              MOVS     r0,#0
                  |L13.308|
000134  4978              LDR      r1,|L13.792|
000136  6809              LDR      r1,[r1,#0]
000138  4a78              LDR      r2,|L13.796|
00013a  1889              ADDS     r1,r1,r2
00013c  7008              STRB     r0,[r1,#0]
;;;374                }
00013e  bf00              NOP      
                  |L13.320|
;;;375    
;;;376                M8(USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0) + 1) = 0;
000140  2100              MOVS     r1,#0
000142  4875              LDR      r0,|L13.792|
000144  6800              LDR      r0,[r0,#0]
000146  4a75              LDR      r2,|L13.796|
000148  1880              ADDS     r0,r0,r2
00014a  7041              STRB     r1,[r0,#1]
;;;377                /* Data stage */
;;;378                USBD_SET_DATA1(EP0);
00014c  4872              LDR      r0,|L13.792|
00014e  6880              LDR      r0,[r0,#8]
000150  2180              MOVS     r1,#0x80
000152  4308              ORRS     r0,r0,r1
000154  4970              LDR      r1,|L13.792|
000156  6088              STR      r0,[r1,#8]
;;;379                USBD_SET_PAYLOAD_LEN(EP0, 2);
000158  2002              MOVS     r0,#2
00015a  6048              STR      r0,[r1,#4]
;;;380                /* Status stage */
;;;381                USBD_PrepareCtrlOut(0, 0);
00015c  2100              MOVS     r1,#0
00015e  4608              MOV      r0,r1
000160  f7fffffe          BL       USBD_PrepareCtrlOut
;;;382    
;;;383                DBG_PRINTF("Get status\n");
;;;384    
;;;385                break;
000164  e00c              B        |L13.384|
                  |L13.358|
;;;386            }
;;;387    
;;;388            default: {
;;;389                /* Setup error, stall the device */
;;;390                USBD_SET_EP_STALL(EP0);
000166  486c              LDR      r0,|L13.792|
000168  68c0              LDR      r0,[r0,#0xc]
00016a  2102              MOVS     r1,#2
00016c  4308              ORRS     r0,r0,r1
00016e  496a              LDR      r1,|L13.792|
000170  60c8              STR      r0,[r1,#0xc]
;;;391                USBD_SET_EP_STALL(EP1);
000172  4608              MOV      r0,r1
000174  69c0              LDR      r0,[r0,#0x1c]
000176  2102              MOVS     r1,#2
000178  4308              ORRS     r0,r0,r1
00017a  4967              LDR      r1,|L13.792|
00017c  61c8              STR      r0,[r1,#0x1c]
;;;392    
;;;393                DBG_PRINTF("Unknown request. stall ctrl pipe.\n");
;;;394    
;;;395                break;
00017e  bf00              NOP      
                  |L13.384|
000180  e0c1              B        |L13.774|
                  |L13.386|
;;;396            }
;;;397            }
;;;398        } else {
;;;399            // Host to device
;;;400            switch (g_usbd_SetupPacket[1]) {
000182  4863              LDR      r0,|L13.784|
000184  7840              LDRB     r0,[r0,#1]  ; g_usbd_SetupPacket
000186  2805              CMP      r0,#5
000188  d04a              BEQ      |L13.544|
00018a  dc04              BGT      |L13.406|
00018c  2801              CMP      r0,#1
00018e  d007              BEQ      |L13.416|
000190  2803              CMP      r0,#3
                  |L13.402|
000192  d170              BNE      |L13.630|
000194  e065              B        |L13.610|
                  |L13.406|
000196  2809              CMP      r0,#9
000198  d04f              BEQ      |L13.570|
00019a  280b              CMP      r0,#0xb
00019c  d1f9              BNE      |L13.402|
00019e  e090              B        |L13.706|
                  |L13.416|
;;;401            case CLEAR_FEATURE: {
;;;402                if (g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT) {
0001a0  485b              LDR      r0,|L13.784|
0001a2  7880              LDRB     r0,[r0,#2]  ; g_usbd_SetupPacket
0001a4  2800              CMP      r0,#0
0001a6  d12b              BNE      |L13.512|
;;;403                    int32_t epNum, i;
;;;404    
;;;405                    /* EP number stall is not allow to be clear in MSC class "Error Recovery Test".
;;;406                       a flag: g_u32EpStallLock is added to support it */
;;;407                    epNum = g_usbd_SetupPacket[4] & 0xF;
0001a8  4a59              LDR      r2,|L13.784|
0001aa  7912              LDRB     r2,[r2,#4]  ; g_usbd_SetupPacket
0001ac  0711              LSLS     r1,r2,#28
0001ae  0f09              LSRS     r1,r1,#28
;;;408    
;;;409                    for (i = 0; i < USBD_MAX_EP; i++) {
0001b0  bf00              NOP      
0001b2  e022              B        |L13.506|
                  |L13.436|
;;;410                        if (((USBD->EP[i].CFG & 0xF) == epNum) && ((g_u32EpStallLock & (1 << i)) == 0)) {
0001b4  4a5d              LDR      r2,|L13.812|
0001b6  2305              MOVS     r3,#5
0001b8  021b              LSLS     r3,r3,#8
0001ba  18d2              ADDS     r2,r2,r3
0001bc  0103              LSLS     r3,r0,#4
0001be  18d2              ADDS     r2,r2,r3
0001c0  6892              LDR      r2,[r2,#8]
0001c2  0712              LSLS     r2,r2,#28
0001c4  0f12              LSRS     r2,r2,#28
0001c6  428a              CMP      r2,r1
0001c8  d116              BNE      |L13.504|
0001ca  2201              MOVS     r2,#1
0001cc  4082              LSLS     r2,r2,r0
0001ce  4b58              LDR      r3,|L13.816|
0001d0  681b              LDR      r3,[r3,#0]  ; g_u32EpStallLock
0001d2  401a              ANDS     r2,r2,r3
0001d4  2a00              CMP      r2,#0
0001d6  d10f              BNE      |L13.504|
;;;411                            USBD->EP[i].CFGP &= ~USBD_CFGP_SSTALL_Msk;
0001d8  4a54              LDR      r2,|L13.812|
0001da  2305              MOVS     r3,#5
0001dc  021b              LSLS     r3,r3,#8
0001de  18d2              ADDS     r2,r2,r3
0001e0  0103              LSLS     r3,r0,#4
0001e2  18d2              ADDS     r2,r2,r3
0001e4  68d2              LDR      r2,[r2,#0xc]
0001e6  2302              MOVS     r3,#2
0001e8  439a              BICS     r2,r2,r3
0001ea  4b50              LDR      r3,|L13.812|
0001ec  2405              MOVS     r4,#5
0001ee  0224              LSLS     r4,r4,#8
0001f0  191b              ADDS     r3,r3,r4
0001f2  0104              LSLS     r4,r0,#4
0001f4  191b              ADDS     r3,r3,r4
0001f6  60da              STR      r2,[r3,#0xc]
                  |L13.504|
0001f8  1c40              ADDS     r0,r0,#1              ;409
                  |L13.506|
0001fa  2808              CMP      r0,#8                 ;409
0001fc  dbda              BLT      |L13.436|
;;;412                            DBG_PRINTF("Clr stall ep%d %x\n", i, USBD->EP[i].CFGP);
;;;413                        }
;;;414                    }
;;;415                } else if (g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
0001fe  e006              B        |L13.526|
                  |L13.512|
000200  4843              LDR      r0,|L13.784|
000202  7880              LDRB     r0,[r0,#2]  ; g_usbd_SetupPacket
000204  2801              CMP      r0,#1
000206  d102              BNE      |L13.526|
;;;416                    g_usbd_RemoteWakeupEn = 0;
000208  2000              MOVS     r0,#0
00020a  4947              LDR      r1,|L13.808|
00020c  7008              STRB     r0,[r1,#0]
                  |L13.526|
;;;417    
;;;418                /* Status stage */
;;;419                USBD_SET_DATA1(EP0);
00020e  4842              LDR      r0,|L13.792|
000210  6880              LDR      r0,[r0,#8]
000212  2180              MOVS     r1,#0x80
000214  4308              ORRS     r0,r0,r1
000216  4940              LDR      r1,|L13.792|
000218  6088              STR      r0,[r1,#8]
;;;420                USBD_SET_PAYLOAD_LEN(EP0, 0);
00021a  2000              MOVS     r0,#0
00021c  6048              STR      r0,[r1,#4]
;;;421    
;;;422                DBG_PRINTF("Clear feature op %d\n", g_usbd_SetupPacket[2]);
;;;423    
;;;424                break;
00021e  e071              B        |L13.772|
                  |L13.544|
;;;425            }
;;;426    
;;;427            case SET_ADDRESS: {
;;;428                g_usbd_UsbAddr = g_usbd_SetupPacket[2];
000220  483b              LDR      r0,|L13.784|
000222  7880              LDRB     r0,[r0,#2]  ; g_usbd_SetupPacket
000224  4943              LDR      r1,|L13.820|
000226  6008              STR      r0,[r1,#0]  ; g_usbd_UsbAddr
;;;429                DBG_PRINTF("Set addr to %d\n", g_usbd_UsbAddr);
;;;430    
;;;431                // DATA IN for end of setup
;;;432                /* Status Stage */
;;;433                USBD_SET_DATA1(EP0);
000228  483b              LDR      r0,|L13.792|
00022a  6880              LDR      r0,[r0,#8]
00022c  2180              MOVS     r1,#0x80
00022e  4308              ORRS     r0,r0,r1
000230  4939              LDR      r1,|L13.792|
000232  6088              STR      r0,[r1,#8]
;;;434                USBD_SET_PAYLOAD_LEN(EP0, 0);
000234  2000              MOVS     r0,#0
000236  6048              STR      r0,[r1,#4]
;;;435    
;;;436                break;
000238  e064              B        |L13.772|
                  |L13.570|
;;;437            }
;;;438    
;;;439            case SET_CONFIGURATION: {
;;;440                g_usbd_UsbConfig = g_usbd_SetupPacket[2];
00023a  4835              LDR      r0,|L13.784|
00023c  7880              LDRB     r0,[r0,#2]  ; g_usbd_SetupPacket
00023e  4935              LDR      r1,|L13.788|
000240  6008              STR      r0,[r1,#0]  ; g_usbd_UsbConfig
;;;441    
;;;442                if (g_usbd_pfnSetConfigCallback)
000242  483d              LDR      r0,|L13.824|
000244  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnSetConfigCallback
000246  2800              CMP      r0,#0
000248  d002              BEQ      |L13.592|
;;;443                    g_usbd_pfnSetConfigCallback();
00024a  483b              LDR      r0,|L13.824|
00024c  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnSetConfigCallback
00024e  4780              BLX      r0
                  |L13.592|
;;;444    
;;;445                // DATA IN for end of setup
;;;446                /* Status stage */
;;;447                USBD_SET_DATA1(EP0);
000250  4831              LDR      r0,|L13.792|
000252  6880              LDR      r0,[r0,#8]
000254  2180              MOVS     r1,#0x80
000256  4308              ORRS     r0,r0,r1
000258  492f              LDR      r1,|L13.792|
00025a  6088              STR      r0,[r1,#8]
;;;448                USBD_SET_PAYLOAD_LEN(EP0, 0);
00025c  2000              MOVS     r0,#0
00025e  6048              STR      r0,[r1,#4]
;;;449    
;;;450                DBG_PRINTF("Set config to %d\n", g_usbd_UsbConfig);
;;;451    
;;;452                break;
000260  e050              B        |L13.772|
                  |L13.610|
;;;453            }
;;;454    
;;;455            case SET_FEATURE: {
;;;456                if (g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT) {
000262  482b              LDR      r0,|L13.784|
000264  7880              LDRB     r0,[r0,#2]  ; g_usbd_SetupPacket
000266  2800              CMP      r0,#0
000268  d11c              BNE      |L13.676|
;;;457                    USBD_SetStall(g_usbd_SetupPacket[4] & 0xF);
00026a  4829              LDR      r0,|L13.784|
00026c  7900              LDRB     r0,[r0,#4]  ; g_usbd_SetupPacket
00026e  0703              LSLS     r3,r0,#28
000270  0f1b              LSRS     r3,r3,#28
000272  2100              MOVS     r1,#0
000274  e012              B        |L13.668|
                  |L13.630|
000276  e038              B        |L13.746|
                  |L13.632|
000278  010c              LSLS     r4,r1,#4
00027a  4d27              LDR      r5,|L13.792|
00027c  3508              ADDS     r5,r5,#8
00027e  1960              ADDS     r0,r4,r5
000280  6802              LDR      r2,[r0,#0]
000282  0714              LSLS     r4,r2,#28
000284  0f24              LSRS     r4,r4,#28
000286  429c              CMP      r4,r3
000288  d107              BNE      |L13.666|
00028a  010c              LSLS     r4,r1,#4
00028c  1d2d              ADDS     r5,r5,#4
00028e  1960              ADDS     r0,r4,r5
000290  6802              LDR      r2,[r0,#0]
000292  2402              MOVS     r4,#2
000294  4314              ORRS     r4,r4,r2
000296  6004              STR      r4,[r0,#0]
000298  e002              B        |L13.672|
                  |L13.666|
00029a  1c49              ADDS     r1,r1,#1
                  |L13.668|
00029c  2908              CMP      r1,#8
00029e  dbeb              BLT      |L13.632|
                  |L13.672|
0002a0  bf00              NOP      
0002a2  e005              B        |L13.688|
                  |L13.676|
;;;458                    DBG_PRINTF("Set feature. stall ep %d\n", g_usbd_SetupPacket[4] & 0xF);
;;;459                } else if (g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP) {
0002a4  481a              LDR      r0,|L13.784|
0002a6  7880              LDRB     r0,[r0,#2]  ; g_usbd_SetupPacket
0002a8  2801              CMP      r0,#1
0002aa  d101              BNE      |L13.688|
;;;460                    g_usbd_RemoteWakeupEn = 1;
0002ac  491e              LDR      r1,|L13.808|
0002ae  7008              STRB     r0,[r1,#0]
                  |L13.688|
;;;461                    DBG_PRINTF("Set feature. enable remote wakeup\n");
;;;462                }
;;;463    
;;;464                /* Status stage */
;;;465                USBD_SET_DATA1(EP0);
0002b0  4819              LDR      r0,|L13.792|
0002b2  6880              LDR      r0,[r0,#8]
0002b4  2180              MOVS     r1,#0x80
0002b6  4308              ORRS     r0,r0,r1
0002b8  4917              LDR      r1,|L13.792|
0002ba  6088              STR      r0,[r1,#8]
;;;466                USBD_SET_PAYLOAD_LEN(EP0, 0);
0002bc  2000              MOVS     r0,#0
0002be  6048              STR      r0,[r1,#4]
;;;467    
;;;468    
;;;469    
;;;470                break;
0002c0  e020              B        |L13.772|
                  |L13.706|
;;;471            }
;;;472    
;;;473            case SET_INTERFACE: {
;;;474                g_usbd_UsbAltInterface = g_usbd_SetupPacket[2];
0002c2  4813              LDR      r0,|L13.784|
0002c4  7880              LDRB     r0,[r0,#2]  ; g_usbd_SetupPacket
0002c6  4916              LDR      r1,|L13.800|
0002c8  6008              STR      r0,[r1,#0]  ; g_usbd_UsbAltInterface
;;;475    
;;;476                if (g_usbd_pfnSetInterface != NULL)
0002ca  481c              LDR      r0,|L13.828|
0002cc  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnSetInterface
0002ce  2800              CMP      r0,#0
0002d0  d002              BEQ      |L13.728|
;;;477                    g_usbd_pfnSetInterface();
0002d2  481a              LDR      r0,|L13.828|
0002d4  6800              LDR      r0,[r0,#0]  ; g_usbd_pfnSetInterface
0002d6  4780              BLX      r0
                  |L13.728|
;;;478    
;;;479                /* Status stage */
;;;480                USBD_SET_DATA1(EP0);
0002d8  480f              LDR      r0,|L13.792|
0002da  6880              LDR      r0,[r0,#8]
0002dc  2180              MOVS     r1,#0x80
0002de  4308              ORRS     r0,r0,r1
0002e0  490d              LDR      r1,|L13.792|
0002e2  6088              STR      r0,[r1,#8]
;;;481                USBD_SET_PAYLOAD_LEN(EP0, 0);
0002e4  2000              MOVS     r0,#0
0002e6  6048              STR      r0,[r1,#4]
;;;482    
;;;483                DBG_PRINTF("Set interface to %d\n", g_usbd_UsbAltInterface);
;;;484    
;;;485                break;
0002e8  e00c              B        |L13.772|
                  |L13.746|
;;;486            }
;;;487    
;;;488            default: {
;;;489                /* Setup error, stall the device */
;;;490                USBD_SET_EP_STALL(EP0);
0002ea  480b              LDR      r0,|L13.792|
0002ec  68c0              LDR      r0,[r0,#0xc]
0002ee  2102              MOVS     r1,#2
0002f0  4308              ORRS     r0,r0,r1
0002f2  4909              LDR      r1,|L13.792|
0002f4  60c8              STR      r0,[r1,#0xc]
;;;491                USBD_SET_EP_STALL(EP1);
0002f6  4608              MOV      r0,r1
0002f8  69c0              LDR      r0,[r0,#0x1c]
0002fa  2102              MOVS     r1,#2
0002fc  4308              ORRS     r0,r0,r1
0002fe  4906              LDR      r1,|L13.792|
000300  61c8              STR      r0,[r1,#0x1c]
;;;492    
;;;493                DBG_PRINTF("Unsupported request. stall ctrl pipe.\n");
;;;494    
;;;495                break;
000302  bf00              NOP      
                  |L13.772|
000304  bf00              NOP                            ;424
                  |L13.774|
;;;496            }
;;;497            }
;;;498        }
;;;499    }
000306  bd70              POP      {r4-r6,pc}
;;;500    
                          ENDP

                  |L13.776|
                          DCD      g_usbd_CtrlInPointer
                  |L13.780|
                          DCD      g_usbd_CtrlInSize
                  |L13.784|
                          DCD      g_usbd_SetupPacket
                  |L13.788|
                          DCD      g_usbd_UsbConfig
                  |L13.792|
                          DCD      0x40060500
                  |L13.796|
                          DCD      0x40060100
                  |L13.800|
                          DCD      g_usbd_UsbAltInterface
                  |L13.804|
                          DCD      g_usbd_sInfo
                  |L13.808|
                          DCD      g_usbd_RemoteWakeupEn
                  |L13.812|
                          DCD      0x40060000
                  |L13.816|
                          DCD      g_u32EpStallLock
                  |L13.820|
                          DCD      g_usbd_UsbAddr
                  |L13.824|
                          DCD      g_usbd_pfnSetConfigCallback
                  |L13.828|
                          DCD      g_usbd_pfnSetInterface

                          AREA ||i.USBD_Start||, CODE, READONLY, ALIGN=2

                  USBD_Start PROC
;;;103      */
;;;104    void USBD_Start(void)
000000  4814              LDR      r0,|L14.84|
000002  4915              LDR      r1,|L14.88|
000004  6809              LDR      r1,[r1,#0]  ; CyclesPerUs
000006  4341              MULS     r1,r0,r1
000008  4a14              LDR      r2,|L14.92|
00000a  6151              STR      r1,[r2,#0x14]
00000c  2100              MOVS     r1,#0
00000e  6191              STR      r1,[r2,#0x18]
000010  2105              MOVS     r1,#5
000012  6111              STR      r1,[r2,#0x10]
000014  bf00              NOP      
000016  bf00              NOP      
                  |L14.24|
000018  4910              LDR      r1,|L14.92|
00001a  6909              LDR      r1,[r1,#0x10]
00001c  2201              MOVS     r2,#1
00001e  0412              LSLS     r2,r2,#16
000020  4011              ANDS     r1,r1,r2
000022  2900              CMP      r1,#0
000024  d0f8              BEQ      |L14.24|
000026  2100              MOVS     r1,#0
000028  4a0c              LDR      r2,|L14.92|
00002a  6111              STR      r1,[r2,#0x10]
00002c  bf00              NOP      
;;;105    {
;;;106        CLK_SysTickDelay(100000);
;;;107        /* Disable software-disconnect function */
;;;108        USBD_CLR_SE0();
00002e  480c              LDR      r0,|L14.96|
000030  6900              LDR      r0,[r0,#0x10]
000032  0840              LSRS     r0,r0,#1
000034  0040              LSLS     r0,r0,#1
000036  490a              LDR      r1,|L14.96|
000038  6108              STR      r0,[r1,#0x10]
;;;109    
;;;110        /* Clear USB-related interrupts before enable interrupt */
;;;111        USBD_CLR_INT_FLAG(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INTSTS_WAKEUP);
00003a  200f              MOVS     r0,#0xf
00003c  4908              LDR      r1,|L14.96|
00003e  3980              SUBS     r1,r1,#0x80
000040  6048              STR      r0,[r1,#4]
;;;112    
;;;113        /* Enable USB-related interrupts. */
;;;114        USBD_ENABLE_INT(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INT_WAKEUP_IDLE);
000042  4608              MOV      r0,r1
000044  6800              LDR      r0,[r0,#0]
000046  210f              MOVS     r1,#0xf
000048  4308              ORRS     r0,r0,r1
00004a  4905              LDR      r1,|L14.96|
00004c  3980              SUBS     r1,r1,#0x80
00004e  6008              STR      r0,[r1,#0]
;;;115    }
000050  4770              BX       lr
;;;116    
                          ENDP

000052  0000              DCW      0x0000
                  |L14.84|
                          DCD      0x000186a0
                  |L14.88|
                          DCD      CyclesPerUs
                  |L14.92|
                          DCD      0xe000e000
                  |L14.96|
                          DCD      0x40060080

                          AREA ||i.USBD_SwReset||, CODE, READONLY, ALIGN=2

                  USBD_SwReset PROC
;;;643      */
;;;644    void USBD_SwReset(void)
000000  2100              MOVS     r1,#0
;;;645    {
;;;646        int i;
;;;647    
;;;648        // Reset all variables for protocol
;;;649        g_usbd_CtrlInPointer = 0;
000002  4a14              LDR      r2,|L15.84|
000004  6011              STR      r1,[r2,#0]  ; g_usbd_CtrlInPointer
;;;650        g_usbd_CtrlInSize = 0;
000006  4a14              LDR      r2,|L15.88|
000008  6011              STR      r1,[r2,#0]  ; g_usbd_CtrlInSize
;;;651        g_usbd_CtrlOutPointer = 0;
00000a  4a14              LDR      r2,|L15.92|
00000c  6011              STR      r1,[r2,#0]  ; g_usbd_CtrlOutPointer
;;;652        g_usbd_CtrlOutSize = 0;
00000e  4a14              LDR      r2,|L15.96|
000010  6011              STR      r1,[r2,#0]  ; g_usbd_CtrlOutSize
;;;653        g_usbd_CtrlOutSizeLimit = 0;
000012  4a14              LDR      r2,|L15.100|
000014  6011              STR      r1,[r2,#0]  ; g_usbd_CtrlOutSizeLimit
;;;654        g_u32EpStallLock = 0;
000016  4a14              LDR      r2,|L15.104|
000018  6011              STR      r1,[r2,#0]  ; g_u32EpStallLock
;;;655        memset(g_usbd_SetupPacket, 0, 8);
00001a  4914              LDR      r1,|L15.108|
00001c  2200              MOVS     r2,#0
00001e  600a              STR      r2,[r1,#0]  ; g_usbd_SetupPacket
000020  604a              STR      r2,[r1,#4]  ; g_usbd_SetupPacket
;;;656    
;;;657        /* Reset PID DATA0 */
;;;658        for (i = 0; i < USBD_MAX_EP; i++)
000022  2000              MOVS     r0,#0
000024  e010              B        |L15.72|
                  |L15.38|
;;;659            USBD->EP[i].CFG &= ~USBD_CFG_DSQSYNC_Msk;
000026  4912              LDR      r1,|L15.112|
000028  2205              MOVS     r2,#5
00002a  0212              LSLS     r2,r2,#8
00002c  1889              ADDS     r1,r1,r2
00002e  0102              LSLS     r2,r0,#4
000030  1889              ADDS     r1,r1,r2
000032  6889              LDR      r1,[r1,#8]
000034  2280              MOVS     r2,#0x80
000036  4391              BICS     r1,r1,r2
000038  4a0d              LDR      r2,|L15.112|
00003a  2305              MOVS     r3,#5
00003c  021b              LSLS     r3,r3,#8
00003e  18d2              ADDS     r2,r2,r3
000040  0103              LSLS     r3,r0,#4
000042  18d2              ADDS     r2,r2,r3
000044  6091              STR      r1,[r2,#8]
000046  1c40              ADDS     r0,r0,#1              ;658
                  |L15.72|
000048  2808              CMP      r0,#8                 ;658
00004a  dbec              BLT      |L15.38|
;;;660    
;;;661        // Reset USB device address
;;;662        USBD_SET_ADDR(0);
00004c  2100              MOVS     r1,#0
00004e  4a08              LDR      r2,|L15.112|
000050  6091              STR      r1,[r2,#8]
;;;663    }
000052  4770              BX       lr
;;;664    
                          ENDP

                  |L15.84|
                          DCD      g_usbd_CtrlInPointer
                  |L15.88|
                          DCD      g_usbd_CtrlInSize
                  |L15.92|
                          DCD      g_usbd_CtrlOutPointer
                  |L15.96|
                          DCD      g_usbd_CtrlOutSize
                  |L15.100|
                          DCD      g_usbd_CtrlOutSizeLimit
                  |L15.104|
                          DCD      g_u32EpStallLock
                  |L15.108|
                          DCD      g_usbd_SetupPacket
                  |L15.112|
                          DCD      0x40060000

                          AREA ||.data||, DATA, ALIGN=2

                  g_usbd_SetupPacket
000000  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                  g_usbd_RemoteWakeupEn
000008  00000000          DCB      0x00,0x00,0x00,0x00
                  g_usbd_CtrlInPointer
                          DCD      0x00000000
                  g_usbd_CtrlInSize
                          DCD      0x00000000
                  g_usbd_CtrlOutPointer
                          DCD      0x00000000
                  g_usbd_CtrlOutSize
                          DCD      0x00000000
                  g_usbd_CtrlOutSizeLimit
                          DCD      0x00000000
                  g_usbd_UsbAddr
                          DCD      0x00000000
                  g_usbd_UsbConfig
                          DCD      0x00000000
                  g_usbd_CtrlMaxPktSize
                          DCD      0x00000008
                  g_usbd_UsbAltInterface
                          DCD      0x00000000
                  g_usbd_sInfo
                          DCD      0x00000000
                  g_usbd_pfnVendorRequest
                          DCD      0x00000000
                  g_usbd_pfnClassRequest
                          DCD      0x00000000
                  g_usbd_pfnSetInterface
                          DCD      0x00000000
                  g_usbd_pfnSetConfigCallback
                          DCD      0x00000000
                  g_u32EpStallLock
                          DCD      0x00000000
                  u8ZeroFlag
000048  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "StdDriver\\src\\usbd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REV16|
#line 388 ".\\CMSIS\\cmsis_armcc.h"
|__asm___6_usbd_c_4b498b38____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REVSH|
#line 402
|__asm___6_usbd_c_4b498b38____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
